[{"comment":"/**\r\n * Applets can be serialized but the following conventions MUST be followed:\r\n *\r\n * Before Serialization:\r\n * An applet must be in STOPPED state.\r\n *\r\n * After Deserialization:\r\n * The applet will be restored in STOPPED state (and most clients will\r\n * likely move it into RUNNING state).\r\n * The stub field will be restored by the reader.\r\n */\r\ntransient private AppletStub stub;","field_name":"stub","field_type":"java.applet.AppletStub","full_declaration":"transient private java.applet.AppletStub stub","id":1},{"comment":"/* version ID for serialized form. */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -5836846270535785031L","id":2},{"comment":"// \r\n// Accessibility support\r\n// \r\nAccessibleContext accessibleContext = null;","field_name":"accessibleContext","field_type":"javax.accessibility.AccessibleContext","full_declaration":"javax.accessibility.AccessibleContext accessibleContext = null","id":3},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 8127374778187708896L","id":4},{"comment":"/**\r\n * Indicates that the <code>Adjustable</code> has horizontal orientation.\r\n */\r\n@Native\r\n","field_name":"HORIZONTAL","field_type":"int","full_declaration":"public static final int HORIZONTAL = 0","id":5},{"comment":"/**\r\n * Indicates that the <code>Adjustable</code> has vertical orientation.\r\n */\r\n@Native\r\n","field_name":"VERTICAL","field_type":"int","full_declaration":"public static final int VERTICAL = 1","id":6},{"comment":"/**\r\n * Indicates that the <code>Adjustable</code> has no orientation.\r\n */\r\n@Native\r\n","field_name":"NO_ORIENTATION","field_type":"int","full_declaration":"public static final int NO_ORIENTATION = 2","id":7},{"comment":"/**\r\n *  Both the color and the alpha of the destination are cleared\r\n *  (Porter-Duff Clear rule).\r\n *  Neither the source nor the destination is used as input.\r\n * <p>\r\n *  <em>F<sub>s</sub></em> = 0 and <em>F<sub>d</sub></em> = 0, thus:\r\n * <pre>\r\n *   <em>A<sub>r</sub></em> = 0\r\n *   <em>C<sub>r</sub></em> = 0\r\n * </pre>\r\n */\r\n@Native\r\n","field_name":"CLEAR","field_type":"int","full_declaration":"public static final int CLEAR = 1","id":8},{"comment":"/**\r\n *  The source is copied to the destination\r\n *  (Porter-Duff Source rule).\r\n *  The destination is not used as input.\r\n * <p>\r\n *  <em>F<sub>s</sub></em> = 1 and <em>F<sub>d</sub></em> = 0, thus:\r\n * <pre>\r\n *   <em>A<sub>r</sub></em> = <em>A<sub>s</sub></em>\r\n *   <em>C<sub>r</sub></em> = <em>C<sub>s</sub></em>\r\n * </pre>\r\n */\r\n@Native\r\n","field_name":"SRC","field_type":"int","full_declaration":"public static final int SRC = 2","id":9},{"comment":"/**\r\n *  The destination is left untouched\r\n *  (Porter-Duff Destination rule).\r\n * <p>\r\n *  <em>F<sub>s</sub></em> = 0 and <em>F<sub>d</sub></em> = 1, thus:\r\n * <pre>\r\n *   <em>A<sub>r</sub></em> = <em>A<sub>d</sub></em>\r\n *   <em>C<sub>r</sub></em> = <em>C<sub>d</sub></em>\r\n * </pre>\r\n *  @since 1.4\r\n */\r\n@Native\r\n","field_name":"DST","field_type":"int","full_declaration":"public static final int DST = 9","id":10},{"comment":"// Note that DST was added in 1.4 so it is numbered out of order...\r\n/**\r\n *  The source is composited over the destination\r\n *  (Porter-Duff Source Over Destination rule).\r\n * <p>\r\n *  <em>F<sub>s</sub></em> = 1 and <em>F<sub>d</sub></em> = (1-<em>A<sub>s</sub></em>), thus:\r\n * <pre>\r\n *   <em>A<sub>r</sub></em> = <em>A<sub>s</sub></em> + <em>A<sub>d</sub></em>*(1-<em>A<sub>s</sub></em>)\r\n *   <em>C<sub>r</sub></em> = <em>C<sub>s</sub></em> + <em>C<sub>d</sub></em>*(1-<em>A<sub>s</sub></em>)\r\n * </pre>\r\n */\r\n@Native\r\n","field_name":"SRC_OVER","field_type":"int","full_declaration":"public static final int SRC_OVER = 3","id":11},{"comment":"/**\r\n *  The destination is composited over the source and\r\n *  the result replaces the destination\r\n *  (Porter-Duff Destination Over Source rule).\r\n * <p>\r\n *  <em>F<sub>s</sub></em> = (1-<em>A<sub>d</sub></em>) and <em>F<sub>d</sub></em> = 1, thus:\r\n * <pre>\r\n *   <em>A<sub>r</sub></em> = <em>A<sub>s</sub></em>*(1-<em>A<sub>d</sub></em>) + <em>A<sub>d</sub></em>\r\n *   <em>C<sub>r</sub></em> = <em>C<sub>s</sub></em>*(1-<em>A<sub>d</sub></em>) + <em>C<sub>d</sub></em>\r\n * </pre>\r\n */\r\n@Native\r\n","field_name":"DST_OVER","field_type":"int","full_declaration":"public static final int DST_OVER = 4","id":12},{"comment":"/**\r\n *  The part of the source lying inside of the destination replaces\r\n *  the destination\r\n *  (Porter-Duff Source In Destination rule).\r\n * <p>\r\n *  <em>F<sub>s</sub></em> = <em>A<sub>d</sub></em> and <em>F<sub>d</sub></em> = 0, thus:\r\n * <pre>\r\n *   <em>A<sub>r</sub></em> = <em>A<sub>s</sub></em>*<em>A<sub>d</sub></em>\r\n *   <em>C<sub>r</sub></em> = <em>C<sub>s</sub></em>*<em>A<sub>d</sub></em>\r\n * </pre>\r\n */\r\n@Native\r\n","field_name":"SRC_IN","field_type":"int","full_declaration":"public static final int SRC_IN = 5","id":13},{"comment":"/**\r\n *  The part of the destination lying inside of the source\r\n *  replaces the destination\r\n *  (Porter-Duff Destination In Source rule).\r\n * <p>\r\n *  <em>F<sub>s</sub></em> = 0 and <em>F<sub>d</sub></em> = <em>A<sub>s</sub></em>, thus:\r\n * <pre>\r\n *   <em>A<sub>r</sub></em> = <em>A<sub>d</sub></em>*<em>A<sub>s</sub></em>\r\n *   <em>C<sub>r</sub></em> = <em>C<sub>d</sub></em>*<em>A<sub>s</sub></em>\r\n * </pre>\r\n */\r\n@Native\r\n","field_name":"DST_IN","field_type":"int","full_declaration":"public static final int DST_IN = 6","id":14},{"comment":"/**\r\n *  The part of the source lying outside of the destination\r\n *  replaces the destination\r\n *  (Porter-Duff Source Held Out By Destination rule).\r\n * <p>\r\n *  <em>F<sub>s</sub></em> = (1-<em>A<sub>d</sub></em>) and <em>F<sub>d</sub></em> = 0, thus:\r\n * <pre>\r\n *   <em>A<sub>r</sub></em> = <em>A<sub>s</sub></em>*(1-<em>A<sub>d</sub></em>)\r\n *   <em>C<sub>r</sub></em> = <em>C<sub>s</sub></em>*(1-<em>A<sub>d</sub></em>)\r\n * </pre>\r\n */\r\n@Native\r\n","field_name":"SRC_OUT","field_type":"int","full_declaration":"public static final int SRC_OUT = 7","id":15},{"comment":"/**\r\n *  The part of the destination lying outside of the source\r\n *  replaces the destination\r\n *  (Porter-Duff Destination Held Out By Source rule).\r\n * <p>\r\n *  <em>F<sub>s</sub></em> = 0 and <em>F<sub>d</sub></em> = (1-<em>A<sub>s</sub></em>), thus:\r\n * <pre>\r\n *   <em>A<sub>r</sub></em> = <em>A<sub>d</sub></em>*(1-<em>A<sub>s</sub></em>)\r\n *   <em>C<sub>r</sub></em> = <em>C<sub>d</sub></em>*(1-<em>A<sub>s</sub></em>)\r\n * </pre>\r\n */\r\n@Native\r\n","field_name":"DST_OUT","field_type":"int","full_declaration":"public static final int DST_OUT = 8","id":16},{"comment":"// Rule 9 is DST which is defined above where it fits into the\r\n// list logically, rather than numerically\r\n// \r\n// public static final int  DST             = 9;\r\n/**\r\n *  The part of the source lying inside of the destination\r\n *  is composited onto the destination\r\n *  (Porter-Duff Source Atop Destination rule).\r\n * <p>\r\n *  <em>F<sub>s</sub></em> = <em>A<sub>d</sub></em> and <em>F<sub>d</sub></em> = (1-<em>A<sub>s</sub></em>), thus:\r\n * <pre>\r\n *   <em>A<sub>r</sub></em> = <em>A<sub>s</sub></em>*<em>A<sub>d</sub></em> + <em>A<sub>d</sub></em>*(1-<em>A<sub>s</sub></em>) = <em>A<sub>d</sub></em>\r\n *   <em>C<sub>r</sub></em> = <em>C<sub>s</sub></em>*<em>A<sub>d</sub></em> + <em>C<sub>d</sub></em>*(1-<em>A<sub>s</sub></em>)\r\n * </pre>\r\n *  @since 1.4\r\n */\r\n@Native\r\n","field_name":"SRC_ATOP","field_type":"int","full_declaration":"public static final int SRC_ATOP = 10","id":17},{"comment":"/**\r\n *  The part of the destination lying inside of the source\r\n *  is composited over the source and replaces the destination\r\n *  (Porter-Duff Destination Atop Source rule).\r\n * <p>\r\n *  <em>F<sub>s</sub></em> = (1-<em>A<sub>d</sub></em>) and <em>F<sub>d</sub></em> = <em>A<sub>s</sub></em>, thus:\r\n * <pre>\r\n *   <em>A<sub>r</sub></em> = <em>A<sub>s</sub></em>*(1-<em>A<sub>d</sub></em>) + <em>A<sub>d</sub></em>*<em>A<sub>s</sub></em> = <em>A<sub>s</sub></em>\r\n *   <em>C<sub>r</sub></em> = <em>C<sub>s</sub></em>*(1-<em>A<sub>d</sub></em>) + <em>C<sub>d</sub></em>*<em>A<sub>s</sub></em>\r\n * </pre>\r\n *  @since 1.4\r\n */\r\n@Native\r\n","field_name":"DST_ATOP","field_type":"int","full_declaration":"public static final int DST_ATOP = 11","id":18},{"comment":"/**\r\n *  The part of the source that lies outside of the destination\r\n *  is combined with the part of the destination that lies outside\r\n *  of the source\r\n *  (Porter-Duff Source Xor Destination rule).\r\n * <p>\r\n *  <em>F<sub>s</sub></em> = (1-<em>A<sub>d</sub></em>) and <em>F<sub>d</sub></em> = (1-<em>A<sub>s</sub></em>), thus:\r\n * <pre>\r\n *   <em>A<sub>r</sub></em> = <em>A<sub>s</sub></em>*(1-<em>A<sub>d</sub></em>) + <em>A<sub>d</sub></em>*(1-<em>A<sub>s</sub></em>)\r\n *   <em>C<sub>r</sub></em> = <em>C<sub>s</sub></em>*(1-<em>A<sub>d</sub></em>) + <em>C<sub>d</sub></em>*(1-<em>A<sub>s</sub></em>)\r\n * </pre>\r\n *  @since 1.4\r\n */\r\n@Native\r\n","field_name":"XOR","field_type":"int","full_declaration":"public static final int XOR = 12","id":19},{"comment":"/**\r\n * <code>AlphaComposite</code> object that implements the opaque CLEAR rule\r\n * with an alpha of 1.0f.\r\n * @see #CLEAR\r\n */\r\npublic static final AlphaComposite Clear = new AlphaComposite(CLEAR);","field_name":"Clear","field_type":"java.awt.AlphaComposite","full_declaration":"public static final java.awt.AlphaComposite Clear = new AlphaComposite(CLEAR)","id":20},{"comment":"/**\r\n * <code>AlphaComposite</code> object that implements the opaque SRC rule\r\n * with an alpha of 1.0f.\r\n * @see #SRC\r\n */\r\npublic static final AlphaComposite Src = new AlphaComposite(SRC);","field_name":"Src","field_type":"java.awt.AlphaComposite","full_declaration":"public static final java.awt.AlphaComposite Src = new AlphaComposite(SRC)","id":21},{"comment":"/**\r\n * <code>AlphaComposite</code> object that implements the opaque DST rule\r\n * with an alpha of 1.0f.\r\n * @see #DST\r\n * @since 1.4\r\n */\r\npublic static final AlphaComposite Dst = new AlphaComposite(DST);","field_name":"Dst","field_type":"java.awt.AlphaComposite","full_declaration":"public static final java.awt.AlphaComposite Dst = new AlphaComposite(DST)","id":22},{"comment":"/**\r\n * <code>AlphaComposite</code> object that implements the opaque SRC_OVER rule\r\n * with an alpha of 1.0f.\r\n * @see #SRC_OVER\r\n */\r\npublic static final AlphaComposite SrcOver = new AlphaComposite(SRC_OVER);","field_name":"SrcOver","field_type":"java.awt.AlphaComposite","full_declaration":"public static final java.awt.AlphaComposite SrcOver = new AlphaComposite(SRC_OVER)","id":23},{"comment":"/**\r\n * <code>AlphaComposite</code> object that implements the opaque DST_OVER rule\r\n * with an alpha of 1.0f.\r\n * @see #DST_OVER\r\n */\r\npublic static final AlphaComposite DstOver = new AlphaComposite(DST_OVER);","field_name":"DstOver","field_type":"java.awt.AlphaComposite","full_declaration":"public static final java.awt.AlphaComposite DstOver = new AlphaComposite(DST_OVER)","id":24},{"comment":"/**\r\n * <code>AlphaComposite</code> object that implements the opaque SRC_IN rule\r\n * with an alpha of 1.0f.\r\n * @see #SRC_IN\r\n */\r\npublic static final AlphaComposite SrcIn = new AlphaComposite(SRC_IN);","field_name":"SrcIn","field_type":"java.awt.AlphaComposite","full_declaration":"public static final java.awt.AlphaComposite SrcIn = new AlphaComposite(SRC_IN)","id":25},{"comment":"/**\r\n * <code>AlphaComposite</code> object that implements the opaque DST_IN rule\r\n * with an alpha of 1.0f.\r\n * @see #DST_IN\r\n */\r\npublic static final AlphaComposite DstIn = new AlphaComposite(DST_IN);","field_name":"DstIn","field_type":"java.awt.AlphaComposite","full_declaration":"public static final java.awt.AlphaComposite DstIn = new AlphaComposite(DST_IN)","id":26},{"comment":"/**\r\n * <code>AlphaComposite</code> object that implements the opaque SRC_OUT rule\r\n * with an alpha of 1.0f.\r\n * @see #SRC_OUT\r\n */\r\npublic static final AlphaComposite SrcOut = new AlphaComposite(SRC_OUT);","field_name":"SrcOut","field_type":"java.awt.AlphaComposite","full_declaration":"public static final java.awt.AlphaComposite SrcOut = new AlphaComposite(SRC_OUT)","id":27},{"comment":"/**\r\n * <code>AlphaComposite</code> object that implements the opaque DST_OUT rule\r\n * with an alpha of 1.0f.\r\n * @see #DST_OUT\r\n */\r\npublic static final AlphaComposite DstOut = new AlphaComposite(DST_OUT);","field_name":"DstOut","field_type":"java.awt.AlphaComposite","full_declaration":"public static final java.awt.AlphaComposite DstOut = new AlphaComposite(DST_OUT)","id":28},{"comment":"/**\r\n * <code>AlphaComposite</code> object that implements the opaque SRC_ATOP rule\r\n * with an alpha of 1.0f.\r\n * @see #SRC_ATOP\r\n * @since 1.4\r\n */\r\npublic static final AlphaComposite SrcAtop = new AlphaComposite(SRC_ATOP);","field_name":"SrcAtop","field_type":"java.awt.AlphaComposite","full_declaration":"public static final java.awt.AlphaComposite SrcAtop = new AlphaComposite(SRC_ATOP)","id":29},{"comment":"/**\r\n * <code>AlphaComposite</code> object that implements the opaque DST_ATOP rule\r\n * with an alpha of 1.0f.\r\n * @see #DST_ATOP\r\n * @since 1.4\r\n */\r\npublic static final AlphaComposite DstAtop = new AlphaComposite(DST_ATOP);","field_name":"DstAtop","field_type":"java.awt.AlphaComposite","full_declaration":"public static final java.awt.AlphaComposite DstAtop = new AlphaComposite(DST_ATOP)","id":30},{"comment":"/**\r\n * <code>AlphaComposite</code> object that implements the opaque XOR rule\r\n * with an alpha of 1.0f.\r\n * @see #XOR\r\n * @since 1.4\r\n */\r\npublic static final AlphaComposite Xor = new AlphaComposite(XOR);","field_name":"Xor","field_type":"java.awt.AlphaComposite","full_declaration":"public static final java.awt.AlphaComposite Xor = new AlphaComposite(XOR)","id":31},{"comment":"@Native\r\n","field_name":"MIN_RULE","field_type":"int","full_declaration":"private static final int MIN_RULE = CLEAR","id":32},{"comment":"@Native\r\n","field_name":"MAX_RULE","field_type":"int","full_declaration":"private static final int MAX_RULE = XOR","id":33},{"comment":"","field_name":"extraAlpha","field_type":"float","full_declaration":"float extraAlpha","id":34},{"comment":"","field_name":"rule","field_type":"int","full_declaration":"int rule","id":35},{"comment":"private static final PlatformLogger log = PlatformLogger.getLogger(\"java.awt.AttributeValue\");","field_name":"log","field_type":"sun.util.logging.PlatformLogger","full_declaration":"private static final sun.util.logging.PlatformLogger log = PlatformLogger.getLogger(\"java.awt.AttributeValue\")","id":36},{"comment":"","field_name":"value","field_type":"int","full_declaration":"private final int value","id":37},{"comment":"","field_name":"names","field_type":"String[]","full_declaration":"private final String[] names","id":38},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -1819846354050686206L","id":39},{"comment":"private static final PlatformLogger log = PlatformLogger.getLogger(\"java.awt.AWTEvent\");","field_name":"log","field_type":"sun.util.logging.PlatformLogger","full_declaration":"private static final sun.util.logging.PlatformLogger log = PlatformLogger.getLogger(\"java.awt.AWTEvent\")","id":40},{"comment":"","field_name":"bdata","field_type":"byte[]","full_declaration":"private byte[] bdata","id":41},{"comment":"/**\r\n * The event's id.\r\n * @serial\r\n * @see #getID()\r\n * @see #AWTEvent\r\n */\r\n","field_name":"id","field_type":"int","full_declaration":"protected int id","id":42},{"comment":"/**\r\n * Controls whether or not the event is sent back down to the peer once the\r\n * source has processed it - false means it's sent to the peer; true means\r\n * it's not. Semantic events always have a 'true' value since they were\r\n * generated by the peer in response to a low-level event.\r\n * @serial\r\n * @see #consume\r\n * @see #isConsumed\r\n */\r\n","field_name":"consumed","field_type":"boolean","full_declaration":"protected boolean consumed = false","id":43},{"comment":"/*\r\n    * The event's AccessControlContext.\r\n    */\r\nprivate transient volatile AccessControlContext acc = AccessController.getContext();","field_name":"acc","field_type":"java.security.AccessControlContext","full_declaration":"private transient volatile java.security.AccessControlContext acc = AccessController.getContext()","id":44},{"comment":"","field_name":"focusManagerIsDispatching","field_type":"boolean","full_declaration":"transient boolean focusManagerIsDispatching = false","id":45},{"comment":"","field_name":"isPosted","field_type":"boolean","full_declaration":"transient boolean isPosted","id":46},{"comment":"/**\r\n * Indicates whether this AWTEvent was generated by the system as\r\n * opposed to by user code.\r\n */\r\n","field_name":"isSystemGenerated","field_type":"boolean","full_declaration":"private transient boolean isSystemGenerated","id":47},{"comment":"/**\r\n * The event mask for selecting component events.\r\n */\r\n","field_name":"COMPONENT_EVENT_MASK","field_type":"long","full_declaration":"public final static long COMPONENT_EVENT_MASK = 0x01","id":48},{"comment":"/**\r\n * The event mask for selecting container events.\r\n */\r\n","field_name":"CONTAINER_EVENT_MASK","field_type":"long","full_declaration":"public final static long CONTAINER_EVENT_MASK = 0x02","id":49},{"comment":"/**\r\n * The event mask for selecting focus events.\r\n */\r\n","field_name":"FOCUS_EVENT_MASK","field_type":"long","full_declaration":"public final static long FOCUS_EVENT_MASK = 0x04","id":50},{"comment":"/**\r\n * The event mask for selecting key events.\r\n */\r\n","field_name":"KEY_EVENT_MASK","field_type":"long","full_declaration":"public final static long KEY_EVENT_MASK = 0x08","id":51},{"comment":"/**\r\n * The event mask for selecting mouse events.\r\n */\r\n","field_name":"MOUSE_EVENT_MASK","field_type":"long","full_declaration":"public final static long MOUSE_EVENT_MASK = 0x10","id":52},{"comment":"/**\r\n * The event mask for selecting mouse motion events.\r\n */\r\n","field_name":"MOUSE_MOTION_EVENT_MASK","field_type":"long","full_declaration":"public final static long MOUSE_MOTION_EVENT_MASK = 0x20","id":53},{"comment":"/**\r\n * The event mask for selecting window events.\r\n */\r\n","field_name":"WINDOW_EVENT_MASK","field_type":"long","full_declaration":"public final static long WINDOW_EVENT_MASK = 0x40","id":54},{"comment":"/**\r\n * The event mask for selecting action events.\r\n */\r\n","field_name":"ACTION_EVENT_MASK","field_type":"long","full_declaration":"public final static long ACTION_EVENT_MASK = 0x80","id":55},{"comment":"/**\r\n * The event mask for selecting adjustment events.\r\n */\r\n","field_name":"ADJUSTMENT_EVENT_MASK","field_type":"long","full_declaration":"public final static long ADJUSTMENT_EVENT_MASK = 0x100","id":56},{"comment":"/**\r\n * The event mask for selecting item events.\r\n */\r\n","field_name":"ITEM_EVENT_MASK","field_type":"long","full_declaration":"public final static long ITEM_EVENT_MASK = 0x200","id":57},{"comment":"/**\r\n * The event mask for selecting text events.\r\n */\r\n","field_name":"TEXT_EVENT_MASK","field_type":"long","full_declaration":"public final static long TEXT_EVENT_MASK = 0x400","id":58},{"comment":"/**\r\n * The event mask for selecting input method events.\r\n */\r\n","field_name":"INPUT_METHOD_EVENT_MASK","field_type":"long","full_declaration":"public final static long INPUT_METHOD_EVENT_MASK = 0x800","id":59},{"comment":"/**\r\n * The pseudo event mask for enabling input methods.\r\n * We're using one bit in the eventMask so we don't need\r\n * a separate field inputMethodsEnabled.\r\n */\r\n","field_name":"INPUT_METHODS_ENABLED_MASK","field_type":"long","full_declaration":"final static long INPUT_METHODS_ENABLED_MASK = 0x1000","id":60},{"comment":"/**\r\n * The event mask for selecting paint events.\r\n */\r\n","field_name":"PAINT_EVENT_MASK","field_type":"long","full_declaration":"public final static long PAINT_EVENT_MASK = 0x2000","id":61},{"comment":"/**\r\n * The event mask for selecting invocation events.\r\n */\r\n","field_name":"INVOCATION_EVENT_MASK","field_type":"long","full_declaration":"public final static long INVOCATION_EVENT_MASK = 0x4000","id":62},{"comment":"/**\r\n * The event mask for selecting hierarchy events.\r\n */\r\n","field_name":"HIERARCHY_EVENT_MASK","field_type":"long","full_declaration":"public final static long HIERARCHY_EVENT_MASK = 0x8000","id":63},{"comment":"/**\r\n * The event mask for selecting hierarchy bounds events.\r\n */\r\n","field_name":"HIERARCHY_BOUNDS_EVENT_MASK","field_type":"long","full_declaration":"public final static long HIERARCHY_BOUNDS_EVENT_MASK = 0x10000","id":64},{"comment":"/**\r\n * The event mask for selecting mouse wheel events.\r\n * @since 1.4\r\n */\r\n","field_name":"MOUSE_WHEEL_EVENT_MASK","field_type":"long","full_declaration":"public final static long MOUSE_WHEEL_EVENT_MASK = 0x20000","id":65},{"comment":"/**\r\n * The event mask for selecting window state events.\r\n * @since 1.4\r\n */\r\n","field_name":"WINDOW_STATE_EVENT_MASK","field_type":"long","full_declaration":"public final static long WINDOW_STATE_EVENT_MASK = 0x40000","id":66},{"comment":"/**\r\n * The event mask for selecting window focus events.\r\n * @since 1.4\r\n */\r\n","field_name":"WINDOW_FOCUS_EVENT_MASK","field_type":"long","full_declaration":"public final static long WINDOW_FOCUS_EVENT_MASK = 0x80000","id":67},{"comment":"/**\r\n * WARNING: there are more mask defined privately.  See\r\n * SunToolkit.GRAB_EVENT_MASK.\r\n */\r\n/**\r\n * The maximum value for reserved AWT event IDs. Programs defining\r\n * their own event IDs should use IDs greater than this value.\r\n */\r\n","field_name":"RESERVED_ID_MAX","field_type":"int","full_declaration":"public final static int RESERVED_ID_MAX = 1999","id":68},{"comment":"// security stuff\r\nprivate static Field inputEvent_CanAccessSystemClipboard_Field = null;","field_name":"inputEvent_CanAccessSystemClipboard_Field","field_type":"java.lang.reflect.Field","full_declaration":"private static java.lang.reflect.Field inputEvent_CanAccessSystemClipboard_Field = null","id":69},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -1825314779160409405L","id":70},{"comment":"protected final EventListener a, b;","field_name":"a","field_type":"java.util.EventListener","full_declaration":"protected final java.util.EventListener a","id":71},{"comment":"protected final EventListener a, b;","field_name":"b","field_type":"java.util.EventListener","full_declaration":"protected final java.util.EventListener ajava.util.EventListener b","id":72},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -1900414231151323879L","id":73},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"static final long serialVersionUID = -6430539691155161871L","id":74},{"comment":"private static Map<String, Integer> modifierKeywords;","field_name":"modifierKeywords","field_type":"java.util.Map","full_declaration":"private static java.util.Map modifierKeywords","id":75},{"comment":"/**\r\n * Associates VK_XXX (as a String) with code (as Integer). This is\r\n * done to avoid the overhead of the reflective call to find the\r\n * constant.\r\n */\r\nprivate static VKCollection vks;","field_name":"vks","field_type":"java.awt.VKCollection","full_declaration":"private static java.awt.VKCollection vks","id":76},{"comment":"// A key for the collection of AWTKeyStrokes within AppContext.\r\nprivate static Object APP_CONTEXT_CACHE_KEY = new Object();","field_name":"APP_CONTEXT_CACHE_KEY","field_type":"java.lang.Object","full_declaration":"private static java.lang.Object APP_CONTEXT_CACHE_KEY = new Object()","id":77},{"comment":"// A key withing the cache\r\nprivate static AWTKeyStroke APP_CONTEXT_KEYSTROKE_KEY = new AWTKeyStroke();","field_name":"APP_CONTEXT_KEYSTROKE_KEY","field_type":"java.awt.AWTKeyStroke","full_declaration":"private static java.awt.AWTKeyStroke APP_CONTEXT_KEYSTROKE_KEY = new AWTKeyStroke()","id":78},{"comment":"","field_name":"keyChar","field_type":"char","full_declaration":"private char keyChar = KeyEvent.CHAR_UNDEFINED","id":79},{"comment":"","field_name":"keyCode","field_type":"int","full_declaration":"private int keyCode = KeyEvent.VK_UNDEFINED","id":80},{"comment":"","field_name":"modifiers","field_type":"int","full_declaration":"private int modifiers","id":81},{"comment":"","field_name":"onKeyRelease","field_type":"boolean","full_declaration":"private boolean onKeyRelease","id":82},{"comment":"Map<Integer, String> code2name;","field_name":"code2name","field_type":"java.util.Map","full_declaration":"java.util.Map code2name","id":83},{"comment":"Map<String, Integer> name2code;","field_name":"name2code","field_type":"java.util.Map","full_declaration":"java.util.Map name2code","id":84},{"comment":"/**\r\n * use serialVersionUID from the Java 2 platform for interoperability\r\n */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 8890392402588814465L","id":85},{"comment":"/**\r\n * Joins path segments by extending their outside edges until\r\n * they meet.\r\n */\r\n@Native\r\n","field_name":"JOIN_MITER","field_type":"int","full_declaration":"public final static int JOIN_MITER = 0","id":86},{"comment":"/**\r\n * Joins path segments by rounding off the corner at a radius\r\n * of half the line width.\r\n */\r\n@Native\r\n","field_name":"JOIN_ROUND","field_type":"int","full_declaration":"public final static int JOIN_ROUND = 1","id":87},{"comment":"/**\r\n * Joins path segments by connecting the outer corners of their\r\n * wide outlines with a straight segment.\r\n */\r\n@Native\r\n","field_name":"JOIN_BEVEL","field_type":"int","full_declaration":"public final static int JOIN_BEVEL = 2","id":88},{"comment":"/**\r\n * Ends unclosed subpaths and dash segments with no added\r\n * decoration.\r\n */\r\n@Native\r\n","field_name":"CAP_BUTT","field_type":"int","full_declaration":"public final static int CAP_BUTT = 0","id":89},{"comment":"/**\r\n * Ends unclosed subpaths and dash segments with a round\r\n * decoration that has a radius equal to half of the width\r\n * of the pen.\r\n */\r\n@Native\r\n","field_name":"CAP_ROUND","field_type":"int","full_declaration":"public final static int CAP_ROUND = 1","id":90},{"comment":"/**\r\n * Ends unclosed subpaths and dash segments with a square\r\n * projection that extends beyond the end of the segment\r\n * to a distance equal to half of the line width.\r\n */\r\n@Native\r\n","field_name":"CAP_SQUARE","field_type":"int","full_declaration":"public final static int CAP_SQUARE = 2","id":91},{"comment":"","field_name":"width","field_type":"float","full_declaration":"float width","id":92},{"comment":"","field_name":"join","field_type":"int","full_declaration":"int join","id":93},{"comment":"","field_name":"cap","field_type":"int","full_declaration":"int cap","id":94},{"comment":"","field_name":"miterlimit","field_type":"float","full_declaration":"float miterlimit","id":95},{"comment":"","field_name":"dash","field_type":"float[]","full_declaration":"float[] dash","id":96},{"comment":"","field_name":"dash_phase","field_type":"float","full_declaration":"float dash_phase","id":97},{"comment":"/**\r\n * Constructs a border layout with the horizontal gaps\r\n * between components.\r\n * The horizontal gap is specified by <code>hgap</code>.\r\n *\r\n * @see #getHgap()\r\n * @see #setHgap(int)\r\n *\r\n * @serial\r\n */\r\n","field_name":"hgap","field_type":"int","full_declaration":"int hgap","id":98},{"comment":"/**\r\n * Constructs a border layout with the vertical gaps\r\n * between components.\r\n * The vertical gap is specified by <code>vgap</code>.\r\n *\r\n * @see #getVgap()\r\n * @see #setVgap(int)\r\n * @serial\r\n */\r\n","field_name":"vgap","field_type":"int","full_declaration":"int vgap","id":99},{"comment":"/**\r\n * Constant to specify components location to be the\r\n *      north portion of the border layout.\r\n * @serial\r\n * @see #getChild(String, boolean)\r\n * @see #addLayoutComponent\r\n * @see #getLayoutAlignmentX\r\n * @see #getLayoutAlignmentY\r\n * @see #removeLayoutComponent\r\n */\r\nComponent north;","field_name":"north","field_type":"java.awt.Component","full_declaration":"java.awt.Component north","id":100},{"comment":"/**\r\n * Constant to specify components location to be the\r\n *      west portion of the border layout.\r\n * @serial\r\n * @see #getChild(String, boolean)\r\n * @see #addLayoutComponent\r\n * @see #getLayoutAlignmentX\r\n * @see #getLayoutAlignmentY\r\n * @see #removeLayoutComponent\r\n */\r\nComponent west;","field_name":"west","field_type":"java.awt.Component","full_declaration":"java.awt.Component west","id":101},{"comment":"/**\r\n * Constant to specify components location to be the\r\n *      east portion of the border layout.\r\n * @serial\r\n * @see #getChild(String, boolean)\r\n * @see #addLayoutComponent\r\n * @see #getLayoutAlignmentX\r\n * @see #getLayoutAlignmentY\r\n * @see #removeLayoutComponent\r\n */\r\nComponent east;","field_name":"east","field_type":"java.awt.Component","full_declaration":"java.awt.Component east","id":102},{"comment":"/**\r\n * Constant to specify components location to be the\r\n *      south portion of the border layout.\r\n * @serial\r\n * @see #getChild(String, boolean)\r\n * @see #addLayoutComponent\r\n * @see #getLayoutAlignmentX\r\n * @see #getLayoutAlignmentY\r\n * @see #removeLayoutComponent\r\n */\r\nComponent south;","field_name":"south","field_type":"java.awt.Component","full_declaration":"java.awt.Component south","id":103},{"comment":"/**\r\n * Constant to specify components location to be the\r\n *      center portion of the border layout.\r\n * @serial\r\n * @see #getChild(String, boolean)\r\n * @see #addLayoutComponent\r\n * @see #getLayoutAlignmentX\r\n * @see #getLayoutAlignmentY\r\n * @see #removeLayoutComponent\r\n */\r\nComponent center;","field_name":"center","field_type":"java.awt.Component","full_declaration":"java.awt.Component center","id":104},{"comment":"/**\r\n * A relative positioning constant, that can be used instead of\r\n * north, south, east, west or center.\r\n * mixing the two types of constants can lead to unpredictable results.  If\r\n * you use both types, the relative constants will take precedence.\r\n * For example, if you add components using both the <code>NORTH</code>\r\n * and <code>BEFORE_FIRST_LINE</code> constants in a container whose\r\n * orientation is <code>LEFT_TO_RIGHT</code>, only the\r\n * <code>BEFORE_FIRST_LINE</code> will be layed out.\r\n * This will be the same for lastLine, firstItem, lastItem.\r\n * @serial\r\n */\r\nComponent firstLine;","field_name":"firstLine","field_type":"java.awt.Component","full_declaration":"java.awt.Component firstLine","id":105},{"comment":"/**\r\n * A relative positioning constant, that can be used instead of\r\n * north, south, east, west or center.\r\n * Please read Description for firstLine.\r\n * @serial\r\n */\r\nComponent lastLine;","field_name":"lastLine","field_type":"java.awt.Component","full_declaration":"java.awt.Component lastLine","id":106},{"comment":"/**\r\n * A relative positioning constant, that can be used instead of\r\n * north, south, east, west or center.\r\n * Please read Description for firstLine.\r\n * @serial\r\n */\r\nComponent firstItem;","field_name":"firstItem","field_type":"java.awt.Component","full_declaration":"java.awt.Component firstItem","id":107},{"comment":"/**\r\n * A relative positioning constant, that can be used instead of\r\n * north, south, east, west or center.\r\n * Please read Description for firstLine.\r\n * @serial\r\n */\r\nComponent lastItem;","field_name":"lastItem","field_type":"java.awt.Component","full_declaration":"java.awt.Component lastItem","id":108},{"comment":"/**\r\n * The north layout constraint (top of container).\r\n */\r\npublic static final String NORTH = \"North\";","field_name":"NORTH","field_type":"java.lang.String","full_declaration":"public static final java.lang.String NORTH = \"North\"","id":109},{"comment":"/**\r\n * The south layout constraint (bottom of container).\r\n */\r\npublic static final String SOUTH = \"South\";","field_name":"SOUTH","field_type":"java.lang.String","full_declaration":"public static final java.lang.String SOUTH = \"South\"","id":110},{"comment":"/**\r\n * The east layout constraint (right side of container).\r\n */\r\npublic static final String EAST = \"East\";","field_name":"EAST","field_type":"java.lang.String","full_declaration":"public static final java.lang.String EAST = \"East\"","id":111},{"comment":"/**\r\n * The west layout constraint (left side of container).\r\n */\r\npublic static final String WEST = \"West\";","field_name":"WEST","field_type":"java.lang.String","full_declaration":"public static final java.lang.String WEST = \"West\"","id":112},{"comment":"/**\r\n * The center layout constraint (middle of container).\r\n */\r\npublic static final String CENTER = \"Center\";","field_name":"CENTER","field_type":"java.lang.String","full_declaration":"public static final java.lang.String CENTER = \"Center\"","id":113},{"comment":"/**\r\n * Synonym for PAGE_START.  Exists for compatibility with previous\r\n * versions.  PAGE_START is preferred.\r\n *\r\n * @see #PAGE_START\r\n * @since 1.2\r\n */\r\npublic static final String BEFORE_FIRST_LINE = \"First\";","field_name":"BEFORE_FIRST_LINE","field_type":"java.lang.String","full_declaration":"public static final java.lang.String BEFORE_FIRST_LINE = \"First\"","id":114},{"comment":"/**\r\n * Synonym for PAGE_END.  Exists for compatibility with previous\r\n * versions.  PAGE_END is preferred.\r\n *\r\n * @see #PAGE_END\r\n * @since 1.2\r\n */\r\npublic static final String AFTER_LAST_LINE = \"Last\";","field_name":"AFTER_LAST_LINE","field_type":"java.lang.String","full_declaration":"public static final java.lang.String AFTER_LAST_LINE = \"Last\"","id":115},{"comment":"/**\r\n * Synonym for LINE_START.  Exists for compatibility with previous\r\n * versions.  LINE_START is preferred.\r\n *\r\n * @see #LINE_START\r\n * @since 1.2\r\n */\r\npublic static final String BEFORE_LINE_BEGINS = \"Before\";","field_name":"BEFORE_LINE_BEGINS","field_type":"java.lang.String","full_declaration":"public static final java.lang.String BEFORE_LINE_BEGINS = \"Before\"","id":116},{"comment":"/**\r\n * Synonym for LINE_END.  Exists for compatibility with previous\r\n * versions.  LINE_END is preferred.\r\n *\r\n * @see #LINE_END\r\n * @since 1.2\r\n */\r\npublic static final String AFTER_LINE_ENDS = \"After\";","field_name":"AFTER_LINE_ENDS","field_type":"java.lang.String","full_declaration":"public static final java.lang.String AFTER_LINE_ENDS = \"After\"","id":117},{"comment":"/**\r\n * The component comes before the first line of the layout's content.\r\n * For Western, left-to-right and top-to-bottom orientations, this is\r\n * equivalent to NORTH.\r\n *\r\n * @see java.awt.Component#getComponentOrientation\r\n * @since 1.4\r\n */\r\npublic static final String PAGE_START = BEFORE_FIRST_LINE;","field_name":"PAGE_START","field_type":"java.lang.String","full_declaration":"public static final java.lang.String PAGE_START = BEFORE_FIRST_LINE","id":118},{"comment":"/**\r\n * The component comes after the last line of the layout's content.\r\n * For Western, left-to-right and top-to-bottom orientations, this is\r\n * equivalent to SOUTH.\r\n *\r\n * @see java.awt.Component#getComponentOrientation\r\n * @since 1.4\r\n */\r\npublic static final String PAGE_END = AFTER_LAST_LINE;","field_name":"PAGE_END","field_type":"java.lang.String","full_declaration":"public static final java.lang.String PAGE_END = AFTER_LAST_LINE","id":119},{"comment":"/**\r\n * The component goes at the beginning of the line direction for the\r\n * layout. For Western, left-to-right and top-to-bottom orientations,\r\n * this is equivalent to WEST.\r\n *\r\n * @see java.awt.Component#getComponentOrientation\r\n * @since 1.4\r\n */\r\npublic static final String LINE_START = BEFORE_LINE_BEGINS;","field_name":"LINE_START","field_type":"java.lang.String","full_declaration":"public static final java.lang.String LINE_START = BEFORE_LINE_BEGINS","id":120},{"comment":"/**\r\n * The component goes at the end of the line direction for the\r\n * layout. For Western, left-to-right and top-to-bottom orientations,\r\n * this is equivalent to EAST.\r\n *\r\n * @see java.awt.Component#getComponentOrientation\r\n * @since 1.4\r\n */\r\npublic static final String LINE_END = AFTER_LINE_ENDS;","field_name":"LINE_END","field_type":"java.lang.String","full_declaration":"public static final java.lang.String LINE_END = AFTER_LINE_ENDS","id":121},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -8658291919501921765L","id":122},{"comment":"private ImageCapabilities frontCaps;","field_name":"frontCaps","field_type":"java.awt.ImageCapabilities","full_declaration":"private java.awt.ImageCapabilities frontCaps","id":123},{"comment":"private ImageCapabilities backCaps;","field_name":"backCaps","field_type":"java.awt.ImageCapabilities","full_declaration":"private java.awt.ImageCapabilities backCaps","id":124},{"comment":"private FlipContents flipContents;","field_name":"flipContents","field_type":"java.awt.BufferCapabilities.FlipContents","full_declaration":"private java.awt.BufferCapabilities.FlipContents flipContents","id":125},{"comment":"","field_name":"I_UNDEFINED","field_type":"int","full_declaration":"private static int I_UNDEFINED = 0","id":126},{"comment":"","field_name":"I_BACKGROUND","field_type":"int","full_declaration":"private static int I_BACKGROUND = 1","id":127},{"comment":"","field_name":"I_PRIOR","field_type":"int","full_declaration":"private static int I_PRIOR = 2","id":128},{"comment":"","field_name":"I_COPIED","field_type":"int","full_declaration":"private static int I_COPIED = 3","id":129},{"comment":"","field_name":"NAMES","field_type":"String[]","full_declaration":"private static final String[] NAMES = { \"undefined\", \"background\", \"prior\", \"copied\" }","id":130},{"comment":"/**\r\n * When flip contents are <code>UNDEFINED</code>, the\r\n * contents of the back buffer are undefined after flipping.\r\n * @see #isPageFlipping\r\n * @see #getFlipContents\r\n * @see #BACKGROUND\r\n * @see #PRIOR\r\n * @see #COPIED\r\n */\r\npublic static final FlipContents UNDEFINED = new FlipContents(I_UNDEFINED);","field_name":"UNDEFINED","field_type":"java.awt.BufferCapabilities.FlipContents","full_declaration":"public static final java.awt.BufferCapabilities.FlipContents UNDEFINED = new FlipContents(I_UNDEFINED)","id":131},{"comment":"/**\r\n * When flip contents are <code>BACKGROUND</code>, the\r\n * contents of the back buffer are cleared with the background color after\r\n * flipping.\r\n * @see #isPageFlipping\r\n * @see #getFlipContents\r\n * @see #UNDEFINED\r\n * @see #PRIOR\r\n * @see #COPIED\r\n */\r\npublic static final FlipContents BACKGROUND = new FlipContents(I_BACKGROUND);","field_name":"BACKGROUND","field_type":"java.awt.BufferCapabilities.FlipContents","full_declaration":"public static final java.awt.BufferCapabilities.FlipContents BACKGROUND = new FlipContents(I_BACKGROUND)","id":132},{"comment":"/**\r\n * When flip contents are <code>PRIOR</code>, the\r\n * contents of the back buffer are the prior contents of the front buffer\r\n * (a true page flip).\r\n * @see #isPageFlipping\r\n * @see #getFlipContents\r\n * @see #UNDEFINED\r\n * @see #BACKGROUND\r\n * @see #COPIED\r\n */\r\npublic static final FlipContents PRIOR = new FlipContents(I_PRIOR);","field_name":"PRIOR","field_type":"java.awt.BufferCapabilities.FlipContents","full_declaration":"public static final java.awt.BufferCapabilities.FlipContents PRIOR = new FlipContents(I_PRIOR)","id":133},{"comment":"/**\r\n * When flip contents are <code>COPIED</code>, the\r\n * contents of the back buffer are copied to the front buffer when\r\n * flipping.\r\n * @see #isPageFlipping\r\n * @see #getFlipContents\r\n * @see #UNDEFINED\r\n * @see #BACKGROUND\r\n * @see #PRIOR\r\n */\r\npublic static final FlipContents COPIED = new FlipContents(I_COPIED);","field_name":"COPIED","field_type":"java.awt.BufferCapabilities.FlipContents","full_declaration":"public static final java.awt.BufferCapabilities.FlipContents COPIED = new FlipContents(I_COPIED)","id":134},{"comment":"/**\r\n * The button's label.  This value may be null.\r\n * @serial\r\n * @see #getLabel()\r\n * @see #setLabel(String)\r\n */\r\nString label;","field_name":"label","field_type":"java.lang.String","full_declaration":"java.lang.String label","id":135},{"comment":"/**\r\n * The action to be performed once a button has been\r\n * pressed.  This value may be null.\r\n * @serial\r\n * @see #getActionCommand()\r\n * @see #setActionCommand(String)\r\n */\r\nString actionCommand;","field_name":"actionCommand","field_type":"java.lang.String","full_declaration":"java.lang.String actionCommand","id":136},{"comment":"transient ActionListener actionListener;","field_name":"actionListener","field_type":"java.awt.event.ActionListener","full_declaration":"transient java.awt.event.ActionListener actionListener","id":137},{"comment":"private static final String base = \"button\";","field_name":"base","field_type":"java.lang.String","full_declaration":"private static final java.lang.String base = \"button\"","id":138},{"comment":"","field_name":"nameCounter","field_type":"int","full_declaration":"private static int nameCounter = 0","id":139},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -8774683716313001058L","id":140},{"comment":"/* Serialization support.\r\n     */\r\n/*\r\n     * Button Serial Data Version.\r\n     * @serial\r\n     */\r\n","field_name":"buttonSerializedDataVersion","field_type":"int","full_declaration":"private int buttonSerializedDataVersion = 1","id":141},{"comment":"/*\r\n         * JDK 1.3 serialVersionUID\r\n         */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -5932203980244017102L","id":142},{"comment":"private static final String base = \"canvas\";","field_name":"base","field_type":"java.lang.String","full_declaration":"private static final java.lang.String base = \"canvas\"","id":143},{"comment":"","field_name":"nameCounter","field_type":"int","full_declaration":"private static int nameCounter = 0","id":144},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -2284879212465893870L","id":145},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -6325592262103146699L","id":146},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -4328196481005934313L","id":147},{"comment":"/*\r\n     * This creates a Vector to store associated\r\n     * pairs of components and their names.\r\n     * @see java.util.Vector\r\n     */\r\nVector<Card> vector = new Vector<>();","field_name":"vector","field_type":"java.util.Vector","full_declaration":"java.util.Vector vector = new Vector<>()","id":148},{"comment":"/*\r\n     * Index of Component currently displayed by CardLayout.\r\n     */\r\n","field_name":"currentCard","field_type":"int","full_declaration":"int currentCard = 0","id":149},{"comment":"/*\r\n    * A cards horizontal Layout gap (inset). It specifies\r\n    * the space between the left and right edges of a\r\n    * container and the current component.\r\n    * This should be a non negative Integer.\r\n    * @see getHgap()\r\n    * @see setHgap()\r\n    */\r\n","field_name":"hgap","field_type":"int","full_declaration":"int hgap","id":150},{"comment":"/*\r\n    * A cards vertical Layout gap (inset). It specifies\r\n    * the space between the top and bottom edges of a\r\n    * container and the current component.\r\n    * This should be a non negative Integer.\r\n    * @see getVgap()\r\n    * @see setVgap()\r\n    */\r\n","field_name":"vgap","field_type":"int","full_declaration":"int vgap","id":151},{"comment":"/**\r\n * @serialField tab         Hashtable\r\n *      deprectated, for forward compatibility only\r\n * @serialField hgap        int\r\n * @serialField vgap        int\r\n * @serialField vector      Vector\r\n * @serialField currentCard int\r\n */\r\n","field_name":"serialPersistentFields","field_type":"ObjectStreamField[]","full_declaration":"private static final ObjectStreamField[] serialPersistentFields = { new ObjectStreamField(\"tab\", Hashtable.class), new ObjectStreamField(\"hgap\", Integer.TYPE), new ObjectStreamField(\"vgap\", Integer.TYPE), new ObjectStreamField(\"vector\", Vector.class), new ObjectStreamField(\"currentCard\", Integer.TYPE) }","id":152},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"static final long serialVersionUID = 6640330810709497518L","id":153},{"comment":"public String name;","field_name":"name","field_type":"java.lang.String","full_declaration":"public java.lang.String name","id":154},{"comment":"public Component comp;","field_name":"comp","field_type":"java.awt.Component","full_declaration":"public java.awt.Component comp","id":155},{"comment":"/**\r\n * The label of the Checkbox.\r\n * This field can be null.\r\n * @serial\r\n * @see #getLabel()\r\n * @see #setLabel(String)\r\n */\r\nString label;","field_name":"label","field_type":"java.lang.String","full_declaration":"java.lang.String label","id":156},{"comment":"/**\r\n * The state of the <code>Checkbox</code>.\r\n * @serial\r\n * @see #getState()\r\n * @see #setState(boolean)\r\n */\r\n","field_name":"state","field_type":"boolean","full_declaration":"boolean state","id":157},{"comment":"/**\r\n * The check box group.\r\n * This field can be null indicating that the checkbox\r\n * is not a group checkbox.\r\n * @serial\r\n * @see #getCheckboxGroup()\r\n * @see #setCheckboxGroup(CheckboxGroup)\r\n */\r\nCheckboxGroup group;","field_name":"group","field_type":"java.awt.CheckboxGroup","full_declaration":"java.awt.CheckboxGroup group","id":158},{"comment":"transient ItemListener itemListener;","field_name":"itemListener","field_type":"java.awt.event.ItemListener","full_declaration":"transient java.awt.event.ItemListener itemListener","id":159},{"comment":"private static final String base = \"checkbox\";","field_name":"base","field_type":"java.lang.String","full_declaration":"private static final java.lang.String base = \"checkbox\"","id":160},{"comment":"","field_name":"nameCounter","field_type":"int","full_declaration":"private static int nameCounter = 0","id":161},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 7270714317450821763L","id":162},{"comment":"/* Serialization support.\r\n     */\r\n/*\r\n     * Serialized data version\r\n     * @serial\r\n     */\r\n","field_name":"checkboxSerializedDataVersion","field_type":"int","full_declaration":"private int checkboxSerializedDataVersion = 1","id":163},{"comment":"/*\r\n         * JDK 1.3 serialVersionUID\r\n         */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 7881579233144754107L","id":164},{"comment":"/**\r\n * The current choice.\r\n * @serial\r\n * @see #getCurrent()\r\n * @see #setCurrent(Checkbox)\r\n */\r\nCheckbox selectedCheckbox = null;","field_name":"selectedCheckbox","field_type":"java.awt.Checkbox","full_declaration":"java.awt.Checkbox selectedCheckbox = null","id":165},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 3729780091441768983L","id":166},{"comment":"/**\r\n * The state of a checkbox menu item\r\n * @serial\r\n * @see #getState()\r\n * @see #setState(boolean)\r\n */\r\n","field_name":"state","field_type":"boolean","full_declaration":"boolean state = false","id":167},{"comment":"transient ItemListener itemListener;","field_name":"itemListener","field_type":"java.awt.event.ItemListener","full_declaration":"transient java.awt.event.ItemListener itemListener","id":168},{"comment":"private static final String base = \"chkmenuitem\";","field_name":"base","field_type":"java.lang.String","full_declaration":"private static final java.lang.String base = \"chkmenuitem\"","id":169},{"comment":"","field_name":"nameCounter","field_type":"int","full_declaration":"private static int nameCounter = 0","id":170},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 6190621106981774043L","id":171},{"comment":"/* Serialization support.\r\n     */\r\n/*\r\n     * Serial Data Version\r\n     * @serial\r\n     */\r\n","field_name":"checkboxMenuItemSerializedDataVersion","field_type":"int","full_declaration":"private int checkboxMenuItemSerializedDataVersion = 1","id":172},{"comment":"/*\r\n         * JDK 1.3 serialVersionUID\r\n         */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -1122642964303476L","id":173},{"comment":"/**\r\n * The items for the <code>Choice</code>.\r\n * This can be a <code>null</code> value.\r\n * @serial\r\n * @see #add(String)\r\n * @see #addItem(String)\r\n * @see #getItem(int)\r\n * @see #getItemCount()\r\n * @see #insert(String, int)\r\n * @see #remove(String)\r\n */\r\nVector<String> pItems;","field_name":"pItems","field_type":"java.util.Vector","full_declaration":"java.util.Vector pItems","id":174},{"comment":"/**\r\n * The index of the current choice for this <code>Choice</code>\r\n * or -1 if nothing is selected.\r\n * @serial\r\n * @see #getSelectedItem()\r\n * @see #select(int)\r\n */\r\n","field_name":"selectedIndex","field_type":"int","full_declaration":"int selectedIndex = -1","id":175},{"comment":"transient ItemListener itemListener;","field_name":"itemListener","field_type":"java.awt.event.ItemListener","full_declaration":"transient java.awt.event.ItemListener itemListener","id":176},{"comment":"private static final String base = \"choice\";","field_name":"base","field_type":"java.lang.String","full_declaration":"private static final java.lang.String base = \"choice\"","id":177},{"comment":"","field_name":"nameCounter","field_type":"int","full_declaration":"private static int nameCounter = 0","id":178},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -4075310674757313071L","id":179},{"comment":"/* Serialization support.\r\n     */\r\n/*\r\n     * Choice Serial Data Version.\r\n     * @serial\r\n     */\r\n","field_name":"choiceSerializedDataVersion","field_type":"int","full_declaration":"private int choiceSerializedDataVersion = 1","id":180},{"comment":"/*\r\n         * JDK 1.3 serialVersionUID\r\n         */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 7175603582428509322L","id":181},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"static final long serialVersionUID = -409452704308689724L","id":182},{"comment":"","field_name":"type","field_type":"int","full_declaration":"private int type","id":183},{"comment":"","field_name":"numComponents","field_type":"int","full_declaration":"private int numComponents","id":184},{"comment":"","field_name":"compName","field_type":"String[]","full_declaration":"private transient String[] compName = null","id":185},{"comment":"// Cache of singletons for the predefined color spaces.\r\nprivate static ColorSpace sRGBspace;","field_name":"sRGBspace","field_type":"java.awt.color.ColorSpace","full_declaration":"private static java.awt.color.ColorSpace sRGBspace","id":186},{"comment":"private static ColorSpace XYZspace;","field_name":"XYZspace","field_type":"java.awt.color.ColorSpace","full_declaration":"private static java.awt.color.ColorSpace XYZspace","id":187},{"comment":"private static ColorSpace PYCCspace;","field_name":"PYCCspace","field_type":"java.awt.color.ColorSpace","full_declaration":"private static java.awt.color.ColorSpace PYCCspace","id":188},{"comment":"private static ColorSpace GRAYspace;","field_name":"GRAYspace","field_type":"java.awt.color.ColorSpace","full_declaration":"private static java.awt.color.ColorSpace GRAYspace","id":189},{"comment":"private static ColorSpace LINEAR_RGBspace;","field_name":"LINEAR_RGBspace","field_type":"java.awt.color.ColorSpace","full_declaration":"private static java.awt.color.ColorSpace LINEAR_RGBspace","id":190},{"comment":"/**\r\n * Any of the family of XYZ color spaces.\r\n */\r\n@Native\r\n","field_name":"TYPE_XYZ","field_type":"int","full_declaration":"public static final int TYPE_XYZ = 0","id":191},{"comment":"/**\r\n * Any of the family of Lab color spaces.\r\n */\r\n@Native\r\n","field_name":"TYPE_Lab","field_type":"int","full_declaration":"public static final int TYPE_Lab = 1","id":192},{"comment":"/**\r\n * Any of the family of Luv color spaces.\r\n */\r\n@Native\r\n","field_name":"TYPE_Luv","field_type":"int","full_declaration":"public static final int TYPE_Luv = 2","id":193},{"comment":"/**\r\n * Any of the family of YCbCr color spaces.\r\n */\r\n@Native\r\n","field_name":"TYPE_YCbCr","field_type":"int","full_declaration":"public static final int TYPE_YCbCr = 3","id":194},{"comment":"/**\r\n * Any of the family of Yxy color spaces.\r\n */\r\n@Native\r\n","field_name":"TYPE_Yxy","field_type":"int","full_declaration":"public static final int TYPE_Yxy = 4","id":195},{"comment":"/**\r\n * Any of the family of RGB color spaces.\r\n */\r\n@Native\r\n","field_name":"TYPE_RGB","field_type":"int","full_declaration":"public static final int TYPE_RGB = 5","id":196},{"comment":"/**\r\n * Any of the family of GRAY color spaces.\r\n */\r\n@Native\r\n","field_name":"TYPE_GRAY","field_type":"int","full_declaration":"public static final int TYPE_GRAY = 6","id":197},{"comment":"/**\r\n * Any of the family of HSV color spaces.\r\n */\r\n@Native\r\n","field_name":"TYPE_HSV","field_type":"int","full_declaration":"public static final int TYPE_HSV = 7","id":198},{"comment":"/**\r\n * Any of the family of HLS color spaces.\r\n */\r\n@Native\r\n","field_name":"TYPE_HLS","field_type":"int","full_declaration":"public static final int TYPE_HLS = 8","id":199},{"comment":"/**\r\n * Any of the family of CMYK color spaces.\r\n */\r\n@Native\r\n","field_name":"TYPE_CMYK","field_type":"int","full_declaration":"public static final int TYPE_CMYK = 9","id":200},{"comment":"/**\r\n * Any of the family of CMY color spaces.\r\n */\r\n@Native\r\n","field_name":"TYPE_CMY","field_type":"int","full_declaration":"public static final int TYPE_CMY = 11","id":201},{"comment":"/**\r\n * Generic 2 component color spaces.\r\n */\r\n@Native\r\n","field_name":"TYPE_2CLR","field_type":"int","full_declaration":"public static final int TYPE_2CLR = 12","id":202},{"comment":"/**\r\n * Generic 3 component color spaces.\r\n */\r\n@Native\r\n","field_name":"TYPE_3CLR","field_type":"int","full_declaration":"public static final int TYPE_3CLR = 13","id":203},{"comment":"/**\r\n * Generic 4 component color spaces.\r\n */\r\n@Native\r\n","field_name":"TYPE_4CLR","field_type":"int","full_declaration":"public static final int TYPE_4CLR = 14","id":204},{"comment":"/**\r\n * Generic 5 component color spaces.\r\n */\r\n@Native\r\n","field_name":"TYPE_5CLR","field_type":"int","full_declaration":"public static final int TYPE_5CLR = 15","id":205},{"comment":"/**\r\n * Generic 6 component color spaces.\r\n */\r\n@Native\r\n","field_name":"TYPE_6CLR","field_type":"int","full_declaration":"public static final int TYPE_6CLR = 16","id":206},{"comment":"/**\r\n * Generic 7 component color spaces.\r\n */\r\n@Native\r\n","field_name":"TYPE_7CLR","field_type":"int","full_declaration":"public static final int TYPE_7CLR = 17","id":207},{"comment":"/**\r\n * Generic 8 component color spaces.\r\n */\r\n@Native\r\n","field_name":"TYPE_8CLR","field_type":"int","full_declaration":"public static final int TYPE_8CLR = 18","id":208},{"comment":"/**\r\n * Generic 9 component color spaces.\r\n */\r\n@Native\r\n","field_name":"TYPE_9CLR","field_type":"int","full_declaration":"public static final int TYPE_9CLR = 19","id":209},{"comment":"/**\r\n * Generic 10 component color spaces.\r\n */\r\n@Native\r\n","field_name":"TYPE_ACLR","field_type":"int","full_declaration":"public static final int TYPE_ACLR = 20","id":210},{"comment":"/**\r\n * Generic 11 component color spaces.\r\n */\r\n@Native\r\n","field_name":"TYPE_BCLR","field_type":"int","full_declaration":"public static final int TYPE_BCLR = 21","id":211},{"comment":"/**\r\n * Generic 12 component color spaces.\r\n */\r\n@Native\r\n","field_name":"TYPE_CCLR","field_type":"int","full_declaration":"public static final int TYPE_CCLR = 22","id":212},{"comment":"/**\r\n * Generic 13 component color spaces.\r\n */\r\n@Native\r\n","field_name":"TYPE_DCLR","field_type":"int","full_declaration":"public static final int TYPE_DCLR = 23","id":213},{"comment":"/**\r\n * Generic 14 component color spaces.\r\n */\r\n@Native\r\n","field_name":"TYPE_ECLR","field_type":"int","full_declaration":"public static final int TYPE_ECLR = 24","id":214},{"comment":"/**\r\n * Generic 15 component color spaces.\r\n */\r\n@Native\r\n","field_name":"TYPE_FCLR","field_type":"int","full_declaration":"public static final int TYPE_FCLR = 25","id":215},{"comment":"/**\r\n * The sRGB color space defined at\r\n * <A href=\"http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html\">\r\n * http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html\r\n * </A>.\r\n */\r\n@Native\r\n","field_name":"CS_sRGB","field_type":"int","full_declaration":"public static final int CS_sRGB = 1000","id":216},{"comment":"/**\r\n * A built-in linear RGB color space.  This space is based on the\r\n * same RGB primaries as CS_sRGB, but has a linear tone reproduction curve.\r\n */\r\n@Native\r\n","field_name":"CS_LINEAR_RGB","field_type":"int","full_declaration":"public static final int CS_LINEAR_RGB = 1004","id":217},{"comment":"/**\r\n * The CIEXYZ conversion color space defined above.\r\n */\r\n@Native\r\n","field_name":"CS_CIEXYZ","field_type":"int","full_declaration":"public static final int CS_CIEXYZ = 1001","id":218},{"comment":"/**\r\n * The Photo YCC conversion color space.\r\n */\r\n@Native\r\n","field_name":"CS_PYCC","field_type":"int","full_declaration":"public static final int CS_PYCC = 1002","id":219},{"comment":"/**\r\n * The built-in linear gray scale color space.\r\n */\r\n@Native\r\n","field_name":"CS_GRAY","field_type":"int","full_declaration":"public static final int CS_GRAY = 1003","id":220},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"static final long serialVersionUID = 3455889114070431483L","id":221},{"comment":"private ICC_Profile thisProfile;","field_name":"thisProfile","field_type":"java.awt.color.ICC_Profile","full_declaration":"private java.awt.color.ICC_Profile thisProfile","id":222},{"comment":"","field_name":"minVal","field_type":"float[]","full_declaration":"private float[] minVal","id":223},{"comment":"","field_name":"maxVal","field_type":"float[]","full_declaration":"private float[] maxVal","id":224},{"comment":"","field_name":"diffMinMax","field_type":"float[]","full_declaration":"private float[] diffMinMax","id":225},{"comment":"","field_name":"invDiffMinMax","field_type":"float[]","full_declaration":"private float[] invDiffMinMax","id":226},{"comment":"","field_name":"needScaleInit","field_type":"boolean","full_declaration":"private boolean needScaleInit = true","id":227},{"comment":"// {to,from}{RGB,CIEXYZ} methods create and cache these when needed\r\nprivate transient ColorTransform this2srgb;","field_name":"this2srgb","field_type":"sun.java2d.cmm.ColorTransform","full_declaration":"private transient sun.java2d.cmm.ColorTransform this2srgb","id":228},{"comment":"private transient ColorTransform srgb2this;","field_name":"srgb2this","field_type":"sun.java2d.cmm.ColorTransform","full_declaration":"private transient sun.java2d.cmm.ColorTransform srgb2this","id":229},{"comment":"private transient ColorTransform this2xyz;","field_name":"this2xyz","field_type":"sun.java2d.cmm.ColorTransform","full_declaration":"private transient sun.java2d.cmm.ColorTransform this2xyz","id":230},{"comment":"private transient ColorTransform xyz2this;","field_name":"xyz2this","field_type":"sun.java2d.cmm.ColorTransform","full_declaration":"private transient sun.java2d.cmm.ColorTransform xyz2this","id":231},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -3938515861990936766L","id":232},{"comment":"private transient Profile cmmProfile;","field_name":"cmmProfile","field_type":"sun.java2d.cmm.Profile","full_declaration":"private transient sun.java2d.cmm.Profile cmmProfile","id":233},{"comment":"private transient ProfileDeferralInfo deferralInfo;","field_name":"deferralInfo","field_type":"sun.java2d.cmm.ProfileDeferralInfo","full_declaration":"private transient sun.java2d.cmm.ProfileDeferralInfo deferralInfo","id":234},{"comment":"private transient ProfileActivator profileActivator;","field_name":"profileActivator","field_type":"sun.java2d.cmm.ProfileActivator","full_declaration":"private transient sun.java2d.cmm.ProfileActivator profileActivator","id":235},{"comment":"// Registry of singleton profile objects for specific color spaces\r\n// defined in the ColorSpace class (e.g. CS_sRGB), see\r\n// getInstance(int cspace) factory method.\r\nprivate static ICC_Profile sRGBprofile;","field_name":"sRGBprofile","field_type":"java.awt.color.ICC_Profile","full_declaration":"private static java.awt.color.ICC_Profile sRGBprofile","id":236},{"comment":"private static ICC_Profile XYZprofile;","field_name":"XYZprofile","field_type":"java.awt.color.ICC_Profile","full_declaration":"private static java.awt.color.ICC_Profile XYZprofile","id":237},{"comment":"private static ICC_Profile PYCCprofile;","field_name":"PYCCprofile","field_type":"java.awt.color.ICC_Profile","full_declaration":"private static java.awt.color.ICC_Profile PYCCprofile","id":238},{"comment":"private static ICC_Profile GRAYprofile;","field_name":"GRAYprofile","field_type":"java.awt.color.ICC_Profile","full_declaration":"private static java.awt.color.ICC_Profile GRAYprofile","id":239},{"comment":"private static ICC_Profile LINEAR_RGBprofile;","field_name":"LINEAR_RGBprofile","field_type":"java.awt.color.ICC_Profile","full_declaration":"private static java.awt.color.ICC_Profile LINEAR_RGBprofile","id":240},{"comment":"/**\r\n * Profile class is input.\r\n */\r\n","field_name":"CLASS_INPUT","field_type":"int","full_declaration":"public static final int CLASS_INPUT = 0","id":241},{"comment":"/**\r\n * Profile class is display.\r\n */\r\n","field_name":"CLASS_DISPLAY","field_type":"int","full_declaration":"public static final int CLASS_DISPLAY = 1","id":242},{"comment":"/**\r\n * Profile class is output.\r\n */\r\n","field_name":"CLASS_OUTPUT","field_type":"int","full_declaration":"public static final int CLASS_OUTPUT = 2","id":243},{"comment":"/**\r\n * Profile class is device link.\r\n */\r\n","field_name":"CLASS_DEVICELINK","field_type":"int","full_declaration":"public static final int CLASS_DEVICELINK = 3","id":244},{"comment":"/**\r\n * Profile class is color space conversion.\r\n */\r\n","field_name":"CLASS_COLORSPACECONVERSION","field_type":"int","full_declaration":"public static final int CLASS_COLORSPACECONVERSION = 4","id":245},{"comment":"/**\r\n * Profile class is abstract.\r\n */\r\n","field_name":"CLASS_ABSTRACT","field_type":"int","full_declaration":"public static final int CLASS_ABSTRACT = 5","id":246},{"comment":"/**\r\n * Profile class is named color.\r\n */\r\n","field_name":"CLASS_NAMEDCOLOR","field_type":"int","full_declaration":"public static final int CLASS_NAMEDCOLOR = 6","id":247},{"comment":"/**\r\n * ICC Profile Color Space Type Signature: 'XYZ '.\r\n */\r\n","field_name":"icSigXYZData","field_type":"int","full_declaration":"public static final int icSigXYZData = 0x58595A20","id":248},{"comment":"/* 'XYZ ' */\r\n/**\r\n * ICC Profile Color Space Type Signature: 'Lab '.\r\n */\r\n","field_name":"icSigLabData","field_type":"int","full_declaration":"public static final int icSigLabData = 0x4C616220","id":249},{"comment":"/* 'Lab ' */\r\n/**\r\n * ICC Profile Color Space Type Signature: 'Luv '.\r\n */\r\n","field_name":"icSigLuvData","field_type":"int","full_declaration":"public static final int icSigLuvData = 0x4C757620","id":250},{"comment":"/* 'Luv ' */\r\n/**\r\n * ICC Profile Color Space Type Signature: 'YCbr'.\r\n */\r\n","field_name":"icSigYCbCrData","field_type":"int","full_declaration":"public static final int icSigYCbCrData = 0x59436272","id":251},{"comment":"/* 'YCbr' */\r\n/**\r\n * ICC Profile Color Space Type Signature: 'Yxy '.\r\n */\r\n","field_name":"icSigYxyData","field_type":"int","full_declaration":"public static final int icSigYxyData = 0x59787920","id":252},{"comment":"/* 'Yxy ' */\r\n/**\r\n * ICC Profile Color Space Type Signature: 'RGB '.\r\n */\r\n","field_name":"icSigRgbData","field_type":"int","full_declaration":"public static final int icSigRgbData = 0x52474220","id":253},{"comment":"/* 'RGB ' */\r\n/**\r\n * ICC Profile Color Space Type Signature: 'GRAY'.\r\n */\r\n","field_name":"icSigGrayData","field_type":"int","full_declaration":"public static final int icSigGrayData = 0x47524159","id":254},{"comment":"/* 'GRAY' */\r\n/**\r\n * ICC Profile Color Space Type Signature: 'HSV'.\r\n */\r\n","field_name":"icSigHsvData","field_type":"int","full_declaration":"public static final int icSigHsvData = 0x48535620","id":255},{"comment":"/* 'HSV ' */\r\n/**\r\n * ICC Profile Color Space Type Signature: 'HLS'.\r\n */\r\n","field_name":"icSigHlsData","field_type":"int","full_declaration":"public static final int icSigHlsData = 0x484C5320","id":256},{"comment":"/* 'HLS ' */\r\n/**\r\n * ICC Profile Color Space Type Signature: 'CMYK'.\r\n */\r\n","field_name":"icSigCmykData","field_type":"int","full_declaration":"public static final int icSigCmykData = 0x434D594B","id":257},{"comment":"/* 'CMYK' */\r\n/**\r\n * ICC Profile Color Space Type Signature: 'CMY '.\r\n */\r\n","field_name":"icSigCmyData","field_type":"int","full_declaration":"public static final int icSigCmyData = 0x434D5920","id":258},{"comment":"/* 'CMY ' */\r\n/**\r\n * ICC Profile Color Space Type Signature: '2CLR'.\r\n */\r\n","field_name":"icSigSpace2CLR","field_type":"int","full_declaration":"public static final int icSigSpace2CLR = 0x32434C52","id":259},{"comment":"/* '2CLR' */\r\n/**\r\n * ICC Profile Color Space Type Signature: '3CLR'.\r\n */\r\n","field_name":"icSigSpace3CLR","field_type":"int","full_declaration":"public static final int icSigSpace3CLR = 0x33434C52","id":260},{"comment":"/* '3CLR' */\r\n/**\r\n * ICC Profile Color Space Type Signature: '4CLR'.\r\n */\r\n","field_name":"icSigSpace4CLR","field_type":"int","full_declaration":"public static final int icSigSpace4CLR = 0x34434C52","id":261},{"comment":"/* '4CLR' */\r\n/**\r\n * ICC Profile Color Space Type Signature: '5CLR'.\r\n */\r\n","field_name":"icSigSpace5CLR","field_type":"int","full_declaration":"public static final int icSigSpace5CLR = 0x35434C52","id":262},{"comment":"/* '5CLR' */\r\n/**\r\n * ICC Profile Color Space Type Signature: '6CLR'.\r\n */\r\n","field_name":"icSigSpace6CLR","field_type":"int","full_declaration":"public static final int icSigSpace6CLR = 0x36434C52","id":263},{"comment":"/* '6CLR' */\r\n/**\r\n * ICC Profile Color Space Type Signature: '7CLR'.\r\n */\r\n","field_name":"icSigSpace7CLR","field_type":"int","full_declaration":"public static final int icSigSpace7CLR = 0x37434C52","id":264},{"comment":"/* '7CLR' */\r\n/**\r\n * ICC Profile Color Space Type Signature: '8CLR'.\r\n */\r\n","field_name":"icSigSpace8CLR","field_type":"int","full_declaration":"public static final int icSigSpace8CLR = 0x38434C52","id":265},{"comment":"/* '8CLR' */\r\n/**\r\n * ICC Profile Color Space Type Signature: '9CLR'.\r\n */\r\n","field_name":"icSigSpace9CLR","field_type":"int","full_declaration":"public static final int icSigSpace9CLR = 0x39434C52","id":266},{"comment":"/* '9CLR' */\r\n/**\r\n * ICC Profile Color Space Type Signature: 'ACLR'.\r\n */\r\n","field_name":"icSigSpaceACLR","field_type":"int","full_declaration":"public static final int icSigSpaceACLR = 0x41434C52","id":267},{"comment":"/* 'ACLR' */\r\n/**\r\n * ICC Profile Color Space Type Signature: 'BCLR'.\r\n */\r\n","field_name":"icSigSpaceBCLR","field_type":"int","full_declaration":"public static final int icSigSpaceBCLR = 0x42434C52","id":268},{"comment":"/* 'BCLR' */\r\n/**\r\n * ICC Profile Color Space Type Signature: 'CCLR'.\r\n */\r\n","field_name":"icSigSpaceCCLR","field_type":"int","full_declaration":"public static final int icSigSpaceCCLR = 0x43434C52","id":269},{"comment":"/* 'CCLR' */\r\n/**\r\n * ICC Profile Color Space Type Signature: 'DCLR'.\r\n */\r\n","field_name":"icSigSpaceDCLR","field_type":"int","full_declaration":"public static final int icSigSpaceDCLR = 0x44434C52","id":270},{"comment":"/* 'DCLR' */\r\n/**\r\n * ICC Profile Color Space Type Signature: 'ECLR'.\r\n */\r\n","field_name":"icSigSpaceECLR","field_type":"int","full_declaration":"public static final int icSigSpaceECLR = 0x45434C52","id":271},{"comment":"/* 'ECLR' */\r\n/**\r\n * ICC Profile Color Space Type Signature: 'FCLR'.\r\n */\r\n","field_name":"icSigSpaceFCLR","field_type":"int","full_declaration":"public static final int icSigSpaceFCLR = 0x46434C52","id":272},{"comment":"/* 'FCLR' */\r\n/**\r\n * ICC Profile Class Signature: 'scnr'.\r\n */\r\n","field_name":"icSigInputClass","field_type":"int","full_declaration":"public static final int icSigInputClass = 0x73636E72","id":273},{"comment":"/* 'scnr' */\r\n/**\r\n * ICC Profile Class Signature: 'mntr'.\r\n */\r\n","field_name":"icSigDisplayClass","field_type":"int","full_declaration":"public static final int icSigDisplayClass = 0x6D6E7472","id":274},{"comment":"/* 'mntr' */\r\n/**\r\n * ICC Profile Class Signature: 'prtr'.\r\n */\r\n","field_name":"icSigOutputClass","field_type":"int","full_declaration":"public static final int icSigOutputClass = 0x70727472","id":275},{"comment":"/* 'prtr' */\r\n/**\r\n * ICC Profile Class Signature: 'link'.\r\n */\r\n","field_name":"icSigLinkClass","field_type":"int","full_declaration":"public static final int icSigLinkClass = 0x6C696E6B","id":276},{"comment":"/* 'link' */\r\n/**\r\n * ICC Profile Class Signature: 'abst'.\r\n */\r\n","field_name":"icSigAbstractClass","field_type":"int","full_declaration":"public static final int icSigAbstractClass = 0x61627374","id":277},{"comment":"/* 'abst' */\r\n/**\r\n * ICC Profile Class Signature: 'spac'.\r\n */\r\n","field_name":"icSigColorSpaceClass","field_type":"int","full_declaration":"public static final int icSigColorSpaceClass = 0x73706163","id":278},{"comment":"/* 'spac' */\r\n/**\r\n * ICC Profile Class Signature: 'nmcl'.\r\n */\r\n","field_name":"icSigNamedColorClass","field_type":"int","full_declaration":"public static final int icSigNamedColorClass = 0x6e6d636c","id":279},{"comment":"/* 'nmcl' */\r\n/**\r\n * ICC Profile Rendering Intent: Perceptual.\r\n */\r\n","field_name":"icPerceptual","field_type":"int","full_declaration":"public static final int icPerceptual = 0","id":280},{"comment":"/**\r\n * ICC Profile Rendering Intent: RelativeColorimetric.\r\n */\r\n","field_name":"icRelativeColorimetric","field_type":"int","full_declaration":"public static final int icRelativeColorimetric = 1","id":281},{"comment":"/**\r\n * ICC Profile Rendering Intent: Media-RelativeColorimetric.\r\n * @since 1.5\r\n */\r\n","field_name":"icMediaRelativeColorimetric","field_type":"int","full_declaration":"public static final int icMediaRelativeColorimetric = 1","id":282},{"comment":"/**\r\n * ICC Profile Rendering Intent: Saturation.\r\n */\r\n","field_name":"icSaturation","field_type":"int","full_declaration":"public static final int icSaturation = 2","id":283},{"comment":"/**\r\n * ICC Profile Rendering Intent: AbsoluteColorimetric.\r\n */\r\n","field_name":"icAbsoluteColorimetric","field_type":"int","full_declaration":"public static final int icAbsoluteColorimetric = 3","id":284},{"comment":"/**\r\n * ICC Profile Rendering Intent: ICC-AbsoluteColorimetric.\r\n * @since 1.5\r\n */\r\n","field_name":"icICCAbsoluteColorimetric","field_type":"int","full_declaration":"public static final int icICCAbsoluteColorimetric = 3","id":285},{"comment":"/**\r\n * ICC Profile Tag Signature: 'head' - special.\r\n */\r\n","field_name":"icSigHead","field_type":"int","full_declaration":"public static final int icSigHead = 0x68656164","id":286},{"comment":"/* 'head' - special */\r\n/**\r\n * ICC Profile Tag Signature: 'A2B0'.\r\n */\r\n","field_name":"icSigAToB0Tag","field_type":"int","full_declaration":"public static final int icSigAToB0Tag = 0x41324230","id":287},{"comment":"/* 'A2B0' */\r\n/**\r\n * ICC Profile Tag Signature: 'A2B1'.\r\n */\r\n","field_name":"icSigAToB1Tag","field_type":"int","full_declaration":"public static final int icSigAToB1Tag = 0x41324231","id":288},{"comment":"/* 'A2B1' */\r\n/**\r\n * ICC Profile Tag Signature: 'A2B2'.\r\n */\r\n","field_name":"icSigAToB2Tag","field_type":"int","full_declaration":"public static final int icSigAToB2Tag = 0x41324232","id":289},{"comment":"/* 'A2B2' */\r\n/**\r\n * ICC Profile Tag Signature: 'bXYZ'.\r\n */\r\n","field_name":"icSigBlueColorantTag","field_type":"int","full_declaration":"public static final int icSigBlueColorantTag = 0x6258595A","id":290},{"comment":"/* 'bXYZ' */\r\n/**\r\n * ICC Profile Tag Signature: 'bXYZ'.\r\n * @since 1.5\r\n */\r\n","field_name":"icSigBlueMatrixColumnTag","field_type":"int","full_declaration":"public static final int icSigBlueMatrixColumnTag = 0x6258595A","id":291},{"comment":"/* 'bXYZ' */\r\n/**\r\n * ICC Profile Tag Signature: 'bTRC'.\r\n */\r\n","field_name":"icSigBlueTRCTag","field_type":"int","full_declaration":"public static final int icSigBlueTRCTag = 0x62545243","id":292},{"comment":"/* 'bTRC' */\r\n/**\r\n * ICC Profile Tag Signature: 'B2A0'.\r\n */\r\n","field_name":"icSigBToA0Tag","field_type":"int","full_declaration":"public static final int icSigBToA0Tag = 0x42324130","id":293},{"comment":"/* 'B2A0' */\r\n/**\r\n * ICC Profile Tag Signature: 'B2A1'.\r\n */\r\n","field_name":"icSigBToA1Tag","field_type":"int","full_declaration":"public static final int icSigBToA1Tag = 0x42324131","id":294},{"comment":"/* 'B2A1' */\r\n/**\r\n * ICC Profile Tag Signature: 'B2A2'.\r\n */\r\n","field_name":"icSigBToA2Tag","field_type":"int","full_declaration":"public static final int icSigBToA2Tag = 0x42324132","id":295},{"comment":"/* 'B2A2' */\r\n/**\r\n * ICC Profile Tag Signature: 'calt'.\r\n */\r\n","field_name":"icSigCalibrationDateTimeTag","field_type":"int","full_declaration":"public static final int icSigCalibrationDateTimeTag = 0x63616C74","id":296},{"comment":"/* 'calt' */\r\n/**\r\n * ICC Profile Tag Signature: 'targ'.\r\n */\r\n","field_name":"icSigCharTargetTag","field_type":"int","full_declaration":"public static final int icSigCharTargetTag = 0x74617267","id":297},{"comment":"/* 'targ' */\r\n/**\r\n * ICC Profile Tag Signature: 'cprt'.\r\n */\r\n","field_name":"icSigCopyrightTag","field_type":"int","full_declaration":"public static final int icSigCopyrightTag = 0x63707274","id":298},{"comment":"/* 'cprt' */\r\n/**\r\n * ICC Profile Tag Signature: 'crdi'.\r\n */\r\n","field_name":"icSigCrdInfoTag","field_type":"int","full_declaration":"public static final int icSigCrdInfoTag = 0x63726469","id":299},{"comment":"/* 'crdi' */\r\n/**\r\n * ICC Profile Tag Signature: 'dmnd'.\r\n */\r\n","field_name":"icSigDeviceMfgDescTag","field_type":"int","full_declaration":"public static final int icSigDeviceMfgDescTag = 0x646D6E64","id":300},{"comment":"/* 'dmnd' */\r\n/**\r\n * ICC Profile Tag Signature: 'dmdd'.\r\n */\r\n","field_name":"icSigDeviceModelDescTag","field_type":"int","full_declaration":"public static final int icSigDeviceModelDescTag = 0x646D6464","id":301},{"comment":"/* 'dmdd' */\r\n/**\r\n * ICC Profile Tag Signature: 'devs'.\r\n */\r\n","field_name":"icSigDeviceSettingsTag","field_type":"int","full_declaration":"public static final int icSigDeviceSettingsTag = 0x64657673","id":302},{"comment":"/* 'devs' */\r\n/**\r\n * ICC Profile Tag Signature: 'gamt'.\r\n */\r\n","field_name":"icSigGamutTag","field_type":"int","full_declaration":"public static final int icSigGamutTag = 0x67616D74","id":303},{"comment":"/* 'gamt' */\r\n/**\r\n * ICC Profile Tag Signature: 'kTRC'.\r\n */\r\n","field_name":"icSigGrayTRCTag","field_type":"int","full_declaration":"public static final int icSigGrayTRCTag = 0x6b545243","id":304},{"comment":"/* 'kTRC' */\r\n/**\r\n * ICC Profile Tag Signature: 'gXYZ'.\r\n */\r\n","field_name":"icSigGreenColorantTag","field_type":"int","full_declaration":"public static final int icSigGreenColorantTag = 0x6758595A","id":305},{"comment":"/* 'gXYZ' */\r\n/**\r\n * ICC Profile Tag Signature: 'gXYZ'.\r\n * @since 1.5\r\n */\r\n","field_name":"icSigGreenMatrixColumnTag","field_type":"int","full_declaration":"public static final int icSigGreenMatrixColumnTag = 0x6758595A","id":306},{"comment":"/* 'gXYZ' */\r\n/**\r\n * ICC Profile Tag Signature: 'gTRC'.\r\n */\r\n","field_name":"icSigGreenTRCTag","field_type":"int","full_declaration":"public static final int icSigGreenTRCTag = 0x67545243","id":307},{"comment":"/* 'gTRC' */\r\n/**\r\n * ICC Profile Tag Signature: 'lumi'.\r\n */\r\n","field_name":"icSigLuminanceTag","field_type":"int","full_declaration":"public static final int icSigLuminanceTag = 0x6C756d69","id":308},{"comment":"/* 'lumi' */\r\n/**\r\n * ICC Profile Tag Signature: 'meas'.\r\n */\r\n","field_name":"icSigMeasurementTag","field_type":"int","full_declaration":"public static final int icSigMeasurementTag = 0x6D656173","id":309},{"comment":"/* 'meas' */\r\n/**\r\n * ICC Profile Tag Signature: 'bkpt'.\r\n */\r\n","field_name":"icSigMediaBlackPointTag","field_type":"int","full_declaration":"public static final int icSigMediaBlackPointTag = 0x626B7074","id":310},{"comment":"/* 'bkpt' */\r\n/**\r\n * ICC Profile Tag Signature: 'wtpt'.\r\n */\r\n","field_name":"icSigMediaWhitePointTag","field_type":"int","full_declaration":"public static final int icSigMediaWhitePointTag = 0x77747074","id":311},{"comment":"/* 'wtpt' */\r\n/**\r\n * ICC Profile Tag Signature: 'ncl2'.\r\n */\r\n","field_name":"icSigNamedColor2Tag","field_type":"int","full_declaration":"public static final int icSigNamedColor2Tag = 0x6E636C32","id":312},{"comment":"/* 'ncl2' */\r\n/**\r\n * ICC Profile Tag Signature: 'resp'.\r\n */\r\n","field_name":"icSigOutputResponseTag","field_type":"int","full_declaration":"public static final int icSigOutputResponseTag = 0x72657370","id":313},{"comment":"/* 'resp' */\r\n/**\r\n * ICC Profile Tag Signature: 'pre0'.\r\n */\r\n","field_name":"icSigPreview0Tag","field_type":"int","full_declaration":"public static final int icSigPreview0Tag = 0x70726530","id":314},{"comment":"/* 'pre0' */\r\n/**\r\n * ICC Profile Tag Signature: 'pre1'.\r\n */\r\n","field_name":"icSigPreview1Tag","field_type":"int","full_declaration":"public static final int icSigPreview1Tag = 0x70726531","id":315},{"comment":"/* 'pre1' */\r\n/**\r\n * ICC Profile Tag Signature: 'pre2'.\r\n */\r\n","field_name":"icSigPreview2Tag","field_type":"int","full_declaration":"public static final int icSigPreview2Tag = 0x70726532","id":316},{"comment":"/* 'pre2' */\r\n/**\r\n * ICC Profile Tag Signature: 'desc'.\r\n */\r\n","field_name":"icSigProfileDescriptionTag","field_type":"int","full_declaration":"public static final int icSigProfileDescriptionTag = 0x64657363","id":317},{"comment":"/* 'desc' */\r\n/**\r\n * ICC Profile Tag Signature: 'pseq'.\r\n */\r\n","field_name":"icSigProfileSequenceDescTag","field_type":"int","full_declaration":"public static final int icSigProfileSequenceDescTag = 0x70736571","id":318},{"comment":"/* 'pseq' */\r\n/**\r\n * ICC Profile Tag Signature: 'psd0'.\r\n */\r\n","field_name":"icSigPs2CRD0Tag","field_type":"int","full_declaration":"public static final int icSigPs2CRD0Tag = 0x70736430","id":319},{"comment":"/* 'psd0' */\r\n/**\r\n * ICC Profile Tag Signature: 'psd1'.\r\n */\r\n","field_name":"icSigPs2CRD1Tag","field_type":"int","full_declaration":"public static final int icSigPs2CRD1Tag = 0x70736431","id":320},{"comment":"/* 'psd1' */\r\n/**\r\n * ICC Profile Tag Signature: 'psd2'.\r\n */\r\n","field_name":"icSigPs2CRD2Tag","field_type":"int","full_declaration":"public static final int icSigPs2CRD2Tag = 0x70736432","id":321},{"comment":"/* 'psd2' */\r\n/**\r\n * ICC Profile Tag Signature: 'psd3'.\r\n */\r\n","field_name":"icSigPs2CRD3Tag","field_type":"int","full_declaration":"public static final int icSigPs2CRD3Tag = 0x70736433","id":322},{"comment":"/* 'psd3' */\r\n/**\r\n * ICC Profile Tag Signature: 'ps2s'.\r\n */\r\n","field_name":"icSigPs2CSATag","field_type":"int","full_declaration":"public static final int icSigPs2CSATag = 0x70733273","id":323},{"comment":"/* 'ps2s' */\r\n/**\r\n * ICC Profile Tag Signature: 'ps2i'.\r\n */\r\n","field_name":"icSigPs2RenderingIntentTag","field_type":"int","full_declaration":"public static final int icSigPs2RenderingIntentTag = 0x70733269","id":324},{"comment":"/* 'ps2i' */\r\n/**\r\n * ICC Profile Tag Signature: 'rXYZ'.\r\n */\r\n","field_name":"icSigRedColorantTag","field_type":"int","full_declaration":"public static final int icSigRedColorantTag = 0x7258595A","id":325},{"comment":"/* 'rXYZ' */\r\n/**\r\n * ICC Profile Tag Signature: 'rXYZ'.\r\n * @since 1.5\r\n */\r\n","field_name":"icSigRedMatrixColumnTag","field_type":"int","full_declaration":"public static final int icSigRedMatrixColumnTag = 0x7258595A","id":326},{"comment":"/* 'rXYZ' */\r\n/**\r\n * ICC Profile Tag Signature: 'rTRC'.\r\n */\r\n","field_name":"icSigRedTRCTag","field_type":"int","full_declaration":"public static final int icSigRedTRCTag = 0x72545243","id":327},{"comment":"/* 'rTRC' */\r\n/**\r\n * ICC Profile Tag Signature: 'scrd'.\r\n */\r\n","field_name":"icSigScreeningDescTag","field_type":"int","full_declaration":"public static final int icSigScreeningDescTag = 0x73637264","id":328},{"comment":"/* 'scrd' */\r\n/**\r\n * ICC Profile Tag Signature: 'scrn'.\r\n */\r\n","field_name":"icSigScreeningTag","field_type":"int","full_declaration":"public static final int icSigScreeningTag = 0x7363726E","id":329},{"comment":"/* 'scrn' */\r\n/**\r\n * ICC Profile Tag Signature: 'tech'.\r\n */\r\n","field_name":"icSigTechnologyTag","field_type":"int","full_declaration":"public static final int icSigTechnologyTag = 0x74656368","id":330},{"comment":"/* 'tech' */\r\n/**\r\n * ICC Profile Tag Signature: 'bfd '.\r\n */\r\n","field_name":"icSigUcrBgTag","field_type":"int","full_declaration":"public static final int icSigUcrBgTag = 0x62666420","id":331},{"comment":"/* 'bfd ' */\r\n/**\r\n * ICC Profile Tag Signature: 'vued'.\r\n */\r\n","field_name":"icSigViewingCondDescTag","field_type":"int","full_declaration":"public static final int icSigViewingCondDescTag = 0x76756564","id":332},{"comment":"/* 'vued' */\r\n/**\r\n * ICC Profile Tag Signature: 'view'.\r\n */\r\n","field_name":"icSigViewingConditionsTag","field_type":"int","full_declaration":"public static final int icSigViewingConditionsTag = 0x76696577","id":333},{"comment":"/* 'view' */\r\n/**\r\n * ICC Profile Tag Signature: 'chrm'.\r\n */\r\n","field_name":"icSigChromaticityTag","field_type":"int","full_declaration":"public static final int icSigChromaticityTag = 0x6368726d","id":334},{"comment":"/* 'chrm' */\r\n/**\r\n * ICC Profile Tag Signature: 'chad'.\r\n * @since 1.5\r\n */\r\n","field_name":"icSigChromaticAdaptationTag","field_type":"int","full_declaration":"public static final int icSigChromaticAdaptationTag = 0x63686164","id":335},{"comment":"/* 'chad' */\r\n/**\r\n * ICC Profile Tag Signature: 'clro'.\r\n * @since 1.5\r\n */\r\n","field_name":"icSigColorantOrderTag","field_type":"int","full_declaration":"public static final int icSigColorantOrderTag = 0x636C726F","id":336},{"comment":"/* 'clro' */\r\n/**\r\n * ICC Profile Tag Signature: 'clrt'.\r\n * @since 1.5\r\n */\r\n","field_name":"icSigColorantTableTag","field_type":"int","full_declaration":"public static final int icSigColorantTableTag = 0x636C7274","id":337},{"comment":"/* 'clrt' */\r\n/**\r\n * ICC Profile Header Location: profile size in bytes.\r\n */\r\n","field_name":"icHdrSize","field_type":"int","full_declaration":"public static final int icHdrSize = 0","id":338},{"comment":"/* Profile size in bytes */\r\n/**\r\n * ICC Profile Header Location: CMM for this profile.\r\n */\r\n","field_name":"icHdrCmmId","field_type":"int","full_declaration":"public static final int icHdrCmmId = 4","id":339},{"comment":"/* CMM for this profile */\r\n/**\r\n * ICC Profile Header Location: format version number.\r\n */\r\n","field_name":"icHdrVersion","field_type":"int","full_declaration":"public static final int icHdrVersion = 8","id":340},{"comment":"/* Format version number */\r\n/**\r\n * ICC Profile Header Location: type of profile.\r\n */\r\n","field_name":"icHdrDeviceClass","field_type":"int","full_declaration":"public static final int icHdrDeviceClass = 12","id":341},{"comment":"/* Type of profile */\r\n/**\r\n * ICC Profile Header Location: color space of data.\r\n */\r\n","field_name":"icHdrColorSpace","field_type":"int","full_declaration":"public static final int icHdrColorSpace = 16","id":342},{"comment":"/* Color space of data */\r\n/**\r\n * ICC Profile Header Location: PCS - XYZ or Lab only.\r\n */\r\n","field_name":"icHdrPcs","field_type":"int","full_declaration":"public static final int icHdrPcs = 20","id":343},{"comment":"/* PCS - XYZ or Lab only */\r\n/**\r\n * ICC Profile Header Location: date profile was created.\r\n */\r\n","field_name":"icHdrDate","field_type":"int","full_declaration":"public static final int icHdrDate = 24","id":344},{"comment":"/* Date profile was created */\r\n/**\r\n * ICC Profile Header Location: icMagicNumber.\r\n */\r\n","field_name":"icHdrMagic","field_type":"int","full_declaration":"public static final int icHdrMagic = 36","id":345},{"comment":"/* icMagicNumber */\r\n/**\r\n * ICC Profile Header Location: primary platform.\r\n */\r\n","field_name":"icHdrPlatform","field_type":"int","full_declaration":"public static final int icHdrPlatform = 40","id":346},{"comment":"/* Primary Platform */\r\n/**\r\n * ICC Profile Header Location: various bit settings.\r\n */\r\n","field_name":"icHdrFlags","field_type":"int","full_declaration":"public static final int icHdrFlags = 44","id":347},{"comment":"/* Various bit settings */\r\n/**\r\n * ICC Profile Header Location: device manufacturer.\r\n */\r\n","field_name":"icHdrManufacturer","field_type":"int","full_declaration":"public static final int icHdrManufacturer = 48","id":348},{"comment":"/* Device manufacturer */\r\n/**\r\n * ICC Profile Header Location: device model number.\r\n */\r\n","field_name":"icHdrModel","field_type":"int","full_declaration":"public static final int icHdrModel = 52","id":349},{"comment":"/* Device model number */\r\n/**\r\n * ICC Profile Header Location: device attributes.\r\n */\r\n","field_name":"icHdrAttributes","field_type":"int","full_declaration":"public static final int icHdrAttributes = 56","id":350},{"comment":"/* Device attributes */\r\n/**\r\n * ICC Profile Header Location: rendering intent.\r\n */\r\n","field_name":"icHdrRenderingIntent","field_type":"int","full_declaration":"public static final int icHdrRenderingIntent = 64","id":351},{"comment":"/* Rendering intent */\r\n/**\r\n * ICC Profile Header Location: profile illuminant.\r\n */\r\n","field_name":"icHdrIlluminant","field_type":"int","full_declaration":"public static final int icHdrIlluminant = 68","id":352},{"comment":"/* Profile illuminant */\r\n/**\r\n * ICC Profile Header Location: profile creator.\r\n */\r\n","field_name":"icHdrCreator","field_type":"int","full_declaration":"public static final int icHdrCreator = 80","id":353},{"comment":"/* Profile creator */\r\n/**\r\n * ICC Profile Header Location: profile's ID.\r\n * @since 1.5\r\n */\r\n","field_name":"icHdrProfileID","field_type":"int","full_declaration":"public static final int icHdrProfileID = 84","id":354},{"comment":"/* Profile's ID */\r\n/**\r\n * ICC Profile Constant: tag type signaturE.\r\n */\r\n","field_name":"icTagType","field_type":"int","full_declaration":"public static final int icTagType = 0","id":355},{"comment":"/* tag type signature */\r\n/**\r\n * ICC Profile Constant: reserved.\r\n */\r\n","field_name":"icTagReserved","field_type":"int","full_declaration":"public static final int icTagReserved = 4","id":356},{"comment":"/* reserved */\r\n/**\r\n * ICC Profile Constant: curveType count.\r\n */\r\n","field_name":"icCurveCount","field_type":"int","full_declaration":"public static final int icCurveCount = 8","id":357},{"comment":"/* curveType count */\r\n/**\r\n * ICC Profile Constant: curveType data.\r\n */\r\n","field_name":"icCurveData","field_type":"int","full_declaration":"public static final int icCurveData = 12","id":358},{"comment":"/* curveType data */\r\n/**\r\n * ICC Profile Constant: XYZNumber X.\r\n */\r\n","field_name":"icXYZNumberX","field_type":"int","full_declaration":"public static final int icXYZNumberX = 8","id":359},{"comment":"/*\r\n     * Serialization support.\r\n     *\r\n     * Directly deserialized profiles are useless since they are not\r\n     * registered with CMM.  We don't allow constructor to be called\r\n     * directly and instead have clients to call one of getInstance\r\n     * factory methods that will register the profile with CMM.  For\r\n     * deserialization we implement readResolve method that will\r\n     * resolve the bogus deserialized profile object with one obtained\r\n     * with getInstance as well.\r\n     *\r\n     * There're two primary factory methods for construction of ICC\r\n     * profiles: getInstance(int cspace) and getInstance(byte[] data).\r\n     * This implementation of ICC_Profile uses the former to return a\r\n     * cached singleton profile object, other implementations will\r\n     * likely use this technique too.  To preserve the singleton\r\n     * pattern across serialization we serialize cached singleton\r\n     * profiles in such a way that deserializing VM could call\r\n     * getInstance(int cspace) method that will resolve deserialized\r\n     * object into the corresponding singleton as well.\r\n     *\r\n     * Since the singletons are private to ICC_Profile the readResolve\r\n     * method have to be `protected' instead of `private' so that\r\n     * singletons that are instances of subclasses of ICC_Profile\r\n     * could be correctly deserialized.\r\n     */\r\n/**\r\n * Version of the format of additional serialized data in the\r\n * stream.  Version&nbsp;<code>1</code> corresponds to Java&nbsp;2\r\n * Platform,&nbsp;v1.3.\r\n * @since 1.3\r\n * @serial\r\n */\r\n","field_name":"iccProfileSerializedDataVersion","field_type":"int","full_declaration":"private int iccProfileSerializedDataVersion = 1","id":360},{"comment":"// Temporary storage used by readObject to store resolved profile\r\n// (obtained with getInstance) for readResolve to return.\r\nprivate transient ICC_Profile resolvedDeserializedProfile;","field_name":"resolvedDeserializedProfile","field_type":"java.awt.color.ICC_Profile","full_declaration":"private transient java.awt.color.ICC_Profile resolvedDeserializedProfile","id":361},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"static final long serialVersionUID = -1124721290732002649L","id":362},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"static final long serialVersionUID = 8505067385152579334L","id":363},{"comment":"/**\r\n * Used to get a gamma value or TRC for the red component.\r\n */\r\n","field_name":"REDCOMPONENT","field_type":"int","full_declaration":"public static final int REDCOMPONENT = 0","id":364},{"comment":"/**\r\n * Used to get a gamma value or TRC for the green component.\r\n */\r\n","field_name":"GREENCOMPONENT","field_type":"int","full_declaration":"public static final int GREENCOMPONENT = 1","id":365},{"comment":"/**\r\n * Used to get a gamma value or TRC for the blue component.\r\n */\r\n","field_name":"BLUECOMPONENT","field_type":"int","full_declaration":"public static final int BLUECOMPONENT = 2","id":366},{"comment":"/**\r\n * The color white.  In the default sRGB space.\r\n */\r\npublic final static Color white = new Color(255, 255, 255);","field_name":"white","field_type":"java.awt.Color","full_declaration":"public final static java.awt.Color white = new Color(255, 255, 255)","id":367},{"comment":"/**\r\n * The color white.  In the default sRGB space.\r\n * @since 1.4\r\n */\r\npublic final static Color WHITE = white;","field_name":"WHITE","field_type":"java.awt.Color","full_declaration":"public final static java.awt.Color WHITE = white","id":368},{"comment":"/**\r\n * The color light gray.  In the default sRGB space.\r\n */\r\npublic final static Color lightGray = new Color(192, 192, 192);","field_name":"lightGray","field_type":"java.awt.Color","full_declaration":"public final static java.awt.Color lightGray = new Color(192, 192, 192)","id":369},{"comment":"/**\r\n * The color light gray.  In the default sRGB space.\r\n * @since 1.4\r\n */\r\npublic final static Color LIGHT_GRAY = lightGray;","field_name":"LIGHT_GRAY","field_type":"java.awt.Color","full_declaration":"public final static java.awt.Color LIGHT_GRAY = lightGray","id":370},{"comment":"/**\r\n * The color gray.  In the default sRGB space.\r\n */\r\npublic final static Color gray = new Color(128, 128, 128);","field_name":"gray","field_type":"java.awt.Color","full_declaration":"public final static java.awt.Color gray = new Color(128, 128, 128)","id":371},{"comment":"/**\r\n * The color gray.  In the default sRGB space.\r\n * @since 1.4\r\n */\r\npublic final static Color GRAY = gray;","field_name":"GRAY","field_type":"java.awt.Color","full_declaration":"public final static java.awt.Color GRAY = gray","id":372},{"comment":"/**\r\n * The color dark gray.  In the default sRGB space.\r\n */\r\npublic final static Color darkGray = new Color(64, 64, 64);","field_name":"darkGray","field_type":"java.awt.Color","full_declaration":"public final static java.awt.Color darkGray = new Color(64, 64, 64)","id":373},{"comment":"/**\r\n * The color dark gray.  In the default sRGB space.\r\n * @since 1.4\r\n */\r\npublic final static Color DARK_GRAY = darkGray;","field_name":"DARK_GRAY","field_type":"java.awt.Color","full_declaration":"public final static java.awt.Color DARK_GRAY = darkGray","id":374},{"comment":"/**\r\n * The color black.  In the default sRGB space.\r\n */\r\npublic final static Color black = new Color(0, 0, 0);","field_name":"black","field_type":"java.awt.Color","full_declaration":"public final static java.awt.Color black = new Color(0, 0, 0)","id":375},{"comment":"/**\r\n * The color black.  In the default sRGB space.\r\n * @since 1.4\r\n */\r\npublic final static Color BLACK = black;","field_name":"BLACK","field_type":"java.awt.Color","full_declaration":"public final static java.awt.Color BLACK = black","id":376},{"comment":"/**\r\n * The color red.  In the default sRGB space.\r\n */\r\npublic final static Color red = new Color(255, 0, 0);","field_name":"red","field_type":"java.awt.Color","full_declaration":"public final static java.awt.Color red = new Color(255, 0, 0)","id":377},{"comment":"/**\r\n * The color red.  In the default sRGB space.\r\n * @since 1.4\r\n */\r\npublic final static Color RED = red;","field_name":"RED","field_type":"java.awt.Color","full_declaration":"public final static java.awt.Color RED = red","id":378},{"comment":"/**\r\n * The color pink.  In the default sRGB space.\r\n */\r\npublic final static Color pink = new Color(255, 175, 175);","field_name":"pink","field_type":"java.awt.Color","full_declaration":"public final static java.awt.Color pink = new Color(255, 175, 175)","id":379},{"comment":"/**\r\n * The color pink.  In the default sRGB space.\r\n * @since 1.4\r\n */\r\npublic final static Color PINK = pink;","field_name":"PINK","field_type":"java.awt.Color","full_declaration":"public final static java.awt.Color PINK = pink","id":380},{"comment":"/**\r\n * The color orange.  In the default sRGB space.\r\n */\r\npublic final static Color orange = new Color(255, 200, 0);","field_name":"orange","field_type":"java.awt.Color","full_declaration":"public final static java.awt.Color orange = new Color(255, 200, 0)","id":381},{"comment":"/**\r\n * The color orange.  In the default sRGB space.\r\n * @since 1.4\r\n */\r\npublic final static Color ORANGE = orange;","field_name":"ORANGE","field_type":"java.awt.Color","full_declaration":"public final static java.awt.Color ORANGE = orange","id":382},{"comment":"/**\r\n * The color yellow.  In the default sRGB space.\r\n */\r\npublic final static Color yellow = new Color(255, 255, 0);","field_name":"yellow","field_type":"java.awt.Color","full_declaration":"public final static java.awt.Color yellow = new Color(255, 255, 0)","id":383},{"comment":"/**\r\n * The color yellow.  In the default sRGB space.\r\n * @since 1.4\r\n */\r\npublic final static Color YELLOW = yellow;","field_name":"YELLOW","field_type":"java.awt.Color","full_declaration":"public final static java.awt.Color YELLOW = yellow","id":384},{"comment":"/**\r\n * The color green.  In the default sRGB space.\r\n */\r\npublic final static Color green = new Color(0, 255, 0);","field_name":"green","field_type":"java.awt.Color","full_declaration":"public final static java.awt.Color green = new Color(0, 255, 0)","id":385},{"comment":"/**\r\n * The color green.  In the default sRGB space.\r\n * @since 1.4\r\n */\r\npublic final static Color GREEN = green;","field_name":"GREEN","field_type":"java.awt.Color","full_declaration":"public final static java.awt.Color GREEN = green","id":386},{"comment":"/**\r\n * The color magenta.  In the default sRGB space.\r\n */\r\npublic final static Color magenta = new Color(255, 0, 255);","field_name":"magenta","field_type":"java.awt.Color","full_declaration":"public final static java.awt.Color magenta = new Color(255, 0, 255)","id":387},{"comment":"/**\r\n * The color magenta.  In the default sRGB space.\r\n * @since 1.4\r\n */\r\npublic final static Color MAGENTA = magenta;","field_name":"MAGENTA","field_type":"java.awt.Color","full_declaration":"public final static java.awt.Color MAGENTA = magenta","id":388},{"comment":"/**\r\n * The color cyan.  In the default sRGB space.\r\n */\r\npublic final static Color cyan = new Color(0, 255, 255);","field_name":"cyan","field_type":"java.awt.Color","full_declaration":"public final static java.awt.Color cyan = new Color(0, 255, 255)","id":389},{"comment":"/**\r\n * The color cyan.  In the default sRGB space.\r\n * @since 1.4\r\n */\r\npublic final static Color CYAN = cyan;","field_name":"CYAN","field_type":"java.awt.Color","full_declaration":"public final static java.awt.Color CYAN = cyan","id":390},{"comment":"/**\r\n * The color blue.  In the default sRGB space.\r\n */\r\npublic final static Color blue = new Color(0, 0, 255);","field_name":"blue","field_type":"java.awt.Color","full_declaration":"public final static java.awt.Color blue = new Color(0, 0, 255)","id":391},{"comment":"/**\r\n * The color blue.  In the default sRGB space.\r\n * @since 1.4\r\n */\r\npublic final static Color BLUE = blue;","field_name":"BLUE","field_type":"java.awt.Color","full_declaration":"public final static java.awt.Color BLUE = blue","id":392},{"comment":"/**\r\n * The color value.\r\n * @serial\r\n * @see #getRGB\r\n */\r\n","field_name":"value","field_type":"int","full_declaration":"int value","id":393},{"comment":"/**\r\n * The color value in the default sRGB <code>ColorSpace</code> as\r\n * <code>float</code> components (no alpha).\r\n * If <code>null</code> after object construction, this must be an\r\n * sRGB color constructed with 8-bit precision, so compute from the\r\n * <code>int</code> color value.\r\n * @serial\r\n * @see #getRGBColorComponents\r\n * @see #getRGBComponents\r\n */\r\n","field_name":"frgbvalue","field_type":"float[]","full_declaration":"private float[] frgbvalue = null","id":394},{"comment":"/**\r\n * The color value in the native <code>ColorSpace</code> as\r\n * <code>float</code> components (no alpha).\r\n * If <code>null</code> after object construction, this must be an\r\n * sRGB color constructed with 8-bit precision, so compute from the\r\n * <code>int</code> color value.\r\n * @serial\r\n * @see #getRGBColorComponents\r\n * @see #getRGBComponents\r\n */\r\n","field_name":"fvalue","field_type":"float[]","full_declaration":"private float[] fvalue = null","id":395},{"comment":"/**\r\n * The alpha value as a <code>float</code> component.\r\n * If <code>frgbvalue</code> is <code>null</code>, this is not valid\r\n * data, so compute from the <code>int</code> color value.\r\n * @serial\r\n * @see #getRGBComponents\r\n * @see #getComponents\r\n */\r\n","field_name":"falpha","field_type":"float","full_declaration":"private float falpha = 0.0f","id":396},{"comment":"/**\r\n * The <code>ColorSpace</code>.  If <code>null</code>, then it's\r\n * default is sRGB.\r\n * @serial\r\n * @see #getColor\r\n * @see #getColorSpace\r\n * @see #getColorComponents\r\n */\r\nprivate ColorSpace cs = null;","field_name":"cs","field_type":"java.awt.color.ColorSpace","full_declaration":"private java.awt.color.ColorSpace cs = null","id":397},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 118526816881161077L","id":398},{"comment":"","field_name":"FACTOR","field_type":"double","full_declaration":"private static final double FACTOR = 0.7","id":399},{"comment":"","field_name":"color","field_type":"int","full_declaration":"int color","id":400},{"comment":"WritableRaster savedTile;","field_name":"savedTile","field_type":"java.awt.image.WritableRaster","full_declaration":"java.awt.image.WritableRaster savedTile","id":401},{"comment":"private static final PlatformLogger log = PlatformLogger.getLogger(\"java.awt.Component\");","field_name":"log","field_type":"sun.util.logging.PlatformLogger","full_declaration":"private static final sun.util.logging.PlatformLogger log = PlatformLogger.getLogger(\"java.awt.Component\")","id":402},{"comment":"private static final PlatformLogger eventLog = PlatformLogger.getLogger(\"java.awt.event.Component\");","field_name":"eventLog","field_type":"sun.util.logging.PlatformLogger","full_declaration":"private static final sun.util.logging.PlatformLogger eventLog = PlatformLogger.getLogger(\"java.awt.event.Component\")","id":403},{"comment":"private static final PlatformLogger focusLog = PlatformLogger.getLogger(\"java.awt.focus.Component\");","field_name":"focusLog","field_type":"sun.util.logging.PlatformLogger","full_declaration":"private static final sun.util.logging.PlatformLogger focusLog = PlatformLogger.getLogger(\"java.awt.focus.Component\")","id":404},{"comment":"private static final PlatformLogger mixingLog = PlatformLogger.getLogger(\"java.awt.mixing.Component\");","field_name":"mixingLog","field_type":"sun.util.logging.PlatformLogger","full_declaration":"private static final sun.util.logging.PlatformLogger mixingLog = PlatformLogger.getLogger(\"java.awt.mixing.Component\")","id":405},{"comment":"/**\r\n * The peer of the component. The peer implements the component's\r\n * behavior. The peer is set when the <code>Component</code> is\r\n * added to a container that also is a peer.\r\n * @see #addNotify\r\n * @see #removeNotify\r\n */\r\ntransient ComponentPeer peer;","field_name":"peer","field_type":"java.awt.peer.ComponentPeer","full_declaration":"transient java.awt.peer.ComponentPeer peer","id":406},{"comment":"/**\r\n * The parent of the object. It may be <code>null</code>\r\n * for top-level components.\r\n * @see #getParent\r\n */\r\ntransient Container parent;","field_name":"parent","field_type":"java.awt.Container","full_declaration":"transient java.awt.Container parent","id":407},{"comment":"/**\r\n * The <code>AppContext</code> of the component. Applets/Plugin may\r\n * change the AppContext.\r\n */\r\ntransient AppContext appContext;","field_name":"appContext","field_type":"sun.awt.AppContext","full_declaration":"transient sun.awt.AppContext appContext","id":408},{"comment":"/**\r\n * The x position of the component in the parent's coordinate system.\r\n *\r\n * @serial\r\n * @see #getLocation\r\n */\r\n","field_name":"x","field_type":"int","full_declaration":"int x","id":409},{"comment":"/**\r\n * The y position of the component in the parent's coordinate system.\r\n *\r\n * @serial\r\n * @see #getLocation\r\n */\r\n","field_name":"y","field_type":"int","full_declaration":"int y","id":410},{"comment":"/**\r\n * The width of the component.\r\n *\r\n * @serial\r\n * @see #getSize\r\n */\r\n","field_name":"width","field_type":"int","full_declaration":"int width","id":411},{"comment":"/**\r\n * The height of the component.\r\n *\r\n * @serial\r\n * @see #getSize\r\n */\r\n","field_name":"height","field_type":"int","full_declaration":"int height","id":412},{"comment":"/**\r\n * The foreground color for this component.\r\n * <code>foreground</code> can be <code>null</code>.\r\n *\r\n * @serial\r\n * @see #getForeground\r\n * @see #setForeground\r\n */\r\nColor foreground;","field_name":"foreground","field_type":"java.awt.Color","full_declaration":"java.awt.Color foreground","id":413},{"comment":"/**\r\n * The background color for this component.\r\n * <code>background</code> can be <code>null</code>.\r\n *\r\n * @serial\r\n * @see #getBackground\r\n * @see #setBackground\r\n */\r\nColor background;","field_name":"background","field_type":"java.awt.Color","full_declaration":"java.awt.Color background","id":414},{"comment":"/**\r\n * The font used by this component.\r\n * The <code>font</code> can be <code>null</code>.\r\n *\r\n * @serial\r\n * @see #getFont\r\n * @see #setFont\r\n */\r\nvolatile Font font;","field_name":"font","field_type":"java.awt.Font","full_declaration":"volatile java.awt.Font font","id":415},{"comment":"/**\r\n * The font which the peer is currently using.\r\n * (<code>null</code> if no peer exists.)\r\n */\r\nFont peerFont;","field_name":"peerFont","field_type":"java.awt.Font","full_declaration":"java.awt.Font peerFont","id":416},{"comment":"/**\r\n * The cursor displayed when pointer is over this component.\r\n * This value can be <code>null</code>.\r\n *\r\n * @serial\r\n * @see #getCursor\r\n * @see #setCursor\r\n */\r\nCursor cursor;","field_name":"cursor","field_type":"java.awt.Cursor","full_declaration":"java.awt.Cursor cursor","id":417},{"comment":"/**\r\n * The locale for the component.\r\n *\r\n * @serial\r\n * @see #getLocale\r\n * @see #setLocale\r\n */\r\nLocale locale;","field_name":"locale","field_type":"java.util.Locale","full_declaration":"java.util.Locale locale","id":418},{"comment":"/**\r\n * A reference to a <code>GraphicsConfiguration</code> object\r\n * used to describe the characteristics of a graphics\r\n * destination.\r\n * This value can be <code>null</code>.\r\n *\r\n * @since 1.3\r\n * @serial\r\n * @see GraphicsConfiguration\r\n * @see #getGraphicsConfiguration\r\n */\r\nprivate transient volatile GraphicsConfiguration graphicsConfig;","field_name":"graphicsConfig","field_type":"java.awt.GraphicsConfiguration","full_declaration":"private transient volatile java.awt.GraphicsConfiguration graphicsConfig","id":419},{"comment":"/**\r\n * A reference to a <code>BufferStrategy</code> object\r\n * used to manipulate the buffers on this component.\r\n *\r\n * @since 1.4\r\n * @see java.awt.image.BufferStrategy\r\n * @see #getBufferStrategy()\r\n */\r\ntransient BufferStrategy bufferStrategy = null;","field_name":"bufferStrategy","field_type":"java.awt.image.BufferStrategy","full_declaration":"transient java.awt.image.BufferStrategy bufferStrategy = null","id":420},{"comment":"/**\r\n * True when the object should ignore all repaint events.\r\n *\r\n * @since 1.4\r\n * @serial\r\n * @see #setIgnoreRepaint\r\n * @see #getIgnoreRepaint\r\n */\r\n","field_name":"ignoreRepaint","field_type":"boolean","full_declaration":"boolean ignoreRepaint = false","id":421},{"comment":"/**\r\n * True when the object is visible. An object that is not\r\n * visible is not drawn on the screen.\r\n *\r\n * @serial\r\n * @see #isVisible\r\n * @see #setVisible\r\n */\r\n","field_name":"visible","field_type":"boolean","full_declaration":"boolean visible = true","id":422},{"comment":"/**\r\n * True when the object is enabled. An object that is not\r\n * enabled does not interact with the user.\r\n *\r\n * @serial\r\n * @see #isEnabled\r\n * @see #setEnabled\r\n */\r\n","field_name":"enabled","field_type":"boolean","full_declaration":"boolean enabled = true","id":423},{"comment":"/**\r\n * True when the object is valid. An invalid object needs to\r\n * be layed out. This flag is set to false when the object\r\n * size is changed.\r\n *\r\n * @serial\r\n * @see #isValid\r\n * @see #validate\r\n * @see #invalidate\r\n */\r\n","field_name":"valid","field_type":"boolean","full_declaration":"private volatile boolean valid = false","id":424},{"comment":"/**\r\n * The <code>DropTarget</code> associated with this component.\r\n *\r\n * @since 1.2\r\n * @serial\r\n * @see #setDropTarget\r\n * @see #getDropTarget\r\n */\r\nDropTarget dropTarget;","field_name":"dropTarget","field_type":"java.awt.dnd.DropTarget","full_declaration":"java.awt.dnd.DropTarget dropTarget","id":425},{"comment":"/**\r\n * @serial\r\n * @see #add\r\n */\r\nVector<PopupMenu> popups;","field_name":"popups","field_type":"java.util.Vector","full_declaration":"java.util.Vector popups","id":426},{"comment":"/**\r\n * A component's name.\r\n * This field can be <code>null</code>.\r\n *\r\n * @serial\r\n * @see #getName\r\n * @see #setName(String)\r\n */\r\nprivate String name;","field_name":"name","field_type":"java.lang.String","full_declaration":"private java.lang.String name","id":427},{"comment":"/**\r\n * A bool to determine whether the name has\r\n * been set explicitly. <code>nameExplicitlySet</code> will\r\n * be false if the name has not been set and\r\n * true if it has.\r\n *\r\n * @serial\r\n * @see #getName\r\n * @see #setName(String)\r\n */\r\n","field_name":"nameExplicitlySet","field_type":"boolean","full_declaration":"private boolean nameExplicitlySet = false","id":428},{"comment":"/**\r\n * Indicates whether this Component can be focused.\r\n *\r\n * @serial\r\n * @see #setFocusable\r\n * @see #isFocusable\r\n * @since 1.4\r\n */\r\n","field_name":"focusable","field_type":"boolean","full_declaration":"private boolean focusable = true","id":429},{"comment":"","field_name":"FOCUS_TRAVERSABLE_UNKNOWN","field_type":"int","full_declaration":"private static final int FOCUS_TRAVERSABLE_UNKNOWN = 0","id":430},{"comment":"","field_name":"FOCUS_TRAVERSABLE_DEFAULT","field_type":"int","full_declaration":"private static final int FOCUS_TRAVERSABLE_DEFAULT = 1","id":431},{"comment":"","field_name":"FOCUS_TRAVERSABLE_SET","field_type":"int","full_declaration":"private static final int FOCUS_TRAVERSABLE_SET = 2","id":432},{"comment":"/**\r\n * Tracks whether this Component is relying on default focus travesability.\r\n *\r\n * @serial\r\n * @since 1.4\r\n */\r\n","field_name":"isFocusTraversableOverridden","field_type":"int","full_declaration":"private int isFocusTraversableOverridden = FOCUS_TRAVERSABLE_UNKNOWN","id":433},{"comment":"/**\r\n * The focus traversal keys. These keys will generate focus traversal\r\n * behavior for Components for which focus traversal keys are enabled. If a\r\n * value of null is specified for a traversal key, this Component inherits\r\n * that traversal key from its parent. If all ancestors of this Component\r\n * have null specified for that traversal key, then the current\r\n * KeyboardFocusManager's default traversal key is used.\r\n *\r\n * @serial\r\n * @see #setFocusTraversalKeys\r\n * @see #getFocusTraversalKeys\r\n * @since 1.4\r\n */\r\n","field_name":"focusTraversalKeys","field_type":"Set<AWTKeyStroke>[]","full_declaration":"Set<AWTKeyStroke>[] focusTraversalKeys","id":434},{"comment":"","field_name":"focusTraversalKeyPropertyNames","field_type":"String[]","full_declaration":"private static final String[] focusTraversalKeyPropertyNames = { \"forwardFocusTraversalKeys\", \"backwardFocusTraversalKeys\", \"upCycleFocusTraversalKeys\", \"downCycleFocusTraversalKeys\" }","id":435},{"comment":"/**\r\n * Indicates whether focus traversal keys are enabled for this Component.\r\n * Components for which focus traversal keys are disabled receive key\r\n * events for focus traversal keys. Components for which focus traversal\r\n * keys are enabled do not see these events; instead, the events are\r\n * automatically converted to traversal operations.\r\n *\r\n * @serial\r\n * @see #setFocusTraversalKeysEnabled\r\n * @see #getFocusTraversalKeysEnabled\r\n * @since 1.4\r\n */\r\n","field_name":"focusTraversalKeysEnabled","field_type":"boolean","full_declaration":"private boolean focusTraversalKeysEnabled = true","id":436},{"comment":"/**\r\n * The locking object for AWT component-tree and layout operations.\r\n *\r\n * @see #getTreeLock\r\n */\r\nstatic final Object LOCK = new AWTTreeLock();","field_name":"LOCK","field_type":"java.lang.Object","full_declaration":"static final java.lang.Object LOCK = new AWTTreeLock()","id":437},{"comment":"/*\r\n     * The component's AccessControlContext.\r\n     */\r\nprivate transient volatile AccessControlContext acc = AccessController.getContext();","field_name":"acc","field_type":"java.security.AccessControlContext","full_declaration":"private transient volatile java.security.AccessControlContext acc = AccessController.getContext()","id":438},{"comment":"/**\r\n * Minimum size.\r\n * (This field perhaps should have been transient).\r\n *\r\n * @serial\r\n */\r\nDimension minSize;","field_name":"minSize","field_type":"java.awt.Dimension","full_declaration":"java.awt.Dimension minSize","id":439},{"comment":"/**\r\n * Whether or not setMinimumSize has been invoked with a non-null value.\r\n */\r\n","field_name":"minSizeSet","field_type":"boolean","full_declaration":"boolean minSizeSet","id":440},{"comment":"/**\r\n * Preferred size.\r\n * (This field perhaps should have been transient).\r\n *\r\n * @serial\r\n */\r\nDimension prefSize;","field_name":"prefSize","field_type":"java.awt.Dimension","full_declaration":"java.awt.Dimension prefSize","id":441},{"comment":"/**\r\n * Whether or not setPreferredSize has been invoked with a non-null value.\r\n */\r\n","field_name":"prefSizeSet","field_type":"boolean","full_declaration":"boolean prefSizeSet","id":442},{"comment":"/**\r\n * Maximum size\r\n *\r\n * @serial\r\n */\r\nDimension maxSize;","field_name":"maxSize","field_type":"java.awt.Dimension","full_declaration":"java.awt.Dimension maxSize","id":443},{"comment":"/**\r\n * Whether or not setMaximumSize has been invoked with a non-null value.\r\n */\r\n","field_name":"maxSizeSet","field_type":"boolean","full_declaration":"boolean maxSizeSet","id":444},{"comment":"/**\r\n * The orientation for this component.\r\n * @see #getComponentOrientation\r\n * @see #setComponentOrientation\r\n */\r\ntransient ComponentOrientation componentOrientation = ComponentOrientation.UNKNOWN;","field_name":"componentOrientation","field_type":"java.awt.ComponentOrientation","full_declaration":"transient java.awt.ComponentOrientation componentOrientation = ComponentOrientation.UNKNOWN","id":445},{"comment":"/**\r\n * <code>newEventsOnly</code> will be true if the event is\r\n * one of the event types enabled for the component.\r\n * It will then allow for normal processing to\r\n * continue.  If it is false the event is passed\r\n * to the component's parent and up the ancestor\r\n * tree until the event has been consumed.\r\n *\r\n * @serial\r\n * @see #dispatchEvent\r\n */\r\n","field_name":"newEventsOnly","field_type":"boolean","full_declaration":"boolean newEventsOnly = false","id":446},{"comment":"transient ComponentListener componentListener;","field_name":"componentListener","field_type":"java.awt.event.ComponentListener","full_declaration":"transient java.awt.event.ComponentListener componentListener","id":447},{"comment":"transient FocusListener focusListener;","field_name":"focusListener","field_type":"java.awt.event.FocusListener","full_declaration":"transient java.awt.event.FocusListener focusListener","id":448},{"comment":"transient HierarchyListener hierarchyListener;","field_name":"hierarchyListener","field_type":"java.awt.event.HierarchyListener","full_declaration":"transient java.awt.event.HierarchyListener hierarchyListener","id":449},{"comment":"transient HierarchyBoundsListener hierarchyBoundsListener;","field_name":"hierarchyBoundsListener","field_type":"java.awt.event.HierarchyBoundsListener","full_declaration":"transient java.awt.event.HierarchyBoundsListener hierarchyBoundsListener","id":450},{"comment":"transient KeyListener keyListener;","field_name":"keyListener","field_type":"java.awt.event.KeyListener","full_declaration":"transient java.awt.event.KeyListener keyListener","id":451},{"comment":"transient MouseListener mouseListener;","field_name":"mouseListener","field_type":"java.awt.event.MouseListener","full_declaration":"transient java.awt.event.MouseListener mouseListener","id":452},{"comment":"transient MouseMotionListener mouseMotionListener;","field_name":"mouseMotionListener","field_type":"java.awt.event.MouseMotionListener","full_declaration":"transient java.awt.event.MouseMotionListener mouseMotionListener","id":453},{"comment":"transient MouseWheelListener mouseWheelListener;","field_name":"mouseWheelListener","field_type":"java.awt.event.MouseWheelListener","full_declaration":"transient java.awt.event.MouseWheelListener mouseWheelListener","id":454},{"comment":"transient InputMethodListener inputMethodListener;","field_name":"inputMethodListener","field_type":"java.awt.event.InputMethodListener","full_declaration":"transient java.awt.event.InputMethodListener inputMethodListener","id":455},{"comment":"transient RuntimeException windowClosingException = null;","field_name":"windowClosingException","field_type":"java.lang.RuntimeException","full_declaration":"transient java.lang.RuntimeException windowClosingException = null","id":456},{"comment":"/**\r\n * Internal, constants for serialization\r\n */\r\nfinal static String actionListenerK = \"actionL\";","field_name":"actionListenerK","field_type":"java.lang.String","full_declaration":"final static java.lang.String actionListenerK = \"actionL\"","id":457},{"comment":"final static String adjustmentListenerK = \"adjustmentL\";","field_name":"adjustmentListenerK","field_type":"java.lang.String","full_declaration":"final static java.lang.String adjustmentListenerK = \"adjustmentL\"","id":458},{"comment":"final static String componentListenerK = \"componentL\";","field_name":"componentListenerK","field_type":"java.lang.String","full_declaration":"final static java.lang.String componentListenerK = \"componentL\"","id":459},{"comment":"final static String containerListenerK = \"containerL\";","field_name":"containerListenerK","field_type":"java.lang.String","full_declaration":"final static java.lang.String containerListenerK = \"containerL\"","id":460},{"comment":"final static String focusListenerK = \"focusL\";","field_name":"focusListenerK","field_type":"java.lang.String","full_declaration":"final static java.lang.String focusListenerK = \"focusL\"","id":461},{"comment":"final static String itemListenerK = \"itemL\";","field_name":"itemListenerK","field_type":"java.lang.String","full_declaration":"final static java.lang.String itemListenerK = \"itemL\"","id":462},{"comment":"final static String keyListenerK = \"keyL\";","field_name":"keyListenerK","field_type":"java.lang.String","full_declaration":"final static java.lang.String keyListenerK = \"keyL\"","id":463},{"comment":"final static String mouseListenerK = \"mouseL\";","field_name":"mouseListenerK","field_type":"java.lang.String","full_declaration":"final static java.lang.String mouseListenerK = \"mouseL\"","id":464},{"comment":"final static String mouseMotionListenerK = \"mouseMotionL\";","field_name":"mouseMotionListenerK","field_type":"java.lang.String","full_declaration":"final static java.lang.String mouseMotionListenerK = \"mouseMotionL\"","id":465},{"comment":"final static String mouseWheelListenerK = \"mouseWheelL\";","field_name":"mouseWheelListenerK","field_type":"java.lang.String","full_declaration":"final static java.lang.String mouseWheelListenerK = \"mouseWheelL\"","id":466},{"comment":"final static String textListenerK = \"textL\";","field_name":"textListenerK","field_type":"java.lang.String","full_declaration":"final static java.lang.String textListenerK = \"textL\"","id":467},{"comment":"final static String ownedWindowK = \"ownedL\";","field_name":"ownedWindowK","field_type":"java.lang.String","full_declaration":"final static java.lang.String ownedWindowK = \"ownedL\"","id":468},{"comment":"final static String windowListenerK = \"windowL\";","field_name":"windowListenerK","field_type":"java.lang.String","full_declaration":"final static java.lang.String windowListenerK = \"windowL\"","id":469},{"comment":"final static String inputMethodListenerK = \"inputMethodL\";","field_name":"inputMethodListenerK","field_type":"java.lang.String","full_declaration":"final static java.lang.String inputMethodListenerK = \"inputMethodL\"","id":470},{"comment":"final static String hierarchyListenerK = \"hierarchyL\";","field_name":"hierarchyListenerK","field_type":"java.lang.String","full_declaration":"final static java.lang.String hierarchyListenerK = \"hierarchyL\"","id":471},{"comment":"final static String hierarchyBoundsListenerK = \"hierarchyBoundsL\";","field_name":"hierarchyBoundsListenerK","field_type":"java.lang.String","full_declaration":"final static java.lang.String hierarchyBoundsListenerK = \"hierarchyBoundsL\"","id":472},{"comment":"final static String windowStateListenerK = \"windowStateL\";","field_name":"windowStateListenerK","field_type":"java.lang.String","full_declaration":"final static java.lang.String windowStateListenerK = \"windowStateL\"","id":473},{"comment":"final static String windowFocusListenerK = \"windowFocusL\";","field_name":"windowFocusListenerK","field_type":"java.lang.String","full_declaration":"final static java.lang.String windowFocusListenerK = \"windowFocusL\"","id":474},{"comment":"/**\r\n * The <code>eventMask</code> is ONLY set by subclasses via\r\n * <code>enableEvents</code>.\r\n * The mask should NOT be set when listeners are registered\r\n * so that we can distinguish the difference between when\r\n * listeners request events and subclasses request them.\r\n * One bit is used to indicate whether input methods are\r\n * enabled; this bit is set by <code>enableInputMethods</code> and is\r\n * on by default.\r\n *\r\n * @serial\r\n * @see #enableInputMethods\r\n * @see AWTEvent\r\n */\r\n","field_name":"eventMask","field_type":"long","full_declaration":"long eventMask = AWTEvent.INPUT_METHODS_ENABLED_MASK","id":475},{"comment":"/**\r\n * Static properties for incremental drawing.\r\n * @see #imageUpdate\r\n */\r\n","field_name":"isInc","field_type":"boolean","full_declaration":"static boolean isInc","id":476},{"comment":"","field_name":"incRate","field_type":"int","full_declaration":"static int incRate","id":477},{"comment":"/**\r\n * Ease-of-use constant for <code>getAlignmentY()</code>.\r\n * Specifies an alignment to the top of the component.\r\n * @see     #getAlignmentY\r\n */\r\n","field_name":"TOP_ALIGNMENT","field_type":"float","full_declaration":"public static final float TOP_ALIGNMENT = 0.0f","id":478},{"comment":"/**\r\n * Ease-of-use constant for <code>getAlignmentY</code> and\r\n * <code>getAlignmentX</code>. Specifies an alignment to\r\n * the center of the component\r\n * @see     #getAlignmentX\r\n * @see     #getAlignmentY\r\n */\r\n","field_name":"CENTER_ALIGNMENT","field_type":"float","full_declaration":"public static final float CENTER_ALIGNMENT = 0.5f","id":479},{"comment":"/**\r\n * Ease-of-use constant for <code>getAlignmentY</code>.\r\n * Specifies an alignment to the bottom of the component.\r\n * @see     #getAlignmentY\r\n */\r\n","field_name":"BOTTOM_ALIGNMENT","field_type":"float","full_declaration":"public static final float BOTTOM_ALIGNMENT = 1.0f","id":480},{"comment":"/**\r\n * Ease-of-use constant for <code>getAlignmentX</code>.\r\n * Specifies an alignment to the left side of the component.\r\n * @see     #getAlignmentX\r\n */\r\n","field_name":"LEFT_ALIGNMENT","field_type":"float","full_declaration":"public static final float LEFT_ALIGNMENT = 0.0f","id":481},{"comment":"/**\r\n * Ease-of-use constant for <code>getAlignmentX</code>.\r\n * Specifies an alignment to the right side of the component.\r\n * @see     #getAlignmentX\r\n */\r\n","field_name":"RIGHT_ALIGNMENT","field_type":"float","full_declaration":"public static final float RIGHT_ALIGNMENT = 1.0f","id":482},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -7644114512714619750L","id":483},{"comment":"/**\r\n * If any <code>PropertyChangeListeners</code> have been registered,\r\n * the <code>changeSupport</code> field describes them.\r\n *\r\n * @serial\r\n * @since 1.2\r\n * @see #addPropertyChangeListener\r\n * @see #removePropertyChangeListener\r\n * @see #firePropertyChange\r\n */\r\nprivate PropertyChangeSupport changeSupport;","field_name":"changeSupport","field_type":"java.beans.PropertyChangeSupport","full_declaration":"private java.beans.PropertyChangeSupport changeSupport","id":484},{"comment":"/*\r\n     * In some cases using \"this\" as an object to synchronize by\r\n     * can lead to a deadlock if client code also uses synchronization\r\n     * by a component object. For every such situation revealed we should\r\n     * consider possibility of replacing \"this\" with the package private\r\n     * objectLock object introduced below. So far there're 3 issues known:\r\n     * - CR 6708322 (the getName/setName methods);\r\n     * - CR 6608764 (the PropertyChangeListener machinery);\r\n     * - CR 7108598 (the Container.paint/KeyboardFocusManager.clearMostRecentFocusOwner methods).\r\n     *\r\n     * Note: this field is considered final, though readObject() prohibits\r\n     * initializing final fields.\r\n     */\r\nprivate transient Object objectLock = new Object();","field_name":"objectLock","field_type":"java.lang.Object","full_declaration":"private transient java.lang.Object objectLock = new Object()","id":485},{"comment":"","field_name":"isPacked","field_type":"boolean","full_declaration":"boolean isPacked = false","id":486},{"comment":"/**\r\n * Pseudoparameter for direct Geometry API (setLocation, setBounds setSize\r\n * to signal setBounds what's changing. Should be used under TreeLock.\r\n * This is only needed due to the inability to change the cross-calling\r\n * order of public and deprecated methods.\r\n */\r\n","field_name":"boundsOp","field_type":"int","full_declaration":"private int boundsOp = ComponentPeer.DEFAULT_OPERATION","id":487},{"comment":"/*\r\n     * The shape set with the applyCompoundShape() method. It uncludes the result\r\n     * of the HW/LW mixing related shape computation. It may also include\r\n     * the user-specified shape of the component.\r\n     * The 'null' value means the component has normal shape (or has no shape at all)\r\n     * and applyCompoundShape() will skip the following shape identical to normal.\r\n     */\r\nprivate transient Region compoundShape = null;","field_name":"compoundShape","field_type":"sun.java2d.pipe.Region","full_declaration":"private transient sun.java2d.pipe.Region compoundShape = null","id":488},{"comment":"/*\r\n     * Represents the shape of this lightweight component to be cut out from\r\n     * heavyweight components should they intersect. Possible values:\r\n     *    1. null - consider the shape rectangular\r\n     *    2. EMPTY_REGION - nothing gets cut out (children still get cut out)\r\n     *    3. non-empty - this shape gets cut out.\r\n     */\r\nprivate transient Region mixingCutoutRegion = null;","field_name":"mixingCutoutRegion","field_type":"sun.java2d.pipe.Region","full_declaration":"private transient sun.java2d.pipe.Region mixingCutoutRegion = null","id":489},{"comment":"/*\r\n     * Indicates whether addNotify() is complete\r\n     * (i.e. the peer is created).\r\n     */\r\n","field_name":"isAddNotifyComplete","field_type":"boolean","full_declaration":"private transient boolean isAddNotifyComplete = false","id":490},{"comment":"// Whether this Component has had the background erase flag\r\n// specified via SunToolkit.disableBackgroundErase(). This is\r\n// needed in order to make this function work on X11 platforms,\r\n// where currently there is no chance to interpose on the creation\r\n// of the peer and therefore the call to XSetBackground.\r\n","field_name":"backgroundEraseDisabled","field_type":"boolean","full_declaration":"transient boolean backgroundEraseDisabled","id":491},{"comment":"","field_name":"eventCache","field_type":"sun.awt.EventQueueItem[]","full_declaration":"transient sun.awt.EventQueueItem[] eventCache","id":492},{"comment":"/**\r\n * @see #isCoalescingEnabled\r\n * @see #checkCoalescing\r\n */\r\n","field_name":"coalescingEnabled","field_type":"boolean","full_declaration":"transient private boolean coalescingEnabled = checkCoalescing()","id":493},{"comment":"/**\r\n * Weak map of known coalesceEvent overriders.\r\n * Value indicates whether overriden.\r\n * Bootstrap classes are not included.\r\n */\r\nprivate static final Map<Class<?>, Boolean> coalesceMap = new java.util.WeakHashMap<Class<?>, Boolean>();","field_name":"coalesceMap","field_type":"java.util.Map","full_declaration":"private static final java.util.Map coalesceMap = new java.util.WeakHashMap<Class<?>, Boolean>()","id":494},{"comment":"/**\r\n * Parameter types of coalesceEvents(AWTEvent,AWTEVent).\r\n */\r\n","field_name":"coalesceEventsParams","field_type":"Class[]","full_declaration":"private static final Class[] coalesceEventsParams = { AWTEvent.class, AWTEvent.class }","id":495},{"comment":"private static RequestFocusController requestFocusController = new DummyRequestFocusController();","field_name":"requestFocusController","field_type":"sun.awt.RequestFocusController","full_declaration":"private static sun.awt.RequestFocusController requestFocusController = new DummyRequestFocusController()","id":496},{"comment":"/*\r\n     * Used to disallow auto-focus-transfer on disposal of the focus owner\r\n     * in the process of disposing its parent container.\r\n     */\r\n","field_name":"autoFocusTransferOnDisposal","field_type":"boolean","full_declaration":"private boolean autoFocusTransferOnDisposal = true","id":497},{"comment":"// Serialization support.\r\n/**\r\n * Component Serialized Data Version.\r\n *\r\n * @serial\r\n */\r\n","field_name":"componentSerializedDataVersion","field_type":"int","full_declaration":"private int componentSerializedDataVersion = 4","id":498},{"comment":"/*\r\n     * --- Accessibility Support ---\r\n     *\r\n     *  Component will contain all of the methods in interface Accessible,\r\n     *  though it won't actually implement the interface - that will be up\r\n     *  to the individual objects which extend Component.\r\n     */\r\n/**\r\n * The {@code AccessibleContext} associated with this {@code Component}.\r\n */\r\nprotected AccessibleContext accessibleContext = null;","field_name":"accessibleContext","field_type":"javax.accessibility.AccessibleContext","full_declaration":"protected javax.accessibility.AccessibleContext accessibleContext = null","id":499},{"comment":"private BufferCapabilities orig;","field_name":"orig","field_type":"java.awt.BufferCapabilities","full_declaration":"private java.awt.BufferCapabilities orig","id":500},{"comment":"/**\r\n * The number of buffers\r\n */\r\n// = 0\r\n","field_name":"numBuffers","field_type":"int","full_declaration":"protected int numBuffers","id":501},{"comment":"/**\r\n * The buffering capabilities\r\n */\r\n// = null\r\nprotected BufferCapabilities caps;","field_name":"caps","field_type":"java.awt.BufferCapabilities","full_declaration":"protected java.awt.BufferCapabilities caps","id":502},{"comment":"/**\r\n * The drawing buffer\r\n */\r\n// = null\r\nprotected Image drawBuffer;","field_name":"drawBuffer","field_type":"java.awt.Image","full_declaration":"protected java.awt.Image drawBuffer","id":503},{"comment":"/**\r\n * The drawing buffer as a volatile image\r\n */\r\n// = null\r\nprotected VolatileImage drawVBuffer;","field_name":"drawVBuffer","field_type":"java.awt.image.VolatileImage","full_declaration":"protected java.awt.image.VolatileImage drawVBuffer","id":504},{"comment":"/**\r\n * Whether or not the drawing buffer has been recently restored from\r\n * a lost state.\r\n */\r\n// = false\r\n","field_name":"validatedContents","field_type":"boolean","full_declaration":"protected boolean validatedContents","id":505},{"comment":"/**\r\n * Size of the back buffers.  (Note: these fields were added in 6.0\r\n * but kept package-private to avoid exposing them in the spec.\r\n * None of these fields/methods really should have been marked\r\n * protected when they were introduced in 1.4, but now we just have\r\n * to live with that decision.)\r\n */\r\n","field_name":"width","field_type":"int","full_declaration":"int width","id":506},{"comment":"","field_name":"height","field_type":"int","full_declaration":"int height","id":507},{"comment":"/**\r\n * The buffering capabilities\r\n */\r\n// = null\r\nprotected BufferCapabilities caps;","field_name":"caps","field_type":"java.awt.BufferCapabilities","full_declaration":"protected java.awt.BufferCapabilities caps","id":508},{"comment":"/**\r\n * The back buffers\r\n */\r\n// = null\r\n","field_name":"backBuffers","field_type":"VolatileImage[]","full_declaration":"protected VolatileImage[] backBuffers","id":509},{"comment":"/**\r\n * Whether or not the drawing buffer has been recently restored from\r\n * a lost state.\r\n */\r\n// = false\r\n","field_name":"validatedContents","field_type":"boolean","full_declaration":"protected boolean validatedContents","id":510},{"comment":"/**\r\n * Size of the back buffers\r\n */\r\n","field_name":"width","field_type":"int","full_declaration":"protected int width","id":511},{"comment":"","field_name":"height","field_type":"int","full_declaration":"protected int height","id":512},{"comment":"/**\r\n * Insets for the hosting Component.  The size of the back buffer\r\n * is constrained by these.\r\n */\r\nprivate Insets insets;","field_name":"insets","field_type":"java.awt.Insets","full_declaration":"private java.awt.Insets insets","id":513},{"comment":"private BufferCapabilities caps;","field_name":"caps","field_type":"java.awt.BufferCapabilities","full_declaration":"private java.awt.BufferCapabilities caps","id":514},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 642321655757800191L","id":515},{"comment":"/**\r\n * Number of PropertyChangeListener objects registered. It's used\r\n * to add/remove ComponentListener and FocusListener to track\r\n * target Component's state.\r\n */\r\n","field_name":"propertyListenersCount","field_type":"int","full_declaration":"private volatile transient int propertyListenersCount = 0","id":516},{"comment":"protected ComponentListener accessibleAWTComponentHandler = null;","field_name":"accessibleAWTComponentHandler","field_type":"java.awt.event.ComponentListener","full_declaration":"protected java.awt.event.ComponentListener accessibleAWTComponentHandler = null","id":517},{"comment":"protected FocusListener accessibleAWTFocusHandler = null;","field_name":"accessibleAWTFocusHandler","field_type":"java.awt.event.FocusListener","full_declaration":"protected java.awt.event.FocusListener accessibleAWTFocusHandler = null","id":518},{"comment":"/*\r\n     * serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -4113291392143563828L","id":519},{"comment":"// Internal constants used in the implementation\r\n","field_name":"UNK_BIT","field_type":"int","full_declaration":"private static final int UNK_BIT = 1","id":520},{"comment":"","field_name":"HORIZ_BIT","field_type":"int","full_declaration":"private static final int HORIZ_BIT = 2","id":521},{"comment":"","field_name":"LTR_BIT","field_type":"int","full_declaration":"private static final int LTR_BIT = 4","id":522},{"comment":"/**\r\n * Items run left to right and lines flow top to bottom\r\n * Examples: English, French.\r\n */\r\npublic static final ComponentOrientation LEFT_TO_RIGHT = new ComponentOrientation(HORIZ_BIT | LTR_BIT);","field_name":"LEFT_TO_RIGHT","field_type":"java.awt.ComponentOrientation","full_declaration":"public static final java.awt.ComponentOrientation LEFT_TO_RIGHT = new ComponentOrientation(HORIZ_BIT | LTR_BIT)","id":523},{"comment":"/**\r\n * Items run right to left and lines flow top to bottom\r\n * Examples: Arabic, Hebrew.\r\n */\r\npublic static final ComponentOrientation RIGHT_TO_LEFT = new ComponentOrientation(HORIZ_BIT);","field_name":"RIGHT_TO_LEFT","field_type":"java.awt.ComponentOrientation","full_declaration":"public static final java.awt.ComponentOrientation RIGHT_TO_LEFT = new ComponentOrientation(HORIZ_BIT)","id":524},{"comment":"/**\r\n * Indicates that a component's orientation has not been set.\r\n * To preserve the behavior of existing applications,\r\n * isLeftToRight will return true for this value.\r\n */\r\npublic static final ComponentOrientation UNKNOWN = new ComponentOrientation(HORIZ_BIT | LTR_BIT | UNK_BIT);","field_name":"UNKNOWN","field_type":"java.awt.ComponentOrientation","full_declaration":"public static final java.awt.ComponentOrientation UNKNOWN = new ComponentOrientation(HORIZ_BIT | LTR_BIT | UNK_BIT)","id":525},{"comment":"","field_name":"orientation","field_type":"int","full_declaration":"private int orientation","id":526},{"comment":"private static final PlatformLogger log = PlatformLogger.getLogger(\"java.awt.Container\");","field_name":"log","field_type":"sun.util.logging.PlatformLogger","full_declaration":"private static final sun.util.logging.PlatformLogger log = PlatformLogger.getLogger(\"java.awt.Container\")","id":527},{"comment":"private static final PlatformLogger eventLog = PlatformLogger.getLogger(\"java.awt.event.Container\");","field_name":"eventLog","field_type":"sun.util.logging.PlatformLogger","full_declaration":"private static final sun.util.logging.PlatformLogger eventLog = PlatformLogger.getLogger(\"java.awt.event.Container\")","id":528},{"comment":"","field_name":"EMPTY_ARRAY","field_type":"Component[]","full_declaration":"private static final Component[] EMPTY_ARRAY = new Component[0]","id":529},{"comment":"/**\r\n * The components in this container.\r\n * @see #add\r\n * @see #getComponents\r\n */\r\nprivate java.util.List<Component> component = new ArrayList<>();","field_name":"component","field_type":"java.util.List","full_declaration":"private java.util.List component = new ArrayList<>()","id":530},{"comment":"/**\r\n * Layout manager for this container.\r\n * @see #doLayout\r\n * @see #setLayout\r\n * @see #getLayout\r\n */\r\nLayoutManager layoutMgr;","field_name":"layoutMgr","field_type":"java.awt.LayoutManager","full_declaration":"java.awt.LayoutManager layoutMgr","id":531},{"comment":"/**\r\n * Event router for lightweight components.  If this container\r\n * is native, this dispatcher takes care of forwarding and\r\n * retargeting the events to lightweight components contained\r\n * (if any).\r\n */\r\nprivate LightweightDispatcher dispatcher;","field_name":"dispatcher","field_type":"java.awt.LightweightDispatcher","full_declaration":"private java.awt.LightweightDispatcher dispatcher","id":532},{"comment":"/**\r\n * The focus traversal policy that will manage keyboard traversal of this\r\n * Container's children, if this Container is a focus cycle root. If the\r\n * value is null, this Container inherits its policy from its focus-cycle-\r\n * root ancestor. If all such ancestors of this Container have null\r\n * policies, then the current KeyboardFocusManager's default policy is\r\n * used. If the value is non-null, this policy will be inherited by all\r\n * focus-cycle-root children that have no keyboard-traversal policy of\r\n * their own (as will, recursively, their focus-cycle-root children).\r\n * <p>\r\n * If this Container is not a focus cycle root, the value will be\r\n * remembered, but will not be used or inherited by this or any other\r\n * Containers until this Container is made a focus cycle root.\r\n *\r\n * @see #setFocusTraversalPolicy\r\n * @see #getFocusTraversalPolicy\r\n * @since 1.4\r\n */\r\nprivate transient FocusTraversalPolicy focusTraversalPolicy;","field_name":"focusTraversalPolicy","field_type":"java.awt.FocusTraversalPolicy","full_declaration":"private transient java.awt.FocusTraversalPolicy focusTraversalPolicy","id":533},{"comment":"/**\r\n * Indicates whether this Component is the root of a focus traversal cycle.\r\n * Once focus enters a traversal cycle, typically it cannot leave it via\r\n * focus traversal unless one of the up- or down-cycle keys is pressed.\r\n * Normal traversal is limited to this Container, and all of this\r\n * Container's descendants that are not descendants of inferior focus cycle\r\n * roots.\r\n *\r\n * @see #setFocusCycleRoot\r\n * @see #isFocusCycleRoot\r\n * @since 1.4\r\n */\r\n","field_name":"focusCycleRoot","field_type":"boolean","full_declaration":"private boolean focusCycleRoot = false","id":534},{"comment":"/**\r\n * Stores the value of focusTraversalPolicyProvider property.\r\n * @since 1.5\r\n * @see #setFocusTraversalPolicyProvider\r\n */\r\n","field_name":"focusTraversalPolicyProvider","field_type":"boolean","full_declaration":"private boolean focusTraversalPolicyProvider","id":535},{"comment":"// keeps track of the threads that are printing this component\r\nprivate transient Set<Thread> printingThreads;","field_name":"printingThreads","field_type":"java.util.Set","full_declaration":"private transient java.util.Set printingThreads","id":536},{"comment":"// True if there is at least one thread that's printing this component\r\n","field_name":"printing","field_type":"boolean","full_declaration":"private transient boolean printing = false","id":537},{"comment":"transient ContainerListener containerListener;","field_name":"containerListener","field_type":"java.awt.event.ContainerListener","full_declaration":"transient java.awt.event.ContainerListener containerListener","id":538},{"comment":"/* HierarchyListener and HierarchyBoundsListener support */\r\n","field_name":"listeningChildren","field_type":"int","full_declaration":"transient int listeningChildren","id":539},{"comment":"","field_name":"listeningBoundsChildren","field_type":"int","full_declaration":"transient int listeningBoundsChildren","id":540},{"comment":"","field_name":"descendantsCount","field_type":"int","full_declaration":"transient int descendantsCount","id":541},{"comment":"/* Non-opaque window support -- see Window.setLayersOpaque */\r\ntransient Color preserveBackgroundColor = null;","field_name":"preserveBackgroundColor","field_type":"java.awt.Color","full_declaration":"transient java.awt.Color preserveBackgroundColor = null","id":542},{"comment":"/**\r\n * JDK 1.1 serialVersionUID\r\n */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 4613797578919906343L","id":543},{"comment":"/**\r\n * A constant which toggles one of the controllable behaviors\r\n * of <code>getMouseEventTarget</code>. It is used to specify whether\r\n * the method can return the Container on which it is originally called\r\n * in case if none of its children are the current mouse event targets.\r\n *\r\n * @see #getMouseEventTarget(int, int, boolean)\r\n */\r\n","field_name":"INCLUDE_SELF","field_type":"boolean","full_declaration":"static final boolean INCLUDE_SELF = true","id":544},{"comment":"/**\r\n * A constant which toggles one of the controllable behaviors\r\n * of <code>getMouseEventTarget</code>. It is used to specify whether\r\n * the method should search only lightweight components.\r\n *\r\n * @see #getMouseEventTarget(int, int, boolean)\r\n */\r\n","field_name":"SEARCH_HEAVYWEIGHTS","field_type":"boolean","full_declaration":"static final boolean SEARCH_HEAVYWEIGHTS = true","id":545},{"comment":"/*\r\n     * Number of HW or LW components in this container (including\r\n     * all descendant containers).\r\n     */\r\n","field_name":"numOfHWComponents","field_type":"int","full_declaration":"private transient int numOfHWComponents = 0","id":546},{"comment":"","field_name":"numOfLWComponents","field_type":"int","full_declaration":"private transient int numOfLWComponents = 0","id":547},{"comment":"private static final PlatformLogger mixingLog = PlatformLogger.getLogger(\"java.awt.mixing.Container\");","field_name":"mixingLog","field_type":"sun.util.logging.PlatformLogger","full_declaration":"private static final sun.util.logging.PlatformLogger mixingLog = PlatformLogger.getLogger(\"java.awt.mixing.Container\")","id":548},{"comment":"/**\r\n * @serialField ncomponents                     int\r\n *       The number of components in this container.\r\n *       This value can be null.\r\n * @serialField component                       Component[]\r\n *       The components in this container.\r\n * @serialField layoutMgr                       LayoutManager\r\n *       Layout manager for this container.\r\n * @serialField dispatcher                      LightweightDispatcher\r\n *       Event router for lightweight components.  If this container\r\n *       is native, this dispatcher takes care of forwarding and\r\n *       retargeting the events to lightweight components contained\r\n *       (if any).\r\n * @serialField maxSize                         Dimension\r\n *       Maximum size of this Container.\r\n * @serialField focusCycleRoot                  boolean\r\n *       Indicates whether this Component is the root of a focus traversal cycle.\r\n *       Once focus enters a traversal cycle, typically it cannot leave it via\r\n *       focus traversal unless one of the up- or down-cycle keys is pressed.\r\n *       Normal traversal is limited to this Container, and all of this\r\n *       Container's descendants that are not descendants of inferior focus cycle\r\n *       roots.\r\n * @serialField containerSerializedDataVersion  int\r\n *       Container Serial Data Version.\r\n * @serialField focusTraversalPolicyProvider    boolean\r\n *       Stores the value of focusTraversalPolicyProvider property.\r\n */\r\n","field_name":"serialPersistentFields","field_type":"ObjectStreamField[]","full_declaration":"private static final ObjectStreamField[] serialPersistentFields = { new ObjectStreamField(\"ncomponents\", Integer.TYPE), new ObjectStreamField(\"component\", Component[].class), new ObjectStreamField(\"layoutMgr\", LayoutManager.class), new ObjectStreamField(\"dispatcher\", LightweightDispatcher.class), new ObjectStreamField(\"maxSize\", Dimension.class), new ObjectStreamField(\"focusCycleRoot\", Boolean.TYPE), new ObjectStreamField(\"containerSerializedDataVersion\", Integer.TYPE), new ObjectStreamField(\"focusTraversalPolicyProvider\", Boolean.TYPE) }","id":549},{"comment":"","field_name":"isJavaAwtSmartInvalidate","field_type":"boolean","full_declaration":"private static final boolean isJavaAwtSmartInvalidate","id":550},{"comment":"/**\r\n * Indicates whether valid containers should also traverse their\r\n * children and call the validateTree() method on them.\r\n *\r\n * Synchronization: TreeLock.\r\n *\r\n * The field is allowed to be static as long as the TreeLock itself is\r\n * static.\r\n *\r\n * @see #validateUnconditionally()\r\n */\r\n","field_name":"descendUnconditionallyWhenValidating","field_type":"boolean","full_declaration":"private static boolean descendUnconditionallyWhenValidating = false","id":551},{"comment":"/*\r\n     * The following code was added to support modal JInternalFrames\r\n     * Unfortunately this code has to be added here so that we can get access to\r\n     * some private AWT classes like SequencedEvent.\r\n     *\r\n     * The native container of the LW component has this field set\r\n     * to tell it that it should block Mouse events for all LW\r\n     * children except for the modal component.\r\n     *\r\n     * In the case of nested Modal components, we store the previous\r\n     * modal component in the new modal components value of modalComp;\r\n     */\r\ntransient Component modalComp;","field_name":"modalComp","field_type":"java.awt.Component","full_declaration":"transient java.awt.Component modalComp","id":552},{"comment":"transient AppContext modalAppContext;","field_name":"modalAppContext","field_type":"sun.awt.AppContext","full_declaration":"transient sun.awt.AppContext modalAppContext","id":553},{"comment":"// Serialization support. A Container is responsible for restoring the\r\n// parent fields of its component children.\r\n/**\r\n * Container Serial Data Version.\r\n */\r\n","field_name":"containerSerializedDataVersion","field_type":"int","full_declaration":"private int containerSerializedDataVersion = 1","id":554},{"comment":"static final EventTargetFilter FILTER = new MouseEventTargetFilter();","field_name":"FILTER","field_type":"java.awt.Container.EventTargetFilter","full_declaration":"static final java.awt.Container.EventTargetFilter FILTER = new MouseEventTargetFilter()","id":555},{"comment":"static final EventTargetFilter FILTER = new DropTargetEventTargetFilter();","field_name":"FILTER","field_type":"java.awt.Container.EventTargetFilter","full_declaration":"static final java.awt.Container.EventTargetFilter FILTER = new DropTargetEventTargetFilter()","id":556},{"comment":"/**\r\n * JDK1.3 serialVersionUID\r\n */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 5081320404842566097L","id":557},{"comment":"/**\r\n * Number of PropertyChangeListener objects registered. It's used\r\n * to add/remove ContainerListener to track target Container's state.\r\n */\r\n","field_name":"propertyListenersCount","field_type":"int","full_declaration":"private volatile transient int propertyListenersCount = 0","id":558},{"comment":"protected ContainerListener accessibleContainerHandler = null;","field_name":"accessibleContainerHandler","field_type":"java.awt.event.ContainerListener","full_declaration":"protected java.awt.event.ContainerListener accessibleContainerHandler = null","id":559},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 5184291520170872969L","id":560},{"comment":"/*\r\n     * Our own mouse event for when we're dragged over from another hw\r\n     * container\r\n     */\r\n","field_name":"LWD_MOUSE_DRAGGED_OVER","field_type":"int","full_declaration":"private static final int LWD_MOUSE_DRAGGED_OVER = 1500","id":561},{"comment":"private static final PlatformLogger eventLog = PlatformLogger.getLogger(\"java.awt.event.LightweightDispatcher\");","field_name":"eventLog","field_type":"sun.util.logging.PlatformLogger","full_declaration":"private static final sun.util.logging.PlatformLogger eventLog = PlatformLogger.getLogger(\"java.awt.event.LightweightDispatcher\")","id":562},{"comment":"","field_name":"BUTTONS_DOWN_MASK","field_type":"int","full_declaration":"private static final int BUTTONS_DOWN_MASK","id":563},{"comment":"// --- member variables -------------------------------\r\n/**\r\n * The windowed container that might be hosting events for\r\n * subcomponents.\r\n */\r\nprivate Container nativeContainer;","field_name":"nativeContainer","field_type":"java.awt.Container","full_declaration":"private java.awt.Container nativeContainer","id":564},{"comment":"/**\r\n * This variable is not used, but kept for serialization compatibility\r\n */\r\nprivate Component focus;","field_name":"focus","field_type":"java.awt.Component","full_declaration":"private java.awt.Component focus","id":565},{"comment":"/**\r\n * The current subcomponent being hosted by this windowed\r\n * component that has events being forwarded to it.  If this\r\n * is null, there are currently no events being forwarded to\r\n * a subcomponent.\r\n */\r\nprivate transient WeakReference<Component> mouseEventTarget;","field_name":"mouseEventTarget","field_type":"java.lang.ref.WeakReference","full_declaration":"private transient java.lang.ref.WeakReference mouseEventTarget","id":566},{"comment":"/**\r\n * The last component entered by the {@code MouseEvent}.\r\n */\r\nprivate transient WeakReference<Component> targetLastEntered;","field_name":"targetLastEntered","field_type":"java.lang.ref.WeakReference","full_declaration":"private transient java.lang.ref.WeakReference targetLastEntered","id":567},{"comment":"/**\r\n * The last component entered by the {@code SunDropTargetEvent}.\r\n */\r\nprivate transient WeakReference<Component> targetLastEnteredDT;","field_name":"targetLastEnteredDT","field_type":"java.lang.ref.WeakReference","full_declaration":"private transient java.lang.ref.WeakReference targetLastEnteredDT","id":568},{"comment":"/**\r\n * Is the mouse over the native container.\r\n */\r\n","field_name":"isMouseInNativeContainer","field_type":"boolean","full_declaration":"private transient boolean isMouseInNativeContainer = false","id":569},{"comment":"/**\r\n * Is DnD over the native container.\r\n */\r\n","field_name":"isMouseDTInNativeContainer","field_type":"boolean","full_declaration":"private transient boolean isMouseDTInNativeContainer = false","id":570},{"comment":"/**\r\n * This variable is not used, but kept for serialization compatibility\r\n */\r\nprivate Cursor nativeCursor;","field_name":"nativeCursor","field_type":"java.awt.Cursor","full_declaration":"private java.awt.Cursor nativeCursor","id":571},{"comment":"/**\r\n * The event mask for contained lightweight components.  Lightweight\r\n * components need a windowed container to host window-related\r\n * events.  This separate mask indicates events that have been\r\n * requested by contained lightweight components without effecting\r\n * the mask of the windowed component itself.\r\n */\r\n","field_name":"eventMask","field_type":"long","full_declaration":"private long eventMask","id":572},{"comment":"/**\r\n * The kind of events routed to lightweight components from windowed\r\n * hosts.\r\n */\r\n","field_name":"PROXY_EVENT_MASK","field_type":"long","full_declaration":"private static final long PROXY_EVENT_MASK = AWTEvent.FOCUS_EVENT_MASK | AWTEvent.KEY_EVENT_MASK | AWTEvent.MOUSE_EVENT_MASK | AWTEvent.MOUSE_MOTION_EVENT_MASK | AWTEvent.MOUSE_WHEEL_EVENT_MASK","id":573},{"comment":"","field_name":"MOUSE_MASK","field_type":"long","full_declaration":"private static final long MOUSE_MASK = AWTEvent.MOUSE_EVENT_MASK | AWTEvent.MOUSE_MOTION_EVENT_MASK | AWTEvent.MOUSE_WHEEL_EVENT_MASK","id":574},{"comment":"private static final PlatformLogger log = PlatformLogger.getLogger(\"java.awt.ContainerOrderFocusTraversalPolicy\");","field_name":"log","field_type":"sun.util.logging.PlatformLogger","full_declaration":"private static final sun.util.logging.PlatformLogger log = PlatformLogger.getLogger(\"java.awt.ContainerOrderFocusTraversalPolicy\")","id":575},{"comment":"","field_name":"FORWARD_TRAVERSAL","field_type":"int","full_declaration":"final private int FORWARD_TRAVERSAL = 0","id":576},{"comment":"","field_name":"BACKWARD_TRAVERSAL","field_type":"int","full_declaration":"final private int BACKWARD_TRAVERSAL = 1","id":577},{"comment":"/*\r\n     * JDK 1.4 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 486933713763926351L","id":578},{"comment":"","field_name":"implicitDownCycleTraversal","field_type":"boolean","full_declaration":"private boolean implicitDownCycleTraversal = true","id":579},{"comment":"/**\r\n * Used by getComponentAfter and getComponentBefore for efficiency. In\r\n * order to maintain compliance with the specification of\r\n * FocusTraversalPolicy, if traversal wraps, we should invoke\r\n * getFirstComponent or getLastComponent. These methods may be overriden in\r\n * subclasses to behave in a non-generic way. However, in the generic case,\r\n * these methods will simply return the first or last Components of the\r\n * sorted list, respectively. Since getComponentAfter and\r\n * getComponentBefore have already built the list before determining\r\n * that they need to invoke getFirstComponent or getLastComponent, the\r\n * list should be reused if possible.\r\n */\r\ntransient private Container cachedRoot;","field_name":"cachedRoot","field_type":"java.awt.Container","full_declaration":"transient private java.awt.Container cachedRoot","id":580},{"comment":"","field_name":"cachedCycle","field_type":"List<Component>","full_declaration":"transient private List<Component> cachedCycle","id":581},{"comment":"/**\r\n * The default cursor type (gets set if no cursor is defined).\r\n */\r\n","field_name":"DEFAULT_CURSOR","field_type":"int","full_declaration":"public static final int DEFAULT_CURSOR = 0","id":582},{"comment":"/**\r\n * The crosshair cursor type.\r\n */\r\n","field_name":"CROSSHAIR_CURSOR","field_type":"int","full_declaration":"public static final int CROSSHAIR_CURSOR = 1","id":583},{"comment":"/**\r\n * The text cursor type.\r\n */\r\n","field_name":"TEXT_CURSOR","field_type":"int","full_declaration":"public static final int TEXT_CURSOR = 2","id":584},{"comment":"/**\r\n * The wait cursor type.\r\n */\r\n","field_name":"WAIT_CURSOR","field_type":"int","full_declaration":"public static final int WAIT_CURSOR = 3","id":585},{"comment":"/**\r\n * The south-west-resize cursor type.\r\n */\r\n","field_name":"SW_RESIZE_CURSOR","field_type":"int","full_declaration":"public static final int SW_RESIZE_CURSOR = 4","id":586},{"comment":"/**\r\n * The south-east-resize cursor type.\r\n */\r\n","field_name":"SE_RESIZE_CURSOR","field_type":"int","full_declaration":"public static final int SE_RESIZE_CURSOR = 5","id":587},{"comment":"/**\r\n * The north-west-resize cursor type.\r\n */\r\n","field_name":"NW_RESIZE_CURSOR","field_type":"int","full_declaration":"public static final int NW_RESIZE_CURSOR = 6","id":588},{"comment":"/**\r\n * The north-east-resize cursor type.\r\n */\r\n","field_name":"NE_RESIZE_CURSOR","field_type":"int","full_declaration":"public static final int NE_RESIZE_CURSOR = 7","id":589},{"comment":"/**\r\n * The north-resize cursor type.\r\n */\r\n","field_name":"N_RESIZE_CURSOR","field_type":"int","full_declaration":"public static final int N_RESIZE_CURSOR = 8","id":590},{"comment":"/**\r\n * The south-resize cursor type.\r\n */\r\n","field_name":"S_RESIZE_CURSOR","field_type":"int","full_declaration":"public static final int S_RESIZE_CURSOR = 9","id":591},{"comment":"/**\r\n * The west-resize cursor type.\r\n */\r\n","field_name":"W_RESIZE_CURSOR","field_type":"int","full_declaration":"public static final int W_RESIZE_CURSOR = 10","id":592},{"comment":"/**\r\n * The east-resize cursor type.\r\n */\r\n","field_name":"E_RESIZE_CURSOR","field_type":"int","full_declaration":"public static final int E_RESIZE_CURSOR = 11","id":593},{"comment":"/**\r\n * The hand cursor type.\r\n */\r\n","field_name":"HAND_CURSOR","field_type":"int","full_declaration":"public static final int HAND_CURSOR = 12","id":594},{"comment":"/**\r\n * The move cursor type.\r\n */\r\n","field_name":"MOVE_CURSOR","field_type":"int","full_declaration":"public static final int MOVE_CURSOR = 13","id":595},{"comment":"/**\r\n * @deprecated As of JDK version 1.7, the {@link #getPredefinedCursor(int)}\r\n * method should be used instead.\r\n */\r\n@Deprecated\r\n","field_name":"predefined","field_type":"Cursor[]","full_declaration":"protected static Cursor[] predefined = new Cursor[14]","id":596},{"comment":"/**\r\n * This field is a private replacement for 'predefined' array.\r\n */\r\n","field_name":"predefinedPrivate","field_type":"Cursor[]","full_declaration":"private final static Cursor[] predefinedPrivate = new Cursor[14]","id":597},{"comment":"/* Localization names and default values */\r\n","field_name":"cursorProperties","field_type":"String[][]","full_declaration":"static final String[][] cursorProperties = { { \"AWT.DefaultCursor\", \"Default Cursor\" }, { \"AWT.CrosshairCursor\", \"Crosshair Cursor\" }, { \"AWT.TextCursor\", \"Text Cursor\" }, { \"AWT.WaitCursor\", \"Wait Cursor\" }, { \"AWT.SWResizeCursor\", \"Southwest Resize Cursor\" }, { \"AWT.SEResizeCursor\", \"Southeast Resize Cursor\" }, { \"AWT.NWResizeCursor\", \"Northwest Resize Cursor\" }, { \"AWT.NEResizeCursor\", \"Northeast Resize Cursor\" }, { \"AWT.NResizeCursor\", \"North Resize Cursor\" }, { \"AWT.SResizeCursor\", \"South Resize Cursor\" }, { \"AWT.WResizeCursor\", \"West Resize Cursor\" }, { \"AWT.EResizeCursor\", \"East Resize Cursor\" }, { \"AWT.HandCursor\", \"Hand Cursor\" }, { \"AWT.MoveCursor\", \"Move Cursor\" } }","id":598},{"comment":"/**\r\n * The chosen cursor type initially set to\r\n * the <code>DEFAULT_CURSOR</code>.\r\n *\r\n * @serial\r\n * @see #getType()\r\n */\r\n","field_name":"type","field_type":"int","full_declaration":"int type = DEFAULT_CURSOR","id":599},{"comment":"/**\r\n * The type associated with all custom cursors.\r\n */\r\n","field_name":"CUSTOM_CURSOR","field_type":"int","full_declaration":"public static final int CUSTOM_CURSOR = -1","id":600},{"comment":"/*\r\n     * hashtable, filesystem dir prefix, filename, and properties for custom cursors support\r\n     */\r\nprivate static final Hashtable<String, Cursor> systemCustomCursors = new Hashtable<>(1);","field_name":"systemCustomCursors","field_type":"java.util.Hashtable","full_declaration":"private static final java.util.Hashtable systemCustomCursors = new Hashtable<>(1)","id":601},{"comment":"private static final String systemCustomCursorDirPrefix = initCursorDir();","field_name":"systemCustomCursorDirPrefix","field_type":"java.lang.String","full_declaration":"private static final java.lang.String systemCustomCursorDirPrefix = initCursorDir()","id":602},{"comment":"private static final String systemCustomCursorPropertiesFile = systemCustomCursorDirPrefix + \"cursors.properties\";","field_name":"systemCustomCursorPropertiesFile","field_type":"java.lang.String","full_declaration":"private static final java.lang.String systemCustomCursorPropertiesFile = systemCustomCursorDirPrefix + \"cursors.properties\"","id":603},{"comment":"private static Properties systemCustomCursorProperties = null;","field_name":"systemCustomCursorProperties","field_type":"java.util.Properties","full_declaration":"private static java.util.Properties systemCustomCursorProperties = null","id":604},{"comment":"private static final String CursorDotPrefix = \"Cursor.\";","field_name":"CursorDotPrefix","field_type":"java.lang.String","full_declaration":"private static final java.lang.String CursorDotPrefix = \"Cursor.\"","id":605},{"comment":"private static final String DotFileSuffix = \".File\";","field_name":"DotFileSuffix","field_type":"java.lang.String","full_declaration":"private static final java.lang.String DotFileSuffix = \".File\"","id":606},{"comment":"private static final String DotHotspotSuffix = \".HotSpot\";","field_name":"DotHotspotSuffix","field_type":"java.lang.String","full_declaration":"private static final java.lang.String DotHotspotSuffix = \".HotSpot\"","id":607},{"comment":"private static final String DotNameSuffix = \".Name\";","field_name":"DotNameSuffix","field_type":"java.lang.String","full_declaration":"private static final java.lang.String DotNameSuffix = \".Name\"","id":608},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 8028237497568985504L","id":609},{"comment":"private static final PlatformLogger log = PlatformLogger.getLogger(\"java.awt.Cursor\");","field_name":"log","field_type":"sun.util.logging.PlatformLogger","full_declaration":"private static final sun.util.logging.PlatformLogger log = PlatformLogger.getLogger(\"java.awt.Cursor\")","id":610},{"comment":"/**\r\n * Hook into native data.\r\n */\r\n","field_name":"pData","field_type":"long","full_declaration":"private transient long pData","id":611},{"comment":"private transient Object anchor = new Object();","field_name":"anchor","field_type":"java.lang.Object","full_declaration":"private transient java.lang.Object anchor = new Object()","id":612},{"comment":"transient CursorDisposer disposer;","field_name":"disposer","field_type":"java.awt.Cursor.CursorDisposer","full_declaration":"transient java.awt.Cursor.CursorDisposer disposer","id":613},{"comment":"/**\r\n * The user-visible name of the cursor.\r\n *\r\n * @serial\r\n * @see #getName()\r\n */\r\nprotected String name;","field_name":"name","field_type":"java.lang.String","full_declaration":"protected java.lang.String name","id":614},{"comment":"","field_name":"pData","field_type":"long","full_declaration":"volatile long pData","id":615},{"comment":"String name;","field_name":"name","field_type":"java.lang.String","full_declaration":"java.lang.String name","id":616},{"comment":"protected ClipboardOwner owner;","field_name":"owner","field_type":"java.awt.datatransfer.ClipboardOwner","full_declaration":"protected java.awt.datatransfer.ClipboardOwner owner","id":617},{"comment":"protected Transferable contents;","field_name":"contents","field_type":"java.awt.datatransfer.Transferable","full_declaration":"protected java.awt.datatransfer.Transferable contents","id":618},{"comment":"/**\r\n * An aggregate of flavor listeners registered on this local clipboard.\r\n *\r\n * @since 1.5\r\n */\r\nprivate EventListenerAggregate flavorListeners;","field_name":"flavorListeners","field_type":"sun.awt.EventListenerAggregate","full_declaration":"private sun.awt.EventListenerAggregate flavorListeners","id":619},{"comment":"/**\r\n * A set of <code>DataFlavor</code>s that is available on\r\n * this local clipboard. It is used for tracking changes\r\n * of <code>DataFlavor</code>s available on this clipboard.\r\n *\r\n * @since 1.5\r\n */\r\nprivate Set<DataFlavor> currentDataFlavors;","field_name":"currentDataFlavors","field_type":"java.util.Set","full_declaration":"private java.util.Set currentDataFlavors","id":620},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 8367026044764648243L","id":621},{"comment":"private static final Class<InputStream> ioInputStreamClass = InputStream.class;","field_name":"ioInputStreamClass","field_type":"java.lang.Class","full_declaration":"private static final java.lang.Class ioInputStreamClass = InputStream.class","id":622},{"comment":"/**\r\n * The <code>DataFlavor</code> representing a Java Unicode String class,\r\n * where:\r\n * <pre>\r\n *     representationClass = java.lang.String\r\n *     mimeType           = \"application/x-java-serialized-object\"\r\n * </pre>\r\n */\r\npublic static final DataFlavor stringFlavor = createConstant(java.lang.String.class, \"Unicode String\");","field_name":"stringFlavor","field_type":"java.awt.datatransfer.DataFlavor","full_declaration":"public static final java.awt.datatransfer.DataFlavor stringFlavor = createConstant(java.lang.String.class, \"Unicode String\")","id":623},{"comment":"/**\r\n * The <code>DataFlavor</code> representing a Java Image class,\r\n * where:\r\n * <pre>\r\n *     representationClass = java.awt.Image\r\n *     mimeType            = \"image/x-java-image\"\r\n * </pre>\r\n */\r\npublic static final DataFlavor imageFlavor = createConstant(\"image/x-java-image; class=java.awt.Image\", \"Image\");","field_name":"imageFlavor","field_type":"java.awt.datatransfer.DataFlavor","full_declaration":"public static final java.awt.datatransfer.DataFlavor imageFlavor = createConstant(\"image/x-java-image; class=java.awt.Image\", \"Image\")","id":624},{"comment":"/**\r\n * The <code>DataFlavor</code> representing plain text with Unicode\r\n * encoding, where:\r\n * <pre>\r\n *     representationClass = InputStream\r\n *     mimeType            = \"text/plain; charset=unicode\"\r\n * </pre>\r\n * This <code>DataFlavor</code> has been <b>deprecated</b> because\r\n * (1) Its representation is an InputStream, an 8-bit based representation,\r\n * while Unicode is a 16-bit character set; and (2) The charset \"unicode\"\r\n * is not well-defined. \"unicode\" implies a particular platform's\r\n * implementation of Unicode, not a cross-platform implementation.\r\n *\r\n * @deprecated as of 1.3. Use <code>DataFlavor.getReaderForText(Transferable)</code>\r\n *             instead of <code>Transferable.getTransferData(DataFlavor.plainTextFlavor)</code>.\r\n */\r\n@Deprecated\r\npublic static final DataFlavor plainTextFlavor = createConstant(\"text/plain; charset=unicode; class=java.io.InputStream\", \"Plain Text\");","field_name":"plainTextFlavor","field_type":"java.awt.datatransfer.DataFlavor","full_declaration":"public static final java.awt.datatransfer.DataFlavor plainTextFlavor = createConstant(\"text/plain; charset=unicode; class=java.io.InputStream\", \"Plain Text\")","id":625},{"comment":"/**\r\n * A MIME Content-Type of application/x-java-serialized-object represents\r\n * a graph of Java object(s) that have been made persistent.\r\n *\r\n * The representation class associated with this <code>DataFlavor</code>\r\n * identifies the Java type of an object returned as a reference\r\n * from an invocation <code>java.awt.datatransfer.getTransferData</code>.\r\n */\r\npublic static final String javaSerializedObjectMimeType = \"application/x-java-serialized-object\";","field_name":"javaSerializedObjectMimeType","field_type":"java.lang.String","full_declaration":"public static final java.lang.String javaSerializedObjectMimeType = \"application/x-java-serialized-object\"","id":626},{"comment":"/**\r\n * To transfer a list of files to/from Java (and the underlying\r\n * platform) a <code>DataFlavor</code> of this type/subtype and\r\n * representation class of <code>java.util.List</code> is used.\r\n * Each element of the list is required/guaranteed to be of type\r\n * <code>java.io.File</code>.\r\n */\r\npublic static final DataFlavor javaFileListFlavor = createConstant(\"application/x-java-file-list;class=java.util.List\", null);","field_name":"javaFileListFlavor","field_type":"java.awt.datatransfer.DataFlavor","full_declaration":"public static final java.awt.datatransfer.DataFlavor javaFileListFlavor = createConstant(\"application/x-java-file-list;class=java.util.List\", null)","id":627},{"comment":"/**\r\n * To transfer a reference to an arbitrary Java object reference that\r\n * has no associated MIME Content-type, across a <code>Transferable</code>\r\n * interface WITHIN THE SAME JVM, a <code>DataFlavor</code>\r\n * with this type/subtype is used, with a <code>representationClass</code>\r\n * equal to the type of the class/interface being passed across the\r\n * <code>Transferable</code>.\r\n * <p>\r\n * The object reference returned from\r\n * <code>Transferable.getTransferData</code> for a <code>DataFlavor</code>\r\n * with this MIME Content-Type is required to be\r\n * an instance of the representation Class of the <code>DataFlavor</code>.\r\n */\r\npublic static final String javaJVMLocalObjectMimeType = \"application/x-java-jvm-local-objectref\";","field_name":"javaJVMLocalObjectMimeType","field_type":"java.lang.String","full_declaration":"public static final java.lang.String javaJVMLocalObjectMimeType = \"application/x-java-jvm-local-objectref\"","id":628},{"comment":"/**\r\n * In order to pass a live link to a Remote object via a Drag and Drop\r\n * <code>ACTION_LINK</code> operation a Mime Content Type of\r\n * application/x-java-remote-object should be used,\r\n * where the representation class of the <code>DataFlavor</code>\r\n * represents the type of the <code>Remote</code> interface to be\r\n * transferred.\r\n */\r\npublic static final String javaRemoteObjectMimeType = \"application/x-java-remote-object\";","field_name":"javaRemoteObjectMimeType","field_type":"java.lang.String","full_declaration":"public static final java.lang.String javaRemoteObjectMimeType = \"application/x-java-remote-object\"","id":629},{"comment":"/**\r\n * Represents a piece of an HTML markup. The markup consists of the part\r\n * selected on the source side. Therefore some tags in the markup may be\r\n * unpaired. If the flavor is used to represent the data in\r\n * a {@link Transferable} instance, no additional changes will be made.\r\n * This DataFlavor instance represents the same HTML markup as DataFlavor\r\n * instances which content MIME type does not contain document parameter\r\n * and representation class is the String class.\r\n * <pre>\r\n *     representationClass = String\r\n *     mimeType           = \"text/html\"\r\n * </pre>\r\n */\r\npublic static DataFlavor selectionHtmlFlavor = initHtmlDataFlavor(\"selection\");","field_name":"selectionHtmlFlavor","field_type":"java.awt.datatransfer.DataFlavor","full_declaration":"public static java.awt.datatransfer.DataFlavor selectionHtmlFlavor = initHtmlDataFlavor(\"selection\")","id":630},{"comment":"/**\r\n * Represents a piece of an HTML markup. If possible, the markup received\r\n * from a native system is supplemented with pair tags to be\r\n * a well-formed HTML markup. If the flavor is used to represent the data in\r\n * a {@link Transferable} instance, no additional changes will be made.\r\n * <pre>\r\n *     representationClass = String\r\n *     mimeType           = \"text/html\"\r\n * </pre>\r\n */\r\npublic static DataFlavor fragmentHtmlFlavor = initHtmlDataFlavor(\"fragment\");","field_name":"fragmentHtmlFlavor","field_type":"java.awt.datatransfer.DataFlavor","full_declaration":"public static java.awt.datatransfer.DataFlavor fragmentHtmlFlavor = initHtmlDataFlavor(\"fragment\")","id":631},{"comment":"/**\r\n * Represents a piece of an HTML markup. If possible, the markup\r\n * received from a native system is supplemented with additional\r\n * tags to make up a well-formed HTML document. If the flavor is used to\r\n * represent the data in a {@link Transferable} instance,\r\n * no additional changes will be made.\r\n * <pre>\r\n *     representationClass = String\r\n *     mimeType           = \"text/html\"\r\n * </pre>\r\n */\r\npublic static DataFlavor allHtmlFlavor = initHtmlDataFlavor(\"all\");","field_name":"allHtmlFlavor","field_type":"java.awt.datatransfer.DataFlavor","full_declaration":"public static java.awt.datatransfer.DataFlavor allHtmlFlavor = initHtmlDataFlavor(\"all\")","id":632},{"comment":"private static Comparator<DataFlavor> textFlavorComparator;","field_name":"textFlavorComparator","field_type":"java.util.Comparator","full_declaration":"private static java.util.Comparator textFlavorComparator","id":633},{"comment":"/*\r\n     * fields\r\n     */\r\n/* placeholder for caching any platform-specific data for flavor */\r\n","field_name":"atom","field_type":"int","full_declaration":"transient int atom","id":634},{"comment":"/* Mime Type of DataFlavor */\r\nMimeType mimeType;","field_name":"mimeType","field_type":"java.awt.datatransfer.MimeType","full_declaration":"java.awt.datatransfer.MimeType mimeType","id":635},{"comment":"private String humanPresentableName;","field_name":"humanPresentableName","field_type":"java.lang.String","full_declaration":"private java.lang.String humanPresentableName","id":636},{"comment":"/**\r\n * Java class of objects this DataFlavor represents *\r\n */\r\nprivate Class<?> representationClass;","field_name":"representationClass","field_type":"java.lang.Class","full_declaration":"private java.lang.Class representationClass","id":637},{"comment":"/*\r\n     * serialization support\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"static final long serialVersionUID = -6568722458793895906L","id":638},{"comment":"private String primaryType;","field_name":"primaryType","field_type":"java.lang.String","full_declaration":"private java.lang.String primaryType","id":639},{"comment":"private String subType;","field_name":"subType","field_type":"java.lang.String","full_declaration":"private java.lang.String subType","id":640},{"comment":"private MimeTypeParameterList parameters;","field_name":"parameters","field_type":"java.awt.datatransfer.MimeTypeParameterList","full_declaration":"private java.awt.datatransfer.MimeTypeParameterList parameters","id":641},{"comment":"/**\r\n * A string that holds all the special chars.\r\n */\r\nprivate static final String TSPECIALS = \"()<>@,;:\\\\\\\"/[]?=\";","field_name":"TSPECIALS","field_type":"java.lang.String","full_declaration":"private static final java.lang.String TSPECIALS = \"()<>@,;:\\\\\\\"/[]?=\"","id":642},{"comment":"private Hashtable<String, String> parameters;","field_name":"parameters","field_type":"java.util.Hashtable","full_declaration":"private java.util.Hashtable parameters","id":643},{"comment":"/**\r\n * A string that holds all the special chars.\r\n */\r\nprivate static final String TSPECIALS = \"()<>@,;:\\\\\\\"/[]?=\";","field_name":"TSPECIALS","field_type":"java.lang.String","full_declaration":"private static final java.lang.String TSPECIALS = \"()<>@,;:\\\\\\\"/[]?=\"","id":644},{"comment":"// use serialVersionUID from JDK 1.2.2 for interoperability\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -5604407764691570741L","id":645},{"comment":"","field_name":"STRING","field_type":"int","full_declaration":"private static final int STRING = 0","id":646},{"comment":"","field_name":"PLAIN_TEXT","field_type":"int","full_declaration":"private static final int PLAIN_TEXT = 1","id":647},{"comment":"","field_name":"flavors","field_type":"DataFlavor[]","full_declaration":"private static final DataFlavor[] flavors = { DataFlavor.stringFlavor, // deprecated\r\nDataFlavor.plainTextFlavor }","id":648},{"comment":"private String data;","field_name":"data","field_type":"java.lang.String","full_declaration":"private java.lang.String data","id":649},{"comment":"/**\r\n * Constant prefix used to tag Java types converted to native platform\r\n * type.\r\n */\r\nprivate static String JavaMIME = \"JAVA_DATAFLAVOR:\";","field_name":"JavaMIME","field_type":"java.lang.String","full_declaration":"private static java.lang.String JavaMIME = \"JAVA_DATAFLAVOR:\"","id":650},{"comment":"private static final Object FLAVOR_MAP_KEY = new Object();","field_name":"FLAVOR_MAP_KEY","field_type":"java.lang.Object","full_declaration":"private static final java.lang.Object FLAVOR_MAP_KEY = new Object()","id":651},{"comment":"/**\r\n * Copied from java.util.Properties.\r\n */\r\nprivate static final String keyValueSeparators = \"=: \\t\\r\\n\\f\";","field_name":"keyValueSeparators","field_type":"java.lang.String","full_declaration":"private static final java.lang.String keyValueSeparators = \"=: \\t\\r\\n\\f\"","id":652},{"comment":"private static final String strictKeyValueSeparators = \"=:\";","field_name":"strictKeyValueSeparators","field_type":"java.lang.String","full_declaration":"private static final java.lang.String strictKeyValueSeparators = \"=:\"","id":653},{"comment":"private static final String whiteSpaceChars = \" \\t\\r\\n\\f\";","field_name":"whiteSpaceChars","field_type":"java.lang.String","full_declaration":"private static final java.lang.String whiteSpaceChars = \" \\t\\r\\n\\f\"","id":654},{"comment":"/**\r\n * The list of valid, decoded text flavor representation classes, in order\r\n * from best to worst.\r\n */\r\n","field_name":"UNICODE_TEXT_CLASSES","field_type":"String[]","full_declaration":"private static final String[] UNICODE_TEXT_CLASSES = { \"java.io.Reader\", \"java.lang.String\", \"java.nio.CharBuffer\", \"\\\"[C\\\"\" }","id":655},{"comment":"/**\r\n * The list of valid, encoded text flavor representation classes, in order\r\n * from best to worst.\r\n */\r\n","field_name":"ENCODED_TEXT_CLASSES","field_type":"String[]","full_declaration":"private static final String[] ENCODED_TEXT_CLASSES = { \"java.io.InputStream\", \"java.nio.ByteBuffer\", \"\\\"[B\\\"\" }","id":656},{"comment":"/**\r\n * A String representing text/plain MIME type.\r\n */\r\nprivate static final String TEXT_PLAIN_BASE_TYPE = \"text/plain\";","field_name":"TEXT_PLAIN_BASE_TYPE","field_type":"java.lang.String","full_declaration":"private static final java.lang.String TEXT_PLAIN_BASE_TYPE = \"text/plain\"","id":657},{"comment":"/**\r\n * A String representing text/html MIME type.\r\n */\r\nprivate static final String HTML_TEXT_BASE_TYPE = \"text/html\";","field_name":"HTML_TEXT_BASE_TYPE","field_type":"java.lang.String","full_declaration":"private static final java.lang.String HTML_TEXT_BASE_TYPE = \"text/html\"","id":658},{"comment":"/**\r\n * Maps native Strings to Lists of DataFlavors (or base type Strings for\r\n * text DataFlavors).\r\n * Do not use the field directly, use getNativeToFlavor() instead.\r\n */\r\nprivate final Map<String, LinkedHashSet<DataFlavor>> nativeToFlavor = new HashMap<>();","field_name":"nativeToFlavor","field_type":"java.util.Map","full_declaration":"private final java.util.Map nativeToFlavor = new HashMap<>()","id":659},{"comment":"/**\r\n * Maps DataFlavors (or base type Strings for text DataFlavors) to Lists of\r\n * native Strings.\r\n * Do not use the field directly, use getFlavorToNative() instead.\r\n */\r\nprivate final Map<DataFlavor, LinkedHashSet<String>> flavorToNative = new HashMap<>();","field_name":"flavorToNative","field_type":"java.util.Map","full_declaration":"private final java.util.Map flavorToNative = new HashMap<>()","id":660},{"comment":"/**\r\n * Maps a text DataFlavor primary mime-type to the native. Used only to store\r\n * standard mappings registered in the flavormap.properties\r\n * Do not use this field directly, use getTextTypeToNative() instead.\r\n */\r\nprivate Map<String, LinkedHashSet<String>> textTypeToNative = new HashMap<>();","field_name":"textTypeToNative","field_type":"java.util.Map","full_declaration":"private java.util.Map textTypeToNative = new HashMap<>()","id":661},{"comment":"/**\r\n * Shows if the object has been initialized.\r\n */\r\n","field_name":"isMapInitialized","field_type":"boolean","full_declaration":"private boolean isMapInitialized = false","id":662},{"comment":"/**\r\n * Caches the result of getNativesForFlavor(). Maps DataFlavors to\r\n * SoftReferences which reference LinkedHashSet of String natives.\r\n */\r\nprivate final SoftCache<DataFlavor, String> nativesForFlavorCache = new SoftCache<>();","field_name":"nativesForFlavorCache","field_type":"java.awt.datatransfer.SystemFlavorMap.SoftCache","full_declaration":"private final java.awt.datatransfer.SystemFlavorMap.SoftCache nativesForFlavorCache = new SoftCache<>()","id":663},{"comment":"/**\r\n * Caches the result getFlavorsForNative(). Maps String natives to\r\n * SoftReferences which reference LinkedHashSet of DataFlavors.\r\n */\r\nprivate final SoftCache<String, DataFlavor> flavorsForNativeCache = new SoftCache<>();","field_name":"flavorsForNativeCache","field_type":"java.awt.datatransfer.SystemFlavorMap.SoftCache","full_declaration":"private final java.awt.datatransfer.SystemFlavorMap.SoftCache flavorsForNativeCache = new SoftCache<>()","id":664},{"comment":"/**\r\n * Dynamic mapping generation used for text mappings should not be applied\r\n * to the DataFlavors and String natives for which the mappings have been\r\n * explicitly specified with setFlavorsForNative() or\r\n * setNativesForFlavor(). This keeps all such keys.\r\n */\r\nprivate Set<Object> disabledMappingGenerationKeys = new HashSet<>();","field_name":"disabledMappingGenerationKeys","field_type":"java.util.Set","full_declaration":"private java.util.Set disabledMappingGenerationKeys = new HashSet<>()","id":665},{"comment":"","field_name":"htmlDocumntTypes","field_type":"String[]","full_declaration":"private static final String[] htmlDocumntTypes = new String[] { \"all\", \"selection\", \"fragment\" }","id":666},{"comment":"Map<K, SoftReference<LinkedHashSet<V>>> cache;","field_name":"cache","field_type":"java.util.Map","full_declaration":"java.util.Map cache","id":667},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 5383814944251665601L","id":668},{"comment":"/*\r\n     * serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 8876966522510157497L","id":669},{"comment":"private static final PlatformLogger focusLog = PlatformLogger.getLogger(\"java.awt.focus.DefaultKeyboardFocusManager\");","field_name":"focusLog","field_type":"sun.util.logging.PlatformLogger","full_declaration":"private static final sun.util.logging.PlatformLogger focusLog = PlatformLogger.getLogger(\"java.awt.focus.DefaultKeyboardFocusManager\")","id":670},{"comment":"// null weak references to not create too many objects\r\nprivate static final WeakReference<Window> NULL_WINDOW_WR = new WeakReference<Window>(null);","field_name":"NULL_WINDOW_WR","field_type":"java.lang.ref.WeakReference","full_declaration":"private static final java.lang.ref.WeakReference NULL_WINDOW_WR = new WeakReference<Window>(null)","id":671},{"comment":"private static final WeakReference<Component> NULL_COMPONENT_WR = new WeakReference<Component>(null);","field_name":"NULL_COMPONENT_WR","field_type":"java.lang.ref.WeakReference","full_declaration":"private static final java.lang.ref.WeakReference NULL_COMPONENT_WR = new WeakReference<Component>(null)","id":672},{"comment":"private WeakReference<Window> realOppositeWindowWR = NULL_WINDOW_WR;","field_name":"realOppositeWindowWR","field_type":"java.lang.ref.WeakReference","full_declaration":"private java.lang.ref.WeakReference realOppositeWindowWR = NULL_WINDOW_WR","id":673},{"comment":"private WeakReference<Component> realOppositeComponentWR = NULL_COMPONENT_WR;","field_name":"realOppositeComponentWR","field_type":"java.lang.ref.WeakReference","full_declaration":"private java.lang.ref.WeakReference realOppositeComponentWR = NULL_COMPONENT_WR","id":674},{"comment":"","field_name":"inSendMessage","field_type":"int","full_declaration":"private int inSendMessage","id":675},{"comment":"private LinkedList<KeyEvent> enqueuedKeyEvents = new LinkedList<KeyEvent>();","field_name":"enqueuedKeyEvents","field_type":"java.util.LinkedList","full_declaration":"private java.util.LinkedList enqueuedKeyEvents = new LinkedList<KeyEvent>()","id":676},{"comment":"private LinkedList<TypeAheadMarker> typeAheadMarkers = new LinkedList<TypeAheadMarker>();","field_name":"typeAheadMarkers","field_type":"java.util.LinkedList","full_declaration":"private java.util.LinkedList typeAheadMarkers = new LinkedList<TypeAheadMarker>()","id":677},{"comment":"","field_name":"consumeNextKeyTyped","field_type":"boolean","full_declaration":"private boolean consumeNextKeyTyped","id":678},{"comment":"private Component restoreFocusTo;","field_name":"restoreFocusTo","field_type":"java.awt.Component","full_declaration":"private java.awt.Component restoreFocusTo","id":679},{"comment":"","field_name":"after","field_type":"long","full_declaration":"long after","id":680},{"comment":"Component untilFocused;","field_name":"untilFocused","field_type":"java.awt.Component","full_declaration":"java.awt.Component untilFocused","id":681},{"comment":"/*\r\n         * serialVersionUID\r\n         */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -2924743257508701758L","id":682},{"comment":"private DesktopPeer peer;","field_name":"peer","field_type":"java.awt.peer.DesktopPeer","full_declaration":"private java.awt.peer.DesktopPeer peer","id":683},{"comment":"/**\r\n * A dialog's resizable property. Will be true\r\n * if the Dialog is to be resizable, otherwise\r\n * it will be false.\r\n *\r\n * @serial\r\n * @see #setResizable(boolean)\r\n */\r\n","field_name":"resizable","field_type":"boolean","full_declaration":"boolean resizable = true","id":684},{"comment":"/**\r\n * This field indicates whether the dialog is undecorated.\r\n * This property can only be changed while the dialog is not displayable.\r\n * <code>undecorated</code> will be true if the dialog is\r\n * undecorated, otherwise it will be false.\r\n *\r\n * @serial\r\n * @see #setUndecorated(boolean)\r\n * @see #isUndecorated()\r\n * @see Component#isDisplayable()\r\n * @since 1.4\r\n */\r\n","field_name":"undecorated","field_type":"boolean","full_declaration":"boolean undecorated = false","id":685},{"comment":"","field_name":"initialized","field_type":"boolean","full_declaration":"private transient boolean initialized = false","id":686},{"comment":"/**\r\n * Default modality type for modal dialogs. The default modality type is\r\n * <code>APPLICATION_MODAL</code>. Calling the oldstyle <code>setModal(true)</code>\r\n * is equal to <code>setModalityType(DEFAULT_MODALITY_TYPE)</code>.\r\n *\r\n * @see java.awt.Dialog.ModalityType\r\n * @see java.awt.Dialog#setModal\r\n *\r\n * @since 1.6\r\n */\r\npublic final static ModalityType DEFAULT_MODALITY_TYPE = ModalityType.APPLICATION_MODAL;","field_name":"DEFAULT_MODALITY_TYPE","field_type":"java.awt.Dialog.ModalityType","full_declaration":"public final static java.awt.Dialog.ModalityType DEFAULT_MODALITY_TYPE = ModalityType.APPLICATION_MODAL","id":687},{"comment":"/**\r\n * True if this dialog is modal, false is the dialog is modeless.\r\n * A modal dialog blocks user input to some application top-level\r\n * windows. This field is kept only for backwards compatibility. Use the\r\n * {@link Dialog.ModalityType ModalityType} enum instead.\r\n *\r\n * @serial\r\n *\r\n * @see #isModal\r\n * @see #setModal\r\n * @see #getModalityType\r\n * @see #setModalityType\r\n * @see ModalityType\r\n * @see ModalityType#MODELESS\r\n * @see #DEFAULT_MODALITY_TYPE\r\n */\r\n","field_name":"modal","field_type":"boolean","full_declaration":"boolean modal","id":688},{"comment":"/**\r\n * Modality type of this dialog. If the dialog's modality type is not\r\n * {@link Dialog.ModalityType#MODELESS ModalityType.MODELESS}, it blocks all\r\n * user input to some application top-level windows.\r\n *\r\n * @serial\r\n *\r\n * @see ModalityType\r\n * @see #getModalityType\r\n * @see #setModalityType\r\n *\r\n * @since 1.6\r\n */\r\nModalityType modalityType;","field_name":"modalityType","field_type":"java.awt.Dialog.ModalityType","full_declaration":"java.awt.Dialog.ModalityType modalityType","id":689},{"comment":"/* operations with this list should be synchronized on tree lock*/\r\ntransient static IdentityArrayList<Dialog> modalDialogs = new IdentityArrayList<Dialog>();","field_name":"modalDialogs","field_type":"sun.awt.util.IdentityArrayList","full_declaration":"transient static sun.awt.util.IdentityArrayList modalDialogs = new IdentityArrayList<Dialog>()","id":690},{"comment":"transient IdentityArrayList<Window> blockedWindows = new IdentityArrayList<Window>();","field_name":"blockedWindows","field_type":"sun.awt.util.IdentityArrayList","full_declaration":"transient sun.awt.util.IdentityArrayList blockedWindows = new IdentityArrayList<Window>()","id":691},{"comment":"/**\r\n * Specifies the title of the Dialog.\r\n * This field can be null.\r\n *\r\n * @serial\r\n * @see #getTitle()\r\n * @see #setTitle(String)\r\n */\r\nString title;","field_name":"title","field_type":"java.lang.String","full_declaration":"java.lang.String title","id":692},{"comment":"private transient ModalEventFilter modalFilter;","field_name":"modalFilter","field_type":"java.awt.ModalEventFilter","full_declaration":"private transient java.awt.ModalEventFilter modalFilter","id":693},{"comment":"private transient volatile SecondaryLoop secondaryLoop;","field_name":"secondaryLoop","field_type":"java.awt.SecondaryLoop","full_declaration":"private transient volatile java.awt.SecondaryLoop secondaryLoop","id":694},{"comment":"/*\r\n     * Indicates that this dialog is being hidden. This flag is set to true at\r\n     * the beginning of hide() and to false at the end of hide().\r\n     *\r\n     * @see #hide()\r\n     * @see #hideAndDisposePreHandler()\r\n     * @see #hideAndDisposeHandler()\r\n     * @see #shouldBlock()\r\n     */\r\n","field_name":"isInHide","field_type":"boolean","full_declaration":"transient volatile boolean isInHide = false","id":695},{"comment":"/*\r\n     * Indicates that this dialog is being disposed. This flag is set to true at\r\n     * the beginning of doDispose() and to false at the end of doDispose().\r\n     *\r\n     * @see #hide()\r\n     * @see #hideAndDisposePreHandler()\r\n     * @see #hideAndDisposeHandler()\r\n     * @see #doDispose()\r\n     */\r\n","field_name":"isInDispose","field_type":"boolean","full_declaration":"transient volatile boolean isInDispose = false","id":696},{"comment":"private static final String base = \"dialog\";","field_name":"base","field_type":"java.lang.String","full_declaration":"private static final java.lang.String base = \"dialog\"","id":697},{"comment":"","field_name":"nameCounter","field_type":"int","full_declaration":"private static int nameCounter = 0","id":698},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 5920926903803293709L","id":699},{"comment":"/*\r\n         * JDK 1.3 serialVersionUID\r\n         */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 4837230331833941201L","id":700},{"comment":"/**\r\n * The width dimension; negative values can be used.\r\n *\r\n * @serial\r\n * @see #getSize\r\n * @see #setSize\r\n * @since 1.0\r\n */\r\n","field_name":"width","field_type":"int","full_declaration":"public int width","id":701},{"comment":"/**\r\n * The height dimension; negative values can be used.\r\n *\r\n * @serial\r\n * @see #getSize\r\n * @see #setSize\r\n * @since 1.0\r\n */\r\n","field_name":"height","field_type":"int","full_declaration":"public int height","id":702},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 4723952579491349524L","id":703},{"comment":"private Dimension size;","field_name":"size","field_type":"java.awt.Dimension","full_declaration":"private java.awt.Dimension size","id":704},{"comment":"","field_name":"bitDepth","field_type":"int","full_declaration":"private int bitDepth","id":705},{"comment":"","field_name":"refreshRate","field_type":"int","full_declaration":"private int refreshRate","id":706},{"comment":"/**\r\n * Value of the bit depth if multiple bit depths are supported in this\r\n * display mode.\r\n * @see #getBitDepth\r\n */\r\n@Native\r\n","field_name":"BIT_DEPTH_MULTI","field_type":"int","full_declaration":"public final static int BIT_DEPTH_MULTI = -1","id":707},{"comment":"/**\r\n * Value of the refresh rate if not known.\r\n * @see #getRefreshRate\r\n */\r\n@Native\r\n","field_name":"REFRESH_RATE_UNKNOWN","field_type":"int","full_declaration":"public final static int REFRESH_RATE_UNKNOWN = 0","id":708},{"comment":"/**\r\n * An <code>int</code> representing no action.\r\n */\r\n@Native\r\n","field_name":"ACTION_NONE","field_type":"int","full_declaration":"public static final int ACTION_NONE = 0x0","id":709},{"comment":"/**\r\n * An <code>int</code> representing a &quot;copy&quot; action.\r\n */\r\n@Native\r\n","field_name":"ACTION_COPY","field_type":"int","full_declaration":"public static final int ACTION_COPY = 0x1","id":710},{"comment":"/**\r\n * An <code>int</code> representing a &quot;move&quot; action.\r\n */\r\n@Native\r\n","field_name":"ACTION_MOVE","field_type":"int","full_declaration":"public static final int ACTION_MOVE = 0x2","id":711},{"comment":"/**\r\n * An <code>int</code> representing a &quot;copy&quot; or\r\n * &quot;move&quot; action.\r\n */\r\n@Native\r\n","field_name":"ACTION_COPY_OR_MOVE","field_type":"int","full_declaration":"public static final int ACTION_COPY_OR_MOVE = ACTION_COPY | ACTION_MOVE","id":712},{"comment":"/**\r\n * An <code>int</code> representing a &quot;link&quot; action.\r\n *\r\n * The link verb is found in many, if not all native DnD platforms, and the\r\n * actual interpretation of LINK semantics is both platform\r\n * and application dependent. Broadly speaking, the\r\n * semantic is \"do not copy, or move the operand, but create a reference\r\n * to it\". Defining the meaning of \"reference\" is where ambiguity is\r\n * introduced.\r\n *\r\n * The verb is provided for completeness, but its use is not recommended\r\n * for DnD operations between logically distinct applications where\r\n * misinterpretation of the operations semantics could lead to confusing\r\n * results for the user.\r\n */\r\n@Native\r\n","field_name":"ACTION_LINK","field_type":"int","full_declaration":"public static final int ACTION_LINK = 0x40000000","id":713},{"comment":"/**\r\n * An <code>int</code> representing a &quot;reference&quot;\r\n * action (synonym for ACTION_LINK).\r\n */\r\n@Native\r\n","field_name":"ACTION_REFERENCE","field_type":"int","full_declaration":"public static final int ACTION_REFERENCE = ACTION_LINK","id":714},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 9080172649166731306L","id":715},{"comment":"/*\r\n     * fields\r\n     */\r\n@SuppressWarnings(\"rawtypes\")\r\nprivate transient List events;","field_name":"events","field_type":"java.util.List","full_declaration":"private transient java.util.List events","id":716},{"comment":"/**\r\n * The DragSource associated with this DragGestureEvent.\r\n *\r\n * @serial\r\n */\r\nprivate DragSource dragSource;","field_name":"dragSource","field_type":"java.awt.dnd.DragSource","full_declaration":"private java.awt.dnd.DragSource dragSource","id":717},{"comment":"/**\r\n * The Component associated with this DragGestureEvent.\r\n *\r\n * @serial\r\n */\r\nprivate Component component;","field_name":"component","field_type":"java.awt.Component","full_declaration":"private java.awt.Component component","id":718},{"comment":"/**\r\n * The origin of the drag.\r\n *\r\n * @serial\r\n */\r\nprivate Point origin;","field_name":"origin","field_type":"java.awt.Point","full_declaration":"private java.awt.Point origin","id":719},{"comment":"/**\r\n * The user's preferred action.\r\n *\r\n * @serial\r\n */\r\n","field_name":"action","field_type":"int","full_declaration":"private int action","id":720},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 8996673345831063337L","id":721},{"comment":"/*\r\n     * fields\r\n     */\r\n/**\r\n * The <code>DragSource</code>\r\n * associated with this\r\n * <code>DragGestureRecognizer</code>.\r\n *\r\n * @serial\r\n */\r\nprotected DragSource dragSource;","field_name":"dragSource","field_type":"java.awt.dnd.DragSource","full_declaration":"protected java.awt.dnd.DragSource dragSource","id":722},{"comment":"/**\r\n * The <code>Component</code>\r\n * associated with this <code>DragGestureRecognizer</code>.\r\n *\r\n * @serial\r\n */\r\nprotected Component component;","field_name":"component","field_type":"java.awt.Component","full_declaration":"protected java.awt.Component component","id":723},{"comment":"/**\r\n * The <code>DragGestureListener</code>\r\n * associated with this <code>DragGestureRecognizer</code>.\r\n */\r\nprotected transient DragGestureListener dragGestureListener;","field_name":"dragGestureListener","field_type":"java.awt.dnd.DragGestureListener","full_declaration":"protected transient java.awt.dnd.DragGestureListener dragGestureListener","id":724},{"comment":"/**\r\n * An <code>int</code> representing\r\n * the type(s) of action(s) used\r\n * in this Drag and Drop operation.\r\n *\r\n * @serial\r\n */\r\n","field_name":"sourceActions","field_type":"int","full_declaration":"protected int sourceActions","id":725},{"comment":"/**\r\n * The list of events (in order) that\r\n * the <code>DragGestureRecognizer</code>\r\n * \"recognized\" as a \"gesture\" that triggers a drag.\r\n *\r\n * @serial\r\n */\r\nprotected ArrayList<InputEvent> events = new ArrayList<InputEvent>(1);","field_name":"events","field_type":"java.util.ArrayList","full_declaration":"protected java.util.ArrayList events = new ArrayList<InputEvent>(1)","id":726},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 6236096958971414066L","id":727},{"comment":"/**\r\n * The default <code>Cursor</code> to use with a copy operation indicating\r\n * that a drop is currently allowed. <code>null</code> if\r\n * <code>GraphicsEnvironment.isHeadless()</code> returns <code>true</code>.\r\n *\r\n * @see java.awt.GraphicsEnvironment#isHeadless\r\n */\r\npublic static final Cursor DefaultCopyDrop = load(\"DnD.Cursor.CopyDrop\");","field_name":"DefaultCopyDrop","field_type":"java.awt.Cursor","full_declaration":"public static final java.awt.Cursor DefaultCopyDrop = load(\"DnD.Cursor.CopyDrop\")","id":728},{"comment":"/**\r\n * The default <code>Cursor</code> to use with a move operation indicating\r\n * that a drop is currently allowed. <code>null</code> if\r\n * <code>GraphicsEnvironment.isHeadless()</code> returns <code>true</code>.\r\n *\r\n * @see java.awt.GraphicsEnvironment#isHeadless\r\n */\r\npublic static final Cursor DefaultMoveDrop = load(\"DnD.Cursor.MoveDrop\");","field_name":"DefaultMoveDrop","field_type":"java.awt.Cursor","full_declaration":"public static final java.awt.Cursor DefaultMoveDrop = load(\"DnD.Cursor.MoveDrop\")","id":729},{"comment":"/**\r\n * The default <code>Cursor</code> to use with a link operation indicating\r\n * that a drop is currently allowed. <code>null</code> if\r\n * <code>GraphicsEnvironment.isHeadless()</code> returns <code>true</code>.\r\n *\r\n * @see java.awt.GraphicsEnvironment#isHeadless\r\n */\r\npublic static final Cursor DefaultLinkDrop = load(\"DnD.Cursor.LinkDrop\");","field_name":"DefaultLinkDrop","field_type":"java.awt.Cursor","full_declaration":"public static final java.awt.Cursor DefaultLinkDrop = load(\"DnD.Cursor.LinkDrop\")","id":730},{"comment":"/**\r\n * The default <code>Cursor</code> to use with a copy operation indicating\r\n * that a drop is currently not allowed. <code>null</code> if\r\n * <code>GraphicsEnvironment.isHeadless()</code> returns <code>true</code>.\r\n *\r\n * @see java.awt.GraphicsEnvironment#isHeadless\r\n */\r\npublic static final Cursor DefaultCopyNoDrop = load(\"DnD.Cursor.CopyNoDrop\");","field_name":"DefaultCopyNoDrop","field_type":"java.awt.Cursor","full_declaration":"public static final java.awt.Cursor DefaultCopyNoDrop = load(\"DnD.Cursor.CopyNoDrop\")","id":731},{"comment":"/**\r\n * The default <code>Cursor</code> to use with a move operation indicating\r\n * that a drop is currently not allowed. <code>null</code> if\r\n * <code>GraphicsEnvironment.isHeadless()</code> returns <code>true</code>.\r\n *\r\n * @see java.awt.GraphicsEnvironment#isHeadless\r\n */\r\npublic static final Cursor DefaultMoveNoDrop = load(\"DnD.Cursor.MoveNoDrop\");","field_name":"DefaultMoveNoDrop","field_type":"java.awt.Cursor","full_declaration":"public static final java.awt.Cursor DefaultMoveNoDrop = load(\"DnD.Cursor.MoveNoDrop\")","id":732},{"comment":"/**\r\n * The default <code>Cursor</code> to use with a link operation indicating\r\n * that a drop is currently not allowed. <code>null</code> if\r\n * <code>GraphicsEnvironment.isHeadless()</code> returns <code>true</code>.\r\n *\r\n * @see java.awt.GraphicsEnvironment#isHeadless\r\n */\r\npublic static final Cursor DefaultLinkNoDrop = load(\"DnD.Cursor.LinkNoDrop\");","field_name":"DefaultLinkNoDrop","field_type":"java.awt.Cursor","full_declaration":"public static final java.awt.Cursor DefaultLinkNoDrop = load(\"DnD.Cursor.LinkNoDrop\")","id":733},{"comment":"private static final DragSource dflt = (GraphicsEnvironment.isHeadless()) ? null : new DragSource();","field_name":"dflt","field_type":"java.awt.dnd.DragSource","full_declaration":"private static final java.awt.dnd.DragSource dflt = (GraphicsEnvironment.isHeadless()) ? null : new DragSource()","id":734},{"comment":"/**\r\n * Internal constants for serialization.\r\n */\r\nstatic final String dragSourceListenerK = \"dragSourceL\";","field_name":"dragSourceListenerK","field_type":"java.lang.String","full_declaration":"static final java.lang.String dragSourceListenerK = \"dragSourceL\"","id":735},{"comment":"static final String dragSourceMotionListenerK = \"dragSourceMotionL\";","field_name":"dragSourceMotionListenerK","field_type":"java.lang.String","full_declaration":"static final java.lang.String dragSourceMotionListenerK = \"dragSourceMotionL\"","id":736},{"comment":"/*\r\n     * fields\r\n     */\r\nprivate transient FlavorMap flavorMap = SystemFlavorMap.getDefaultFlavorMap();","field_name":"flavorMap","field_type":"java.awt.datatransfer.FlavorMap","full_declaration":"private transient java.awt.datatransfer.FlavorMap flavorMap = SystemFlavorMap.getDefaultFlavorMap()","id":737},{"comment":"private transient DragSourceListener listener;","field_name":"listener","field_type":"java.awt.dnd.DragSourceListener","full_declaration":"private transient java.awt.dnd.DragSourceListener listener","id":738},{"comment":"private transient DragSourceMotionListener motionListener;","field_name":"motionListener","field_type":"java.awt.dnd.DragSourceMotionListener","full_declaration":"private transient java.awt.dnd.DragSourceMotionListener motionListener","id":739},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -115407898692194719L","id":740},{"comment":"// used by updateCurrentCursor\r\n/**\r\n * An <code>int</code> used by updateCurrentCursor()\r\n * indicating that the <code>Cursor</code> should change\r\n * to the default (no drop) <code>Cursor</code>.\r\n */\r\n","field_name":"DEFAULT","field_type":"int","full_declaration":"protected static final int DEFAULT = 0","id":741},{"comment":"/**\r\n * An <code>int</code> used by updateCurrentCursor()\r\n * indicating that the <code>Cursor</code>\r\n * has entered a <code>DropTarget</code>.\r\n */\r\n","field_name":"ENTER","field_type":"int","full_declaration":"protected static final int ENTER = 1","id":742},{"comment":"/**\r\n * An <code>int</code> used by updateCurrentCursor()\r\n * indicating that the <code>Cursor</code> is\r\n * over a <code>DropTarget</code>.\r\n */\r\n","field_name":"OVER","field_type":"int","full_declaration":"protected static final int OVER = 2","id":743},{"comment":"/**\r\n * An <code>int</code> used by updateCurrentCursor()\r\n * indicating that the user operation has changed.\r\n */\r\n","field_name":"CHANGED","field_type":"int","full_declaration":"protected static final int CHANGED = 3","id":744},{"comment":"private static Transferable emptyTransferable;","field_name":"emptyTransferable","field_type":"java.awt.datatransfer.Transferable","full_declaration":"private static java.awt.datatransfer.Transferable emptyTransferable","id":745},{"comment":"/*\r\n     * fields\r\n     */\r\nprivate transient DragSourceContextPeer peer;","field_name":"peer","field_type":"java.awt.dnd.peer.DragSourceContextPeer","full_declaration":"private transient java.awt.dnd.peer.DragSourceContextPeer peer","id":746},{"comment":"/**\r\n * The event which triggered the start of the drag.\r\n *\r\n * @serial\r\n */\r\nprivate DragGestureEvent trigger;","field_name":"trigger","field_type":"java.awt.dnd.DragGestureEvent","full_declaration":"private java.awt.dnd.DragGestureEvent trigger","id":747},{"comment":"/**\r\n * The current drag cursor.\r\n *\r\n * @serial\r\n */\r\nprivate Cursor cursor;","field_name":"cursor","field_type":"java.awt.Cursor","full_declaration":"private java.awt.Cursor cursor","id":748},{"comment":"private transient Transferable transferable;","field_name":"transferable","field_type":"java.awt.datatransfer.Transferable","full_declaration":"private transient java.awt.datatransfer.Transferable transferable","id":749},{"comment":"private transient DragSourceListener listener;","field_name":"listener","field_type":"java.awt.dnd.DragSourceListener","full_declaration":"private transient java.awt.dnd.DragSourceListener listener","id":750},{"comment":"/**\r\n * <code>true</code> if the custom drag cursor is used instead of the\r\n * default one.\r\n *\r\n * @serial\r\n */\r\n","field_name":"useCustomCursor","field_type":"boolean","full_declaration":"private boolean useCustomCursor","id":751},{"comment":"/**\r\n * A bitwise mask of <code>DnDConstants</code> that represents the set of\r\n * drop actions supported by the drag source for the drag operation associated\r\n * with this <code>DragSourceContext.</code>\r\n *\r\n * @serial\r\n */\r\n","field_name":"sourceActions","field_type":"int","full_declaration":"private int sourceActions","id":752},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 481346297933902471L","id":753},{"comment":"","field_name":"JDK_1_3_MODIFIERS","field_type":"int","full_declaration":"private static final int JDK_1_3_MODIFIERS = InputEvent.SHIFT_DOWN_MASK - 1","id":754},{"comment":"","field_name":"JDK_1_4_MODIFIERS","field_type":"int","full_declaration":"private static final int JDK_1_4_MODIFIERS = ((InputEvent.ALT_GRAPH_DOWN_MASK << 1) - 1) & ~JDK_1_3_MODIFIERS","id":755},{"comment":"/*\r\n     * fields\r\n     */\r\n/**\r\n * The target drop action.\r\n *\r\n * @serial\r\n */\r\n","field_name":"targetActions","field_type":"int","full_declaration":"private int targetActions = DnDConstants.ACTION_NONE","id":756},{"comment":"/**\r\n * The user drop action.\r\n *\r\n * @serial\r\n */\r\n","field_name":"dropAction","field_type":"int","full_declaration":"private int dropAction = DnDConstants.ACTION_NONE","id":757},{"comment":"/**\r\n * The state of the input device modifiers associated with the user\r\n * gesture.\r\n *\r\n * @serial\r\n */\r\n","field_name":"gestureModifiers","field_type":"int","full_declaration":"private int gestureModifiers = 0","id":758},{"comment":"/**\r\n * Indicates whether the <code>gestureModifiers</code> are invalid.\r\n *\r\n * @serial\r\n */\r\n","field_name":"invalidModifiers","field_type":"boolean","full_declaration":"private boolean invalidModifiers","id":759},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -5571321229470821891L","id":760},{"comment":"/*\r\n     * fields\r\n     */\r\n/**\r\n * <code>true</code> if the drop was successful.\r\n *\r\n * @serial\r\n */\r\n","field_name":"dropSuccess","field_type":"boolean","full_declaration":"private boolean dropSuccess","id":761},{"comment":"/**\r\n * The drop action.\r\n *\r\n * @serial\r\n */\r\n","field_name":"dropAction","field_type":"int","full_declaration":"private int dropAction = DnDConstants.ACTION_NONE","id":762},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -763287114604032641L","id":763},{"comment":"/**\r\n * The <code>boolean</code> indicating whether the cursor location\r\n * is specified for this event.\r\n *\r\n * @serial\r\n */\r\n","field_name":"locationSpecified","field_type":"boolean","full_declaration":"private final boolean locationSpecified","id":764},{"comment":"/**\r\n * The horizontal coordinate for the cursor location at the moment this\r\n * event occurred if the cursor location is specified for this event;\r\n * otherwise zero.\r\n *\r\n * @serial\r\n */\r\n","field_name":"x","field_type":"int","full_declaration":"private final int x","id":765},{"comment":"/**\r\n * The vertical coordinate for the cursor location at the moment this event\r\n * occurred if the cursor location is specified for this event;\r\n * otherwise zero.\r\n *\r\n * @serial\r\n */\r\n","field_name":"y","field_type":"int","full_declaration":"private final int y","id":766},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -6283860791671019047L","id":767},{"comment":"/**\r\n * The DropTargetContext associated with this DropTarget.\r\n *\r\n * @serial\r\n */\r\nprivate DropTargetContext dropTargetContext = createDropTargetContext();","field_name":"dropTargetContext","field_type":"java.awt.dnd.DropTargetContext","full_declaration":"private java.awt.dnd.DropTargetContext dropTargetContext = createDropTargetContext()","id":768},{"comment":"/**\r\n * The Component associated with this DropTarget.\r\n *\r\n * @serial\r\n */\r\nprivate Component component;","field_name":"component","field_type":"java.awt.Component","full_declaration":"private java.awt.Component component","id":769},{"comment":"/*\r\n     * That Component's  Peer\r\n     */\r\nprivate transient ComponentPeer componentPeer;","field_name":"componentPeer","field_type":"java.awt.peer.ComponentPeer","full_declaration":"private transient java.awt.peer.ComponentPeer componentPeer","id":770},{"comment":"/*\r\n     * That Component's \"native\" Peer\r\n     */\r\nprivate transient ComponentPeer nativePeer;","field_name":"nativePeer","field_type":"java.awt.peer.ComponentPeer","full_declaration":"private transient java.awt.peer.ComponentPeer nativePeer","id":771},{"comment":"/**\r\n * Default permissible actions supported by this DropTarget.\r\n *\r\n * @see #setDefaultActions\r\n * @see #getDefaultActions\r\n * @serial\r\n */\r\n","field_name":"actions","field_type":"int","full_declaration":"int actions = DnDConstants.ACTION_COPY_OR_MOVE","id":772},{"comment":"/**\r\n * <code>true</code> if the DropTarget is accepting Drag &amp; Drop operations.\r\n *\r\n * @serial\r\n */\r\n","field_name":"active","field_type":"boolean","full_declaration":"boolean active = true","id":773},{"comment":"/*\r\n     * the auto scrolling object\r\n     */\r\nprivate transient DropTargetAutoScroller autoScroller;","field_name":"autoScroller","field_type":"java.awt.dnd.DropTarget.DropTargetAutoScroller","full_declaration":"private transient java.awt.dnd.DropTarget.DropTargetAutoScroller autoScroller","id":774},{"comment":"/*\r\n     * The delegate\r\n     */\r\nprivate transient DropTargetListener dtListener;","field_name":"dtListener","field_type":"java.awt.dnd.DropTargetListener","full_declaration":"private transient java.awt.dnd.DropTargetListener dtListener","id":775},{"comment":"/*\r\n     * The FlavorMap\r\n     */\r\nprivate transient FlavorMap flavorMap;","field_name":"flavorMap","field_type":"java.awt.datatransfer.FlavorMap","full_declaration":"private transient java.awt.datatransfer.FlavorMap flavorMap","id":776},{"comment":"/*\r\n     * If the dragging is currently inside this drop target\r\n     */\r\n","field_name":"isDraggingInside","field_type":"boolean","full_declaration":"private transient boolean isDraggingInside","id":777},{"comment":"/*\r\n         * fields\r\n         */\r\nprivate Component component;","field_name":"component","field_type":"java.awt.Component","full_declaration":"private java.awt.Component component","id":778},{"comment":"private Autoscroll autoScroll;","field_name":"autoScroll","field_type":"java.awt.dnd.Autoscroll","full_declaration":"private java.awt.dnd.Autoscroll autoScroll","id":779},{"comment":"private Timer timer;","field_name":"timer","field_type":"javax.swing.Timer","full_declaration":"private javax.swing.Timer timer","id":780},{"comment":"private Point locn;","field_name":"locn","field_type":"java.awt.Point","full_declaration":"private java.awt.Point locn","id":781},{"comment":"private Point prev;","field_name":"prev","field_type":"java.awt.Point","full_declaration":"private java.awt.Point prev","id":782},{"comment":"private Rectangle outer = new Rectangle();","field_name":"outer","field_type":"java.awt.Rectangle","full_declaration":"private java.awt.Rectangle outer = new Rectangle()","id":783},{"comment":"private Rectangle inner = new Rectangle();","field_name":"inner","field_type":"java.awt.Rectangle","full_declaration":"private java.awt.Rectangle inner = new Rectangle()","id":784},{"comment":"","field_name":"hysteresis","field_type":"int","full_declaration":"private int hysteresis = 10","id":785},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -634158968993743371L","id":786},{"comment":"/**\r\n * ************************************************************************\r\n */\r\n/*\r\n     * fields\r\n     */\r\n/**\r\n * The DropTarget associated with this DropTargetContext.\r\n *\r\n * @serial\r\n */\r\nprivate DropTarget dropTarget;","field_name":"dropTarget","field_type":"java.awt.dnd.DropTarget","full_declaration":"private java.awt.dnd.DropTarget dropTarget","id":787},{"comment":"private transient DropTargetContextPeer dropTargetContextPeer;","field_name":"dropTargetContextPeer","field_type":"java.awt.dnd.peer.DropTargetContextPeer","full_declaration":"private transient java.awt.dnd.peer.DropTargetContextPeer dropTargetContextPeer","id":788},{"comment":"private transient Transferable transferable;","field_name":"transferable","field_type":"java.awt.datatransfer.Transferable","full_declaration":"private transient java.awt.datatransfer.Transferable transferable","id":789},{"comment":"/*\r\n         * fields\r\n         */\r\n// We don't need to worry about client code changing the values of\r\n// these variables. Since TransferableProxy is a protected class, only\r\n// subclasses of DropTargetContext can access it. And DropTargetContext\r\n// cannot be subclassed by client code because it does not have a\r\n// public constructor.\r\n/**\r\n * The encapsulated <code>Transferable</code> object.\r\n */\r\nprotected Transferable transferable;","field_name":"transferable","field_type":"java.awt.datatransfer.Transferable","full_declaration":"protected java.awt.datatransfer.Transferable transferable","id":790},{"comment":"/**\r\n * A <code>boolean</code> indicating if the encapsulated\r\n * <code>Transferable</code> object represents the result\r\n * of local drag-n-drop operation (within the same JVM).\r\n */\r\n","field_name":"isLocal","field_type":"boolean","full_declaration":"protected boolean isLocal","id":791},{"comment":"","field_name":"proxy","field_type":"sun.awt.datatransfer.TransferableProxy","full_declaration":"private sun.awt.datatransfer.TransferableProxy proxy","id":792},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -8422265619058953682L","id":793},{"comment":"/*\r\n     * fields\r\n     */\r\n/**\r\n * The location of the drag cursor's hotspot in Component coordinates.\r\n *\r\n * @serial\r\n */\r\nprivate Point location;","field_name":"location","field_type":"java.awt.Point","full_declaration":"private java.awt.Point location","id":794},{"comment":"/**\r\n * The source drop actions.\r\n *\r\n * @serial\r\n */\r\n","field_name":"actions","field_type":"int","full_declaration":"private int actions","id":795},{"comment":"/**\r\n * The user drop action.\r\n *\r\n * @serial\r\n */\r\n","field_name":"dropAction","field_type":"int","full_declaration":"private int dropAction","id":796},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -1721911170440459322L","id":797},{"comment":"/*\r\n     * fields\r\n     */\r\nstatic final private Point zero = new Point(0, 0);","field_name":"zero","field_type":"java.awt.Point","full_declaration":"static final private java.awt.Point zero = new Point(0, 0)","id":798},{"comment":"/**\r\n * The location of the drag cursor's hotspot in Component coordinates.\r\n *\r\n * @serial\r\n */\r\nprivate Point location = zero;","field_name":"location","field_type":"java.awt.Point","full_declaration":"private java.awt.Point location = zero","id":799},{"comment":"/**\r\n * The source drop actions.\r\n *\r\n * @serial\r\n */\r\n","field_name":"actions","field_type":"int","full_declaration":"private int actions = DnDConstants.ACTION_NONE","id":800},{"comment":"/**\r\n * The user drop action.\r\n *\r\n * @serial\r\n */\r\n","field_name":"dropAction","field_type":"int","full_declaration":"private int dropAction = DnDConstants.ACTION_NONE","id":801},{"comment":"/**\r\n * <code>true</code> if the source is in the same JVM as the target.\r\n *\r\n * @serial\r\n */\r\n","field_name":"isLocalTx","field_type":"boolean","full_declaration":"private boolean isLocalTx = false","id":802},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 2821229066521922993L","id":803},{"comment":"/**\r\n * The <code>DropTargetContext</code> associated with this\r\n * <code>DropTargetEvent</code>.\r\n *\r\n * @serial\r\n */\r\nprotected DropTargetContext context;","field_name":"context","field_type":"java.awt.dnd.DropTargetContext","full_declaration":"protected java.awt.dnd.DropTargetContext context","id":804},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -6062568741193956678L","id":805},{"comment":"static private String dft_msg = \"The operation requested cannot be performed by the DnD system since it is not in the appropriate state\";","field_name":"dft_msg","field_type":"java.lang.String","full_declaration":"static private java.lang.String dft_msg = \"The operation requested cannot be performed by the DnD system since it is not in the appropriate state\"","id":806},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 6220099344182281120L","id":807},{"comment":"private static ObjectOutputStream stream;","field_name":"stream","field_type":"java.io.ObjectOutputStream","full_declaration":"private static java.io.ObjectOutputStream stream","id":808},{"comment":"/**\r\n * The shift modifier. An indicator that the shift key was held\r\n * down during the event.\r\n */\r\n","field_name":"SHIFT_MASK","field_type":"int","full_declaration":"public static final int SHIFT_MASK = Event.SHIFT_MASK","id":809},{"comment":"/**\r\n * The control modifier. An indicator that the control key was held\r\n * down during the event.\r\n */\r\n","field_name":"CTRL_MASK","field_type":"int","full_declaration":"public static final int CTRL_MASK = Event.CTRL_MASK","id":810},{"comment":"/**\r\n * The meta modifier. An indicator that the meta key was held\r\n * down during the event.\r\n */\r\n","field_name":"META_MASK","field_type":"int","full_declaration":"public static final int META_MASK = Event.META_MASK","id":811},{"comment":"/**\r\n * The alt modifier. An indicator that the alt key was held\r\n * down during the event.\r\n */\r\n","field_name":"ALT_MASK","field_type":"int","full_declaration":"public static final int ALT_MASK = Event.ALT_MASK","id":812},{"comment":"/**\r\n * The first number in the range of ids used for action events.\r\n */\r\n","field_name":"ACTION_FIRST","field_type":"int","full_declaration":"public static final int ACTION_FIRST = 1001","id":813},{"comment":"/**\r\n * The last number in the range of ids used for action events.\r\n */\r\n","field_name":"ACTION_LAST","field_type":"int","full_declaration":"public static final int ACTION_LAST = 1001","id":814},{"comment":"/**\r\n * This event id indicates that a meaningful action occurred.\r\n */\r\n// Event.ACTION_EVENT\r\n@Native\r\n","field_name":"ACTION_PERFORMED","field_type":"int","full_declaration":"public static final int ACTION_PERFORMED = ACTION_FIRST","id":815},{"comment":"/**\r\n * The nonlocalized string that gives more details\r\n * of what actually caused the event.\r\n * This information is very specific to the component\r\n * that fired it.\r\n *\r\n * @serial\r\n * @see #getActionCommand\r\n */\r\nString actionCommand;","field_name":"actionCommand","field_type":"java.lang.String","full_declaration":"java.lang.String actionCommand","id":816},{"comment":"/**\r\n * Timestamp of when this event occurred. Because an ActionEvent is a high-\r\n * level, semantic event, the timestamp is typically the same as an\r\n * underlying InputEvent.\r\n *\r\n * @serial\r\n * @see #getWhen\r\n */\r\n","field_name":"when","field_type":"long","full_declaration":"long when","id":817},{"comment":"/**\r\n * This represents the key modifier that was selected,\r\n * and is used to determine the state of the selected key.\r\n * If no modifier has been selected it will default to\r\n * zero.\r\n *\r\n * @serial\r\n * @see #getModifiers\r\n */\r\n","field_name":"modifiers","field_type":"int","full_declaration":"int modifiers","id":818},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -7671078796273832149L","id":819},{"comment":"/**\r\n * Marks the first integer id for the range of adjustment event ids.\r\n */\r\n","field_name":"ADJUSTMENT_FIRST","field_type":"int","full_declaration":"public static final int ADJUSTMENT_FIRST = 601","id":820},{"comment":"/**\r\n * Marks the last integer id for the range of adjustment event ids.\r\n */\r\n","field_name":"ADJUSTMENT_LAST","field_type":"int","full_declaration":"public static final int ADJUSTMENT_LAST = 601","id":821},{"comment":"/**\r\n * The adjustment value changed event.\r\n */\r\n// Event.SCROLL_LINE_UP\r\n","field_name":"ADJUSTMENT_VALUE_CHANGED","field_type":"int","full_declaration":"public static final int ADJUSTMENT_VALUE_CHANGED = ADJUSTMENT_FIRST","id":822},{"comment":"/**\r\n * The unit increment adjustment type.\r\n */\r\n@Native\r\n","field_name":"UNIT_INCREMENT","field_type":"int","full_declaration":"public static final int UNIT_INCREMENT = 1","id":823},{"comment":"/**\r\n * The unit decrement adjustment type.\r\n */\r\n@Native\r\n","field_name":"UNIT_DECREMENT","field_type":"int","full_declaration":"public static final int UNIT_DECREMENT = 2","id":824},{"comment":"/**\r\n * The block decrement adjustment type.\r\n */\r\n@Native\r\n","field_name":"BLOCK_DECREMENT","field_type":"int","full_declaration":"public static final int BLOCK_DECREMENT = 3","id":825},{"comment":"/**\r\n * The block increment adjustment type.\r\n */\r\n@Native\r\n","field_name":"BLOCK_INCREMENT","field_type":"int","full_declaration":"public static final int BLOCK_INCREMENT = 4","id":826},{"comment":"/**\r\n * The absolute tracking adjustment type.\r\n */\r\n@Native\r\n","field_name":"TRACK","field_type":"int","full_declaration":"public static final int TRACK = 5","id":827},{"comment":"/**\r\n * The adjustable object that fired the event.\r\n *\r\n * @serial\r\n * @see #getAdjustable\r\n */\r\nAdjustable adjustable;","field_name":"adjustable","field_type":"java.awt.Adjustable","full_declaration":"java.awt.Adjustable adjustable","id":828},{"comment":"/**\r\n * <code>value</code> will contain the new value of the\r\n * adjustable object.  This value will always be  in a\r\n * range associated adjustable object.\r\n *\r\n * @serial\r\n * @see #getValue\r\n */\r\n","field_name":"value","field_type":"int","full_declaration":"int value","id":829},{"comment":"/**\r\n * The <code>adjustmentType</code> describes how the adjustable\r\n * object value has changed.\r\n * This value can be increased/decreased by a block or unit amount\r\n * where the block is associated with page increments/decrements,\r\n * and a unit is associated with line increments/decrements.\r\n *\r\n * @serial\r\n * @see #getAdjustmentType\r\n */\r\n","field_name":"adjustmentType","field_type":"int","full_declaration":"int adjustmentType","id":830},{"comment":"/**\r\n * The <code>isAdjusting</code> is true if the event is one\r\n * of the series of multiple adjustment events.\r\n *\r\n * @since 1.4\r\n * @serial\r\n * @see #getValueIsAdjusting\r\n */\r\n","field_name":"isAdjusting","field_type":"boolean","full_declaration":"boolean isAdjusting","id":831},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 5700290645205279921L","id":832},{"comment":"","field_name":"eventMask","field_type":"long","full_declaration":"private final long eventMask","id":833},{"comment":"/**\r\n * The first number in the range of ids used for component events.\r\n */\r\n","field_name":"COMPONENT_FIRST","field_type":"int","full_declaration":"public static final int COMPONENT_FIRST = 100","id":834},{"comment":"/**\r\n * The last number in the range of ids used for component events.\r\n */\r\n","field_name":"COMPONENT_LAST","field_type":"int","full_declaration":"public static final int COMPONENT_LAST = 103","id":835},{"comment":"/**\r\n * This event indicates that the component's position changed.\r\n */\r\n@Native\r\n","field_name":"COMPONENT_MOVED","field_type":"int","full_declaration":"public static final int COMPONENT_MOVED = COMPONENT_FIRST","id":836},{"comment":"/**\r\n * This event indicates that the component's size changed.\r\n */\r\n@Native\r\n","field_name":"COMPONENT_RESIZED","field_type":"int","full_declaration":"public static final int COMPONENT_RESIZED = 1 + COMPONENT_FIRST","id":837},{"comment":"/**\r\n * This event indicates that the component was made visible.\r\n */\r\n@Native\r\n","field_name":"COMPONENT_SHOWN","field_type":"int","full_declaration":"public static final int COMPONENT_SHOWN = 2 + COMPONENT_FIRST","id":838},{"comment":"/**\r\n * This event indicates that the component was rendered invisible.\r\n */\r\n@Native\r\n","field_name":"COMPONENT_HIDDEN","field_type":"int","full_declaration":"public static final int COMPONENT_HIDDEN = 3 + COMPONENT_FIRST","id":839},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 8101406823902992965L","id":840},{"comment":"/**\r\n * The first number in the range of ids used for container events.\r\n */\r\n","field_name":"CONTAINER_FIRST","field_type":"int","full_declaration":"public static final int CONTAINER_FIRST = 300","id":841},{"comment":"/**\r\n * The last number in the range of ids used for container events.\r\n */\r\n","field_name":"CONTAINER_LAST","field_type":"int","full_declaration":"public static final int CONTAINER_LAST = 301","id":842},{"comment":"/**\r\n * This event indicates that a component was added to the container.\r\n */\r\n","field_name":"COMPONENT_ADDED","field_type":"int","full_declaration":"public static final int COMPONENT_ADDED = CONTAINER_FIRST","id":843},{"comment":"/**\r\n * This event indicates that a component was removed from the container.\r\n */\r\n","field_name":"COMPONENT_REMOVED","field_type":"int","full_declaration":"public static final int COMPONENT_REMOVED = 1 + CONTAINER_FIRST","id":844},{"comment":"/**\r\n * The non-null component that is being added or\r\n * removed from the Container.\r\n *\r\n * @serial\r\n * @see #getChild()\r\n */\r\nComponent child;","field_name":"child","field_type":"java.awt.Component","full_declaration":"java.awt.Component child","id":845},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -4114942250539772041L","id":846},{"comment":"/**\r\n * The first number in the range of ids used for focus events.\r\n */\r\n","field_name":"FOCUS_FIRST","field_type":"int","full_declaration":"public static final int FOCUS_FIRST = 1004","id":847},{"comment":"/**\r\n * The last number in the range of ids used for focus events.\r\n */\r\n","field_name":"FOCUS_LAST","field_type":"int","full_declaration":"public static final int FOCUS_LAST = 1005","id":848},{"comment":"/**\r\n * This event indicates that the Component is now the focus owner.\r\n */\r\n// Event.GOT_FOCUS\r\n","field_name":"FOCUS_GAINED","field_type":"int","full_declaration":"public static final int FOCUS_GAINED = FOCUS_FIRST","id":849},{"comment":"/**\r\n * This event indicates that the Component is no longer the focus owner.\r\n */\r\n// Event.LOST_FOCUS\r\n","field_name":"FOCUS_LOST","field_type":"int","full_declaration":"public static final int FOCUS_LOST = 1 + FOCUS_FIRST","id":850},{"comment":"/**\r\n * A focus event can have two different levels, permanent and temporary.\r\n * It will be set to true if some operation takes away the focus\r\n * temporarily and intends on getting it back once the event is completed.\r\n * Otherwise it will be set to false.\r\n *\r\n * @serial\r\n * @see #isTemporary\r\n */\r\n","field_name":"temporary","field_type":"boolean","full_declaration":"boolean temporary","id":851},{"comment":"/**\r\n * The other Component involved in this focus change. For a FOCUS_GAINED\r\n * event, this is the Component that lost focus. For a FOCUS_LOST event,\r\n * this is the Component that gained focus. If this focus change occurs\r\n * with a native application, a Java application in a different VM, or with\r\n * no other Component, then the opposite Component is null.\r\n *\r\n * @see #getOppositeComponent\r\n * @since 1.4\r\n */\r\ntransient Component opposite;","field_name":"opposite","field_type":"java.awt.Component","full_declaration":"transient java.awt.Component opposite","id":852},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 523753786457416396L","id":853},{"comment":"/*\r\n     * serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -5337576970038043990L","id":854},{"comment":"/**\r\n * Marks the first integer id for the range of hierarchy event ids.\r\n */\r\n// 1300 used by sun.awt.windows.ModalityEvent\r\n","field_name":"HIERARCHY_FIRST","field_type":"int","full_declaration":"public static final int HIERARCHY_FIRST = 1400","id":855},{"comment":"/**\r\n * The event id indicating that modification was made to the\r\n * entire hierarchy tree.\r\n */\r\n","field_name":"HIERARCHY_CHANGED","field_type":"int","full_declaration":"public static final int HIERARCHY_CHANGED = HIERARCHY_FIRST","id":856},{"comment":"/**\r\n * The event id indicating an ancestor-Container was moved.\r\n */\r\n","field_name":"ANCESTOR_MOVED","field_type":"int","full_declaration":"public static final int ANCESTOR_MOVED = 1 + HIERARCHY_FIRST","id":857},{"comment":"/**\r\n * The event id indicating an ancestor-Container was resized.\r\n */\r\n","field_name":"ANCESTOR_RESIZED","field_type":"int","full_declaration":"public static final int ANCESTOR_RESIZED = 2 + HIERARCHY_FIRST","id":858},{"comment":"/**\r\n * Marks the last integer id for the range of ancestor event ids.\r\n */\r\n","field_name":"HIERARCHY_LAST","field_type":"int","full_declaration":"public static final int HIERARCHY_LAST = ANCESTOR_RESIZED","id":859},{"comment":"/**\r\n * A change flag indicates that the <code>HIERARCHY_CHANGED</code> event\r\n * was generated by a reparenting operation.\r\n */\r\n","field_name":"PARENT_CHANGED","field_type":"int","full_declaration":"public static final int PARENT_CHANGED = 0x1","id":860},{"comment":"/**\r\n * A change flag indicates that the <code>HIERARCHY_CHANGED</code> event\r\n * was generated due to the changing of the hierarchy displayability.\r\n * To discern the\r\n * current displayability of the hierarchy, call the\r\n * <code>Component.isDisplayable</code> method. Displayability changes occur\r\n * in response to explicit or implicit calls of the\r\n * <code>Component.addNotify</code> and\r\n * <code>Component.removeNotify</code> methods.\r\n *\r\n * @see java.awt.Component#isDisplayable()\r\n * @see java.awt.Component#addNotify()\r\n * @see java.awt.Component#removeNotify()\r\n */\r\n","field_name":"DISPLAYABILITY_CHANGED","field_type":"int","full_declaration":"public static final int DISPLAYABILITY_CHANGED = 0x2","id":861},{"comment":"/**\r\n * A change flag indicates that the <code>HIERARCHY_CHANGED</code> event\r\n * was generated due to the changing of the hierarchy showing state.\r\n * To discern the\r\n * current showing state of the hierarchy, call the\r\n * <code>Component.isShowing</code> method. Showing state changes occur\r\n * when either the displayability or visibility of the\r\n * hierarchy occurs. Visibility changes occur in response to explicit\r\n * or implicit calls of the <code>Component.show</code> and\r\n * <code>Component.hide</code> methods.\r\n *\r\n * @see java.awt.Component#isShowing()\r\n * @see java.awt.Component#addNotify()\r\n * @see java.awt.Component#removeNotify()\r\n * @see java.awt.Component#show()\r\n * @see java.awt.Component#hide()\r\n */\r\n","field_name":"SHOWING_CHANGED","field_type":"int","full_declaration":"public static final int SHOWING_CHANGED = 0x4","id":862},{"comment":"Component changed;","field_name":"changed","field_type":"java.awt.Component","full_declaration":"java.awt.Component changed","id":863},{"comment":"Container changedParent;","field_name":"changedParent","field_type":"java.awt.Container","full_declaration":"java.awt.Container changedParent","id":864},{"comment":"","field_name":"changeFlags","field_type":"long","full_declaration":"long changeFlags","id":865},{"comment":"private static final PlatformLogger logger = PlatformLogger.getLogger(\"java.awt.event.InputEvent\");","field_name":"logger","field_type":"sun.util.logging.PlatformLogger","full_declaration":"private static final sun.util.logging.PlatformLogger logger = PlatformLogger.getLogger(\"java.awt.event.InputEvent\")","id":866},{"comment":"/**\r\n * The Shift key modifier constant.\r\n * It is recommended that SHIFT_DOWN_MASK be used instead.\r\n */\r\n","field_name":"SHIFT_MASK","field_type":"int","full_declaration":"public static final int SHIFT_MASK = Event.SHIFT_MASK","id":867},{"comment":"/**\r\n * The Control key modifier constant.\r\n * It is recommended that CTRL_DOWN_MASK be used instead.\r\n */\r\n","field_name":"CTRL_MASK","field_type":"int","full_declaration":"public static final int CTRL_MASK = Event.CTRL_MASK","id":868},{"comment":"/**\r\n * The Meta key modifier constant.\r\n * It is recommended that META_DOWN_MASK be used instead.\r\n */\r\n","field_name":"META_MASK","field_type":"int","full_declaration":"public static final int META_MASK = Event.META_MASK","id":869},{"comment":"/**\r\n * The Alt key modifier constant.\r\n * It is recommended that ALT_DOWN_MASK be used instead.\r\n */\r\n","field_name":"ALT_MASK","field_type":"int","full_declaration":"public static final int ALT_MASK = Event.ALT_MASK","id":870},{"comment":"/**\r\n * The AltGraph key modifier constant.\r\n */\r\n","field_name":"ALT_GRAPH_MASK","field_type":"int","full_declaration":"public static final int ALT_GRAPH_MASK = 1 << 5","id":871},{"comment":"/**\r\n * The Mouse Button1 modifier constant.\r\n * It is recommended that BUTTON1_DOWN_MASK be used instead.\r\n */\r\n","field_name":"BUTTON1_MASK","field_type":"int","full_declaration":"public static final int BUTTON1_MASK = 1 << 4","id":872},{"comment":"/**\r\n * The Mouse Button2 modifier constant.\r\n * It is recommended that BUTTON2_DOWN_MASK be used instead.\r\n * Note that BUTTON2_MASK has the same value as ALT_MASK.\r\n */\r\n","field_name":"BUTTON2_MASK","field_type":"int","full_declaration":"public static final int BUTTON2_MASK = Event.ALT_MASK","id":873},{"comment":"/**\r\n * The Mouse Button3 modifier constant.\r\n * It is recommended that BUTTON3_DOWN_MASK be used instead.\r\n * Note that BUTTON3_MASK has the same value as META_MASK.\r\n */\r\n","field_name":"BUTTON3_MASK","field_type":"int","full_declaration":"public static final int BUTTON3_MASK = Event.META_MASK","id":874},{"comment":"/**\r\n * The Shift key extended modifier constant.\r\n * @since 1.4\r\n */\r\n","field_name":"SHIFT_DOWN_MASK","field_type":"int","full_declaration":"public static final int SHIFT_DOWN_MASK = 1 << 6","id":875},{"comment":"/**\r\n * The Control key extended modifier constant.\r\n * @since 1.4\r\n */\r\n","field_name":"CTRL_DOWN_MASK","field_type":"int","full_declaration":"public static final int CTRL_DOWN_MASK = 1 << 7","id":876},{"comment":"/**\r\n * The Meta key extended modifier constant.\r\n * @since 1.4\r\n */\r\n","field_name":"META_DOWN_MASK","field_type":"int","full_declaration":"public static final int META_DOWN_MASK = 1 << 8","id":877},{"comment":"/**\r\n * The Alt key extended modifier constant.\r\n * @since 1.4\r\n */\r\n","field_name":"ALT_DOWN_MASK","field_type":"int","full_declaration":"public static final int ALT_DOWN_MASK = 1 << 9","id":878},{"comment":"/**\r\n * The Mouse Button1 extended modifier constant.\r\n * @since 1.4\r\n */\r\n","field_name":"BUTTON1_DOWN_MASK","field_type":"int","full_declaration":"public static final int BUTTON1_DOWN_MASK = 1 << 10","id":879},{"comment":"/**\r\n * The Mouse Button2 extended modifier constant.\r\n * @since 1.4\r\n */\r\n","field_name":"BUTTON2_DOWN_MASK","field_type":"int","full_declaration":"public static final int BUTTON2_DOWN_MASK = 1 << 11","id":880},{"comment":"/**\r\n * The Mouse Button3 extended modifier constant.\r\n * @since 1.4\r\n */\r\n","field_name":"BUTTON3_DOWN_MASK","field_type":"int","full_declaration":"public static final int BUTTON3_DOWN_MASK = 1 << 12","id":881},{"comment":"/**\r\n * The AltGraph key extended modifier constant.\r\n * @since 1.4\r\n */\r\n","field_name":"ALT_GRAPH_DOWN_MASK","field_type":"int","full_declaration":"public static final int ALT_GRAPH_DOWN_MASK = 1 << 13","id":882},{"comment":"/**\r\n * An array of extended modifiers for additional buttons.\r\n * @see getButtonDownMasks\r\n * There are twenty buttons fit into 4byte space.\r\n * one more bit is reserved for FIRST_HIGH_BIT.\r\n * @since 7.0\r\n */\r\n","field_name":"BUTTON_DOWN_MASK","field_type":"int[]","full_declaration":"private static final int[] BUTTON_DOWN_MASK = new int[] { BUTTON1_DOWN_MASK, BUTTON2_DOWN_MASK, BUTTON3_DOWN_MASK, // 4th phisical button (this is not a wheel!)\r\n1 << 14, // (this is not a wheel!)\r\n1 << 15, 1 << 16, 1 << 17, 1 << 18, 1 << 19, 1 << 20, 1 << 21, 1 << 22, 1 << 23, 1 << 24, 1 << 25, 1 << 26, 1 << 27, 1 << 28, 1 << 29, 1 << 30 }","id":883},{"comment":"// the constant below MUST be updated if any extra modifier\r\n// bits are to be added!\r\n// in fact, it is undesirable to add modifier bits\r\n// to the same field as this may break applications\r\n// see bug# 5066958\r\n","field_name":"FIRST_HIGH_BIT","field_type":"int","full_declaration":"static final int FIRST_HIGH_BIT = 1 << 31","id":884},{"comment":"","field_name":"JDK_1_3_MODIFIERS","field_type":"int","full_declaration":"static final int JDK_1_3_MODIFIERS = SHIFT_DOWN_MASK - 1","id":885},{"comment":"","field_name":"HIGH_MODIFIERS","field_type":"int","full_declaration":"static final int HIGH_MODIFIERS = ~(FIRST_HIGH_BIT - 1)","id":886},{"comment":"/**\r\n * The input event's Time stamp in UTC format.  The time stamp\r\n * indicates when the input event was created.\r\n *\r\n * @serial\r\n * @see #getWhen()\r\n */\r\n","field_name":"when","field_type":"long","full_declaration":"long when","id":887},{"comment":"/**\r\n * The state of the modifier mask at the time the input\r\n * event was fired.\r\n *\r\n * @serial\r\n * @see #getModifiers()\r\n * @see #getModifiersEx()\r\n * @see java.awt.event.KeyEvent\r\n * @see java.awt.event.MouseEvent\r\n */\r\n","field_name":"modifiers","field_type":"int","full_declaration":"int modifiers","id":888},{"comment":"/*\r\n     * A flag that indicates that this instance can be used to access\r\n     * the system clipboard.\r\n     */\r\n","field_name":"canAccessSystemClipboard","field_type":"boolean","full_declaration":"private transient boolean canAccessSystemClipboard","id":889},{"comment":"// state serialization compatibility with JDK 1.1\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"static final long serialVersionUID = -2482525981698309786L","id":890},{"comment":"/**\r\n * Serial Version ID.\r\n */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 4727190874778922661L","id":891},{"comment":"/**\r\n * Marks the first integer id for the range of input method event ids.\r\n */\r\n@Native\r\n","field_name":"INPUT_METHOD_FIRST","field_type":"int","full_declaration":"public static final int INPUT_METHOD_FIRST = 1100","id":892},{"comment":"/**\r\n * The event type indicating changed input method text. This event is\r\n * generated by input methods while processing input.\r\n */\r\n@Native\r\n","field_name":"INPUT_METHOD_TEXT_CHANGED","field_type":"int","full_declaration":"public static final int INPUT_METHOD_TEXT_CHANGED = INPUT_METHOD_FIRST","id":893},{"comment":"/**\r\n * The event type indicating a changed insertion point in input method text.\r\n * This event is\r\n * generated by input methods while processing input if only the caret changed.\r\n */\r\n@Native\r\n","field_name":"CARET_POSITION_CHANGED","field_type":"int","full_declaration":"public static final int CARET_POSITION_CHANGED = INPUT_METHOD_FIRST + 1","id":894},{"comment":"/**\r\n * Marks the last integer id for the range of input method event ids.\r\n */\r\n@Native\r\n","field_name":"INPUT_METHOD_LAST","field_type":"int","full_declaration":"public static final int INPUT_METHOD_LAST = INPUT_METHOD_FIRST + 1","id":895},{"comment":"/**\r\n * The time stamp that indicates when the event was created.\r\n *\r\n * @serial\r\n * @see #getWhen\r\n * @since 1.4\r\n */\r\n","field_name":"when","field_type":"long","full_declaration":"long when","id":896},{"comment":"// Text object\r\nprivate transient AttributedCharacterIterator text;","field_name":"text","field_type":"java.text.AttributedCharacterIterator","full_declaration":"private transient java.text.AttributedCharacterIterator text","id":897},{"comment":"","field_name":"committedCharacterCount","field_type":"int","full_declaration":"private transient int committedCharacterCount","id":898},{"comment":"private transient TextHitInfo caret;","field_name":"caret","field_type":"java.awt.font.TextHitInfo","full_declaration":"private transient java.awt.font.TextHitInfo caret","id":899},{"comment":"private transient TextHitInfo visiblePosition;","field_name":"visiblePosition","field_type":"java.awt.font.TextHitInfo","full_declaration":"private transient java.awt.font.TextHitInfo visiblePosition","id":900},{"comment":"/**\r\n * Marks the first integer id for the range of invocation event ids.\r\n */\r\n","field_name":"INVOCATION_FIRST","field_type":"int","full_declaration":"public static final int INVOCATION_FIRST = 1200","id":901},{"comment":"/**\r\n * The default id for all InvocationEvents.\r\n */\r\n","field_name":"INVOCATION_DEFAULT","field_type":"int","full_declaration":"public static final int INVOCATION_DEFAULT = INVOCATION_FIRST","id":902},{"comment":"/**\r\n * Marks the last integer id for the range of invocation event ids.\r\n */\r\n","field_name":"INVOCATION_LAST","field_type":"int","full_declaration":"public static final int INVOCATION_LAST = INVOCATION_DEFAULT","id":903},{"comment":"/**\r\n * The Runnable whose run() method will be called.\r\n */\r\nprotected Runnable runnable;","field_name":"runnable","field_type":"java.lang.Runnable","full_declaration":"protected java.lang.Runnable runnable","id":904},{"comment":"/**\r\n * The (potentially null) Object whose notifyAll() method will be called\r\n * immediately after the Runnable.run() method has returned or thrown an exception\r\n * or after the event was disposed.\r\n *\r\n * @see #isDispatched\r\n */\r\nprotected volatile Object notifier;","field_name":"notifier","field_type":"java.lang.Object","full_declaration":"protected volatile java.lang.Object notifier","id":905},{"comment":"/**\r\n * The (potentially null) Runnable whose run() method will be called\r\n * immediately after the event was dispatched or disposed.\r\n *\r\n * @see #isDispatched\r\n * @since 1.8\r\n */\r\nprivate final Runnable listener;","field_name":"listener","field_type":"java.lang.Runnable","full_declaration":"private final java.lang.Runnable listener","id":906},{"comment":"/**\r\n * Indicates whether the <code>run()</code> method of the <code>runnable</code>\r\n * was executed or not.\r\n *\r\n * @see #isDispatched\r\n * @since 1.7\r\n */\r\n","field_name":"dispatched","field_type":"boolean","full_declaration":"private volatile boolean dispatched = false","id":907},{"comment":"/**\r\n * Set to true if dispatch() catches Throwable and stores it in the\r\n * exception instance variable. If false, Throwables are propagated up\r\n * to the EventDispatchThread's dispatch loop.\r\n */\r\n","field_name":"catchExceptions","field_type":"boolean","full_declaration":"protected boolean catchExceptions","id":908},{"comment":"/**\r\n * The (potentially null) Exception thrown during execution of the\r\n * Runnable.run() method. This variable will also be null if a particular\r\n * instance does not catch exceptions.\r\n */\r\nprivate Exception exception = null;","field_name":"exception","field_type":"java.lang.Exception","full_declaration":"private java.lang.Exception exception = null","id":909},{"comment":"/**\r\n * The (potentially null) Throwable thrown during execution of the\r\n * Runnable.run() method. This variable will also be null if a particular\r\n * instance does not catch exceptions.\r\n */\r\nprivate Throwable throwable = null;","field_name":"throwable","field_type":"java.lang.Throwable","full_declaration":"private java.lang.Throwable throwable = null","id":910},{"comment":"/**\r\n * The timestamp of when this event occurred.\r\n *\r\n * @serial\r\n * @see #getWhen\r\n */\r\n","field_name":"when","field_type":"long","full_declaration":"private long when","id":911},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID.\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 436056344909459450L","id":912},{"comment":"/**\r\n * The first number in the range of ids used for item events.\r\n */\r\n","field_name":"ITEM_FIRST","field_type":"int","full_declaration":"public static final int ITEM_FIRST = 701","id":913},{"comment":"/**\r\n * The last number in the range of ids used for item events.\r\n */\r\n","field_name":"ITEM_LAST","field_type":"int","full_declaration":"public static final int ITEM_LAST = 701","id":914},{"comment":"/**\r\n * This event id indicates that an item's state changed.\r\n */\r\n// Event.LIST_SELECT\r\n","field_name":"ITEM_STATE_CHANGED","field_type":"int","full_declaration":"public static final int ITEM_STATE_CHANGED = ITEM_FIRST","id":915},{"comment":"/**\r\n * This state-change value indicates that an item was selected.\r\n */\r\n","field_name":"SELECTED","field_type":"int","full_declaration":"public static final int SELECTED = 1","id":916},{"comment":"/**\r\n * This state-change-value indicates that a selected item was deselected.\r\n */\r\n","field_name":"DESELECTED","field_type":"int","full_declaration":"public static final int DESELECTED = 2","id":917},{"comment":"/**\r\n * The item whose selection state has changed.\r\n *\r\n * @serial\r\n * @see #getItem()\r\n */\r\nObject item;","field_name":"item","field_type":"java.lang.Object","full_declaration":"java.lang.Object item","id":918},{"comment":"/**\r\n * <code>stateChange</code> indicates whether the <code>item</code>\r\n * was selected or deselected.\r\n *\r\n * @serial\r\n * @see #getStateChange()\r\n */\r\n","field_name":"stateChange","field_type":"int","full_declaration":"int stateChange","id":919},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -608708132447206933L","id":920},{"comment":"/**\r\n * Stores the state of native event dispatching system\r\n * - true, if when the event was created event proxying\r\n *         mechanism was active\r\n * - false, if it was inactive\r\n * Used in Component.dispatchEventImpl to correctly dispatch\r\n * events when proxy is active\r\n */\r\n","field_name":"isProxyActive","field_type":"boolean","full_declaration":"private boolean isProxyActive = false","id":921},{"comment":"/**\r\n * The first number in the range of ids used for key events.\r\n */\r\n","field_name":"KEY_FIRST","field_type":"int","full_declaration":"public static final int KEY_FIRST = 400","id":922},{"comment":"/**\r\n * The last number in the range of ids used for key events.\r\n */\r\n","field_name":"KEY_LAST","field_type":"int","full_declaration":"public static final int KEY_LAST = 402","id":923},{"comment":"/**\r\n * The \"key typed\" event.  This event is generated when a character is\r\n * entered.  In the simplest case, it is produced by a single key press.\r\n * Often, however, characters are produced by series of key presses, and\r\n * the mapping from key pressed events to key typed events may be\r\n * many-to-one or many-to-many.\r\n */\r\n","field_name":"KEY_TYPED","field_type":"int","full_declaration":"public static final int KEY_TYPED = KEY_FIRST","id":924},{"comment":"/**\r\n * The \"key pressed\" event. This event is generated when a key\r\n * is pushed down.\r\n */\r\n// Event.KEY_PRESS\r\n","field_name":"KEY_PRESSED","field_type":"int","full_declaration":"public static final int KEY_PRESSED = 1 + KEY_FIRST","id":925},{"comment":"/**\r\n * The \"key released\" event. This event is generated when a key\r\n * is let up.\r\n */\r\n// Event.KEY_RELEASE\r\n","field_name":"KEY_RELEASED","field_type":"int","full_declaration":"public static final int KEY_RELEASED = 2 + KEY_FIRST","id":926},{"comment":"/* Virtual key codes. */\r\n","field_name":"VK_ENTER","field_type":"int","full_declaration":"public static final int VK_ENTER = '\\n'","id":927},{"comment":"","field_name":"VK_BACK_SPACE","field_type":"int","full_declaration":"public static final int VK_BACK_SPACE = '\\b'","id":928},{"comment":"","field_name":"VK_TAB","field_type":"int","full_declaration":"public static final int VK_TAB = '\\t'","id":929},{"comment":"","field_name":"VK_CANCEL","field_type":"int","full_declaration":"public static final int VK_CANCEL = 0x03","id":930},{"comment":"","field_name":"VK_CLEAR","field_type":"int","full_declaration":"public static final int VK_CLEAR = 0x0C","id":931},{"comment":"","field_name":"VK_SHIFT","field_type":"int","full_declaration":"public static final int VK_SHIFT = 0x10","id":932},{"comment":"","field_name":"VK_CONTROL","field_type":"int","full_declaration":"public static final int VK_CONTROL = 0x11","id":933},{"comment":"","field_name":"VK_ALT","field_type":"int","full_declaration":"public static final int VK_ALT = 0x12","id":934},{"comment":"","field_name":"VK_PAUSE","field_type":"int","full_declaration":"public static final int VK_PAUSE = 0x13","id":935},{"comment":"","field_name":"VK_CAPS_LOCK","field_type":"int","full_declaration":"public static final int VK_CAPS_LOCK = 0x14","id":936},{"comment":"","field_name":"VK_ESCAPE","field_type":"int","full_declaration":"public static final int VK_ESCAPE = 0x1B","id":937},{"comment":"","field_name":"VK_SPACE","field_type":"int","full_declaration":"public static final int VK_SPACE = 0x20","id":938},{"comment":"","field_name":"VK_PAGE_UP","field_type":"int","full_declaration":"public static final int VK_PAGE_UP = 0x21","id":939},{"comment":"","field_name":"VK_PAGE_DOWN","field_type":"int","full_declaration":"public static final int VK_PAGE_DOWN = 0x22","id":940},{"comment":"","field_name":"VK_END","field_type":"int","full_declaration":"public static final int VK_END = 0x23","id":941},{"comment":"","field_name":"VK_HOME","field_type":"int","full_declaration":"public static final int VK_HOME = 0x24","id":942},{"comment":"/**\r\n * Constant for the non-numpad <b>left</b> arrow key.\r\n * @see #VK_KP_LEFT\r\n */\r\n","field_name":"VK_LEFT","field_type":"int","full_declaration":"public static final int VK_LEFT = 0x25","id":943},{"comment":"/**\r\n * Constant for the non-numpad <b>up</b> arrow key.\r\n * @see #VK_KP_UP\r\n */\r\n","field_name":"VK_UP","field_type":"int","full_declaration":"public static final int VK_UP = 0x26","id":944},{"comment":"/**\r\n * Constant for the non-numpad <b>right</b> arrow key.\r\n * @see #VK_KP_RIGHT\r\n */\r\n","field_name":"VK_RIGHT","field_type":"int","full_declaration":"public static final int VK_RIGHT = 0x27","id":945},{"comment":"/**\r\n * Constant for the non-numpad <b>down</b> arrow key.\r\n * @see #VK_KP_DOWN\r\n */\r\n","field_name":"VK_DOWN","field_type":"int","full_declaration":"public static final int VK_DOWN = 0x28","id":946},{"comment":"/**\r\n * Constant for the comma key, \",\"\r\n */\r\n","field_name":"VK_COMMA","field_type":"int","full_declaration":"public static final int VK_COMMA = 0x2C","id":947},{"comment":"/**\r\n * Constant for the minus key, \"-\"\r\n * @since 1.2\r\n */\r\n","field_name":"VK_MINUS","field_type":"int","full_declaration":"public static final int VK_MINUS = 0x2D","id":948},{"comment":"/**\r\n * Constant for the period key, \".\"\r\n */\r\n","field_name":"VK_PERIOD","field_type":"int","full_declaration":"public static final int VK_PERIOD = 0x2E","id":949},{"comment":"/**\r\n * Constant for the forward slash key, \"/\"\r\n */\r\n","field_name":"VK_SLASH","field_type":"int","full_declaration":"public static final int VK_SLASH = 0x2F","id":950},{"comment":"/**\r\n * VK_0 thru VK_9 are the same as ASCII '0' thru '9' (0x30 - 0x39)\r\n */\r\n","field_name":"VK_0","field_type":"int","full_declaration":"public static final int VK_0 = 0x30","id":951},{"comment":"","field_name":"VK_1","field_type":"int","full_declaration":"public static final int VK_1 = 0x31","id":952},{"comment":"","field_name":"VK_2","field_type":"int","full_declaration":"public static final int VK_2 = 0x32","id":953},{"comment":"","field_name":"VK_3","field_type":"int","full_declaration":"public static final int VK_3 = 0x33","id":954},{"comment":"","field_name":"VK_4","field_type":"int","full_declaration":"public static final int VK_4 = 0x34","id":955},{"comment":"","field_name":"VK_5","field_type":"int","full_declaration":"public static final int VK_5 = 0x35","id":956},{"comment":"","field_name":"VK_6","field_type":"int","full_declaration":"public static final int VK_6 = 0x36","id":957},{"comment":"","field_name":"VK_7","field_type":"int","full_declaration":"public static final int VK_7 = 0x37","id":958},{"comment":"","field_name":"VK_8","field_type":"int","full_declaration":"public static final int VK_8 = 0x38","id":959},{"comment":"","field_name":"VK_9","field_type":"int","full_declaration":"public static final int VK_9 = 0x39","id":960},{"comment":"/**\r\n * Constant for the semicolon key, \";\"\r\n */\r\n","field_name":"VK_SEMICOLON","field_type":"int","full_declaration":"public static final int VK_SEMICOLON = 0x3B","id":961},{"comment":"/**\r\n * Constant for the equals key, \"=\"\r\n */\r\n","field_name":"VK_EQUALS","field_type":"int","full_declaration":"public static final int VK_EQUALS = 0x3D","id":962},{"comment":"/**\r\n * VK_A thru VK_Z are the same as ASCII 'A' thru 'Z' (0x41 - 0x5A)\r\n */\r\n","field_name":"VK_A","field_type":"int","full_declaration":"public static final int VK_A = 0x41","id":963},{"comment":"","field_name":"VK_B","field_type":"int","full_declaration":"public static final int VK_B = 0x42","id":964},{"comment":"","field_name":"VK_C","field_type":"int","full_declaration":"public static final int VK_C = 0x43","id":965},{"comment":"","field_name":"VK_D","field_type":"int","full_declaration":"public static final int VK_D = 0x44","id":966},{"comment":"","field_name":"VK_E","field_type":"int","full_declaration":"public static final int VK_E = 0x45","id":967},{"comment":"","field_name":"VK_F","field_type":"int","full_declaration":"public static final int VK_F = 0x46","id":968},{"comment":"","field_name":"VK_G","field_type":"int","full_declaration":"public static final int VK_G = 0x47","id":969},{"comment":"","field_name":"VK_H","field_type":"int","full_declaration":"public static final int VK_H = 0x48","id":970},{"comment":"","field_name":"VK_I","field_type":"int","full_declaration":"public static final int VK_I = 0x49","id":971},{"comment":"","field_name":"VK_J","field_type":"int","full_declaration":"public static final int VK_J = 0x4A","id":972},{"comment":"","field_name":"VK_K","field_type":"int","full_declaration":"public static final int VK_K = 0x4B","id":973},{"comment":"","field_name":"VK_L","field_type":"int","full_declaration":"public static final int VK_L = 0x4C","id":974},{"comment":"","field_name":"VK_M","field_type":"int","full_declaration":"public static final int VK_M = 0x4D","id":975},{"comment":"","field_name":"VK_N","field_type":"int","full_declaration":"public static final int VK_N = 0x4E","id":976},{"comment":"","field_name":"VK_O","field_type":"int","full_declaration":"public static final int VK_O = 0x4F","id":977},{"comment":"","field_name":"VK_P","field_type":"int","full_declaration":"public static final int VK_P = 0x50","id":978},{"comment":"","field_name":"VK_Q","field_type":"int","full_declaration":"public static final int VK_Q = 0x51","id":979},{"comment":"","field_name":"VK_R","field_type":"int","full_declaration":"public static final int VK_R = 0x52","id":980},{"comment":"","field_name":"VK_S","field_type":"int","full_declaration":"public static final int VK_S = 0x53","id":981},{"comment":"","field_name":"VK_T","field_type":"int","full_declaration":"public static final int VK_T = 0x54","id":982},{"comment":"","field_name":"VK_U","field_type":"int","full_declaration":"public static final int VK_U = 0x55","id":983},{"comment":"","field_name":"VK_V","field_type":"int","full_declaration":"public static final int VK_V = 0x56","id":984},{"comment":"","field_name":"VK_W","field_type":"int","full_declaration":"public static final int VK_W = 0x57","id":985},{"comment":"","field_name":"VK_X","field_type":"int","full_declaration":"public static final int VK_X = 0x58","id":986},{"comment":"","field_name":"VK_Y","field_type":"int","full_declaration":"public static final int VK_Y = 0x59","id":987},{"comment":"","field_name":"VK_Z","field_type":"int","full_declaration":"public static final int VK_Z = 0x5A","id":988},{"comment":"/**\r\n * Constant for the open bracket key, \"[\"\r\n */\r\n","field_name":"VK_OPEN_BRACKET","field_type":"int","full_declaration":"public static final int VK_OPEN_BRACKET = 0x5B","id":989},{"comment":"/**\r\n * Constant for the back slash key, \"\\\"\r\n */\r\n","field_name":"VK_BACK_SLASH","field_type":"int","full_declaration":"public static final int VK_BACK_SLASH = 0x5C","id":990},{"comment":"/**\r\n * Constant for the close bracket key, \"]\"\r\n */\r\n","field_name":"VK_CLOSE_BRACKET","field_type":"int","full_declaration":"public static final int VK_CLOSE_BRACKET = 0x5D","id":991},{"comment":"","field_name":"VK_NUMPAD0","field_type":"int","full_declaration":"public static final int VK_NUMPAD0 = 0x60","id":992},{"comment":"","field_name":"VK_NUMPAD1","field_type":"int","full_declaration":"public static final int VK_NUMPAD1 = 0x61","id":993},{"comment":"","field_name":"VK_NUMPAD2","field_type":"int","full_declaration":"public static final int VK_NUMPAD2 = 0x62","id":994},{"comment":"","field_name":"VK_NUMPAD3","field_type":"int","full_declaration":"public static final int VK_NUMPAD3 = 0x63","id":995},{"comment":"","field_name":"VK_NUMPAD4","field_type":"int","full_declaration":"public static final int VK_NUMPAD4 = 0x64","id":996},{"comment":"","field_name":"VK_NUMPAD5","field_type":"int","full_declaration":"public static final int VK_NUMPAD5 = 0x65","id":997},{"comment":"","field_name":"VK_NUMPAD6","field_type":"int","full_declaration":"public static final int VK_NUMPAD6 = 0x66","id":998},{"comment":"","field_name":"VK_NUMPAD7","field_type":"int","full_declaration":"public static final int VK_NUMPAD7 = 0x67","id":999},{"comment":"","field_name":"VK_NUMPAD8","field_type":"int","full_declaration":"public static final int VK_NUMPAD8 = 0x68","id":1000},{"comment":"","field_name":"VK_NUMPAD9","field_type":"int","full_declaration":"public static final int VK_NUMPAD9 = 0x69","id":1001},{"comment":"","field_name":"VK_MULTIPLY","field_type":"int","full_declaration":"public static final int VK_MULTIPLY = 0x6A","id":1002},{"comment":"","field_name":"VK_ADD","field_type":"int","full_declaration":"public static final int VK_ADD = 0x6B","id":1003},{"comment":"/**\r\n * This constant is obsolete, and is included only for backwards\r\n * compatibility.\r\n * @see #VK_SEPARATOR\r\n */\r\n","field_name":"VK_SEPARATER","field_type":"int","full_declaration":"public static final int VK_SEPARATER = 0x6C","id":1004},{"comment":"/**\r\n * Constant for the Numpad Separator key.\r\n * @since 1.4\r\n */\r\n","field_name":"VK_SEPARATOR","field_type":"int","full_declaration":"public static final int VK_SEPARATOR = VK_SEPARATER","id":1005},{"comment":"","field_name":"VK_SUBTRACT","field_type":"int","full_declaration":"public static final int VK_SUBTRACT = 0x6D","id":1006},{"comment":"","field_name":"VK_DECIMAL","field_type":"int","full_declaration":"public static final int VK_DECIMAL = 0x6E","id":1007},{"comment":"","field_name":"VK_DIVIDE","field_type":"int","full_declaration":"public static final int VK_DIVIDE = 0x6F","id":1008},{"comment":"","field_name":"VK_DELETE","field_type":"int","full_declaration":"public static final int VK_DELETE = 0x7F","id":1009},{"comment":"/* ASCII DEL */\r\n","field_name":"VK_NUM_LOCK","field_type":"int","full_declaration":"public static final int VK_NUM_LOCK = 0x90","id":1010},{"comment":"","field_name":"VK_SCROLL_LOCK","field_type":"int","full_declaration":"public static final int VK_SCROLL_LOCK = 0x91","id":1011},{"comment":"/**\r\n * Constant for the F1 function key.\r\n */\r\n","field_name":"VK_F1","field_type":"int","full_declaration":"public static final int VK_F1 = 0x70","id":1012},{"comment":"/**\r\n * Constant for the F2 function key.\r\n */\r\n","field_name":"VK_F2","field_type":"int","full_declaration":"public static final int VK_F2 = 0x71","id":1013},{"comment":"/**\r\n * Constant for the F3 function key.\r\n */\r\n","field_name":"VK_F3","field_type":"int","full_declaration":"public static final int VK_F3 = 0x72","id":1014},{"comment":"/**\r\n * Constant for the F4 function key.\r\n */\r\n","field_name":"VK_F4","field_type":"int","full_declaration":"public static final int VK_F4 = 0x73","id":1015},{"comment":"/**\r\n * Constant for the F5 function key.\r\n */\r\n","field_name":"VK_F5","field_type":"int","full_declaration":"public static final int VK_F5 = 0x74","id":1016},{"comment":"/**\r\n * Constant for the F6 function key.\r\n */\r\n","field_name":"VK_F6","field_type":"int","full_declaration":"public static final int VK_F6 = 0x75","id":1017},{"comment":"/**\r\n * Constant for the F7 function key.\r\n */\r\n","field_name":"VK_F7","field_type":"int","full_declaration":"public static final int VK_F7 = 0x76","id":1018},{"comment":"/**\r\n * Constant for the F8 function key.\r\n */\r\n","field_name":"VK_F8","field_type":"int","full_declaration":"public static final int VK_F8 = 0x77","id":1019},{"comment":"/**\r\n * Constant for the F9 function key.\r\n */\r\n","field_name":"VK_F9","field_type":"int","full_declaration":"public static final int VK_F9 = 0x78","id":1020},{"comment":"/**\r\n * Constant for the F10 function key.\r\n */\r\n","field_name":"VK_F10","field_type":"int","full_declaration":"public static final int VK_F10 = 0x79","id":1021},{"comment":"/**\r\n * Constant for the F11 function key.\r\n */\r\n","field_name":"VK_F11","field_type":"int","full_declaration":"public static final int VK_F11 = 0x7A","id":1022},{"comment":"/**\r\n * Constant for the F12 function key.\r\n */\r\n","field_name":"VK_F12","field_type":"int","full_declaration":"public static final int VK_F12 = 0x7B","id":1023},{"comment":"/**\r\n * Constant for the F13 function key.\r\n * @since 1.2\r\n */\r\n/* F13 - F24 are used on IBM 3270 keyboard; use random range for constants. */\r\n","field_name":"VK_F13","field_type":"int","full_declaration":"public static final int VK_F13 = 0xF000","id":1024},{"comment":"/**\r\n * Constant for the F14 function key.\r\n * @since 1.2\r\n */\r\n","field_name":"VK_F14","field_type":"int","full_declaration":"public static final int VK_F14 = 0xF001","id":1025},{"comment":"/**\r\n * Constant for the F15 function key.\r\n * @since 1.2\r\n */\r\n","field_name":"VK_F15","field_type":"int","full_declaration":"public static final int VK_F15 = 0xF002","id":1026},{"comment":"/**\r\n * Constant for the F16 function key.\r\n * @since 1.2\r\n */\r\n","field_name":"VK_F16","field_type":"int","full_declaration":"public static final int VK_F16 = 0xF003","id":1027},{"comment":"/**\r\n * Constant for the F17 function key.\r\n * @since 1.2\r\n */\r\n","field_name":"VK_F17","field_type":"int","full_declaration":"public static final int VK_F17 = 0xF004","id":1028},{"comment":"/**\r\n * Constant for the F18 function key.\r\n * @since 1.2\r\n */\r\n","field_name":"VK_F18","field_type":"int","full_declaration":"public static final int VK_F18 = 0xF005","id":1029},{"comment":"/**\r\n * Constant for the F19 function key.\r\n * @since 1.2\r\n */\r\n","field_name":"VK_F19","field_type":"int","full_declaration":"public static final int VK_F19 = 0xF006","id":1030},{"comment":"/**\r\n * Constant for the F20 function key.\r\n * @since 1.2\r\n */\r\n","field_name":"VK_F20","field_type":"int","full_declaration":"public static final int VK_F20 = 0xF007","id":1031},{"comment":"/**\r\n * Constant for the F21 function key.\r\n * @since 1.2\r\n */\r\n","field_name":"VK_F21","field_type":"int","full_declaration":"public static final int VK_F21 = 0xF008","id":1032},{"comment":"/**\r\n * Constant for the F22 function key.\r\n * @since 1.2\r\n */\r\n","field_name":"VK_F22","field_type":"int","full_declaration":"public static final int VK_F22 = 0xF009","id":1033},{"comment":"/**\r\n * Constant for the F23 function key.\r\n * @since 1.2\r\n */\r\n","field_name":"VK_F23","field_type":"int","full_declaration":"public static final int VK_F23 = 0xF00A","id":1034},{"comment":"/**\r\n * Constant for the F24 function key.\r\n * @since 1.2\r\n */\r\n","field_name":"VK_F24","field_type":"int","full_declaration":"public static final int VK_F24 = 0xF00B","id":1035},{"comment":"","field_name":"VK_PRINTSCREEN","field_type":"int","full_declaration":"public static final int VK_PRINTSCREEN = 0x9A","id":1036},{"comment":"","field_name":"VK_INSERT","field_type":"int","full_declaration":"public static final int VK_INSERT = 0x9B","id":1037},{"comment":"","field_name":"VK_HELP","field_type":"int","full_declaration":"public static final int VK_HELP = 0x9C","id":1038},{"comment":"","field_name":"VK_META","field_type":"int","full_declaration":"public static final int VK_META = 0x9D","id":1039},{"comment":"","field_name":"VK_BACK_QUOTE","field_type":"int","full_declaration":"public static final int VK_BACK_QUOTE = 0xC0","id":1040},{"comment":"","field_name":"VK_QUOTE","field_type":"int","full_declaration":"public static final int VK_QUOTE = 0xDE","id":1041},{"comment":"/**\r\n * Constant for the numeric keypad <b>up</b> arrow key.\r\n * @see #VK_UP\r\n * @since 1.2\r\n */\r\n","field_name":"VK_KP_UP","field_type":"int","full_declaration":"public static final int VK_KP_UP = 0xE0","id":1042},{"comment":"/**\r\n * Constant for the numeric keypad <b>down</b> arrow key.\r\n * @see #VK_DOWN\r\n * @since 1.2\r\n */\r\n","field_name":"VK_KP_DOWN","field_type":"int","full_declaration":"public static final int VK_KP_DOWN = 0xE1","id":1043},{"comment":"/**\r\n * Constant for the numeric keypad <b>left</b> arrow key.\r\n * @see #VK_LEFT\r\n * @since 1.2\r\n */\r\n","field_name":"VK_KP_LEFT","field_type":"int","full_declaration":"public static final int VK_KP_LEFT = 0xE2","id":1044},{"comment":"/**\r\n * Constant for the numeric keypad <b>right</b> arrow key.\r\n * @see #VK_RIGHT\r\n * @since 1.2\r\n */\r\n","field_name":"VK_KP_RIGHT","field_type":"int","full_declaration":"public static final int VK_KP_RIGHT = 0xE3","id":1045},{"comment":"/* For European keyboards */\r\n/**\r\n * @since 1.2\r\n */\r\n","field_name":"VK_DEAD_GRAVE","field_type":"int","full_declaration":"public static final int VK_DEAD_GRAVE = 0x80","id":1046},{"comment":"/**\r\n * @since 1.2\r\n */\r\n","field_name":"VK_DEAD_ACUTE","field_type":"int","full_declaration":"public static final int VK_DEAD_ACUTE = 0x81","id":1047},{"comment":"/**\r\n * @since 1.2\r\n */\r\n","field_name":"VK_DEAD_CIRCUMFLEX","field_type":"int","full_declaration":"public static final int VK_DEAD_CIRCUMFLEX = 0x82","id":1048},{"comment":"/**\r\n * @since 1.2\r\n */\r\n","field_name":"VK_DEAD_TILDE","field_type":"int","full_declaration":"public static final int VK_DEAD_TILDE = 0x83","id":1049},{"comment":"/**\r\n * @since 1.2\r\n */\r\n","field_name":"VK_DEAD_MACRON","field_type":"int","full_declaration":"public static final int VK_DEAD_MACRON = 0x84","id":1050},{"comment":"/**\r\n * @since 1.2\r\n */\r\n","field_name":"VK_DEAD_BREVE","field_type":"int","full_declaration":"public static final int VK_DEAD_BREVE = 0x85","id":1051},{"comment":"/**\r\n * @since 1.2\r\n */\r\n","field_name":"VK_DEAD_ABOVEDOT","field_type":"int","full_declaration":"public static final int VK_DEAD_ABOVEDOT = 0x86","id":1052},{"comment":"/**\r\n * @since 1.2\r\n */\r\n","field_name":"VK_DEAD_DIAERESIS","field_type":"int","full_declaration":"public static final int VK_DEAD_DIAERESIS = 0x87","id":1053},{"comment":"/**\r\n * @since 1.2\r\n */\r\n","field_name":"VK_DEAD_ABOVERING","field_type":"int","full_declaration":"public static final int VK_DEAD_ABOVERING = 0x88","id":1054},{"comment":"/**\r\n * @since 1.2\r\n */\r\n","field_name":"VK_DEAD_DOUBLEACUTE","field_type":"int","full_declaration":"public static final int VK_DEAD_DOUBLEACUTE = 0x89","id":1055},{"comment":"/**\r\n * @since 1.2\r\n */\r\n","field_name":"VK_DEAD_CARON","field_type":"int","full_declaration":"public static final int VK_DEAD_CARON = 0x8a","id":1056},{"comment":"/**\r\n * @since 1.2\r\n */\r\n","field_name":"VK_DEAD_CEDILLA","field_type":"int","full_declaration":"public static final int VK_DEAD_CEDILLA = 0x8b","id":1057},{"comment":"/**\r\n * @since 1.2\r\n */\r\n","field_name":"VK_DEAD_OGONEK","field_type":"int","full_declaration":"public static final int VK_DEAD_OGONEK = 0x8c","id":1058},{"comment":"/**\r\n * @since 1.2\r\n */\r\n","field_name":"VK_DEAD_IOTA","field_type":"int","full_declaration":"public static final int VK_DEAD_IOTA = 0x8d","id":1059},{"comment":"/**\r\n * @since 1.2\r\n */\r\n","field_name":"VK_DEAD_VOICED_SOUND","field_type":"int","full_declaration":"public static final int VK_DEAD_VOICED_SOUND = 0x8e","id":1060},{"comment":"/**\r\n * @since 1.2\r\n */\r\n","field_name":"VK_DEAD_SEMIVOICED_SOUND","field_type":"int","full_declaration":"public static final int VK_DEAD_SEMIVOICED_SOUND = 0x8f","id":1061},{"comment":"/**\r\n * @since 1.2\r\n */\r\n","field_name":"VK_AMPERSAND","field_type":"int","full_declaration":"public static final int VK_AMPERSAND = 0x96","id":1062},{"comment":"/**\r\n * @since 1.2\r\n */\r\n","field_name":"VK_ASTERISK","field_type":"int","full_declaration":"public static final int VK_ASTERISK = 0x97","id":1063},{"comment":"/**\r\n * @since 1.2\r\n */\r\n","field_name":"VK_QUOTEDBL","field_type":"int","full_declaration":"public static final int VK_QUOTEDBL = 0x98","id":1064},{"comment":"/**\r\n * @since 1.2\r\n */\r\n","field_name":"VK_LESS","field_type":"int","full_declaration":"public static final int VK_LESS = 0x99","id":1065},{"comment":"/**\r\n * @since 1.2\r\n */\r\n","field_name":"VK_GREATER","field_type":"int","full_declaration":"public static final int VK_GREATER = 0xa0","id":1066},{"comment":"/**\r\n * @since 1.2\r\n */\r\n","field_name":"VK_BRACELEFT","field_type":"int","full_declaration":"public static final int VK_BRACELEFT = 0xa1","id":1067},{"comment":"/**\r\n * @since 1.2\r\n */\r\n","field_name":"VK_BRACERIGHT","field_type":"int","full_declaration":"public static final int VK_BRACERIGHT = 0xa2","id":1068},{"comment":"/**\r\n * Constant for the \"@\" key.\r\n * @since 1.2\r\n */\r\n","field_name":"VK_AT","field_type":"int","full_declaration":"public static final int VK_AT = 0x0200","id":1069},{"comment":"/**\r\n * Constant for the \":\" key.\r\n * @since 1.2\r\n */\r\n","field_name":"VK_COLON","field_type":"int","full_declaration":"public static final int VK_COLON = 0x0201","id":1070},{"comment":"/**\r\n * Constant for the \"^\" key.\r\n * @since 1.2\r\n */\r\n","field_name":"VK_CIRCUMFLEX","field_type":"int","full_declaration":"public static final int VK_CIRCUMFLEX = 0x0202","id":1071},{"comment":"/**\r\n * Constant for the \"$\" key.\r\n * @since 1.2\r\n */\r\n","field_name":"VK_DOLLAR","field_type":"int","full_declaration":"public static final int VK_DOLLAR = 0x0203","id":1072},{"comment":"/**\r\n * Constant for the Euro currency sign key.\r\n * @since 1.2\r\n */\r\n","field_name":"VK_EURO_SIGN","field_type":"int","full_declaration":"public static final int VK_EURO_SIGN = 0x0204","id":1073},{"comment":"/**\r\n * Constant for the \"!\" key.\r\n * @since 1.2\r\n */\r\n","field_name":"VK_EXCLAMATION_MARK","field_type":"int","full_declaration":"public static final int VK_EXCLAMATION_MARK = 0x0205","id":1074},{"comment":"/**\r\n * Constant for the inverted exclamation mark key.\r\n * @since 1.2\r\n */\r\n","field_name":"VK_INVERTED_EXCLAMATION_MARK","field_type":"int","full_declaration":"public static final int VK_INVERTED_EXCLAMATION_MARK = 0x0206","id":1075},{"comment":"/**\r\n * Constant for the \"(\" key.\r\n * @since 1.2\r\n */\r\n","field_name":"VK_LEFT_PARENTHESIS","field_type":"int","full_declaration":"public static final int VK_LEFT_PARENTHESIS = 0x0207","id":1076},{"comment":"/**\r\n * Constant for the \"#\" key.\r\n * @since 1.2\r\n */\r\n","field_name":"VK_NUMBER_SIGN","field_type":"int","full_declaration":"public static final int VK_NUMBER_SIGN = 0x0208","id":1077},{"comment":"/**\r\n * Constant for the \"+\" key.\r\n * @since 1.2\r\n */\r\n","field_name":"VK_PLUS","field_type":"int","full_declaration":"public static final int VK_PLUS = 0x0209","id":1078},{"comment":"/**\r\n * Constant for the \")\" key.\r\n * @since 1.2\r\n */\r\n","field_name":"VK_RIGHT_PARENTHESIS","field_type":"int","full_declaration":"public static final int VK_RIGHT_PARENTHESIS = 0x020A","id":1079},{"comment":"/**\r\n * Constant for the \"_\" key.\r\n * @since 1.2\r\n */\r\n","field_name":"VK_UNDERSCORE","field_type":"int","full_declaration":"public static final int VK_UNDERSCORE = 0x020B","id":1080},{"comment":"/**\r\n * Constant for the Microsoft Windows \"Windows\" key.\r\n * It is used for both the left and right version of the key.\r\n * @see #getKeyLocation()\r\n * @since 1.5\r\n */\r\n","field_name":"VK_WINDOWS","field_type":"int","full_declaration":"public static final int VK_WINDOWS = 0x020C","id":1081},{"comment":"/**\r\n * Constant for the Microsoft Windows Context Menu key.\r\n * @since 1.5\r\n */\r\n","field_name":"VK_CONTEXT_MENU","field_type":"int","full_declaration":"public static final int VK_CONTEXT_MENU = 0x020D","id":1082},{"comment":"/* for input method support on Asian Keyboards */\r\n/* not clear what this means - listed in Microsoft Windows API */\r\n","field_name":"VK_FINAL","field_type":"int","full_declaration":"public static final int VK_FINAL = 0x0018","id":1083},{"comment":"/**\r\n * Constant for the Convert function key.\r\n */\r\n/* Japanese PC 106 keyboard, Japanese Solaris keyboard: henkan */\r\n","field_name":"VK_CONVERT","field_type":"int","full_declaration":"public static final int VK_CONVERT = 0x001C","id":1084},{"comment":"/**\r\n * Constant for the Don't Convert function key.\r\n */\r\n/* Japanese PC 106 keyboard: muhenkan */\r\n","field_name":"VK_NONCONVERT","field_type":"int","full_declaration":"public static final int VK_NONCONVERT = 0x001D","id":1085},{"comment":"/**\r\n * Constant for the Accept or Commit function key.\r\n */\r\n/* Japanese Solaris keyboard: kakutei */\r\n","field_name":"VK_ACCEPT","field_type":"int","full_declaration":"public static final int VK_ACCEPT = 0x001E","id":1086},{"comment":"/* not clear what this means - listed in Microsoft Windows API */\r\n","field_name":"VK_MODECHANGE","field_type":"int","full_declaration":"public static final int VK_MODECHANGE = 0x001F","id":1087},{"comment":"/* replaced by VK_KANA_LOCK for Microsoft Windows and Solaris;\r\n       might still be used on other platforms */\r\n","field_name":"VK_KANA","field_type":"int","full_declaration":"public static final int VK_KANA = 0x0015","id":1088},{"comment":"/* replaced by VK_INPUT_METHOD_ON_OFF for Microsoft Windows and Solaris;\r\n       might still be used for other platforms */\r\n","field_name":"VK_KANJI","field_type":"int","full_declaration":"public static final int VK_KANJI = 0x0019","id":1089},{"comment":"/**\r\n * Constant for the Alphanumeric function key.\r\n * @since 1.2\r\n */\r\n/* Japanese PC 106 keyboard: eisuu */\r\n","field_name":"VK_ALPHANUMERIC","field_type":"int","full_declaration":"public static final int VK_ALPHANUMERIC = 0x00F0","id":1090},{"comment":"/**\r\n * Constant for the Katakana function key.\r\n * @since 1.2\r\n */\r\n/* Japanese PC 106 keyboard: katakana */\r\n","field_name":"VK_KATAKANA","field_type":"int","full_declaration":"public static final int VK_KATAKANA = 0x00F1","id":1091},{"comment":"/**\r\n * Constant for the Hiragana function key.\r\n * @since 1.2\r\n */\r\n/* Japanese PC 106 keyboard: hiragana */\r\n","field_name":"VK_HIRAGANA","field_type":"int","full_declaration":"public static final int VK_HIRAGANA = 0x00F2","id":1092},{"comment":"/**\r\n * Constant for the Full-Width Characters function key.\r\n * @since 1.2\r\n */\r\n/* Japanese PC 106 keyboard: zenkaku */\r\n","field_name":"VK_FULL_WIDTH","field_type":"int","full_declaration":"public static final int VK_FULL_WIDTH = 0x00F3","id":1093},{"comment":"/**\r\n * Constant for the Half-Width Characters function key.\r\n * @since 1.2\r\n */\r\n/* Japanese PC 106 keyboard: hankaku */\r\n","field_name":"VK_HALF_WIDTH","field_type":"int","full_declaration":"public static final int VK_HALF_WIDTH = 0x00F4","id":1094},{"comment":"/**\r\n * Constant for the Roman Characters function key.\r\n * @since 1.2\r\n */\r\n/* Japanese PC 106 keyboard: roumaji */\r\n","field_name":"VK_ROMAN_CHARACTERS","field_type":"int","full_declaration":"public static final int VK_ROMAN_CHARACTERS = 0x00F5","id":1095},{"comment":"/**\r\n * Constant for the All Candidates function key.\r\n * @since 1.2\r\n */\r\n/* Japanese PC 106 keyboard - VK_CONVERT + ALT: zenkouho */\r\n","field_name":"VK_ALL_CANDIDATES","field_type":"int","full_declaration":"public static final int VK_ALL_CANDIDATES = 0x0100","id":1096},{"comment":"/**\r\n * Constant for the Previous Candidate function key.\r\n * @since 1.2\r\n */\r\n/* Japanese PC 106 keyboard - VK_CONVERT + SHIFT: maekouho */\r\n","field_name":"VK_PREVIOUS_CANDIDATE","field_type":"int","full_declaration":"public static final int VK_PREVIOUS_CANDIDATE = 0x0101","id":1097},{"comment":"/**\r\n * Constant for the Code Input function key.\r\n * @since 1.2\r\n */\r\n/* Japanese PC 106 keyboard - VK_ALPHANUMERIC + ALT: kanji bangou */\r\n","field_name":"VK_CODE_INPUT","field_type":"int","full_declaration":"public static final int VK_CODE_INPUT = 0x0102","id":1098},{"comment":"/**\r\n * Constant for the Japanese-Katakana function key.\r\n * This key switches to a Japanese input method and selects its Katakana input mode.\r\n * @since 1.2\r\n */\r\n/* Japanese Macintosh keyboard - VK_JAPANESE_HIRAGANA + SHIFT */\r\n","field_name":"VK_JAPANESE_KATAKANA","field_type":"int","full_declaration":"public static final int VK_JAPANESE_KATAKANA = 0x0103","id":1099},{"comment":"/**\r\n * Constant for the Japanese-Hiragana function key.\r\n * This key switches to a Japanese input method and selects its Hiragana input mode.\r\n * @since 1.2\r\n */\r\n/* Japanese Macintosh keyboard */\r\n","field_name":"VK_JAPANESE_HIRAGANA","field_type":"int","full_declaration":"public static final int VK_JAPANESE_HIRAGANA = 0x0104","id":1100},{"comment":"/**\r\n * Constant for the Japanese-Roman function key.\r\n * This key switches to a Japanese input method and selects its Roman-Direct input mode.\r\n * @since 1.2\r\n */\r\n/* Japanese Macintosh keyboard */\r\n","field_name":"VK_JAPANESE_ROMAN","field_type":"int","full_declaration":"public static final int VK_JAPANESE_ROMAN = 0x0105","id":1101},{"comment":"/**\r\n * Constant for the locking Kana function key.\r\n * This key locks the keyboard into a Kana layout.\r\n * @since 1.3\r\n */\r\n/* Japanese PC 106 keyboard with special Windows driver - eisuu + Control; Japanese Solaris keyboard: kana */\r\n","field_name":"VK_KANA_LOCK","field_type":"int","full_declaration":"public static final int VK_KANA_LOCK = 0x0106","id":1102},{"comment":"/**\r\n * Constant for the input method on/off key.\r\n * @since 1.3\r\n */\r\n/* Japanese PC 106 keyboard: kanji. Japanese Solaris keyboard: nihongo */\r\n","field_name":"VK_INPUT_METHOD_ON_OFF","field_type":"int","full_declaration":"public static final int VK_INPUT_METHOD_ON_OFF = 0x0107","id":1103},{"comment":"/* for Sun keyboards */\r\n/**\r\n * @since 1.2\r\n */\r\n","field_name":"VK_CUT","field_type":"int","full_declaration":"public static final int VK_CUT = 0xFFD1","id":1104},{"comment":"/**\r\n * @since 1.2\r\n */\r\n","field_name":"VK_COPY","field_type":"int","full_declaration":"public static final int VK_COPY = 0xFFCD","id":1105},{"comment":"/**\r\n * @since 1.2\r\n */\r\n","field_name":"VK_PASTE","field_type":"int","full_declaration":"public static final int VK_PASTE = 0xFFCF","id":1106},{"comment":"/**\r\n * @since 1.2\r\n */\r\n","field_name":"VK_UNDO","field_type":"int","full_declaration":"public static final int VK_UNDO = 0xFFCB","id":1107},{"comment":"/**\r\n * @since 1.2\r\n */\r\n","field_name":"VK_AGAIN","field_type":"int","full_declaration":"public static final int VK_AGAIN = 0xFFC9","id":1108},{"comment":"/**\r\n * @since 1.2\r\n */\r\n","field_name":"VK_FIND","field_type":"int","full_declaration":"public static final int VK_FIND = 0xFFD0","id":1109},{"comment":"/**\r\n * @since 1.2\r\n */\r\n","field_name":"VK_PROPS","field_type":"int","full_declaration":"public static final int VK_PROPS = 0xFFCA","id":1110},{"comment":"/**\r\n * @since 1.2\r\n */\r\n","field_name":"VK_STOP","field_type":"int","full_declaration":"public static final int VK_STOP = 0xFFC8","id":1111},{"comment":"/**\r\n * Constant for the Compose function key.\r\n * @since 1.2\r\n */\r\n","field_name":"VK_COMPOSE","field_type":"int","full_declaration":"public static final int VK_COMPOSE = 0xFF20","id":1112},{"comment":"/**\r\n * Constant for the AltGraph function key.\r\n * @since 1.2\r\n */\r\n","field_name":"VK_ALT_GRAPH","field_type":"int","full_declaration":"public static final int VK_ALT_GRAPH = 0xFF7E","id":1113},{"comment":"/**\r\n * Constant for the Begin key.\r\n * @since 1.5\r\n */\r\n","field_name":"VK_BEGIN","field_type":"int","full_declaration":"public static final int VK_BEGIN = 0xFF58","id":1114},{"comment":"/**\r\n * This value is used to indicate that the keyCode is unknown.\r\n * KEY_TYPED events do not have a keyCode value; this value\r\n * is used instead.\r\n */\r\n","field_name":"VK_UNDEFINED","field_type":"int","full_declaration":"public static final int VK_UNDEFINED = 0x0","id":1115},{"comment":"/**\r\n * KEY_PRESSED and KEY_RELEASED events which do not map to a\r\n * valid Unicode character use this for the keyChar value.\r\n */\r\n","field_name":"CHAR_UNDEFINED","field_type":"char","full_declaration":"public static final char CHAR_UNDEFINED = 0xFFFF","id":1116},{"comment":"/**\r\n * A constant indicating that the keyLocation is indeterminate\r\n * or not relevant.\r\n * <code>KEY_TYPED</code> events do not have a keyLocation; this value\r\n * is used instead.\r\n * @since 1.4\r\n */\r\n","field_name":"KEY_LOCATION_UNKNOWN","field_type":"int","full_declaration":"public static final int KEY_LOCATION_UNKNOWN = 0","id":1117},{"comment":"/**\r\n * A constant indicating that the key pressed or released\r\n * is not distinguished as the left or right version of a key,\r\n * and did not originate on the numeric keypad (or did not\r\n * originate with a virtual key corresponding to the numeric\r\n * keypad).\r\n * @since 1.4\r\n */\r\n","field_name":"KEY_LOCATION_STANDARD","field_type":"int","full_declaration":"public static final int KEY_LOCATION_STANDARD = 1","id":1118},{"comment":"/**\r\n * A constant indicating that the key pressed or released is in\r\n * the left key location (there is more than one possible location\r\n * for this key).  Example: the left shift key.\r\n * @since 1.4\r\n */\r\n","field_name":"KEY_LOCATION_LEFT","field_type":"int","full_declaration":"public static final int KEY_LOCATION_LEFT = 2","id":1119},{"comment":"/**\r\n * A constant indicating that the key pressed or released is in\r\n * the right key location (there is more than one possible location\r\n * for this key).  Example: the right shift key.\r\n * @since 1.4\r\n */\r\n","field_name":"KEY_LOCATION_RIGHT","field_type":"int","full_declaration":"public static final int KEY_LOCATION_RIGHT = 3","id":1120},{"comment":"/**\r\n * A constant indicating that the key event originated on the\r\n * numeric keypad or with a virtual key corresponding to the\r\n * numeric keypad.\r\n * @since 1.4\r\n */\r\n","field_name":"KEY_LOCATION_NUMPAD","field_type":"int","full_declaration":"public static final int KEY_LOCATION_NUMPAD = 4","id":1121},{"comment":"/**\r\n * The unique value assigned to each of the keys on the\r\n * keyboard.  There is a common set of key codes that\r\n * can be fired by most keyboards.\r\n * The symbolic name for a key code should be used rather\r\n * than the code value itself.\r\n *\r\n * @serial\r\n * @see #getKeyCode()\r\n * @see #setKeyCode(int)\r\n */\r\n","field_name":"keyCode","field_type":"int","full_declaration":"int keyCode","id":1122},{"comment":"/**\r\n * <code>keyChar</code> is a valid unicode character\r\n * that is fired by a key or a key combination on\r\n * a keyboard.\r\n *\r\n * @serial\r\n * @see #getKeyChar()\r\n * @see #setKeyChar(char)\r\n */\r\n","field_name":"keyChar","field_type":"char","full_declaration":"char keyChar","id":1123},{"comment":"/**\r\n * The location of the key on the keyboard.\r\n *\r\n * Some keys occur more than once on a keyboard, e.g. the left and\r\n * right shift keys.  Additionally, some keys occur on the numeric\r\n * keypad.  This variable is used to distinguish such keys.\r\n *\r\n * The only legal values are <code>KEY_LOCATION_UNKNOWN</code>,\r\n * <code>KEY_LOCATION_STANDARD</code>, <code>KEY_LOCATION_LEFT</code>,\r\n * <code>KEY_LOCATION_RIGHT</code>, and <code>KEY_LOCATION_NUMPAD</code>.\r\n *\r\n * @serial\r\n * @see #getKeyLocation()\r\n */\r\n","field_name":"keyLocation","field_type":"int","full_declaration":"int keyLocation","id":1124},{"comment":"// set from native code.\r\n","field_name":"rawCode","field_type":"long","full_declaration":"private transient long rawCode = 0","id":1125},{"comment":"","field_name":"primaryLevelUnicode","field_type":"long","full_declaration":"private transient long primaryLevelUnicode = 0","id":1126},{"comment":"// for MS Windows only\r\n","field_name":"scancode","field_type":"long","full_declaration":"private transient long scancode = 0","id":1127},{"comment":"","field_name":"extendedKeyCode","field_type":"long","full_declaration":"private transient long extendedKeyCode = 0","id":1128},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -2352130953028126954L","id":1129},{"comment":"/**\r\n * The original event source.\r\n *\r\n * Event source can be changed during processing, but in some cases\r\n * we need to be able to obtain original source.\r\n */\r\nprivate Component originalSource;","field_name":"originalSource","field_type":"java.awt.Component","full_declaration":"private java.awt.Component originalSource","id":1130},{"comment":"/**\r\n * The first number in the range of ids used for mouse events.\r\n */\r\n","field_name":"MOUSE_FIRST","field_type":"int","full_declaration":"public static final int MOUSE_FIRST = 500","id":1131},{"comment":"/**\r\n * The last number in the range of ids used for mouse events.\r\n */\r\n","field_name":"MOUSE_LAST","field_type":"int","full_declaration":"public static final int MOUSE_LAST = 507","id":1132},{"comment":"/**\r\n * The \"mouse clicked\" event. This <code>MouseEvent</code>\r\n * occurs when a mouse button is pressed and released.\r\n */\r\n","field_name":"MOUSE_CLICKED","field_type":"int","full_declaration":"public static final int MOUSE_CLICKED = MOUSE_FIRST","id":1133},{"comment":"/**\r\n * The \"mouse pressed\" event. This <code>MouseEvent</code>\r\n * occurs when a mouse button is pushed down.\r\n */\r\n// Event.MOUSE_DOWN\r\n","field_name":"MOUSE_PRESSED","field_type":"int","full_declaration":"public static final int MOUSE_PRESSED = 1 + MOUSE_FIRST","id":1134},{"comment":"/**\r\n * The \"mouse released\" event. This <code>MouseEvent</code>\r\n * occurs when a mouse button is let up.\r\n */\r\n// Event.MOUSE_UP\r\n","field_name":"MOUSE_RELEASED","field_type":"int","full_declaration":"public static final int MOUSE_RELEASED = 2 + MOUSE_FIRST","id":1135},{"comment":"/**\r\n * The \"mouse moved\" event. This <code>MouseEvent</code>\r\n * occurs when the mouse position changes.\r\n */\r\n// Event.MOUSE_MOVE\r\n","field_name":"MOUSE_MOVED","field_type":"int","full_declaration":"public static final int MOUSE_MOVED = 3 + MOUSE_FIRST","id":1136},{"comment":"/**\r\n * The \"mouse entered\" event. This <code>MouseEvent</code>\r\n * occurs when the mouse cursor enters the unobscured part of component's\r\n * geometry.\r\n */\r\n// Event.MOUSE_ENTER\r\n","field_name":"MOUSE_ENTERED","field_type":"int","full_declaration":"public static final int MOUSE_ENTERED = 4 + MOUSE_FIRST","id":1137},{"comment":"/**\r\n * The \"mouse exited\" event. This <code>MouseEvent</code>\r\n * occurs when the mouse cursor exits the unobscured part of component's\r\n * geometry.\r\n */\r\n// Event.MOUSE_EXIT\r\n","field_name":"MOUSE_EXITED","field_type":"int","full_declaration":"public static final int MOUSE_EXITED = 5 + MOUSE_FIRST","id":1138},{"comment":"/**\r\n * The \"mouse dragged\" event. This <code>MouseEvent</code>\r\n * occurs when the mouse position changes while a mouse button is pressed.\r\n */\r\n// Event.MOUSE_DRAG\r\n","field_name":"MOUSE_DRAGGED","field_type":"int","full_declaration":"public static final int MOUSE_DRAGGED = 6 + MOUSE_FIRST","id":1139},{"comment":"/**\r\n * The \"mouse wheel\" event.  This is the only <code>MouseWheelEvent</code>.\r\n * It occurs when a mouse equipped with a wheel has its wheel rotated.\r\n * @since 1.4\r\n */\r\n","field_name":"MOUSE_WHEEL","field_type":"int","full_declaration":"public static final int MOUSE_WHEEL = 7 + MOUSE_FIRST","id":1140},{"comment":"/**\r\n * Indicates no mouse buttons; used by {@link #getButton}.\r\n * @since 1.4\r\n */\r\n","field_name":"NOBUTTON","field_type":"int","full_declaration":"public static final int NOBUTTON = 0","id":1141},{"comment":"/**\r\n * Indicates mouse button #1; used by {@link #getButton}.\r\n * @since 1.4\r\n */\r\n","field_name":"BUTTON1","field_type":"int","full_declaration":"public static final int BUTTON1 = 1","id":1142},{"comment":"/**\r\n * Indicates mouse button #2; used by {@link #getButton}.\r\n * @since 1.4\r\n */\r\n","field_name":"BUTTON2","field_type":"int","full_declaration":"public static final int BUTTON2 = 2","id":1143},{"comment":"/**\r\n * Indicates mouse button #3; used by {@link #getButton}.\r\n * @since 1.4\r\n */\r\n","field_name":"BUTTON3","field_type":"int","full_declaration":"public static final int BUTTON3 = 3","id":1144},{"comment":"/**\r\n * The mouse event's x coordinate.\r\n * The x value is relative to the component that fired the event.\r\n *\r\n * @serial\r\n * @see #getX()\r\n */\r\n","field_name":"x","field_type":"int","full_declaration":"int x","id":1145},{"comment":"/**\r\n * The mouse event's y coordinate.\r\n * The y value is relative to the component that fired the event.\r\n *\r\n * @serial\r\n * @see #getY()\r\n */\r\n","field_name":"y","field_type":"int","full_declaration":"int y","id":1146},{"comment":"/**\r\n * The mouse event's x absolute coordinate.\r\n * In a virtual device multi-screen environment in which the\r\n * desktop area could span multiple physical screen devices,\r\n * this coordinate is relative to the virtual coordinate system.\r\n * Otherwise, this coordinate is relative to the coordinate system\r\n * associated with the Component's GraphicsConfiguration.\r\n *\r\n * @serial\r\n */\r\n","field_name":"xAbs","field_type":"int","full_declaration":"private int xAbs","id":1147},{"comment":"/**\r\n * The mouse event's y absolute coordinate.\r\n * In a virtual device multi-screen environment in which the\r\n * desktop area could span multiple physical screen devices,\r\n * this coordinate is relative to the virtual coordinate system.\r\n * Otherwise, this coordinate is relative to the coordinate system\r\n * associated with the Component's GraphicsConfiguration.\r\n *\r\n * @serial\r\n */\r\n","field_name":"yAbs","field_type":"int","full_declaration":"private int yAbs","id":1148},{"comment":"/**\r\n * Indicates the number of quick consecutive clicks of\r\n * a mouse button.\r\n * clickCount will be valid for only three mouse events :<BR>\r\n * <code>MOUSE_CLICKED</code>,\r\n * <code>MOUSE_PRESSED</code> and\r\n * <code>MOUSE_RELEASED</code>.\r\n * For the above, the <code>clickCount</code> will be at least 1.\r\n * For all other events the count will be 0.\r\n *\r\n * @serial\r\n * @see #getClickCount()\r\n */\r\n","field_name":"clickCount","field_type":"int","full_declaration":"int clickCount","id":1149},{"comment":"/**\r\n * Indicates whether the event is a result of a touch event.\r\n */\r\n","field_name":"causedByTouchEvent","field_type":"boolean","full_declaration":"private boolean causedByTouchEvent","id":1150},{"comment":"/**\r\n * Indicates which, if any, of the mouse buttons has changed state.\r\n *\r\n * The valid values are ranged from 0 to the value returned by the\r\n * {@link java.awt.MouseInfo#getNumberOfButtons() MouseInfo.getNumberOfButtons()} method.\r\n * This range already includes constants {@code NOBUTTON}, {@code BUTTON1},\r\n * {@code BUTTON2}, and {@code BUTTON3}\r\n * if these buttons are present. So it is allowed to use these constants too.\r\n * For example, for a mouse with two buttons this field may contain the following values:\r\n * <ul>\r\n * <li> 0 ({@code NOBUTTON})\r\n * <li> 1 ({@code BUTTON1})\r\n * <li> 2 ({@code BUTTON2})\r\n * </ul>\r\n * If a mouse has 5 buttons, this field may contain the following values:\r\n * <ul>\r\n * <li> 0 ({@code NOBUTTON})\r\n * <li> 1 ({@code BUTTON1})\r\n * <li> 2 ({@code BUTTON2})\r\n * <li> 3 ({@code BUTTON3})\r\n * <li> 4\r\n * <li> 5\r\n * </ul>\r\n * If support for extended mouse buttons is {@link Toolkit#areExtraMouseButtonsEnabled()} disabled by Java\r\n * then the field may not contain the value larger than {@code BUTTON3}.\r\n * @serial\r\n * @see #getButton()\r\n * @see java.awt.Toolkit#areExtraMouseButtonsEnabled()\r\n */\r\n","field_name":"button","field_type":"int","full_declaration":"int button","id":1151},{"comment":"/**\r\n * A property used to indicate whether a Popup Menu\r\n * should appear  with a certain gestures.\r\n * If <code>popupTrigger</code> = <code>false</code>,\r\n * no popup menu should appear.  If it is <code>true</code>\r\n * then a popup menu should appear.\r\n *\r\n * @serial\r\n * @see java.awt.PopupMenu\r\n * @see #isPopupTrigger()\r\n */\r\n","field_name":"popupTrigger","field_type":"boolean","full_declaration":"boolean popupTrigger = false","id":1152},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -991214153494842848L","id":1153},{"comment":"/**\r\n * A number of buttons available on the mouse at the {@code Toolkit} machinery startup.\r\n */\r\n","field_name":"cachedNumberOfButtons","field_type":"int","full_declaration":"private static int cachedNumberOfButtons","id":1154},{"comment":"/* if the button is an extra button and it is released or clicked then in Xsystem its state\r\n       is not modified. Exclude this button number from ExtModifiers mask.*/\r\n","field_name":"shouldExcludeButtonFromExtModifiers","field_type":"boolean","full_declaration":"transient private boolean shouldExcludeButtonFromExtModifiers = false","id":1155},{"comment":"/**\r\n * Constant representing scrolling by \"units\" (like scrolling with the\r\n * arrow keys)\r\n *\r\n * @see #getScrollType\r\n */\r\n@Native\r\n","field_name":"WHEEL_UNIT_SCROLL","field_type":"int","full_declaration":"public static final int WHEEL_UNIT_SCROLL = 0","id":1156},{"comment":"/**\r\n * Constant representing scrolling by a \"block\" (like scrolling\r\n * with page-up, page-down keys)\r\n *\r\n * @see #getScrollType\r\n */\r\n@Native\r\n","field_name":"WHEEL_BLOCK_SCROLL","field_type":"int","full_declaration":"public static final int WHEEL_BLOCK_SCROLL = 1","id":1157},{"comment":"/**\r\n * Indicates what sort of scrolling should take place in response to this\r\n * event, based on platform settings.  Legal values are:\r\n * <ul>\r\n * <li> WHEEL_UNIT_SCROLL\r\n * <li> WHEEL_BLOCK_SCROLL\r\n * </ul>\r\n *\r\n * @see #getScrollType\r\n */\r\n","field_name":"scrollType","field_type":"int","full_declaration":"int scrollType","id":1158},{"comment":"/**\r\n * Only valid for scrollType WHEEL_UNIT_SCROLL.\r\n * Indicates number of units that should be scrolled per\r\n * click of mouse wheel rotation, based on platform settings.\r\n *\r\n * @see #getScrollAmount\r\n * @see #getScrollType\r\n */\r\n","field_name":"scrollAmount","field_type":"int","full_declaration":"int scrollAmount","id":1159},{"comment":"/**\r\n * Indicates how far the mouse wheel was rotated.\r\n *\r\n * @see #getWheelRotation\r\n */\r\n","field_name":"wheelRotation","field_type":"int","full_declaration":"int wheelRotation","id":1160},{"comment":"/**\r\n * Indicates how far the mouse wheel was rotated.\r\n *\r\n * @see #getPreciseWheelRotation\r\n */\r\n","field_name":"preciseWheelRotation","field_type":"double","full_declaration":"double preciseWheelRotation","id":1161},{"comment":"/*\r\n     * serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 6459879390515399677L","id":1162},{"comment":"/**\r\n * Marks the first integer id for the range of paint event ids.\r\n */\r\n","field_name":"PAINT_FIRST","field_type":"int","full_declaration":"public static final int PAINT_FIRST = 800","id":1163},{"comment":"/**\r\n * Marks the last integer id for the range of paint event ids.\r\n */\r\n","field_name":"PAINT_LAST","field_type":"int","full_declaration":"public static final int PAINT_LAST = 801","id":1164},{"comment":"/**\r\n * The paint event type.\r\n */\r\n","field_name":"PAINT","field_type":"int","full_declaration":"public static final int PAINT = PAINT_FIRST","id":1165},{"comment":"/**\r\n * The update event type.\r\n */\r\n// 801\r\n","field_name":"UPDATE","field_type":"int","full_declaration":"public static final int UPDATE = PAINT_FIRST + 1","id":1166},{"comment":"/**\r\n * This is the rectangle that represents the area on the source\r\n * component that requires a repaint.\r\n * This rectangle should be non null.\r\n *\r\n * @serial\r\n * @see java.awt.Rectangle\r\n * @see #setUpdateRect(Rectangle)\r\n * @see #getUpdateRect()\r\n */\r\nRectangle updateRect;","field_name":"updateRect","field_type":"java.awt.Rectangle","full_declaration":"java.awt.Rectangle updateRect","id":1167},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 1267492026433337593L","id":1168},{"comment":"/**\r\n * The first number in the range of ids used for text events.\r\n */\r\n","field_name":"TEXT_FIRST","field_type":"int","full_declaration":"public static final int TEXT_FIRST = 900","id":1169},{"comment":"/**\r\n * The last number in the range of ids used for text events.\r\n */\r\n","field_name":"TEXT_LAST","field_type":"int","full_declaration":"public static final int TEXT_LAST = 900","id":1170},{"comment":"/**\r\n * This event id indicates that object's text changed.\r\n */\r\n","field_name":"TEXT_VALUE_CHANGED","field_type":"int","full_declaration":"public static final int TEXT_VALUE_CHANGED = TEXT_FIRST","id":1171},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 6269902291250941179L","id":1172},{"comment":"/**\r\n * The first number in the range of ids used for window events.\r\n */\r\n","field_name":"WINDOW_FIRST","field_type":"int","full_declaration":"public static final int WINDOW_FIRST = 200","id":1173},{"comment":"/**\r\n * The window opened event.  This event is delivered only\r\n * the first time a window is made visible.\r\n */\r\n// 200\r\n@Native\r\n","field_name":"WINDOW_OPENED","field_type":"int","full_declaration":"public static final int WINDOW_OPENED = WINDOW_FIRST","id":1174},{"comment":"/**\r\n * The \"window is closing\" event. This event is delivered when\r\n * the user attempts to close the window from the window's system menu.\r\n * If the program does not explicitly hide or dispose the window\r\n * while processing this event, the window close operation will be\r\n * cancelled.\r\n */\r\n// Event.WINDOW_DESTROY\r\n@Native\r\n","field_name":"WINDOW_CLOSING","field_type":"int","full_declaration":"public static final int WINDOW_CLOSING = 1 + WINDOW_FIRST","id":1175},{"comment":"/**\r\n * The window closed event. This event is delivered after the displayable\r\n * window has been closed as the result of a call to dispose.\r\n * @see java.awt.Component#isDisplayable\r\n * @see Window#dispose\r\n */\r\n@Native\r\n","field_name":"WINDOW_CLOSED","field_type":"int","full_declaration":"public static final int WINDOW_CLOSED = 2 + WINDOW_FIRST","id":1176},{"comment":"/**\r\n * The window iconified event. This event is delivered when\r\n * the window has been changed from a normal to a minimized state.\r\n * For many platforms, a minimized window is displayed as\r\n * the icon specified in the window's iconImage property.\r\n * @see java.awt.Frame#setIconImage\r\n */\r\n// Event.WINDOW_ICONIFY\r\n@Native\r\n","field_name":"WINDOW_ICONIFIED","field_type":"int","full_declaration":"public static final int WINDOW_ICONIFIED = 3 + WINDOW_FIRST","id":1177},{"comment":"/**\r\n * The window deiconified event type. This event is delivered when\r\n * the window has been changed from a minimized to a normal state.\r\n */\r\n// Event.WINDOW_DEICONIFY\r\n@Native\r\n","field_name":"WINDOW_DEICONIFIED","field_type":"int","full_declaration":"public static final int WINDOW_DEICONIFIED = 4 + WINDOW_FIRST","id":1178},{"comment":"/**\r\n * The window-activated event type. This event is delivered when the Window\r\n * becomes the active Window. Only a Frame or a Dialog can be the active\r\n * Window. The native windowing system may denote the active Window or its\r\n * children with special decorations, such as a highlighted title bar. The\r\n * active Window is always either the focused Window, or the first Frame or\r\n * Dialog that is an owner of the focused Window.\r\n */\r\n@Native\r\n","field_name":"WINDOW_ACTIVATED","field_type":"int","full_declaration":"public static final int WINDOW_ACTIVATED = 5 + WINDOW_FIRST","id":1179},{"comment":"/**\r\n * The window-deactivated event type. This event is delivered when the\r\n * Window is no longer the active Window. Only a Frame or a Dialog can be\r\n * the active Window. The native windowing system may denote the active\r\n * Window or its children with special decorations, such as a highlighted\r\n * title bar. The active Window is always either the focused Window, or the\r\n * first Frame or Dialog that is an owner of the focused Window.\r\n */\r\n@Native\r\n","field_name":"WINDOW_DEACTIVATED","field_type":"int","full_declaration":"public static final int WINDOW_DEACTIVATED = 6 + WINDOW_FIRST","id":1180},{"comment":"/**\r\n * The window-gained-focus event type. This event is delivered when the\r\n * Window becomes the focused Window, which means that the Window, or one\r\n * of its subcomponents, will receive keyboard events.\r\n */\r\n@Native\r\n","field_name":"WINDOW_GAINED_FOCUS","field_type":"int","full_declaration":"public static final int WINDOW_GAINED_FOCUS = 7 + WINDOW_FIRST","id":1181},{"comment":"/**\r\n * The window-lost-focus event type. This event is delivered when a Window\r\n * is no longer the focused Window, which means keyboard events will no\r\n * longer be delivered to the Window or any of its subcomponents.\r\n */\r\n@Native\r\n","field_name":"WINDOW_LOST_FOCUS","field_type":"int","full_declaration":"public static final int WINDOW_LOST_FOCUS = 8 + WINDOW_FIRST","id":1182},{"comment":"/**\r\n * The window-state-changed event type.  This event is delivered\r\n * when a Window's state is changed by virtue of it being\r\n * iconified, maximized etc.\r\n * @since 1.4\r\n */\r\n@Native\r\n","field_name":"WINDOW_STATE_CHANGED","field_type":"int","full_declaration":"public static final int WINDOW_STATE_CHANGED = 9 + WINDOW_FIRST","id":1183},{"comment":"/**\r\n * The last number in the range of ids used for window events.\r\n */\r\n","field_name":"WINDOW_LAST","field_type":"int","full_declaration":"public static final int WINDOW_LAST = WINDOW_STATE_CHANGED","id":1184},{"comment":"/**\r\n * The other Window involved in this focus or activation change. For a\r\n * WINDOW_ACTIVATED or WINDOW_GAINED_FOCUS event, this is the Window that\r\n * lost activation or focus. For a WINDOW_DEACTIVATED or WINDOW_LOST_FOCUS\r\n * event, this is the Window that gained activation or focus. For any other\r\n * type of WindowEvent, or if the focus or activation change occurs with a\r\n * native application, a Java application in a different VM, or with no\r\n * other Window, null is returned.\r\n *\r\n * @see #getOppositeWindow\r\n * @since 1.4\r\n */\r\ntransient Window opposite;","field_name":"opposite","field_type":"java.awt.Window","full_declaration":"transient java.awt.Window opposite","id":1185},{"comment":"/**\r\n * TBS\r\n */\r\n","field_name":"oldState","field_type":"int","full_declaration":"int oldState","id":1186},{"comment":"","field_name":"newState","field_type":"int","full_declaration":"int newState","id":1187},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -1567959133147912127L","id":1188},{"comment":"","field_name":"data","field_type":"long","full_declaration":"private transient long data","id":1189},{"comment":"/* Modifier constants */\r\n/**\r\n * This flag indicates that the Shift key was down when the event\r\n * occurred.\r\n */\r\n","field_name":"SHIFT_MASK","field_type":"int","full_declaration":"public static final int SHIFT_MASK = 1 << 0","id":1190},{"comment":"/**\r\n * This flag indicates that the Control key was down when the event\r\n * occurred.\r\n */\r\n","field_name":"CTRL_MASK","field_type":"int","full_declaration":"public static final int CTRL_MASK = 1 << 1","id":1191},{"comment":"/**\r\n * This flag indicates that the Meta key was down when the event\r\n * occurred. For mouse events, this flag indicates that the right\r\n * button was pressed or released.\r\n */\r\n","field_name":"META_MASK","field_type":"int","full_declaration":"public static final int META_MASK = 1 << 2","id":1192},{"comment":"/**\r\n * This flag indicates that the Alt key was down when\r\n * the event occurred. For mouse events, this flag indicates that the\r\n * middle mouse button was pressed or released.\r\n */\r\n","field_name":"ALT_MASK","field_type":"int","full_declaration":"public static final int ALT_MASK = 1 << 3","id":1193},{"comment":"/* Action keys */\r\n/**\r\n * The Home key, a non-ASCII action key.\r\n */\r\n","field_name":"HOME","field_type":"int","full_declaration":"public static final int HOME = 1000","id":1194},{"comment":"/**\r\n * The End key, a non-ASCII action key.\r\n */\r\n","field_name":"END","field_type":"int","full_declaration":"public static final int END = 1001","id":1195},{"comment":"/**\r\n * The Page Up key, a non-ASCII action key.\r\n */\r\n","field_name":"PGUP","field_type":"int","full_declaration":"public static final int PGUP = 1002","id":1196},{"comment":"/**\r\n * The Page Down key, a non-ASCII action key.\r\n */\r\n","field_name":"PGDN","field_type":"int","full_declaration":"public static final int PGDN = 1003","id":1197},{"comment":"/**\r\n * The Up Arrow key, a non-ASCII action key.\r\n */\r\n","field_name":"UP","field_type":"int","full_declaration":"public static final int UP = 1004","id":1198},{"comment":"/**\r\n * The Down Arrow key, a non-ASCII action key.\r\n */\r\n","field_name":"DOWN","field_type":"int","full_declaration":"public static final int DOWN = 1005","id":1199},{"comment":"/**\r\n * The Left Arrow key, a non-ASCII action key.\r\n */\r\n","field_name":"LEFT","field_type":"int","full_declaration":"public static final int LEFT = 1006","id":1200},{"comment":"/**\r\n * The Right Arrow key, a non-ASCII action key.\r\n */\r\n","field_name":"RIGHT","field_type":"int","full_declaration":"public static final int RIGHT = 1007","id":1201},{"comment":"/**\r\n * The F1 function key, a non-ASCII action key.\r\n */\r\n","field_name":"F1","field_type":"int","full_declaration":"public static final int F1 = 1008","id":1202},{"comment":"/**\r\n * The F2 function key, a non-ASCII action key.\r\n */\r\n","field_name":"F2","field_type":"int","full_declaration":"public static final int F2 = 1009","id":1203},{"comment":"/**\r\n * The F3 function key, a non-ASCII action key.\r\n */\r\n","field_name":"F3","field_type":"int","full_declaration":"public static final int F3 = 1010","id":1204},{"comment":"/**\r\n * The F4 function key, a non-ASCII action key.\r\n */\r\n","field_name":"F4","field_type":"int","full_declaration":"public static final int F4 = 1011","id":1205},{"comment":"/**\r\n * The F5 function key, a non-ASCII action key.\r\n */\r\n","field_name":"F5","field_type":"int","full_declaration":"public static final int F5 = 1012","id":1206},{"comment":"/**\r\n * The F6 function key, a non-ASCII action key.\r\n */\r\n","field_name":"F6","field_type":"int","full_declaration":"public static final int F6 = 1013","id":1207},{"comment":"/**\r\n * The F7 function key, a non-ASCII action key.\r\n */\r\n","field_name":"F7","field_type":"int","full_declaration":"public static final int F7 = 1014","id":1208},{"comment":"/**\r\n * The F8 function key, a non-ASCII action key.\r\n */\r\n","field_name":"F8","field_type":"int","full_declaration":"public static final int F8 = 1015","id":1209},{"comment":"/**\r\n * The F9 function key, a non-ASCII action key.\r\n */\r\n","field_name":"F9","field_type":"int","full_declaration":"public static final int F9 = 1016","id":1210},{"comment":"/**\r\n * The F10 function key, a non-ASCII action key.\r\n */\r\n","field_name":"F10","field_type":"int","full_declaration":"public static final int F10 = 1017","id":1211},{"comment":"/**\r\n * The F11 function key, a non-ASCII action key.\r\n */\r\n","field_name":"F11","field_type":"int","full_declaration":"public static final int F11 = 1018","id":1212},{"comment":"/**\r\n * The F12 function key, a non-ASCII action key.\r\n */\r\n","field_name":"F12","field_type":"int","full_declaration":"public static final int F12 = 1019","id":1213},{"comment":"/**\r\n * The Print Screen key, a non-ASCII action key.\r\n */\r\n","field_name":"PRINT_SCREEN","field_type":"int","full_declaration":"public static final int PRINT_SCREEN = 1020","id":1214},{"comment":"/**\r\n * The Scroll Lock key, a non-ASCII action key.\r\n */\r\n","field_name":"SCROLL_LOCK","field_type":"int","full_declaration":"public static final int SCROLL_LOCK = 1021","id":1215},{"comment":"/**\r\n * The Caps Lock key, a non-ASCII action key.\r\n */\r\n","field_name":"CAPS_LOCK","field_type":"int","full_declaration":"public static final int CAPS_LOCK = 1022","id":1216},{"comment":"/**\r\n * The Num Lock key, a non-ASCII action key.\r\n */\r\n","field_name":"NUM_LOCK","field_type":"int","full_declaration":"public static final int NUM_LOCK = 1023","id":1217},{"comment":"/**\r\n * The Pause key, a non-ASCII action key.\r\n */\r\n","field_name":"PAUSE","field_type":"int","full_declaration":"public static final int PAUSE = 1024","id":1218},{"comment":"/**\r\n * The Insert key, a non-ASCII action key.\r\n */\r\n","field_name":"INSERT","field_type":"int","full_declaration":"public static final int INSERT = 1025","id":1219},{"comment":"/* Non-action keys */\r\n/**\r\n * The Enter key.\r\n */\r\n","field_name":"ENTER","field_type":"int","full_declaration":"public static final int ENTER = '\\n'","id":1220},{"comment":"/**\r\n * The BackSpace key.\r\n */\r\n","field_name":"BACK_SPACE","field_type":"int","full_declaration":"public static final int BACK_SPACE = '\\b'","id":1221},{"comment":"/**\r\n * The Tab key.\r\n */\r\n","field_name":"TAB","field_type":"int","full_declaration":"public static final int TAB = '\\t'","id":1222},{"comment":"/**\r\n * The Escape key.\r\n */\r\n","field_name":"ESCAPE","field_type":"int","full_declaration":"public static final int ESCAPE = 27","id":1223},{"comment":"/**\r\n * The Delete key.\r\n */\r\n","field_name":"DELETE","field_type":"int","full_declaration":"public static final int DELETE = 127","id":1224},{"comment":"/* Base for all window events. */\r\n","field_name":"WINDOW_EVENT","field_type":"int","full_declaration":"private static final int WINDOW_EVENT = 200","id":1225},{"comment":"/**\r\n * The user has asked the window manager to kill the window.\r\n */\r\n","field_name":"WINDOW_DESTROY","field_type":"int","full_declaration":"public static final int WINDOW_DESTROY = 1 + WINDOW_EVENT","id":1226},{"comment":"/**\r\n * The user has asked the window manager to expose the window.\r\n */\r\n","field_name":"WINDOW_EXPOSE","field_type":"int","full_declaration":"public static final int WINDOW_EXPOSE = 2 + WINDOW_EVENT","id":1227},{"comment":"/**\r\n * The user has asked the window manager to iconify the window.\r\n */\r\n","field_name":"WINDOW_ICONIFY","field_type":"int","full_declaration":"public static final int WINDOW_ICONIFY = 3 + WINDOW_EVENT","id":1228},{"comment":"/**\r\n * The user has asked the window manager to de-iconify the window.\r\n */\r\n","field_name":"WINDOW_DEICONIFY","field_type":"int","full_declaration":"public static final int WINDOW_DEICONIFY = 4 + WINDOW_EVENT","id":1229},{"comment":"/**\r\n * The user has asked the window manager to move the window.\r\n */\r\n","field_name":"WINDOW_MOVED","field_type":"int","full_declaration":"public static final int WINDOW_MOVED = 5 + WINDOW_EVENT","id":1230},{"comment":"/* Base for all keyboard events. */\r\n","field_name":"KEY_EVENT","field_type":"int","full_declaration":"private static final int KEY_EVENT = 400","id":1231},{"comment":"/**\r\n * The user has pressed a normal key.\r\n */\r\n","field_name":"KEY_PRESS","field_type":"int","full_declaration":"public static final int KEY_PRESS = 1 + KEY_EVENT","id":1232},{"comment":"/**\r\n * The user has released a normal key.\r\n */\r\n","field_name":"KEY_RELEASE","field_type":"int","full_declaration":"public static final int KEY_RELEASE = 2 + KEY_EVENT","id":1233},{"comment":"/**\r\n * The user has pressed a non-ASCII <em>action</em> key.\r\n * The <code>key</code> field contains a value that indicates\r\n * that the event occurred on one of the action keys, which\r\n * comprise the 12 function keys, the arrow (cursor) keys,\r\n * Page Up, Page Down, Home, End, Print Screen, Scroll Lock,\r\n * Caps Lock, Num Lock, Pause, and Insert.\r\n */\r\n","field_name":"KEY_ACTION","field_type":"int","full_declaration":"public static final int KEY_ACTION = 3 + KEY_EVENT","id":1234},{"comment":"/**\r\n * The user has released a non-ASCII <em>action</em> key.\r\n * The <code>key</code> field contains a value that indicates\r\n * that the event occurred on one of the action keys, which\r\n * comprise the 12 function keys, the arrow (cursor) keys,\r\n * Page Up, Page Down, Home, End, Print Screen, Scroll Lock,\r\n * Caps Lock, Num Lock, Pause, and Insert.\r\n */\r\n","field_name":"KEY_ACTION_RELEASE","field_type":"int","full_declaration":"public static final int KEY_ACTION_RELEASE = 4 + KEY_EVENT","id":1235},{"comment":"/* Base for all mouse events. */\r\n","field_name":"MOUSE_EVENT","field_type":"int","full_declaration":"private static final int MOUSE_EVENT = 500","id":1236},{"comment":"/**\r\n * The user has pressed the mouse button. The <code>ALT_MASK</code>\r\n * flag indicates that the middle button has been pressed.\r\n * The <code>META_MASK</code>flag indicates that the\r\n * right button has been pressed.\r\n * @see     java.awt.Event#ALT_MASK\r\n * @see     java.awt.Event#META_MASK\r\n */\r\n","field_name":"MOUSE_DOWN","field_type":"int","full_declaration":"public static final int MOUSE_DOWN = 1 + MOUSE_EVENT","id":1237},{"comment":"/**\r\n * The user has released the mouse button. The <code>ALT_MASK</code>\r\n * flag indicates that the middle button has been released.\r\n * The <code>META_MASK</code>flag indicates that the\r\n * right button has been released.\r\n * @see     java.awt.Event#ALT_MASK\r\n * @see     java.awt.Event#META_MASK\r\n */\r\n","field_name":"MOUSE_UP","field_type":"int","full_declaration":"public static final int MOUSE_UP = 2 + MOUSE_EVENT","id":1238},{"comment":"/**\r\n * The mouse has moved with no button pressed.\r\n */\r\n","field_name":"MOUSE_MOVE","field_type":"int","full_declaration":"public static final int MOUSE_MOVE = 3 + MOUSE_EVENT","id":1239},{"comment":"/**\r\n * The mouse has entered a component.\r\n */\r\n","field_name":"MOUSE_ENTER","field_type":"int","full_declaration":"public static final int MOUSE_ENTER = 4 + MOUSE_EVENT","id":1240},{"comment":"/**\r\n * The mouse has exited a component.\r\n */\r\n","field_name":"MOUSE_EXIT","field_type":"int","full_declaration":"public static final int MOUSE_EXIT = 5 + MOUSE_EVENT","id":1241},{"comment":"/**\r\n * The user has moved the mouse with a button pressed. The\r\n * <code>ALT_MASK</code> flag indicates that the middle\r\n * button is being pressed. The <code>META_MASK</code> flag indicates\r\n * that the right button is being pressed.\r\n * @see     java.awt.Event#ALT_MASK\r\n * @see     java.awt.Event#META_MASK\r\n */\r\n","field_name":"MOUSE_DRAG","field_type":"int","full_declaration":"public static final int MOUSE_DRAG = 6 + MOUSE_EVENT","id":1242},{"comment":"/* Scrolling events */\r\n","field_name":"SCROLL_EVENT","field_type":"int","full_declaration":"private static final int SCROLL_EVENT = 600","id":1243},{"comment":"/**\r\n * The user has activated the <em>line up</em>\r\n * area of a scroll bar.\r\n */\r\n","field_name":"SCROLL_LINE_UP","field_type":"int","full_declaration":"public static final int SCROLL_LINE_UP = 1 + SCROLL_EVENT","id":1244},{"comment":"/**\r\n * The user has activated the <em>line down</em>\r\n * area of a scroll bar.\r\n */\r\n","field_name":"SCROLL_LINE_DOWN","field_type":"int","full_declaration":"public static final int SCROLL_LINE_DOWN = 2 + SCROLL_EVENT","id":1245},{"comment":"/**\r\n * The user has activated the <em>page up</em>\r\n * area of a scroll bar.\r\n */\r\n","field_name":"SCROLL_PAGE_UP","field_type":"int","full_declaration":"public static final int SCROLL_PAGE_UP = 3 + SCROLL_EVENT","id":1246},{"comment":"/**\r\n * The user has activated the <em>page down</em>\r\n * area of a scroll bar.\r\n */\r\n","field_name":"SCROLL_PAGE_DOWN","field_type":"int","full_declaration":"public static final int SCROLL_PAGE_DOWN = 4 + SCROLL_EVENT","id":1247},{"comment":"/**\r\n * The user has moved the bubble (thumb) in a scroll bar,\r\n * moving to an \"absolute\" position, rather than to\r\n * an offset from the last position.\r\n */\r\n","field_name":"SCROLL_ABSOLUTE","field_type":"int","full_declaration":"public static final int SCROLL_ABSOLUTE = 5 + SCROLL_EVENT","id":1248},{"comment":"/**\r\n * The scroll begin event.\r\n */\r\n","field_name":"SCROLL_BEGIN","field_type":"int","full_declaration":"public static final int SCROLL_BEGIN = 6 + SCROLL_EVENT","id":1249},{"comment":"/**\r\n * The scroll end event.\r\n */\r\n","field_name":"SCROLL_END","field_type":"int","full_declaration":"public static final int SCROLL_END = 7 + SCROLL_EVENT","id":1250},{"comment":"/* List Events */\r\n","field_name":"LIST_EVENT","field_type":"int","full_declaration":"private static final int LIST_EVENT = 700","id":1251},{"comment":"/**\r\n * An item in a list has been selected.\r\n */\r\n","field_name":"LIST_SELECT","field_type":"int","full_declaration":"public static final int LIST_SELECT = 1 + LIST_EVENT","id":1252},{"comment":"/**\r\n * An item in a list has been deselected.\r\n */\r\n","field_name":"LIST_DESELECT","field_type":"int","full_declaration":"public static final int LIST_DESELECT = 2 + LIST_EVENT","id":1253},{"comment":"/* Misc Event */\r\n","field_name":"MISC_EVENT","field_type":"int","full_declaration":"private static final int MISC_EVENT = 1000","id":1254},{"comment":"/**\r\n * This event indicates that the user wants some action to occur.\r\n */\r\n","field_name":"ACTION_EVENT","field_type":"int","full_declaration":"public static final int ACTION_EVENT = 1 + MISC_EVENT","id":1255},{"comment":"/**\r\n * A file loading event.\r\n */\r\n","field_name":"LOAD_FILE","field_type":"int","full_declaration":"public static final int LOAD_FILE = 2 + MISC_EVENT","id":1256},{"comment":"/**\r\n * A file saving event.\r\n */\r\n","field_name":"SAVE_FILE","field_type":"int","full_declaration":"public static final int SAVE_FILE = 3 + MISC_EVENT","id":1257},{"comment":"/**\r\n * A component gained the focus.\r\n */\r\n","field_name":"GOT_FOCUS","field_type":"int","full_declaration":"public static final int GOT_FOCUS = 4 + MISC_EVENT","id":1258},{"comment":"/**\r\n * A component lost the focus.\r\n */\r\n","field_name":"LOST_FOCUS","field_type":"int","full_declaration":"public static final int LOST_FOCUS = 5 + MISC_EVENT","id":1259},{"comment":"/**\r\n * The target component. This indicates the component over which the\r\n * event occurred or with which the event is associated.\r\n * This object has been replaced by AWTEvent.getSource()\r\n *\r\n * @serial\r\n * @see java.awt.AWTEvent#getSource()\r\n */\r\npublic Object target;","field_name":"target","field_type":"java.lang.Object","full_declaration":"public java.lang.Object target","id":1260},{"comment":"/**\r\n * The time stamp.\r\n * Replaced by InputEvent.getWhen().\r\n *\r\n * @serial\r\n * @see java.awt.event.InputEvent#getWhen()\r\n */\r\n","field_name":"when","field_type":"long","full_declaration":"public long when","id":1261},{"comment":"/**\r\n * Indicates which type of event the event is, and which\r\n * other <code>Event</code> variables are relevant for the event.\r\n * This has been replaced by AWTEvent.getID()\r\n *\r\n * @serial\r\n * @see java.awt.AWTEvent#getID()\r\n */\r\n","field_name":"id","field_type":"int","full_declaration":"public int id","id":1262},{"comment":"/**\r\n * The <i>x</i> coordinate of the event.\r\n * Replaced by MouseEvent.getX()\r\n *\r\n * @serial\r\n * @see java.awt.event.MouseEvent#getX()\r\n */\r\n","field_name":"x","field_type":"int","full_declaration":"public int x","id":1263},{"comment":"/**\r\n * The <i>y</i> coordinate of the event.\r\n * Replaced by MouseEvent.getY()\r\n *\r\n * @serial\r\n * @see java.awt.event.MouseEvent#getY()\r\n */\r\n","field_name":"y","field_type":"int","full_declaration":"public int y","id":1264},{"comment":"/**\r\n * The key code of the key that was pressed in a keyboard event.\r\n * This has been replaced by KeyEvent.getKeyCode()\r\n *\r\n * @serial\r\n * @see java.awt.event.KeyEvent#getKeyCode()\r\n */\r\n","field_name":"key","field_type":"int","full_declaration":"public int key","id":1265},{"comment":"/**\r\n * The key character that was pressed in a keyboard event.\r\n */\r\n// public char keyChar;\r\n/**\r\n * The state of the modifier keys.\r\n * This is replaced with InputEvent.getModifiers()\r\n * In java 1.1 MouseEvent and KeyEvent are subclasses\r\n * of InputEvent.\r\n *\r\n * @serial\r\n * @see java.awt.event.InputEvent#getModifiers()\r\n */\r\n","field_name":"modifiers","field_type":"int","full_declaration":"public int modifiers","id":1266},{"comment":"/**\r\n * For <code>MOUSE_DOWN</code> events, this field indicates the\r\n * number of consecutive clicks. For other events, its value is\r\n * <code>0</code>.\r\n * This field has been replaced by MouseEvent.getClickCount().\r\n *\r\n * @serial\r\n * @see java.awt.event.MouseEvent#getClickCount()\r\n */\r\n","field_name":"clickCount","field_type":"int","full_declaration":"public int clickCount","id":1267},{"comment":"/**\r\n * An arbitrary argument of the event. The value of this field\r\n * depends on the type of event.\r\n * <code>arg</code> has been replaced by event specific property.\r\n *\r\n * @serial\r\n */\r\npublic Object arg;","field_name":"arg","field_type":"java.lang.Object","full_declaration":"public java.lang.Object arg","id":1268},{"comment":"/**\r\n * The next event. This field is set when putting events into a\r\n * linked list.\r\n * This has been replaced by EventQueue.\r\n *\r\n * @serial\r\n * @see java.awt.EventQueue\r\n */\r\npublic Event evt;","field_name":"evt","field_type":"java.awt.Event","full_declaration":"public java.awt.Event evt","id":1269},{"comment":"/* table for mapping old Event action keys to KeyEvent virtual keys. */\r\n","field_name":"actionKeyCodes","field_type":"int[][]","full_declaration":"private static final int[][] actionKeyCodes = { /*    virtual key              action key   */\r\n{ KeyEvent.VK_HOME, Event.HOME }, { KeyEvent.VK_END, Event.END }, { KeyEvent.VK_PAGE_UP, Event.PGUP }, { KeyEvent.VK_PAGE_DOWN, Event.PGDN }, { KeyEvent.VK_UP, Event.UP }, { KeyEvent.VK_DOWN, Event.DOWN }, { KeyEvent.VK_LEFT, Event.LEFT }, { KeyEvent.VK_RIGHT, Event.RIGHT }, { KeyEvent.VK_F1, Event.F1 }, { KeyEvent.VK_F2, Event.F2 }, { KeyEvent.VK_F3, Event.F3 }, { KeyEvent.VK_F4, Event.F4 }, { KeyEvent.VK_F5, Event.F5 }, { KeyEvent.VK_F6, Event.F6 }, { KeyEvent.VK_F7, Event.F7 }, { KeyEvent.VK_F8, Event.F8 }, { KeyEvent.VK_F9, Event.F9 }, { KeyEvent.VK_F10, Event.F10 }, { KeyEvent.VK_F11, Event.F11 }, { KeyEvent.VK_F12, Event.F12 }, { KeyEvent.VK_PRINTSCREEN, Event.PRINT_SCREEN }, { KeyEvent.VK_SCROLL_LOCK, Event.SCROLL_LOCK }, { KeyEvent.VK_CAPS_LOCK, Event.CAPS_LOCK }, { KeyEvent.VK_NUM_LOCK, Event.NUM_LOCK }, { KeyEvent.VK_PAUSE, Event.PAUSE }, { KeyEvent.VK_INSERT, Event.INSERT } }","id":1270},{"comment":"/**\r\n * This field controls whether or not the event is sent back\r\n * down to the peer once the target has processed it -\r\n * false means it's sent to the peer, true means it's not.\r\n *\r\n * @serial\r\n * @see #isConsumed()\r\n */\r\n","field_name":"consumed","field_type":"boolean","full_declaration":"private boolean consumed = false","id":1271},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 5488922509400504703L","id":1272},{"comment":"private static final PlatformLogger eventLog = PlatformLogger.getLogger(\"java.awt.event.EventDispatchThread\");","field_name":"eventLog","field_type":"sun.util.logging.PlatformLogger","full_declaration":"private static final sun.util.logging.PlatformLogger eventLog = PlatformLogger.getLogger(\"java.awt.event.EventDispatchThread\")","id":1273},{"comment":"private EventQueue theQueue;","field_name":"theQueue","field_type":"java.awt.EventQueue","full_declaration":"private java.awt.EventQueue theQueue","id":1274},{"comment":"","field_name":"doDispatch","field_type":"boolean","full_declaration":"private volatile boolean doDispatch = true","id":1275},{"comment":"","field_name":"ANY_EVENT","field_type":"int","full_declaration":"private static final int ANY_EVENT = -1","id":1276},{"comment":"private ArrayList<EventFilter> eventFilters = new ArrayList<EventFilter>();","field_name":"eventFilters","field_type":"java.util.ArrayList","full_declaration":"private java.util.ArrayList eventFilters = new ArrayList<EventFilter>()","id":1277},{"comment":"private Component modalComponent;","field_name":"modalComponent","field_type":"java.awt.Component","full_declaration":"private java.awt.Component modalComponent","id":1278},{"comment":"private static final AtomicInteger threadInitNumber = new AtomicInteger(0);","field_name":"threadInitNumber","field_type":"java.util.concurrent.atomic.AtomicInteger","full_declaration":"private static final java.util.concurrent.atomic.AtomicInteger threadInitNumber = new AtomicInteger(0)","id":1279},{"comment":"","field_name":"LOW_PRIORITY","field_type":"int","full_declaration":"private static final int LOW_PRIORITY = 0","id":1280},{"comment":"","field_name":"NORM_PRIORITY","field_type":"int","full_declaration":"private static final int NORM_PRIORITY = 1","id":1281},{"comment":"","field_name":"HIGH_PRIORITY","field_type":"int","full_declaration":"private static final int HIGH_PRIORITY = 2","id":1282},{"comment":"","field_name":"ULTIMATE_PRIORITY","field_type":"int","full_declaration":"private static final int ULTIMATE_PRIORITY = 3","id":1283},{"comment":"","field_name":"NUM_PRIORITIES","field_type":"int","full_declaration":"private static final int NUM_PRIORITIES = ULTIMATE_PRIORITY + 1","id":1284},{"comment":"/*\r\n     * We maintain one Queue for each priority that the EventQueue supports.\r\n     * That is, the EventQueue object is actually implemented as\r\n     * NUM_PRIORITIES queues and all Events on a particular internal Queue\r\n     * have identical priority. Events are pulled off the EventQueue starting\r\n     * with the Queue of highest priority. We progress in decreasing order\r\n     * across all Queues.\r\n     */\r\n","field_name":"queues","field_type":"Queue[]","full_declaration":"private Queue[] queues = new Queue[NUM_PRIORITIES]","id":1285},{"comment":"/*\r\n     * The next EventQueue on the stack, or null if this EventQueue is\r\n     * on the top of the stack.  If nextQueue is non-null, requests to post\r\n     * an event are forwarded to nextQueue.\r\n     */\r\nprivate EventQueue nextQueue;","field_name":"nextQueue","field_type":"java.awt.EventQueue","full_declaration":"private java.awt.EventQueue nextQueue","id":1286},{"comment":"/*\r\n     * The previous EventQueue on the stack, or null if this is the\r\n     * \"base\" EventQueue.\r\n     */\r\nprivate EventQueue previousQueue;","field_name":"previousQueue","field_type":"java.awt.EventQueue","full_declaration":"private java.awt.EventQueue previousQueue","id":1287},{"comment":"/*\r\n     * A single lock to synchronize the push()/pop() and related operations with\r\n     * all the EventQueues from the AppContext. Synchronization on any particular\r\n     * event queue(s) is not enough: we should lock the whole stack.\r\n     */\r\nprivate final Lock pushPopLock;","field_name":"pushPopLock","field_type":"java.util.concurrent.locks.Lock","full_declaration":"private final java.util.concurrent.locks.Lock pushPopLock","id":1288},{"comment":"private final Condition pushPopCond;","field_name":"pushPopCond","field_type":"java.util.concurrent.locks.Condition","full_declaration":"private final java.util.concurrent.locks.Condition pushPopCond","id":1289},{"comment":"/*\r\n     * Dummy runnable to wake up EDT from getNextEvent() after\r\n     push/pop is performed\r\n     */\r\nprivate final static Runnable dummyRunnable = new Runnable() {\r\n\r\n    public void run() {\r\n    }\r\n};","field_name":"dummyRunnable","field_type":"java.lang.Runnable","full_declaration":"private final static java.lang.Runnable dummyRunnable = new Runnable() {\r\n\r\n    public void run() {\r\n    }\r\n}","id":1290},{"comment":"private EventDispatchThread dispatchThread;","field_name":"dispatchThread","field_type":"java.awt.EventDispatchThread","full_declaration":"private java.awt.EventDispatchThread dispatchThread","id":1291},{"comment":"private final ThreadGroup threadGroup = Thread.currentThread().getThreadGroup();","field_name":"threadGroup","field_type":"java.lang.ThreadGroup","full_declaration":"private final java.lang.ThreadGroup threadGroup = Thread.currentThread().getThreadGroup()","id":1292},{"comment":"private final ClassLoader classLoader = Thread.currentThread().getContextClassLoader();","field_name":"classLoader","field_type":"java.lang.ClassLoader","full_declaration":"private final java.lang.ClassLoader classLoader = Thread.currentThread().getContextClassLoader()","id":1293},{"comment":"/*\r\n     * The time stamp of the last dispatched InputEvent or ActionEvent.\r\n     */\r\n","field_name":"mostRecentEventTime","field_type":"long","full_declaration":"private long mostRecentEventTime = System.currentTimeMillis()","id":1294},{"comment":"/*\r\n     * The time stamp of the last KeyEvent .\r\n     */\r\n","field_name":"mostRecentKeyEventTime","field_type":"long","full_declaration":"private long mostRecentKeyEventTime = System.currentTimeMillis()","id":1295},{"comment":"/**\r\n * The modifiers field of the current event, if the current event is an\r\n * InputEvent or ActionEvent.\r\n */\r\nprivate WeakReference<AWTEvent> currentEvent;","field_name":"currentEvent","field_type":"java.lang.ref.WeakReference","full_declaration":"private java.lang.ref.WeakReference currentEvent","id":1296},{"comment":"/*\r\n     * Non-zero if a thread is waiting in getNextEvent(int) for an event of\r\n     * a particular ID to be posted to the queue.\r\n     */\r\n","field_name":"waitForID","field_type":"int","full_declaration":"private volatile int waitForID","id":1297},{"comment":"/*\r\n     * AppContext corresponding to the queue.\r\n     */\r\nprivate final AppContext appContext;","field_name":"appContext","field_type":"sun.awt.AppContext","full_declaration":"private final sun.awt.AppContext appContext","id":1298},{"comment":"private final String name = \"AWT-EventQueue-\" + threadInitNumber.getAndIncrement();","field_name":"name","field_type":"java.lang.String","full_declaration":"private final java.lang.String name = \"AWT-EventQueue-\" + threadInitNumber.getAndIncrement()","id":1299},{"comment":"private FwDispatcher fwDispatcher;","field_name":"fwDispatcher","field_type":"sun.awt.FwDispatcher","full_declaration":"private sun.awt.FwDispatcher fwDispatcher","id":1300},{"comment":"private static volatile PlatformLogger eventLog;","field_name":"eventLog","field_type":"sun.util.logging.PlatformLogger","full_declaration":"private static volatile sun.util.logging.PlatformLogger eventLog","id":1301},{"comment":"","field_name":"PAINT","field_type":"int","full_declaration":"private static final int PAINT = 0","id":1302},{"comment":"","field_name":"UPDATE","field_type":"int","full_declaration":"private static final int UPDATE = 1","id":1303},{"comment":"","field_name":"MOVE","field_type":"int","full_declaration":"private static final int MOVE = 2","id":1304},{"comment":"","field_name":"DRAG","field_type":"int","full_declaration":"private static final int DRAG = 3","id":1305},{"comment":"","field_name":"PEER","field_type":"int","full_declaration":"private static final int PEER = 4","id":1306},{"comment":"","field_name":"CACHE_LENGTH","field_type":"int","full_declaration":"private static final int CACHE_LENGTH = 5","id":1307},{"comment":"private static final JavaSecurityAccess javaSecurityAccess = SharedSecrets.getJavaSecurityAccess();","field_name":"javaSecurityAccess","field_type":"sun.misc.JavaSecurityAccess","full_declaration":"private static final sun.misc.JavaSecurityAccess javaSecurityAccess = SharedSecrets.getJavaSecurityAccess()","id":1308},{"comment":"final private SecondaryLoop loop;","field_name":"loop","field_type":"java.awt.SecondaryLoop","full_declaration":"final private java.awt.SecondaryLoop loop","id":1309},{"comment":"final private EventFilter filter;","field_name":"filter","field_type":"java.awt.EventFilter","full_declaration":"final private java.awt.EventFilter filter","id":1310},{"comment":"EventQueueItem head;","field_name":"head","field_type":"sun.awt.EventQueueItem","full_declaration":"sun.awt.EventQueueItem head","id":1311},{"comment":"EventQueueItem tail;","field_name":"tail","field_type":"sun.awt.EventQueueItem","full_declaration":"sun.awt.EventQueueItem tail","id":1312},{"comment":"/**\r\n * This constant value indicates that the purpose of the file\r\n * dialog window is to locate a file from which to read.\r\n */\r\n","field_name":"LOAD","field_type":"int","full_declaration":"public static final int LOAD = 0","id":1313},{"comment":"/**\r\n * This constant value indicates that the purpose of the file\r\n * dialog window is to locate a file to which to write.\r\n */\r\n","field_name":"SAVE","field_type":"int","full_declaration":"public static final int SAVE = 1","id":1314},{"comment":"/*\r\n     * There are two <code>FileDialog</code> modes: <code>LOAD</code> and\r\n     * <code>SAVE</code>.\r\n     * This integer will represent one or the other.\r\n     * If the mode is not specified it will default to <code>LOAD</code>.\r\n     *\r\n     * @serial\r\n     * @see getMode()\r\n     * @see setMode()\r\n     * @see java.awt.FileDialog#LOAD\r\n     * @see java.awt.FileDialog#SAVE\r\n     */\r\n","field_name":"mode","field_type":"int","full_declaration":"int mode","id":1315},{"comment":"/*\r\n     * The string specifying the directory to display\r\n     * in the file dialog.  This variable may be <code>null</code>.\r\n     *\r\n     * @serial\r\n     * @see getDirectory()\r\n     * @see setDirectory()\r\n     */\r\nString dir;","field_name":"dir","field_type":"java.lang.String","full_declaration":"java.lang.String dir","id":1316},{"comment":"/*\r\n     * The string specifying the initial value of the\r\n     * filename text field in the file dialog.\r\n     * This variable may be <code>null</code>.\r\n     *\r\n     * @serial\r\n     * @see getFile()\r\n     * @see setFile()\r\n     */\r\nString file;","field_name":"file","field_type":"java.lang.String","full_declaration":"java.lang.String file","id":1317},{"comment":"/**\r\n * Contains the File instances for all the files that the user selects.\r\n *\r\n * @serial\r\n * @see #getFiles\r\n * @since 1.7\r\n */\r\n","field_name":"files","field_type":"File[]","full_declaration":"private File[] files","id":1318},{"comment":"/**\r\n * Represents whether the file dialog allows the multiple file selection.\r\n *\r\n * @serial\r\n * @see #setMultipleMode\r\n * @see #isMultipleMode\r\n * @since 1.7\r\n */\r\n","field_name":"multipleMode","field_type":"boolean","full_declaration":"private boolean multipleMode = false","id":1319},{"comment":"/*\r\n     * The filter used as the file dialog's filename filter.\r\n     * The file dialog will only be displaying files whose\r\n     * names are accepted by this filter.\r\n     * This variable may be <code>null</code>.\r\n     *\r\n     * @serial\r\n     * @see #getFilenameFilter()\r\n     * @see #setFilenameFilter()\r\n     * @see FileNameFilter\r\n     */\r\nFilenameFilter filter;","field_name":"filter","field_type":"java.io.FilenameFilter","full_declaration":"java.io.FilenameFilter filter","id":1320},{"comment":"private static final String base = \"filedlg\";","field_name":"base","field_type":"java.lang.String","full_declaration":"private static final java.lang.String base = \"filedlg\"","id":1321},{"comment":"","field_name":"nameCounter","field_type":"int","full_declaration":"private static int nameCounter = 0","id":1322},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 5035145889651310422L","id":1323},{"comment":"/**\r\n * This value indicates that each row of components\r\n * should be left-justified.\r\n */\r\n","field_name":"LEFT","field_type":"int","full_declaration":"public static final int LEFT = 0","id":1324},{"comment":"/**\r\n * This value indicates that each row of components\r\n * should be centered.\r\n */\r\n","field_name":"CENTER","field_type":"int","full_declaration":"public static final int CENTER = 1","id":1325},{"comment":"/**\r\n * This value indicates that each row of components\r\n * should be right-justified.\r\n */\r\n","field_name":"RIGHT","field_type":"int","full_declaration":"public static final int RIGHT = 2","id":1326},{"comment":"/**\r\n * This value indicates that each row of components\r\n * should be justified to the leading edge of the container's\r\n * orientation, for example, to the left in left-to-right orientations.\r\n *\r\n * @see     java.awt.Component#getComponentOrientation\r\n * @see     java.awt.ComponentOrientation\r\n * @since   1.2\r\n */\r\n","field_name":"LEADING","field_type":"int","full_declaration":"public static final int LEADING = 3","id":1327},{"comment":"/**\r\n * This value indicates that each row of components\r\n * should be justified to the trailing edge of the container's\r\n * orientation, for example, to the right in left-to-right orientations.\r\n *\r\n * @see     java.awt.Component#getComponentOrientation\r\n * @see     java.awt.ComponentOrientation\r\n * @since   1.2\r\n */\r\n","field_name":"TRAILING","field_type":"int","full_declaration":"public static final int TRAILING = 4","id":1328},{"comment":"/**\r\n * <code>align</code> is the property that determines\r\n * how each row distributes empty space.\r\n * It can be one of the following values:\r\n * <ul>\r\n * <li><code>LEFT</code>\r\n * <li><code>RIGHT</code>\r\n * <li><code>CENTER</code>\r\n * </ul>\r\n *\r\n * @serial\r\n * @see #getAlignment\r\n * @see #setAlignment\r\n */\r\n// This is for 1.1 serialization compatibility\r\n","field_name":"align","field_type":"int","full_declaration":"int align","id":1329},{"comment":"/**\r\n * <code>newAlign</code> is the property that determines\r\n * how each row distributes empty space for the Java 2 platform,\r\n * v1.2 and greater.\r\n * It can be one of the following three values:\r\n * <ul>\r\n * <li><code>LEFT</code>\r\n * <li><code>RIGHT</code>\r\n * <li><code>CENTER</code>\r\n * <li><code>LEADING</code>\r\n * <li><code>TRAILING</code>\r\n * </ul>\r\n *\r\n * @serial\r\n * @since 1.2\r\n * @see #getAlignment\r\n * @see #setAlignment\r\n */\r\n// This is the one we actually use\r\n","field_name":"newAlign","field_type":"int","full_declaration":"int newAlign","id":1330},{"comment":"/**\r\n * The flow layout manager allows a seperation of\r\n * components with gaps.  The horizontal gap will\r\n * specify the space between components and between\r\n * the components and the borders of the\r\n * <code>Container</code>.\r\n *\r\n * @serial\r\n * @see #getHgap()\r\n * @see #setHgap(int)\r\n */\r\n","field_name":"hgap","field_type":"int","full_declaration":"int hgap","id":1331},{"comment":"/**\r\n * The flow layout manager allows a seperation of\r\n * components with gaps.  The vertical gap will\r\n * specify the space between rows and between the\r\n * the rows and the borders of the <code>Container</code>.\r\n *\r\n * @serial\r\n * @see #getHgap()\r\n * @see #setHgap(int)\r\n */\r\n","field_name":"vgap","field_type":"int","full_declaration":"int vgap","id":1332},{"comment":"/**\r\n * If true, components will be aligned on their baseline.\r\n */\r\n","field_name":"alignOnBaseline","field_type":"boolean","full_declaration":"private boolean alignOnBaseline","id":1333},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -7262534875583282631L","id":1334},{"comment":"// \r\n// the internal serial version which says which version was written\r\n// - 0 (default) for versions before the Java 2 platform, v1.2\r\n// - 1 for version >= Java 2 platform v1.2, which includes \"newAlign\" field\r\n// \r\n","field_name":"currentSerialVersion","field_type":"int","full_declaration":"private static final int currentSerialVersion = 1","id":1335},{"comment":"/**\r\n * This represent the <code>currentSerialVersion</code>\r\n * which is bein used.  It will be one of two values :\r\n * <code>0</code> versions before Java 2 platform v1.2..\r\n * <code>1</code> versions after  Java 2 platform v1.2..\r\n *\r\n * @serial\r\n * @since 1.2\r\n */\r\n","field_name":"serialVersionOnStream","field_type":"int","full_declaration":"private int serialVersionOnStream = currentSerialVersion","id":1336},{"comment":"","field_name":"chars","field_type":"char[]","full_declaration":"private char[] chars","id":1337},{"comment":"","field_name":"pos","field_type":"int","full_declaration":"private int pos","id":1338},{"comment":"","field_name":"begin","field_type":"int","full_declaration":"private int begin","id":1339},{"comment":"private transient AffineTransform tx;","field_name":"tx","field_type":"java.awt.geom.AffineTransform","full_declaration":"private transient java.awt.geom.AffineTransform tx","id":1340},{"comment":"private transient Object aaHintValue;","field_name":"aaHintValue","field_type":"java.lang.Object","full_declaration":"private transient java.lang.Object aaHintValue","id":1341},{"comment":"private transient Object fmHintValue;","field_name":"fmHintValue","field_type":"java.lang.Object","full_declaration":"private transient java.lang.Object fmHintValue","id":1342},{"comment":"","field_name":"defaulting","field_type":"boolean","full_declaration":"private transient boolean defaulting","id":1343},{"comment":"/**\r\n * The highest justification priority.\r\n */\r\n","field_name":"PRIORITY_KASHIDA","field_type":"int","full_declaration":"public static final int PRIORITY_KASHIDA = 0","id":1344},{"comment":"/**\r\n * The second highest justification priority.\r\n */\r\n","field_name":"PRIORITY_WHITESPACE","field_type":"int","full_declaration":"public static final int PRIORITY_WHITESPACE = 1","id":1345},{"comment":"/**\r\n * The second lowest justification priority.\r\n */\r\n","field_name":"PRIORITY_INTERCHAR","field_type":"int","full_declaration":"public static final int PRIORITY_INTERCHAR = 2","id":1346},{"comment":"/**\r\n * The lowest justification priority.\r\n */\r\n","field_name":"PRIORITY_NONE","field_type":"int","full_declaration":"public static final int PRIORITY_NONE = 3","id":1347},{"comment":"/**\r\n * The weight of this glyph.\r\n */\r\n","field_name":"weight","field_type":"float","full_declaration":"public final float weight","id":1348},{"comment":"/**\r\n * The priority level of this glyph as it is growing.\r\n */\r\n","field_name":"growPriority","field_type":"int","full_declaration":"public final int growPriority","id":1349},{"comment":"/**\r\n * If <code>true</code>, this glyph absorbs all extra\r\n * space at this and lower priority levels when it grows.\r\n */\r\n","field_name":"growAbsorb","field_type":"boolean","full_declaration":"public final boolean growAbsorb","id":1350},{"comment":"/**\r\n * The maximum amount by which the left side of this glyph can grow.\r\n */\r\n","field_name":"growLeftLimit","field_type":"float","full_declaration":"public final float growLeftLimit","id":1351},{"comment":"/**\r\n * The maximum amount by which the right side of this glyph can grow.\r\n */\r\n","field_name":"growRightLimit","field_type":"float","full_declaration":"public final float growRightLimit","id":1352},{"comment":"/**\r\n * The priority level of this glyph as it is shrinking.\r\n */\r\n","field_name":"shrinkPriority","field_type":"int","full_declaration":"public final int shrinkPriority","id":1353},{"comment":"/**\r\n * If <code>true</code>,this glyph absorbs all remaining shrinkage at\r\n * this and lower priority levels as it shrinks.\r\n */\r\n","field_name":"shrinkAbsorb","field_type":"boolean","full_declaration":"public final boolean shrinkAbsorb","id":1354},{"comment":"/**\r\n * The maximum amount by which the left side of this glyph can shrink\r\n * (a positive number).\r\n */\r\n","field_name":"shrinkLeftLimit","field_type":"float","full_declaration":"public final float shrinkLeftLimit","id":1355},{"comment":"/**\r\n * The maximum amount by which the right side of this glyph can shrink\r\n * (a positive number).\r\n */\r\n","field_name":"shrinkRightLimit","field_type":"float","full_declaration":"public final float shrinkRightLimit","id":1356},{"comment":"/**\r\n * Indicates whether the metrics are for a horizontal or vertical baseline.\r\n */\r\n","field_name":"horizontal","field_type":"boolean","full_declaration":"private boolean horizontal","id":1357},{"comment":"/**\r\n * The x-component of the advance.\r\n */\r\n","field_name":"advanceX","field_type":"float","full_declaration":"private float advanceX","id":1358},{"comment":"/**\r\n * The y-component of the advance.\r\n */\r\n","field_name":"advanceY","field_type":"float","full_declaration":"private float advanceY","id":1359},{"comment":"/**\r\n * The bounds of the associated glyph.\r\n */\r\nprivate Rectangle2D.Float bounds;","field_name":"bounds","field_type":"java.awt.geom.Rectangle2D.Float","full_declaration":"private java.awt.geom.Rectangle2D.Float bounds","id":1360},{"comment":"/**\r\n * Additional information about the glyph encoded as a byte.\r\n */\r\n","field_name":"glyphType","field_type":"byte","full_declaration":"private byte glyphType","id":1361},{"comment":"/**\r\n * Indicates a glyph that represents a single standard\r\n * character.\r\n */\r\n","field_name":"STANDARD","field_type":"byte","full_declaration":"public static final byte STANDARD = 0","id":1362},{"comment":"/**\r\n * Indicates a glyph that represents multiple characters\r\n * as a ligature, for example 'fi' or 'ffi'.  It is followed by\r\n * filler glyphs for the remaining characters. Filler and combining\r\n * glyphs can be intermixed to control positioning of accent marks\r\n * on the logically preceding ligature.\r\n */\r\n","field_name":"LIGATURE","field_type":"byte","full_declaration":"public static final byte LIGATURE = 1","id":1363},{"comment":"/**\r\n * Indicates a glyph that represents a combining character,\r\n * such as an umlaut.  There is no caret position between this glyph\r\n * and the preceding glyph.\r\n */\r\n","field_name":"COMBINING","field_type":"byte","full_declaration":"public static final byte COMBINING = 2","id":1364},{"comment":"/**\r\n * Indicates a glyph with no corresponding character in the\r\n * backing store.  The glyph is associated with the character\r\n * represented by the logically preceding non-component glyph.  This\r\n * is used for kashida justification or other visual modifications to\r\n * existing glyphs.  There is no caret position between this glyph\r\n * and the preceding glyph.\r\n */\r\n","field_name":"COMPONENT","field_type":"byte","full_declaration":"public static final byte COMPONENT = 3","id":1365},{"comment":"/**\r\n * Indicates a glyph with no visual representation. It can\r\n * be added to the other code values to indicate an invisible glyph.\r\n */\r\n","field_name":"WHITESPACE","field_type":"byte","full_declaration":"public static final byte WHITESPACE = 4","id":1366},{"comment":"/**\r\n * A flag used with getLayoutFlags that indicates that this <code>GlyphVector</code> has\r\n * per-glyph transforms.\r\n * @since 1.4\r\n */\r\n","field_name":"FLAG_HAS_TRANSFORMS","field_type":"int","full_declaration":"public static final int FLAG_HAS_TRANSFORMS = 1","id":1367},{"comment":"/**\r\n * A flag used with getLayoutFlags that indicates that this <code>GlyphVector</code> has\r\n * position adjustments.  When this is true, the glyph positions don't match the\r\n * accumulated default advances of the glyphs (for example, if kerning has been done).\r\n * @since 1.4\r\n */\r\n","field_name":"FLAG_HAS_POSITION_ADJUSTMENTS","field_type":"int","full_declaration":"public static final int FLAG_HAS_POSITION_ADJUSTMENTS = 2","id":1368},{"comment":"/**\r\n * A flag used with getLayoutFlags that indicates that this <code>GlyphVector</code> has\r\n * a right-to-left run direction.  This refers to the glyph-to-char mapping and does\r\n * not imply that the visual locations of the glyphs are necessarily in this order,\r\n * although generally they will be.\r\n * @since 1.4\r\n */\r\n","field_name":"FLAG_RUN_RTL","field_type":"int","full_declaration":"public static final int FLAG_RUN_RTL = 4","id":1369},{"comment":"/**\r\n * A flag used with getLayoutFlags that indicates that this <code>GlyphVector</code> has\r\n * a complex glyph-to-char mapping (one that does not map glyphs to chars one-to-one in\r\n * strictly ascending or descending order matching the run direction).\r\n * @since 1.4\r\n */\r\n","field_name":"FLAG_COMPLEX_GLYPHS","field_type":"int","full_declaration":"public static final int FLAG_COMPLEX_GLYPHS = 8","id":1370},{"comment":"/**\r\n * A mask for supported flags from getLayoutFlags.  Only bits covered by the mask\r\n * should be tested.\r\n * @since 1.4\r\n */\r\n","field_name":"FLAG_MASK","field_type":"int","full_declaration":"public static final int FLAG_MASK = FLAG_HAS_TRANSFORMS | FLAG_HAS_POSITION_ADJUSTMENTS | FLAG_RUN_RTL | FLAG_COMPLEX_GLYPHS","id":1371},{"comment":"","field_name":"fAlignment","field_type":"int","full_declaration":"private int fAlignment","id":1372},{"comment":"/**\r\n * Aligns top of graphic to top of line.\r\n */\r\n","field_name":"TOP_ALIGNMENT","field_type":"int","full_declaration":"public static final int TOP_ALIGNMENT = -1","id":1373},{"comment":"/**\r\n * Aligns bottom of graphic to bottom of line.\r\n */\r\n","field_name":"BOTTOM_ALIGNMENT","field_type":"int","full_declaration":"public static final int BOTTOM_ALIGNMENT = -2","id":1374},{"comment":"/**\r\n * Aligns origin of graphic to roman baseline of line.\r\n */\r\n","field_name":"ROMAN_BASELINE","field_type":"int","full_declaration":"public static final int ROMAN_BASELINE = Font.ROMAN_BASELINE","id":1375},{"comment":"/**\r\n * Aligns origin of graphic to center baseline of line.\r\n */\r\n","field_name":"CENTER_BASELINE","field_type":"int","full_declaration":"public static final int CENTER_BASELINE = Font.CENTER_BASELINE","id":1376},{"comment":"/**\r\n * Aligns origin of graphic to hanging baseline of line.\r\n */\r\n","field_name":"HANGING_BASELINE","field_type":"int","full_declaration":"public static final int HANGING_BASELINE = Font.HANGING_BASELINE","id":1377},{"comment":"private Image fImage;","field_name":"fImage","field_type":"java.awt.Image","full_declaration":"private java.awt.Image fImage","id":1378},{"comment":"private float fImageWidth, fImageHeight;","field_name":"fImageWidth","field_type":"float","full_declaration":"private float fImageWidth","id":1379},{"comment":"private float fImageWidth, fImageHeight;","field_name":"fImageHeight","field_type":"float","full_declaration":"private float fImageWidthfloat fImageHeight","id":1380},{"comment":"private float fOriginX, fOriginY;","field_name":"fOriginX","field_type":"float","full_declaration":"private float fOriginX","id":1381},{"comment":"private float fOriginX, fOriginY;","field_name":"fOriginY","field_type":"float","full_declaration":"private float fOriginXfloat fOriginY","id":1382},{"comment":"private BreakIterator breakIter;","field_name":"breakIter","field_type":"java.text.BreakIterator","full_declaration":"private java.text.BreakIterator breakIter","id":1383},{"comment":"","field_name":"start","field_type":"int","full_declaration":"private int start","id":1384},{"comment":"","field_name":"pos","field_type":"int","full_declaration":"private int pos","id":1385},{"comment":"","field_name":"limit","field_type":"int","full_declaration":"private int limit","id":1386},{"comment":"private TextMeasurer measurer;","field_name":"measurer","field_type":"java.awt.font.TextMeasurer","full_declaration":"private java.awt.font.TextMeasurer measurer","id":1387},{"comment":"private CharArrayIterator charIter;","field_name":"charIter","field_type":"java.awt.font.CharArrayIterator","full_declaration":"private java.awt.font.CharArrayIterator charIter","id":1388},{"comment":"/**\r\n * index of context for contextual shaping - values range from 0 to 18\r\n */\r\n","field_name":"key","field_type":"int","full_declaration":"private int key","id":1389},{"comment":"/**\r\n * flag indicating whether to shape contextually (high bit) and which\r\n *  digit ranges to shape (bits 0-18)\r\n */\r\n","field_name":"mask","field_type":"int","full_declaration":"private int mask","id":1390},{"comment":"/**\r\n * The context {@code Range} for contextual shaping or the {@code\r\n * Range} for non-contextual shaping. {@code null} for the bit\r\n * mask-based API.\r\n *\r\n * @since 1.7\r\n */\r\nprivate Range shapingRange;","field_name":"shapingRange","field_type":"java.awt.font.NumericShaper.Range","full_declaration":"private java.awt.font.NumericShaper.Range shapingRange","id":1391},{"comment":"/**\r\n * {@code Set<Range>} indicating which Unicode ranges to\r\n * shape. {@code null} for the bit mask-based API.\r\n */\r\nprivate transient Set<Range> rangeSet;","field_name":"rangeSet","field_type":"java.util.Set","full_declaration":"private transient java.util.Set rangeSet","id":1392},{"comment":"/**\r\n * rangeSet.toArray() value. Sorted by Range.base when the number\r\n * of elements is greater then BSEARCH_THRESHOLD.\r\n */\r\n","field_name":"rangeArray","field_type":"Range[]","full_declaration":"private transient Range[] rangeArray","id":1393},{"comment":"/**\r\n * If more than BSEARCH_THRESHOLD ranges are specified, binary search is used.\r\n */\r\n","field_name":"BSEARCH_THRESHOLD","field_type":"int","full_declaration":"private static final int BSEARCH_THRESHOLD = 3","id":1394},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -8022764705923730308L","id":1395},{"comment":"/**\r\n * Identifies the Latin-1 (European) and extended range, and\r\n *  Latin-1 (European) decimal base.\r\n */\r\n","field_name":"EUROPEAN","field_type":"int","full_declaration":"public static final int EUROPEAN = 1 << 0","id":1396},{"comment":"/**\r\n * Identifies the ARABIC range and decimal base.\r\n */\r\n","field_name":"ARABIC","field_type":"int","full_declaration":"public static final int ARABIC = 1 << 1","id":1397},{"comment":"/**\r\n * Identifies the ARABIC range and ARABIC_EXTENDED decimal base.\r\n */\r\n","field_name":"EASTERN_ARABIC","field_type":"int","full_declaration":"public static final int EASTERN_ARABIC = 1 << 2","id":1398},{"comment":"/**\r\n * Identifies the DEVANAGARI range and decimal base.\r\n */\r\n","field_name":"DEVANAGARI","field_type":"int","full_declaration":"public static final int DEVANAGARI = 1 << 3","id":1399},{"comment":"/**\r\n * Identifies the BENGALI range and decimal base.\r\n */\r\n","field_name":"BENGALI","field_type":"int","full_declaration":"public static final int BENGALI = 1 << 4","id":1400},{"comment":"/**\r\n * Identifies the GURMUKHI range and decimal base.\r\n */\r\n","field_name":"GURMUKHI","field_type":"int","full_declaration":"public static final int GURMUKHI = 1 << 5","id":1401},{"comment":"/**\r\n * Identifies the GUJARATI range and decimal base.\r\n */\r\n","field_name":"GUJARATI","field_type":"int","full_declaration":"public static final int GUJARATI = 1 << 6","id":1402},{"comment":"/**\r\n * Identifies the ORIYA range and decimal base.\r\n */\r\n","field_name":"ORIYA","field_type":"int","full_declaration":"public static final int ORIYA = 1 << 7","id":1403},{"comment":"/**\r\n * Identifies the TAMIL range and decimal base.\r\n */\r\n// TAMIL DIGIT ZERO was added in Unicode 4.1\r\n","field_name":"TAMIL","field_type":"int","full_declaration":"public static final int TAMIL = 1 << 8","id":1404},{"comment":"/**\r\n * Identifies the TELUGU range and decimal base.\r\n */\r\n","field_name":"TELUGU","field_type":"int","full_declaration":"public static final int TELUGU = 1 << 9","id":1405},{"comment":"/**\r\n * Identifies the KANNADA range and decimal base.\r\n */\r\n","field_name":"KANNADA","field_type":"int","full_declaration":"public static final int KANNADA = 1 << 10","id":1406},{"comment":"/**\r\n * Identifies the MALAYALAM range and decimal base.\r\n */\r\n","field_name":"MALAYALAM","field_type":"int","full_declaration":"public static final int MALAYALAM = 1 << 11","id":1407},{"comment":"/**\r\n * Identifies the THAI range and decimal base.\r\n */\r\n","field_name":"THAI","field_type":"int","full_declaration":"public static final int THAI = 1 << 12","id":1408},{"comment":"/**\r\n * Identifies the LAO range and decimal base.\r\n */\r\n","field_name":"LAO","field_type":"int","full_declaration":"public static final int LAO = 1 << 13","id":1409},{"comment":"/**\r\n * Identifies the TIBETAN range and decimal base.\r\n */\r\n","field_name":"TIBETAN","field_type":"int","full_declaration":"public static final int TIBETAN = 1 << 14","id":1410},{"comment":"/**\r\n * Identifies the MYANMAR range and decimal base.\r\n */\r\n","field_name":"MYANMAR","field_type":"int","full_declaration":"public static final int MYANMAR = 1 << 15","id":1411},{"comment":"/**\r\n * Identifies the ETHIOPIC range and decimal base.\r\n */\r\n","field_name":"ETHIOPIC","field_type":"int","full_declaration":"public static final int ETHIOPIC = 1 << 16","id":1412},{"comment":"/**\r\n * Identifies the KHMER range and decimal base.\r\n */\r\n","field_name":"KHMER","field_type":"int","full_declaration":"public static final int KHMER = 1 << 17","id":1413},{"comment":"/**\r\n * Identifies the MONGOLIAN range and decimal base.\r\n */\r\n","field_name":"MONGOLIAN","field_type":"int","full_declaration":"public static final int MONGOLIAN = 1 << 18","id":1414},{"comment":"/**\r\n * Identifies all ranges, for full contextual shaping.\r\n *\r\n * <p>This constant specifies all of the bit mask-based\r\n * ranges. Use {@code EmunSet.allOf(NumericShaper.Range.class)} to\r\n * specify all of the enum-based ranges.\r\n */\r\n","field_name":"ALL_RANGES","field_type":"int","full_declaration":"public static final int ALL_RANGES = 0x0007ffff","id":1415},{"comment":"","field_name":"EUROPEAN_KEY","field_type":"int","full_declaration":"private static final int EUROPEAN_KEY = 0","id":1416},{"comment":"","field_name":"ARABIC_KEY","field_type":"int","full_declaration":"private static final int ARABIC_KEY = 1","id":1417},{"comment":"","field_name":"EASTERN_ARABIC_KEY","field_type":"int","full_declaration":"private static final int EASTERN_ARABIC_KEY = 2","id":1418},{"comment":"","field_name":"DEVANAGARI_KEY","field_type":"int","full_declaration":"private static final int DEVANAGARI_KEY = 3","id":1419},{"comment":"","field_name":"BENGALI_KEY","field_type":"int","full_declaration":"private static final int BENGALI_KEY = 4","id":1420},{"comment":"","field_name":"GURMUKHI_KEY","field_type":"int","full_declaration":"private static final int GURMUKHI_KEY = 5","id":1421},{"comment":"","field_name":"GUJARATI_KEY","field_type":"int","full_declaration":"private static final int GUJARATI_KEY = 6","id":1422},{"comment":"","field_name":"ORIYA_KEY","field_type":"int","full_declaration":"private static final int ORIYA_KEY = 7","id":1423},{"comment":"","field_name":"TAMIL_KEY","field_type":"int","full_declaration":"private static final int TAMIL_KEY = 8","id":1424},{"comment":"","field_name":"TELUGU_KEY","field_type":"int","full_declaration":"private static final int TELUGU_KEY = 9","id":1425},{"comment":"","field_name":"KANNADA_KEY","field_type":"int","full_declaration":"private static final int KANNADA_KEY = 10","id":1426},{"comment":"","field_name":"MALAYALAM_KEY","field_type":"int","full_declaration":"private static final int MALAYALAM_KEY = 11","id":1427},{"comment":"","field_name":"THAI_KEY","field_type":"int","full_declaration":"private static final int THAI_KEY = 12","id":1428},{"comment":"","field_name":"LAO_KEY","field_type":"int","full_declaration":"private static final int LAO_KEY = 13","id":1429},{"comment":"","field_name":"TIBETAN_KEY","field_type":"int","full_declaration":"private static final int TIBETAN_KEY = 14","id":1430},{"comment":"","field_name":"MYANMAR_KEY","field_type":"int","full_declaration":"private static final int MYANMAR_KEY = 15","id":1431},{"comment":"","field_name":"ETHIOPIC_KEY","field_type":"int","full_declaration":"private static final int ETHIOPIC_KEY = 16","id":1432},{"comment":"","field_name":"KHMER_KEY","field_type":"int","full_declaration":"private static final int KHMER_KEY = 17","id":1433},{"comment":"","field_name":"MONGOLIAN_KEY","field_type":"int","full_declaration":"private static final int MONGOLIAN_KEY = 18","id":1434},{"comment":"// fixed\r\n","field_name":"NUM_KEYS","field_type":"int","full_declaration":"private static final int NUM_KEYS = MONGOLIAN_KEY + 1","id":1435},{"comment":"","field_name":"CONTEXTUAL_MASK","field_type":"int","full_declaration":"private static final int CONTEXTUAL_MASK = 1 << 31","id":1436},{"comment":"","field_name":"bases","field_type":"char[]","full_declaration":"private static final char[] bases = { // EUROPEAN\r\n'\\u0030' - '\\u0030', // ARABIC-INDIC\r\n'\\u0660' - '\\u0030', // EXTENDED ARABIC-INDIC (EASTERN_ARABIC)\r\n'\\u06f0' - '\\u0030', // DEVANAGARI\r\n'\\u0966' - '\\u0030', // BENGALI\r\n'\\u09e6' - '\\u0030', // GURMUKHI\r\n'\\u0a66' - '\\u0030', // GUJARATI\r\n'\\u0ae6' - '\\u0030', // ORIYA\r\n'\\u0b66' - '\\u0030', // TAMIL - zero was added in Unicode 4.1\r\n'\\u0be6' - '\\u0030', // TELUGU\r\n'\\u0c66' - '\\u0030', // KANNADA\r\n'\\u0ce6' - '\\u0030', // MALAYALAM\r\n'\\u0d66' - '\\u0030', // THAI\r\n'\\u0e50' - '\\u0030', // LAO\r\n'\\u0ed0' - '\\u0030', // TIBETAN\r\n'\\u0f20' - '\\u0030', // MYANMAR\r\n'\\u1040' - '\\u0030', // ETHIOPIC - no zero\r\n'\\u1369' - '\\u0031', // KHMER\r\n'\\u17e0' - '\\u0030', // MONGOLIAN\r\n'\\u1810' - '\\u0030' }","id":1437},{"comment":"// some ranges adjoin or overlap, rethink if we want to do a binary search on this\r\n","field_name":"contexts","field_type":"char[]","full_declaration":"private static final char[] contexts = { // 'EUROPEAN' (really latin-1 and extended)\r\n'\\u0000', // 'EUROPEAN' (really latin-1 and extended)\r\n'\\u0300', // ARABIC\r\n'\\u0600', // ARABIC\r\n'\\u0780', // EASTERN_ARABIC -- note overlap with arabic\r\n'\\u0600', // EASTERN_ARABIC -- note overlap with arabic\r\n'\\u0780', // DEVANAGARI\r\n'\\u0900', // DEVANAGARI\r\n'\\u0980', // BENGALI\r\n'\\u0980', // BENGALI\r\n'\\u0a00', // GURMUKHI\r\n'\\u0a00', // GURMUKHI\r\n'\\u0a80', // GUJARATI\r\n'\\u0a80', // GUJARATI\r\n'\\u0b00', // ORIYA\r\n'\\u0b00', // ORIYA\r\n'\\u0b80', // TAMIL\r\n'\\u0b80', // TAMIL\r\n'\\u0c00', // TELUGU\r\n'\\u0c00', // TELUGU\r\n'\\u0c80', // KANNADA\r\n'\\u0c80', // KANNADA\r\n'\\u0d00', // MALAYALAM\r\n'\\u0d00', // MALAYALAM\r\n'\\u0d80', // THAI\r\n'\\u0e00', // THAI\r\n'\\u0e80', // LAO\r\n'\\u0e80', // LAO\r\n'\\u0f00', // TIBETAN\r\n'\\u0f00', // TIBETAN\r\n'\\u1000', // MYANMAR\r\n'\\u1000', // MYANMAR\r\n'\\u1080', // ETHIOPIC - note missing zero\r\n'\\u1200', // ETHIOPIC - note missing zero\r\n'\\u1380', // KHMER\r\n'\\u1780', // KHMER\r\n'\\u1800', // MONGOLIAN\r\n'\\u1800', // MONGOLIAN\r\n'\\u1900', '\\uffff' }","id":1438},{"comment":"// assume most characters are near each other so probing the cache is infrequent,\r\n// and a linear probe is ok.\r\n","field_name":"ctCache","field_type":"int","full_declaration":"private static int ctCache = 0","id":1439},{"comment":"","field_name":"ctCacheLimit","field_type":"int","full_declaration":"private static int ctCacheLimit = contexts.length - 2","id":1440},{"comment":"// cache for the NumericShaper.Range version\r\nprivate transient volatile Range currentRange = Range.EUROPEAN;","field_name":"currentRange","field_type":"java.awt.font.NumericShaper.Range","full_declaration":"private transient volatile java.awt.font.NumericShaper.Range currentRange = Range.EUROPEAN","id":1441},{"comment":"/*\r\n     * A range table of strong directional characters (types L, R, AL).\r\n     * Even (left) indexes are starts of ranges of non-strong-directional (or undefined)\r\n     * characters, odd (right) indexes are starts of ranges of strong directional\r\n     * characters.\r\n     */\r\n","field_name":"strongTable","field_type":"int[]","full_declaration":"private static int[] strongTable = { 0x0000, 0x0041, 0x005b, 0x0061, 0x007b, 0x00aa, 0x00ab, 0x00b5, 0x00b6, 0x00ba, 0x00bb, 0x00c0, 0x00d7, 0x00d8, 0x00f7, 0x00f8, 0x02b9, 0x02bb, 0x02c2, 0x02d0, 0x02d2, 0x02e0, 0x02e5, 0x02ee, 0x02ef, 0x0370, 0x0374, 0x0376, 0x037e, 0x0386, 0x0387, 0x0388, 0x03f6, 0x03f7, 0x0483, 0x048a, 0x058a, 0x05be, 0x05bf, 0x05c0, 0x05c1, 0x05c3, 0x05c4, 0x05c6, 0x05c7, 0x05d0, 0x0600, 0x0608, 0x0609, 0x060b, 0x060c, 0x060d, 0x060e, 0x061b, 0x064b, 0x066d, 0x0670, 0x0671, 0x06d6, 0x06e5, 0x06e7, 0x06ee, 0x06f0, 0x06fa, 0x0711, 0x0712, 0x0730, 0x074d, 0x07a6, 0x07b1, 0x07eb, 0x07f4, 0x07f6, 0x07fa, 0x0816, 0x081a, 0x081b, 0x0824, 0x0825, 0x0828, 0x0829, 0x0830, 0x0859, 0x085e, 0x08e4, 0x0903, 0x093a, 0x093b, 0x093c, 0x093d, 0x0941, 0x0949, 0x094d, 0x094e, 0x0951, 0x0958, 0x0962, 0x0964, 0x0981, 0x0982, 0x09bc, 0x09bd, 0x09c1, 0x09c7, 0x09cd, 0x09ce, 0x09e2, 0x09e6, 0x09f2, 0x09f4, 0x09fb, 0x0a03, 0x0a3c, 0x0a3e, 0x0a41, 0x0a59, 0x0a70, 0x0a72, 0x0a75, 0x0a83, 0x0abc, 0x0abd, 0x0ac1, 0x0ac9, 0x0acd, 0x0ad0, 0x0ae2, 0x0ae6, 0x0af1, 0x0b02, 0x0b3c, 0x0b3d, 0x0b3f, 0x0b40, 0x0b41, 0x0b47, 0x0b4d, 0x0b57, 0x0b62, 0x0b66, 0x0b82, 0x0b83, 0x0bc0, 0x0bc1, 0x0bcd, 0x0bd0, 0x0bf3, 0x0c01, 0x0c3e, 0x0c41, 0x0c46, 0x0c58, 0x0c62, 0x0c66, 0x0c78, 0x0c7f, 0x0cbc, 0x0cbd, 0x0ccc, 0x0cd5, 0x0ce2, 0x0ce6, 0x0d41, 0x0d46, 0x0d4d, 0x0d4e, 0x0d62, 0x0d66, 0x0dca, 0x0dcf, 0x0dd2, 0x0dd8, 0x0e31, 0x0e32, 0x0e34, 0x0e40, 0x0e47, 0x0e4f, 0x0eb1, 0x0eb2, 0x0eb4, 0x0ebd, 0x0ec8, 0x0ed0, 0x0f18, 0x0f1a, 0x0f35, 0x0f36, 0x0f37, 0x0f38, 0x0f39, 0x0f3e, 0x0f71, 0x0f7f, 0x0f80, 0x0f85, 0x0f86, 0x0f88, 0x0f8d, 0x0fbe, 0x0fc6, 0x0fc7, 0x102d, 0x1031, 0x1032, 0x1038, 0x1039, 0x103b, 0x103d, 0x103f, 0x1058, 0x105a, 0x105e, 0x1061, 0x1071, 0x1075, 0x1082, 0x1083, 0x1085, 0x1087, 0x108d, 0x108e, 0x109d, 0x109e, 0x135d, 0x1360, 0x1390, 0x13a0, 0x1400, 0x1401, 0x1680, 0x1681, 0x169b, 0x16a0, 0x1712, 0x1720, 0x1732, 0x1735, 0x1752, 0x1760, 0x1772, 0x1780, 0x17b4, 0x17b6, 0x17b7, 0x17be, 0x17c6, 0x17c7, 0x17c9, 0x17d4, 0x17db, 0x17dc, 0x17dd, 0x17e0, 0x17f0, 0x1810, 0x18a9, 0x18aa, 0x1920, 0x1923, 0x1927, 0x1929, 0x1932, 0x1933, 0x1939, 0x1946, 0x19de, 0x1a00, 0x1a17, 0x1a19, 0x1a56, 0x1a57, 0x1a58, 0x1a61, 0x1a62, 0x1a63, 0x1a65, 0x1a6d, 0x1a73, 0x1a80, 0x1b00, 0x1b04, 0x1b34, 0x1b35, 0x1b36, 0x1b3b, 0x1b3c, 0x1b3d, 0x1b42, 0x1b43, 0x1b6b, 0x1b74, 0x1b80, 0x1b82, 0x1ba2, 0x1ba6, 0x1ba8, 0x1baa, 0x1bab, 0x1bac, 0x1be6, 0x1be7, 0x1be8, 0x1bea, 0x1bed, 0x1bee, 0x1bef, 0x1bf2, 0x1c2c, 0x1c34, 0x1c36, 0x1c3b, 0x1cd0, 0x1cd3, 0x1cd4, 0x1ce1, 0x1ce2, 0x1ce9, 0x1ced, 0x1cee, 0x1cf4, 0x1cf5, 0x1dc0, 0x1e00, 0x1fbd, 0x1fbe, 0x1fbf, 0x1fc2, 0x1fcd, 0x1fd0, 0x1fdd, 0x1fe0, 0x1fed, 0x1ff2, 0x1ffd, 0x200e, 0x2010, 0x2071, 0x2074, 0x207f, 0x2080, 0x2090, 0x20a0, 0x2102, 0x2103, 0x2107, 0x2108, 0x210a, 0x2114, 0x2115, 0x2116, 0x2119, 0x211e, 0x2124, 0x2125, 0x2126, 0x2127, 0x2128, 0x2129, 0x212a, 0x212e, 0x212f, 0x213a, 0x213c, 0x2140, 0x2145, 0x214a, 0x214e, 0x2150, 0x2160, 0x2189, 0x2336, 0x237b, 0x2395, 0x2396, 0x249c, 0x24ea, 0x26ac, 0x26ad, 0x2800, 0x2900, 0x2c00, 0x2ce5, 0x2ceb, 0x2cef, 0x2cf2, 0x2cf9, 0x2d00, 0x2d7f, 0x2d80, 0x2de0, 0x3005, 0x3008, 0x3021, 0x302a, 0x3031, 0x3036, 0x3038, 0x303d, 0x3041, 0x3099, 0x309d, 0x30a0, 0x30a1, 0x30fb, 0x30fc, 0x31c0, 0x31f0, 0x321d, 0x3220, 0x3250, 0x3260, 0x327c, 0x327f, 0x32b1, 0x32c0, 0x32cc, 0x32d0, 0x3377, 0x337b, 0x33de, 0x33e0, 0x33ff, 0x3400, 0x4dc0, 0x4e00, 0xa490, 0xa4d0, 0xa60d, 0xa610, 0xa66f, 0xa680, 0xa69f, 0xa6a0, 0xa6f0, 0xa6f2, 0xa700, 0xa722, 0xa788, 0xa789, 0xa802, 0xa803, 0xa806, 0xa807, 0xa80b, 0xa80c, 0xa825, 0xa827, 0xa828, 0xa830, 0xa838, 0xa840, 0xa874, 0xa880, 0xa8c4, 0xa8ce, 0xa8e0, 0xa8f2, 0xa926, 0xa92e, 0xa947, 0xa952, 0xa980, 0xa983, 0xa9b3, 0xa9b4, 0xa9b6, 0xa9ba, 0xa9bc, 0xa9bd, 0xaa29, 0xaa2f, 0xaa31, 0xaa33, 0xaa35, 0xaa40, 0xaa43, 0xaa44, 0xaa4c, 0xaa4d, 0xaab0, 0xaab1, 0xaab2, 0xaab5, 0xaab7, 0xaab9, 0xaabe, 0xaac0, 0xaac1, 0xaac2, 0xaaec, 0xaaee, 0xaaf6, 0xab01, 0xabe5, 0xabe6, 0xabe8, 0xabe9, 0xabed, 0xabf0, 0xfb1e, 0xfb1f, 0xfb29, 0xfb2a, 0xfd3e, 0xfd50, 0xfdfd, 0xfe70, 0xfeff, 0xff21, 0xff3b, 0xff41, 0xff5b, 0xff66, 0xffe0, 0x10000, 0x10101, 0x10102, 0x10140, 0x101d0, 0x101fd, 0x10280, 0x1091f, 0x10920, 0x10a01, 0x10a10, 0x10a38, 0x10a40, 0x10b39, 0x10b40, 0x10e60, 0x11000, 0x11001, 0x11002, 0x11038, 0x11047, 0x11052, 0x11066, 0x11080, 0x11082, 0x110b3, 0x110b7, 0x110b9, 0x110bb, 0x11100, 0x11103, 0x11127, 0x1112c, 0x1112d, 0x11136, 0x11180, 0x11182, 0x111b6, 0x111bf, 0x116ab, 0x116ac, 0x116ad, 0x116ae, 0x116b0, 0x116b6, 0x116b7, 0x116c0, 0x16f8f, 0x16f93, 0x1d167, 0x1d16a, 0x1d173, 0x1d183, 0x1d185, 0x1d18c, 0x1d1aa, 0x1d1ae, 0x1d200, 0x1d360, 0x1d6db, 0x1d6dc, 0x1d715, 0x1d716, 0x1d74f, 0x1d750, 0x1d789, 0x1d78a, 0x1d7c3, 0x1d7c4, 0x1d7ce, 0x1ee00, 0x1eef0, 0x1f110, 0x1f16a, 0x1f170, 0x1f300, 0x1f48c, 0x1f48d, 0x1f524, 0x1f525, 0x20000, 0xe0001, 0xf0000, // sentinel\r\n0x10fffe, // sentinel\r\n0x10ffff }","id":1442},{"comment":"// use a binary search with a cache\r\n","field_name":"stCache","field_type":"int","full_declaration":"private transient volatile int stCache = 0","id":1443},{"comment":"/* 51 tag types so far */\r\n/**\r\n * Character to glyph mapping.  Table tag \"cmap\" in the Open\r\n * Type Specification.\r\n */\r\n","field_name":"TAG_CMAP","field_type":"int","full_declaration":"public final static int TAG_CMAP = 0x636d6170","id":1444},{"comment":"/**\r\n * Font header.  Table tag \"head\" in the Open\r\n * Type Specification.\r\n */\r\n","field_name":"TAG_HEAD","field_type":"int","full_declaration":"public final static int TAG_HEAD = 0x68656164","id":1445},{"comment":"/**\r\n * Naming table.  Table tag \"name\" in the Open\r\n * Type Specification.\r\n */\r\n","field_name":"TAG_NAME","field_type":"int","full_declaration":"public final static int TAG_NAME = 0x6e616d65","id":1446},{"comment":"/**\r\n * Glyph data.  Table tag \"glyf\" in the Open\r\n * Type Specification.\r\n */\r\n","field_name":"TAG_GLYF","field_type":"int","full_declaration":"public final static int TAG_GLYF = 0x676c7966","id":1447},{"comment":"/**\r\n * Maximum profile.  Table tag \"maxp\" in the Open\r\n * Type Specification.\r\n */\r\n","field_name":"TAG_MAXP","field_type":"int","full_declaration":"public final static int TAG_MAXP = 0x6d617870","id":1448},{"comment":"/**\r\n * CVT preprogram.  Table tag \"prep\" in the Open\r\n * Type Specification.\r\n */\r\n","field_name":"TAG_PREP","field_type":"int","full_declaration":"public final static int TAG_PREP = 0x70726570","id":1449},{"comment":"/**\r\n * Horizontal metrics.  Table tag \"hmtx\" in the Open\r\n * Type Specification.\r\n */\r\n","field_name":"TAG_HMTX","field_type":"int","full_declaration":"public final static int TAG_HMTX = 0x686d7478","id":1450},{"comment":"/**\r\n * Kerning.  Table tag \"kern\" in the Open\r\n * Type Specification.\r\n */\r\n","field_name":"TAG_KERN","field_type":"int","full_declaration":"public final static int TAG_KERN = 0x6b65726e","id":1451},{"comment":"/**\r\n * Horizontal device metrics.  Table tag \"hdmx\" in the Open\r\n * Type Specification.\r\n */\r\n","field_name":"TAG_HDMX","field_type":"int","full_declaration":"public final static int TAG_HDMX = 0x68646d78","id":1452},{"comment":"/**\r\n * Index to location.  Table tag \"loca\" in the Open\r\n * Type Specification.\r\n */\r\n","field_name":"TAG_LOCA","field_type":"int","full_declaration":"public final static int TAG_LOCA = 0x6c6f6361","id":1453},{"comment":"/**\r\n * PostScript Information.  Table tag \"post\" in the Open\r\n * Type Specification.\r\n */\r\n","field_name":"TAG_POST","field_type":"int","full_declaration":"public final static int TAG_POST = 0x706f7374","id":1454},{"comment":"/**\r\n * OS/2 and Windows specific metrics.  Table tag \"OS/2\"\r\n * in the Open Type Specification.\r\n */\r\n","field_name":"TAG_OS2","field_type":"int","full_declaration":"public final static int TAG_OS2 = 0x4f532f32","id":1455},{"comment":"/**\r\n * Control value table.  Table tag \"cvt \"\r\n * in the Open Type Specification.\r\n */\r\n","field_name":"TAG_CVT","field_type":"int","full_declaration":"public final static int TAG_CVT = 0x63767420","id":1456},{"comment":"/**\r\n * Grid-fitting and scan conversion procedure.  Table tag\r\n * \"gasp\" in the Open Type Specification.\r\n */\r\n","field_name":"TAG_GASP","field_type":"int","full_declaration":"public final static int TAG_GASP = 0x67617370","id":1457},{"comment":"/**\r\n * Vertical device metrics.  Table tag \"VDMX\" in the Open\r\n * Type Specification.\r\n */\r\n","field_name":"TAG_VDMX","field_type":"int","full_declaration":"public final static int TAG_VDMX = 0x56444d58","id":1458},{"comment":"/**\r\n * Vertical metrics.  Table tag \"vmtx\" in the Open\r\n * Type Specification.\r\n */\r\n","field_name":"TAG_VMTX","field_type":"int","full_declaration":"public final static int TAG_VMTX = 0x766d7478","id":1459},{"comment":"/**\r\n * Vertical metrics header.  Table tag \"vhea\" in the Open\r\n * Type Specification.\r\n */\r\n","field_name":"TAG_VHEA","field_type":"int","full_declaration":"public final static int TAG_VHEA = 0x76686561","id":1460},{"comment":"/**\r\n * Horizontal metrics header.  Table tag \"hhea\" in the Open\r\n * Type Specification.\r\n */\r\n","field_name":"TAG_HHEA","field_type":"int","full_declaration":"public final static int TAG_HHEA = 0x68686561","id":1461},{"comment":"/**\r\n * Adobe Type 1 font data.  Table tag \"typ1\" in the Open\r\n * Type Specification.\r\n */\r\n","field_name":"TAG_TYP1","field_type":"int","full_declaration":"public final static int TAG_TYP1 = 0x74797031","id":1462},{"comment":"/**\r\n * Baseline table.  Table tag \"bsln\" in the Open\r\n * Type Specification.\r\n */\r\n","field_name":"TAG_BSLN","field_type":"int","full_declaration":"public final static int TAG_BSLN = 0x62736c6e","id":1463},{"comment":"/**\r\n * Glyph substitution.  Table tag \"GSUB\" in the Open\r\n * Type Specification.\r\n */\r\n","field_name":"TAG_GSUB","field_type":"int","full_declaration":"public final static int TAG_GSUB = 0x47535542","id":1464},{"comment":"/**\r\n * Digital signature.  Table tag \"DSIG\" in the Open\r\n * Type Specification.\r\n */\r\n","field_name":"TAG_DSIG","field_type":"int","full_declaration":"public final static int TAG_DSIG = 0x44534947","id":1465},{"comment":"/**\r\n * Font program.   Table tag \"fpgm\" in the Open\r\n * Type Specification.\r\n */\r\n","field_name":"TAG_FPGM","field_type":"int","full_declaration":"public final static int TAG_FPGM = 0x6670676d","id":1466},{"comment":"/**\r\n * Font variation.   Table tag \"fvar\" in the Open\r\n * Type Specification.\r\n */\r\n","field_name":"TAG_FVAR","field_type":"int","full_declaration":"public final static int TAG_FVAR = 0x66766172","id":1467},{"comment":"/**\r\n * Glyph variation.  Table tag \"gvar\" in the Open\r\n * Type Specification.\r\n */\r\n","field_name":"TAG_GVAR","field_type":"int","full_declaration":"public final static int TAG_GVAR = 0x67766172","id":1468},{"comment":"/**\r\n * Compact font format (Type1 font).  Table tag\r\n * \"CFF \" in the Open Type Specification.\r\n */\r\n","field_name":"TAG_CFF","field_type":"int","full_declaration":"public final static int TAG_CFF = 0x43464620","id":1469},{"comment":"/**\r\n * Multiple master supplementary data.  Table tag\r\n * \"MMSD\" in the Open Type Specification.\r\n */\r\n","field_name":"TAG_MMSD","field_type":"int","full_declaration":"public final static int TAG_MMSD = 0x4d4d5344","id":1470},{"comment":"/**\r\n * Multiple master font metrics.  Table tag\r\n * \"MMFX\" in the Open Type Specification.\r\n */\r\n","field_name":"TAG_MMFX","field_type":"int","full_declaration":"public final static int TAG_MMFX = 0x4d4d4658","id":1471},{"comment":"/**\r\n * Baseline data.  Table tag \"BASE\" in the Open\r\n * Type Specification.\r\n */\r\n","field_name":"TAG_BASE","field_type":"int","full_declaration":"public final static int TAG_BASE = 0x42415345","id":1472},{"comment":"/**\r\n * Glyph definition.  Table tag \"GDEF\" in the Open\r\n * Type Specification.\r\n */\r\n","field_name":"TAG_GDEF","field_type":"int","full_declaration":"public final static int TAG_GDEF = 0x47444546","id":1473},{"comment":"/**\r\n * Glyph positioning.  Table tag \"GPOS\" in the Open\r\n * Type Specification.\r\n */\r\n","field_name":"TAG_GPOS","field_type":"int","full_declaration":"public final static int TAG_GPOS = 0x47504f53","id":1474},{"comment":"/**\r\n * Justification.  Table tag \"JSTF\" in the Open\r\n * Type Specification.\r\n */\r\n","field_name":"TAG_JSTF","field_type":"int","full_declaration":"public final static int TAG_JSTF = 0x4a535446","id":1475},{"comment":"/**\r\n * Embedded bitmap data.  Table tag \"EBDT\" in the Open\r\n * Type Specification.\r\n */\r\n","field_name":"TAG_EBDT","field_type":"int","full_declaration":"public final static int TAG_EBDT = 0x45424454","id":1476},{"comment":"/**\r\n * Embedded bitmap location.  Table tag \"EBLC\" in the Open\r\n * Type Specification.\r\n */\r\n","field_name":"TAG_EBLC","field_type":"int","full_declaration":"public final static int TAG_EBLC = 0x45424c43","id":1477},{"comment":"/**\r\n * Embedded bitmap scaling.  Table tag \"EBSC\" in the Open\r\n * Type Specification.\r\n */\r\n","field_name":"TAG_EBSC","field_type":"int","full_declaration":"public final static int TAG_EBSC = 0x45425343","id":1478},{"comment":"/**\r\n * Linear threshold.  Table tag \"LTSH\" in the Open\r\n * Type Specification.\r\n */\r\n","field_name":"TAG_LTSH","field_type":"int","full_declaration":"public final static int TAG_LTSH = 0x4c545348","id":1479},{"comment":"/**\r\n * PCL 5 data.  Table tag \"PCLT\" in the Open\r\n * Type Specification.\r\n */\r\n","field_name":"TAG_PCLT","field_type":"int","full_declaration":"public final static int TAG_PCLT = 0x50434c54","id":1480},{"comment":"/**\r\n * Accent attachment.  Table tag \"acnt\" in the Open\r\n * Type Specification.\r\n */\r\n","field_name":"TAG_ACNT","field_type":"int","full_declaration":"public final static int TAG_ACNT = 0x61636e74","id":1481},{"comment":"/**\r\n * Axis variation.  Table tag \"avar\" in the Open\r\n * Type Specification.\r\n */\r\n","field_name":"TAG_AVAR","field_type":"int","full_declaration":"public final static int TAG_AVAR = 0x61766172","id":1482},{"comment":"/**\r\n * Bitmap data.  Table tag \"bdat\" in the Open\r\n * Type Specification.\r\n */\r\n","field_name":"TAG_BDAT","field_type":"int","full_declaration":"public final static int TAG_BDAT = 0x62646174","id":1483},{"comment":"/**\r\n * Bitmap location.  Table tag \"bloc\" in the Open\r\n * Type Specification.\r\n */\r\n","field_name":"TAG_BLOC","field_type":"int","full_declaration":"public final static int TAG_BLOC = 0x626c6f63","id":1484},{"comment":"/**\r\n * CVT variation.  Table tag \"cvar\" in the Open\r\n * Type Specification.\r\n */\r\n","field_name":"TAG_CVAR","field_type":"int","full_declaration":"public final static int TAG_CVAR = 0x63766172","id":1485},{"comment":"/**\r\n * Feature name.  Table tag \"feat\" in the Open\r\n * Type Specification.\r\n */\r\n","field_name":"TAG_FEAT","field_type":"int","full_declaration":"public final static int TAG_FEAT = 0x66656174","id":1486},{"comment":"/**\r\n * Font descriptors.  Table tag \"fdsc\" in the Open\r\n * Type Specification.\r\n */\r\n","field_name":"TAG_FDSC","field_type":"int","full_declaration":"public final static int TAG_FDSC = 0x66647363","id":1487},{"comment":"/**\r\n * Font metrics.  Table tag \"fmtx\" in the Open\r\n * Type Specification.\r\n */\r\n","field_name":"TAG_FMTX","field_type":"int","full_declaration":"public final static int TAG_FMTX = 0x666d7478","id":1488},{"comment":"/**\r\n * Justification.  Table tag \"just\" in the Open\r\n * Type Specification.\r\n */\r\n","field_name":"TAG_JUST","field_type":"int","full_declaration":"public final static int TAG_JUST = 0x6a757374","id":1489},{"comment":"/**\r\n * Ligature caret.   Table tag \"lcar\" in the Open\r\n * Type Specification.\r\n */\r\n","field_name":"TAG_LCAR","field_type":"int","full_declaration":"public final static int TAG_LCAR = 0x6c636172","id":1490},{"comment":"/**\r\n * Glyph metamorphosis.  Table tag \"mort\" in the Open\r\n * Type Specification.\r\n */\r\n","field_name":"TAG_MORT","field_type":"int","full_declaration":"public final static int TAG_MORT = 0x6d6f7274","id":1491},{"comment":"/**\r\n * Optical bounds.  Table tag \"opbd\" in the Open\r\n * Type Specification.\r\n */\r\n","field_name":"TAG_OPBD","field_type":"int","full_declaration":"public final static int TAG_OPBD = 0x6d6f7274","id":1492},{"comment":"/**\r\n * Glyph properties.  Table tag \"prop\" in the Open\r\n * Type Specification.\r\n */\r\n","field_name":"TAG_PROP","field_type":"int","full_declaration":"public final static int TAG_PROP = 0x70726f70","id":1493},{"comment":"/**\r\n * Tracking.  Table tag \"trak\" in the Open\r\n * Type Specification.\r\n */\r\n","field_name":"TAG_TRAK","field_type":"int","full_declaration":"public final static int TAG_TRAK = 0x7472616b","id":1494},{"comment":"private Shape fShape;","field_name":"fShape","field_type":"java.awt.Shape","full_declaration":"private java.awt.Shape fShape","id":1495},{"comment":"","field_name":"fStroke","field_type":"boolean","full_declaration":"private boolean fStroke","id":1496},{"comment":"/**\r\n * A key indicating the shape should be stroked with a 1-pixel wide stroke.\r\n */\r\n","field_name":"STROKE","field_type":"boolean","full_declaration":"public static final boolean STROKE = true","id":1497},{"comment":"/**\r\n * A key indicating the shape should be filled.\r\n */\r\n","field_name":"FILL","field_type":"boolean","full_declaration":"public static final boolean FILL = false","id":1498},{"comment":"// cache shape bounds, since GeneralPath doesn't\r\nprivate Rectangle2D fShapeBounds;","field_name":"fShapeBounds","field_type":"java.awt.geom.Rectangle2D","full_declaration":"private java.awt.geom.Rectangle2D fShapeBounds","id":1499},{"comment":"// the length of the paragraph\r\n","field_name":"length","field_type":"int","full_declaration":"private int length","id":1500},{"comment":"// If there is a single Decoration for the whole paragraph, it\r\n// is stored here.  Otherwise this field is ignored.\r\nprivate Decoration decoration;","field_name":"decoration","field_type":"sun.font.Decoration","full_declaration":"private sun.font.Decoration decoration","id":1501},{"comment":"// If there is a single Font or GraphicAttribute for the whole\r\n// paragraph, it is stored here.  Otherwise this field is ignored.\r\nprivate Object font;","field_name":"font","field_type":"java.lang.Object","full_declaration":"private java.lang.Object font","id":1502},{"comment":"// If there are multiple Decorations in the paragraph, they are\r\n// stored in this Vector, in order.  Otherwise this vector and\r\n// the decorationStarts array are null.\r\nprivate Vector<Decoration> decorations;","field_name":"decorations","field_type":"java.util.Vector","full_declaration":"private java.util.Vector decorations","id":1503},{"comment":"// If there are multiple Decorations in the paragraph,\r\n// decorationStarts[i] contains the index where decoration i\r\n// starts.  For convenience, there is an extra entry at the\r\n// end of this array with the length of the paragraph.\r\n","field_name":"decorationStarts","field_type":"int[]","full_declaration":"int[] decorationStarts","id":1504},{"comment":"// If there are multiple Fonts/GraphicAttributes in the paragraph,\r\n// they are\r\n// stored in this Vector, in order.  Otherwise this vector and\r\n// the fontStarts array are null.\r\nprivate Vector<Object> fonts;","field_name":"fonts","field_type":"java.util.Vector","full_declaration":"private java.util.Vector fonts","id":1505},{"comment":"// If there are multiple Fonts/GraphicAttributes in the paragraph,\r\n// fontStarts[i] contains the index where decoration i\r\n// starts.  For convenience, there is an extra entry at the\r\n// end of this array with the length of the paragraph.\r\n","field_name":"fontStarts","field_type":"int[]","full_declaration":"int[] fontStarts","id":1506},{"comment":"","field_name":"INITIAL_SIZE","field_type":"int","full_declaration":"private static int INITIAL_SIZE = 8","id":1507},{"comment":"// table of all instances in this class, used by readResolve\r\nprivate static final Map<String, TextAttribute> instanceMap = new HashMap<String, TextAttribute>(29);","field_name":"instanceMap","field_type":"java.util.Map","full_declaration":"private static final java.util.Map instanceMap = new HashMap<String, TextAttribute>(29)","id":1508},{"comment":"// Serialization compatibility with Java 2 platform v1.2.\r\n// 1.2 will throw an InvalidObjectException if ever asked to\r\n// deserialize INPUT_METHOD_UNDERLINE.\r\n// This shouldn't happen in real life.\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"static final long serialVersionUID = 7744112784117861702L","id":1509},{"comment":"// \r\n// For use with Font.\r\n// \r\n/**\r\n * Attribute key for the font name.  Values are instances of\r\n * <b><code>String</code></b>.  The default value is\r\n * <code>\"Default\"</code>, which causes the platform default font\r\n * family to be used.\r\n *\r\n * <p> The <code>Font</code> class defines constants for the logical\r\n * font names\r\n * {@link java.awt.Font#DIALOG DIALOG},\r\n * {@link java.awt.Font#DIALOG_INPUT DIALOG_INPUT},\r\n * {@link java.awt.Font#SANS_SERIF SANS_SERIF},\r\n * {@link java.awt.Font#SERIF SERIF}, and\r\n * {@link java.awt.Font#MONOSPACED MONOSPACED}.\r\n *\r\n * <p>This defines the value passed as <code>name</code> to the\r\n * <code>Font</code> constructor.  Both logical and physical\r\n * font names are allowed. If a font with the requested name\r\n * is not found, the default font is used.\r\n *\r\n * <p><em>Note:</em> This attribute is unfortunately misnamed, as\r\n * it specifies the face name and not just the family.  Thus\r\n * values such as \"Lucida Sans Bold\" will select that face if it\r\n * exists.  Note, though, that if the requested face does not\r\n * exist, the default will be used with <em>regular</em> weight.\r\n * The \"Bold\" in the name is part of the face name, not a separate\r\n * request that the font's weight be bold.</p>\r\n */\r\npublic static final TextAttribute FAMILY = new TextAttribute(\"family\");","field_name":"FAMILY","field_type":"java.awt.font.TextAttribute","full_declaration":"public static final java.awt.font.TextAttribute FAMILY = new TextAttribute(\"family\")","id":1510},{"comment":"/**\r\n * Attribute key for the weight of a font.  Values are instances\r\n * of <b><code>Number</code></b>.  The default value is\r\n * <code>WEIGHT_REGULAR</code>.\r\n *\r\n * <p>Several constant values are provided, see {@link\r\n * #WEIGHT_EXTRA_LIGHT}, {@link #WEIGHT_LIGHT}, {@link\r\n * #WEIGHT_DEMILIGHT}, {@link #WEIGHT_REGULAR}, {@link\r\n * #WEIGHT_SEMIBOLD}, {@link #WEIGHT_MEDIUM}, {@link\r\n * #WEIGHT_DEMIBOLD}, {@link #WEIGHT_BOLD}, {@link #WEIGHT_HEAVY},\r\n * {@link #WEIGHT_EXTRABOLD}, and {@link #WEIGHT_ULTRABOLD}.  The\r\n * value <code>WEIGHT_BOLD</code> corresponds to the\r\n * style value <code>Font.BOLD</code> as passed to the\r\n * <code>Font</code> constructor.\r\n *\r\n * <p>The value is roughly the ratio of the stem width to that of\r\n * the regular weight.\r\n *\r\n * <p>The system can interpolate the provided value.\r\n */\r\npublic static final TextAttribute WEIGHT = new TextAttribute(\"weight\");","field_name":"WEIGHT","field_type":"java.awt.font.TextAttribute","full_declaration":"public static final java.awt.font.TextAttribute WEIGHT = new TextAttribute(\"weight\")","id":1511},{"comment":"/**\r\n * The lightest predefined weight.\r\n * @see #WEIGHT\r\n */\r\npublic static final Float WEIGHT_EXTRA_LIGHT = Float.valueOf(0.5f);","field_name":"WEIGHT_EXTRA_LIGHT","field_type":"java.lang.Float","full_declaration":"public static final java.lang.Float WEIGHT_EXTRA_LIGHT = Float.valueOf(0.5f)","id":1512},{"comment":"/**\r\n * The standard light weight.\r\n * @see #WEIGHT\r\n */\r\npublic static final Float WEIGHT_LIGHT = Float.valueOf(0.75f);","field_name":"WEIGHT_LIGHT","field_type":"java.lang.Float","full_declaration":"public static final java.lang.Float WEIGHT_LIGHT = Float.valueOf(0.75f)","id":1513},{"comment":"/**\r\n * An intermediate weight between <code>WEIGHT_LIGHT</code> and\r\n * <code>WEIGHT_STANDARD</code>.\r\n * @see #WEIGHT\r\n */\r\npublic static final Float WEIGHT_DEMILIGHT = Float.valueOf(0.875f);","field_name":"WEIGHT_DEMILIGHT","field_type":"java.lang.Float","full_declaration":"public static final java.lang.Float WEIGHT_DEMILIGHT = Float.valueOf(0.875f)","id":1514},{"comment":"/**\r\n * The standard weight. This is the default value for <code>WEIGHT</code>.\r\n * @see #WEIGHT\r\n */\r\npublic static final Float WEIGHT_REGULAR = Float.valueOf(1.0f);","field_name":"WEIGHT_REGULAR","field_type":"java.lang.Float","full_declaration":"public static final java.lang.Float WEIGHT_REGULAR = Float.valueOf(1.0f)","id":1515},{"comment":"/**\r\n * A moderately heavier weight than <code>WEIGHT_REGULAR</code>.\r\n * @see #WEIGHT\r\n */\r\npublic static final Float WEIGHT_SEMIBOLD = Float.valueOf(1.25f);","field_name":"WEIGHT_SEMIBOLD","field_type":"java.lang.Float","full_declaration":"public static final java.lang.Float WEIGHT_SEMIBOLD = Float.valueOf(1.25f)","id":1516},{"comment":"/**\r\n * An intermediate weight between <code>WEIGHT_REGULAR</code> and\r\n * <code>WEIGHT_BOLD</code>.\r\n * @see #WEIGHT\r\n */\r\npublic static final Float WEIGHT_MEDIUM = Float.valueOf(1.5f);","field_name":"WEIGHT_MEDIUM","field_type":"java.lang.Float","full_declaration":"public static final java.lang.Float WEIGHT_MEDIUM = Float.valueOf(1.5f)","id":1517},{"comment":"/**\r\n * A moderately lighter weight than <code>WEIGHT_BOLD</code>.\r\n * @see #WEIGHT\r\n */\r\npublic static final Float WEIGHT_DEMIBOLD = Float.valueOf(1.75f);","field_name":"WEIGHT_DEMIBOLD","field_type":"java.lang.Float","full_declaration":"public static final java.lang.Float WEIGHT_DEMIBOLD = Float.valueOf(1.75f)","id":1518},{"comment":"/**\r\n * The standard bold weight.\r\n * @see #WEIGHT\r\n */\r\npublic static final Float WEIGHT_BOLD = Float.valueOf(2.0f);","field_name":"WEIGHT_BOLD","field_type":"java.lang.Float","full_declaration":"public static final java.lang.Float WEIGHT_BOLD = Float.valueOf(2.0f)","id":1519},{"comment":"/**\r\n * A moderately heavier weight than <code>WEIGHT_BOLD</code>.\r\n * @see #WEIGHT\r\n */\r\npublic static final Float WEIGHT_HEAVY = Float.valueOf(2.25f);","field_name":"WEIGHT_HEAVY","field_type":"java.lang.Float","full_declaration":"public static final java.lang.Float WEIGHT_HEAVY = Float.valueOf(2.25f)","id":1520},{"comment":"/**\r\n * An extra heavy weight.\r\n * @see #WEIGHT\r\n */\r\npublic static final Float WEIGHT_EXTRABOLD = Float.valueOf(2.5f);","field_name":"WEIGHT_EXTRABOLD","field_type":"java.lang.Float","full_declaration":"public static final java.lang.Float WEIGHT_EXTRABOLD = Float.valueOf(2.5f)","id":1521},{"comment":"/**\r\n * The heaviest predefined weight.\r\n * @see #WEIGHT\r\n */\r\npublic static final Float WEIGHT_ULTRABOLD = Float.valueOf(2.75f);","field_name":"WEIGHT_ULTRABOLD","field_type":"java.lang.Float","full_declaration":"public static final java.lang.Float WEIGHT_ULTRABOLD = Float.valueOf(2.75f)","id":1522},{"comment":"/**\r\n * Attribute key for the width of a font.  Values are instances of\r\n * <b><code>Number</code></b>.  The default value is\r\n * <code>WIDTH_REGULAR</code>.\r\n *\r\n * <p>Several constant values are provided, see {@link\r\n * #WIDTH_CONDENSED}, {@link #WIDTH_SEMI_CONDENSED}, {@link\r\n * #WIDTH_REGULAR}, {@link #WIDTH_SEMI_EXTENDED}, {@link\r\n * #WIDTH_EXTENDED}.\r\n *\r\n * <p>The value is roughly the ratio of the advance width to that\r\n * of the regular width.\r\n *\r\n * <p>The system can interpolate the provided value.\r\n */\r\npublic static final TextAttribute WIDTH = new TextAttribute(\"width\");","field_name":"WIDTH","field_type":"java.awt.font.TextAttribute","full_declaration":"public static final java.awt.font.TextAttribute WIDTH = new TextAttribute(\"width\")","id":1523},{"comment":"/**\r\n * The most condensed predefined width.\r\n * @see #WIDTH\r\n */\r\npublic static final Float WIDTH_CONDENSED = Float.valueOf(0.75f);","field_name":"WIDTH_CONDENSED","field_type":"java.lang.Float","full_declaration":"public static final java.lang.Float WIDTH_CONDENSED = Float.valueOf(0.75f)","id":1524},{"comment":"/**\r\n * A moderately condensed width.\r\n * @see #WIDTH\r\n */\r\npublic static final Float WIDTH_SEMI_CONDENSED = Float.valueOf(0.875f);","field_name":"WIDTH_SEMI_CONDENSED","field_type":"java.lang.Float","full_declaration":"public static final java.lang.Float WIDTH_SEMI_CONDENSED = Float.valueOf(0.875f)","id":1525},{"comment":"/**\r\n * The standard width. This is the default value for\r\n * <code>WIDTH</code>.\r\n * @see #WIDTH\r\n */\r\npublic static final Float WIDTH_REGULAR = Float.valueOf(1.0f);","field_name":"WIDTH_REGULAR","field_type":"java.lang.Float","full_declaration":"public static final java.lang.Float WIDTH_REGULAR = Float.valueOf(1.0f)","id":1526},{"comment":"/**\r\n * A moderately extended width.\r\n * @see #WIDTH\r\n */\r\npublic static final Float WIDTH_SEMI_EXTENDED = Float.valueOf(1.25f);","field_name":"WIDTH_SEMI_EXTENDED","field_type":"java.lang.Float","full_declaration":"public static final java.lang.Float WIDTH_SEMI_EXTENDED = Float.valueOf(1.25f)","id":1527},{"comment":"/**\r\n * The most extended predefined width.\r\n * @see #WIDTH\r\n */\r\npublic static final Float WIDTH_EXTENDED = Float.valueOf(1.5f);","field_name":"WIDTH_EXTENDED","field_type":"java.lang.Float","full_declaration":"public static final java.lang.Float WIDTH_EXTENDED = Float.valueOf(1.5f)","id":1528},{"comment":"/**\r\n * Attribute key for the posture of a font.  Values are instances\r\n * of <b><code>Number</code></b>. The default value is\r\n * <code>POSTURE_REGULAR</code>.\r\n *\r\n * <p>Two constant values are provided, {@link #POSTURE_REGULAR}\r\n * and {@link #POSTURE_OBLIQUE}. The value\r\n * <code>POSTURE_OBLIQUE</code> corresponds to the style value\r\n * <code>Font.ITALIC</code> as passed to the <code>Font</code>\r\n * constructor.\r\n *\r\n * <p>The value is roughly the slope of the stems of the font,\r\n * expressed as the run over the rise.  Positive values lean right.\r\n *\r\n * <p>The system can interpolate the provided value.\r\n *\r\n * <p>This will affect the font's italic angle as returned by\r\n * <code>Font.getItalicAngle</code>.\r\n *\r\n * @see java.awt.Font#getItalicAngle()\r\n */\r\npublic static final TextAttribute POSTURE = new TextAttribute(\"posture\");","field_name":"POSTURE","field_type":"java.awt.font.TextAttribute","full_declaration":"public static final java.awt.font.TextAttribute POSTURE = new TextAttribute(\"posture\")","id":1529},{"comment":"/**\r\n * The standard posture, upright.  This is the default value for\r\n * <code>POSTURE</code>.\r\n * @see #POSTURE\r\n */\r\npublic static final Float POSTURE_REGULAR = Float.valueOf(0.0f);","field_name":"POSTURE_REGULAR","field_type":"java.lang.Float","full_declaration":"public static final java.lang.Float POSTURE_REGULAR = Float.valueOf(0.0f)","id":1530},{"comment":"/**\r\n * The standard italic posture.\r\n * @see #POSTURE\r\n */\r\npublic static final Float POSTURE_OBLIQUE = Float.valueOf(0.20f);","field_name":"POSTURE_OBLIQUE","field_type":"java.lang.Float","full_declaration":"public static final java.lang.Float POSTURE_OBLIQUE = Float.valueOf(0.20f)","id":1531},{"comment":"/**\r\n * Attribute key for the font size.  Values are instances of\r\n * <b><code>Number</code></b>.  The default value is 12pt.\r\n *\r\n * <p>This corresponds to the <code>size</code> parameter to the\r\n * <code>Font</code> constructor.\r\n *\r\n * <p>Very large or small sizes will impact rendering performance,\r\n * and the rendering system might not render text at these sizes.\r\n * Negative sizes are illegal and result in the default size.\r\n *\r\n * <p>Note that the appearance and metrics of a 12pt font with a\r\n * 2x transform might be different than that of a 24 point font\r\n * with no transform.\r\n */\r\npublic static final TextAttribute SIZE = new TextAttribute(\"size\");","field_name":"SIZE","field_type":"java.awt.font.TextAttribute","full_declaration":"public static final java.awt.font.TextAttribute SIZE = new TextAttribute(\"size\")","id":1532},{"comment":"/**\r\n * Attribute key for the transform of a font.  Values are\r\n * instances of <b><code>TransformAttribute</code></b>.  The\r\n * default value is <code>TransformAttribute.IDENTITY</code>.\r\n *\r\n * <p>The <code>TransformAttribute</code> class defines the\r\n * constant {@link TransformAttribute#IDENTITY IDENTITY}.\r\n *\r\n * <p>This corresponds to the transform passed to\r\n * <code>Font.deriveFont(AffineTransform)</code>.  Since that\r\n * transform is mutable and <code>TextAttribute</code> values must\r\n * not be, the <code>TransformAttribute</code> wrapper class is\r\n * used.\r\n *\r\n * <p>The primary intent is to support scaling and skewing, though\r\n * other effects are possible.</p>\r\n *\r\n * <p>Some transforms will cause the baseline to be rotated and/or\r\n * shifted.  The text and the baseline are transformed together so\r\n * that the text follows the new baseline.  For example, with text\r\n * on a horizontal baseline, the new baseline follows the\r\n * direction of the unit x vector passed through the\r\n * transform. Text metrics are measured against this new baseline.\r\n * So, for example, with other things being equal, text rendered\r\n * with a rotated TRANSFORM and an unrotated TRANSFORM will measure as\r\n * having the same ascent, descent, and advance.</p>\r\n *\r\n * <p>In styled text, the baselines for each such run are aligned\r\n * one after the other to potentially create a non-linear baseline\r\n * for the entire run of text. For more information, see {@link\r\n * TextLayout#getLayoutPath}.</p>\r\n *\r\n * @see TransformAttribute\r\n * @see java.awt.geom.AffineTransform\r\n */\r\npublic static final TextAttribute TRANSFORM = new TextAttribute(\"transform\");","field_name":"TRANSFORM","field_type":"java.awt.font.TextAttribute","full_declaration":"public static final java.awt.font.TextAttribute TRANSFORM = new TextAttribute(\"transform\")","id":1533},{"comment":"/**\r\n * Attribute key for superscripting and subscripting.  Values are\r\n * instances of <b><code>Integer</code></b>.  The default value is\r\n * 0, which means that no superscript or subscript is used.\r\n *\r\n * <p>Two constant values are provided, see {@link\r\n * #SUPERSCRIPT_SUPER} and {@link #SUPERSCRIPT_SUB}.  These have\r\n * the values 1 and -1 respectively.  Values of\r\n * greater magnitude define greater levels of superscript or\r\n * subscripting, for example, 2 corresponds to super-superscript,\r\n * 3 to super-super-superscript, and similarly for negative values\r\n * and subscript, up to a level of 7 (or -7).  Values beyond this\r\n * range are reserved; behavior is platform-dependent.\r\n *\r\n * <p><code>SUPERSCRIPT</code> can\r\n * impact the ascent and descent of a font.  The ascent\r\n * and descent can never become negative, however.\r\n */\r\npublic static final TextAttribute SUPERSCRIPT = new TextAttribute(\"superscript\");","field_name":"SUPERSCRIPT","field_type":"java.awt.font.TextAttribute","full_declaration":"public static final java.awt.font.TextAttribute SUPERSCRIPT = new TextAttribute(\"superscript\")","id":1534},{"comment":"/**\r\n * Standard superscript.\r\n * @see #SUPERSCRIPT\r\n */\r\npublic static final Integer SUPERSCRIPT_SUPER = Integer.valueOf(1);","field_name":"SUPERSCRIPT_SUPER","field_type":"java.lang.Integer","full_declaration":"public static final java.lang.Integer SUPERSCRIPT_SUPER = Integer.valueOf(1)","id":1535},{"comment":"/**\r\n * Standard subscript.\r\n * @see #SUPERSCRIPT\r\n */\r\npublic static final Integer SUPERSCRIPT_SUB = Integer.valueOf(-1);","field_name":"SUPERSCRIPT_SUB","field_type":"java.lang.Integer","full_declaration":"public static final java.lang.Integer SUPERSCRIPT_SUB = Integer.valueOf(-1)","id":1536},{"comment":"/**\r\n * Attribute key used to provide the font to use to render text.\r\n * Values are instances of {@link java.awt.Font}.  The default\r\n * value is null, indicating that normal resolution of a\r\n * <code>Font</code> from attributes should be performed.\r\n *\r\n * <p><code>TextLayout</code> and\r\n * <code>AttributedCharacterIterator</code> work in terms of\r\n * <code>Maps</code> of <code>TextAttributes</code>.  Normally,\r\n * all the attributes are examined and used to select and\r\n * configure a <code>Font</code> instance.  If a <code>FONT</code>\r\n * attribute is present, though, its associated <code>Font</code>\r\n * will be used.  This provides a way for users to override the\r\n * resolution of font attributes into a <code>Font</code>, or\r\n * force use of a particular <code>Font</code> instance.  This\r\n * also allows users to specify subclasses of <code>Font</code> in\r\n * cases where a <code>Font</code> can be subclassed.\r\n *\r\n * <p><code>FONT</code> is used for special situations where\r\n * clients already have a <code>Font</code> instance but still\r\n * need to use <code>Map</code>-based APIs.  Typically, there will\r\n * be no other attributes in the <code>Map</code> except the\r\n * <code>FONT</code> attribute.  With <code>Map</code>-based APIs\r\n * the common case is to specify all attributes individually, so\r\n * <code>FONT</code> is not needed or desireable.\r\n *\r\n * <p>However, if both <code>FONT</code> and other attributes are\r\n * present in the <code>Map</code>, the rendering system will\r\n * merge the attributes defined in the <code>Font</code> with the\r\n * additional attributes.  This merging process classifies\r\n * <code>TextAttributes</code> into two groups.  One group, the\r\n * 'primary' group, is considered fundamental to the selection and\r\n * metric behavior of a font.  These attributes are\r\n * <code>FAMILY</code>, <code>WEIGHT</code>, <code>WIDTH</code>,\r\n * <code>POSTURE</code>, <code>SIZE</code>,\r\n * <code>TRANSFORM</code>, <code>SUPERSCRIPT</code>, and\r\n * <code>TRACKING</code>. The other group, the 'secondary' group,\r\n * consists of all other defined attributes, with the exception of\r\n * <code>FONT</code> itself.\r\n *\r\n * <p>To generate the new <code>Map</code>, first the\r\n * <code>Font</code> is obtained from the <code>FONT</code>\r\n * attribute, and <em>all</em> of its attributes extracted into a\r\n * new <code>Map</code>.  Then only the <em>secondary</em>\r\n * attributes from the original <code>Map</code> are added to\r\n * those in the new <code>Map</code>.  Thus the values of primary\r\n * attributes come solely from the <code>Font</code>, and the\r\n * values of secondary attributes originate with the\r\n * <code>Font</code> but can be overridden by other values in the\r\n * <code>Map</code>.\r\n *\r\n * <p><em>Note:</em><code>Font's</code> <code>Map</code>-based\r\n * constructor and <code>deriveFont</code> methods do not process\r\n * the <code>FONT</code> attribute, as these are used to create\r\n * new <code>Font</code> objects.  Instead, {@link\r\n * java.awt.Font#getFont(Map) Font.getFont(Map)} should be used to\r\n * handle the <code>FONT</code> attribute.\r\n *\r\n * @see java.awt.Font\r\n */\r\npublic static final TextAttribute FONT = new TextAttribute(\"font\");","field_name":"FONT","field_type":"java.awt.font.TextAttribute","full_declaration":"public static final java.awt.font.TextAttribute FONT = new TextAttribute(\"font\")","id":1537},{"comment":"/**\r\n * Attribute key for a user-defined glyph to display in lieu\r\n * of the font's standard glyph for a character.  Values are\r\n * intances of GraphicAttribute.  The default value is null,\r\n * indicating that the standard glyphs provided by the font\r\n * should be used.\r\n *\r\n * <p>This attribute is used to reserve space for a graphic or\r\n * other component embedded in a line of text.  It is required for\r\n * correct positioning of 'inline' components within a line when\r\n * bidirectional reordering (see {@link java.text.Bidi}) is\r\n * performed.  Each character (Unicode code point) will be\r\n * rendered using the provided GraphicAttribute. Typically, the\r\n * characters to which this attribute is applied should be\r\n * <code>&#92;uFFFC</code>.\r\n *\r\n * <p>The GraphicAttribute determines the logical and visual\r\n * bounds of the text; the actual Font values are ignored.\r\n *\r\n * @see GraphicAttribute\r\n */\r\npublic static final TextAttribute CHAR_REPLACEMENT = new TextAttribute(\"char_replacement\");","field_name":"CHAR_REPLACEMENT","field_type":"java.awt.font.TextAttribute","full_declaration":"public static final java.awt.font.TextAttribute CHAR_REPLACEMENT = new TextAttribute(\"char_replacement\")","id":1538},{"comment":"// \r\n// Adornments added to text.\r\n// \r\n/**\r\n * Attribute key for the paint used to render the text.  Values are\r\n * instances of <b><code>Paint</code></b>.  The default value is\r\n * null, indicating that the <code>Paint</code> set on the\r\n * <code>Graphics2D</code> at the time of rendering is used.\r\n *\r\n * <p>Glyphs will be rendered using this\r\n * <code>Paint</code> regardless of the <code>Paint</code> value\r\n * set on the <code>Graphics</code> (but see {@link #SWAP_COLORS}).\r\n *\r\n * @see java.awt.Paint\r\n * @see #SWAP_COLORS\r\n */\r\npublic static final TextAttribute FOREGROUND = new TextAttribute(\"foreground\");","field_name":"FOREGROUND","field_type":"java.awt.font.TextAttribute","full_declaration":"public static final java.awt.font.TextAttribute FOREGROUND = new TextAttribute(\"foreground\")","id":1539},{"comment":"/**\r\n * Attribute key for the paint used to render the background of\r\n * the text.  Values are instances of <b><code>Paint</code></b>.\r\n * The default value is null, indicating that the background\r\n * should not be rendered.\r\n *\r\n * <p>The logical bounds of the text will be filled using this\r\n * <code>Paint</code>, and then the text will be rendered on top\r\n * of it (but see {@link #SWAP_COLORS}).\r\n *\r\n * <p>The visual bounds of the text is extended to include the\r\n * logical bounds, if necessary.  The outline is not affected.\r\n *\r\n * @see java.awt.Paint\r\n * @see #SWAP_COLORS\r\n */\r\npublic static final TextAttribute BACKGROUND = new TextAttribute(\"background\");","field_name":"BACKGROUND","field_type":"java.awt.font.TextAttribute","full_declaration":"public static final java.awt.font.TextAttribute BACKGROUND = new TextAttribute(\"background\")","id":1540},{"comment":"/**\r\n * Attribute key for underline.  Values are instances of\r\n * <b><code>Integer</code></b>.  The default value is -1, which\r\n * means no underline.\r\n *\r\n * <p>The constant value {@link #UNDERLINE_ON} is provided.\r\n *\r\n * <p>The underline affects both the visual bounds and the outline\r\n * of the text.\r\n */\r\npublic static final TextAttribute UNDERLINE = new TextAttribute(\"underline\");","field_name":"UNDERLINE","field_type":"java.awt.font.TextAttribute","full_declaration":"public static final java.awt.font.TextAttribute UNDERLINE = new TextAttribute(\"underline\")","id":1541},{"comment":"/**\r\n * Standard underline.\r\n *\r\n * @see #UNDERLINE\r\n */\r\npublic static final Integer UNDERLINE_ON = Integer.valueOf(0);","field_name":"UNDERLINE_ON","field_type":"java.lang.Integer","full_declaration":"public static final java.lang.Integer UNDERLINE_ON = Integer.valueOf(0)","id":1542},{"comment":"/**\r\n * Attribute key for strikethrough.  Values are instances of\r\n * <b><code>Boolean</code></b>.  The default value is\r\n * <code>false</code>, which means no strikethrough.\r\n *\r\n * <p>The constant value {@link #STRIKETHROUGH_ON} is provided.\r\n *\r\n * <p>The strikethrough affects both the visual bounds and the\r\n * outline of the text.\r\n */\r\npublic static final TextAttribute STRIKETHROUGH = new TextAttribute(\"strikethrough\");","field_name":"STRIKETHROUGH","field_type":"java.awt.font.TextAttribute","full_declaration":"public static final java.awt.font.TextAttribute STRIKETHROUGH = new TextAttribute(\"strikethrough\")","id":1543},{"comment":"/**\r\n * A single strikethrough.\r\n *\r\n * @see #STRIKETHROUGH\r\n */\r\npublic static final Boolean STRIKETHROUGH_ON = Boolean.TRUE;","field_name":"STRIKETHROUGH_ON","field_type":"java.lang.Boolean","full_declaration":"public static final java.lang.Boolean STRIKETHROUGH_ON = Boolean.TRUE","id":1544},{"comment":"// \r\n// Attributes use to control layout of text on a line.\r\n// \r\n/**\r\n * Attribute key for the run direction of the line.  Values are\r\n * instances of <b><code>Boolean</code></b>.  The default value is\r\n * null, which indicates that the standard Bidi algorithm for\r\n * determining run direction should be used with the value {@link\r\n * java.text.Bidi#DIRECTION_DEFAULT_LEFT_TO_RIGHT}.\r\n *\r\n * <p>The constants {@link #RUN_DIRECTION_RTL} and {@link\r\n * #RUN_DIRECTION_LTR} are provided.\r\n *\r\n * <p>This determines the value passed to the {@link\r\n * java.text.Bidi} constructor to select the primary direction of\r\n * the text in the paragraph.\r\n *\r\n * <p><em>Note:</em> This attribute should have the same value for\r\n * all the text in a paragraph, otherwise the behavior is\r\n * undetermined.\r\n *\r\n * @see java.text.Bidi\r\n */\r\npublic static final TextAttribute RUN_DIRECTION = new TextAttribute(\"run_direction\");","field_name":"RUN_DIRECTION","field_type":"java.awt.font.TextAttribute","full_declaration":"public static final java.awt.font.TextAttribute RUN_DIRECTION = new TextAttribute(\"run_direction\")","id":1545},{"comment":"/**\r\n * Left-to-right run direction.\r\n * @see #RUN_DIRECTION\r\n */\r\npublic static final Boolean RUN_DIRECTION_LTR = Boolean.FALSE;","field_name":"RUN_DIRECTION_LTR","field_type":"java.lang.Boolean","full_declaration":"public static final java.lang.Boolean RUN_DIRECTION_LTR = Boolean.FALSE","id":1546},{"comment":"/**\r\n * Right-to-left run direction.\r\n * @see #RUN_DIRECTION\r\n */\r\npublic static final Boolean RUN_DIRECTION_RTL = Boolean.TRUE;","field_name":"RUN_DIRECTION_RTL","field_type":"java.lang.Boolean","full_declaration":"public static final java.lang.Boolean RUN_DIRECTION_RTL = Boolean.TRUE","id":1547},{"comment":"/**\r\n * Attribute key for the embedding level of the text.  Values are\r\n * instances of <b><code>Integer</code></b>.  The default value is\r\n * <code>null</code>, indicating that the the Bidirectional\r\n * algorithm should run without explicit embeddings.\r\n *\r\n * <p>Positive values 1 through 61 are <em>embedding</em> levels,\r\n * negative values -1 through -61 are <em>override</em> levels.\r\n * The value 0 means that the base line direction is used.  These\r\n * levels are passed in the embedding levels array to the {@link\r\n * java.text.Bidi} constructor.\r\n *\r\n * <p><em>Note:</em> When this attribute is present anywhere in\r\n * a paragraph, then any Unicode bidi control characters (RLO,\r\n * LRO, RLE, LRE, and PDF) in the paragraph are\r\n * disregarded, and runs of text where this attribute is not\r\n * present are treated as though it were present and had the value\r\n * 0.\r\n *\r\n * @see java.text.Bidi\r\n */\r\npublic static final TextAttribute BIDI_EMBEDDING = new TextAttribute(\"bidi_embedding\");","field_name":"BIDI_EMBEDDING","field_type":"java.awt.font.TextAttribute","full_declaration":"public static final java.awt.font.TextAttribute BIDI_EMBEDDING = new TextAttribute(\"bidi_embedding\")","id":1548},{"comment":"/**\r\n * Attribute key for the justification of a paragraph.  Values are\r\n * instances of <b><code>Number</code></b>.  The default value is\r\n * 1, indicating that justification should use the full width\r\n * provided.  Values are pinned to the range [0..1].\r\n *\r\n * <p>The constants {@link #JUSTIFICATION_FULL} and {@link\r\n * #JUSTIFICATION_NONE} are provided.\r\n *\r\n * <p>Specifies the fraction of the extra space to use when\r\n * justification is requested on a <code>TextLayout</code>. For\r\n * example, if the line is 50 points wide and it is requested to\r\n * justify to 70 points, a value of 0.75 will pad to use\r\n * three-quarters of the remaining space, or 15 points, so that\r\n * the resulting line will be 65 points in length.\r\n *\r\n * <p><em>Note:</em> This should have the same value for all the\r\n * text in a paragraph, otherwise the behavior is undetermined.\r\n *\r\n * @see TextLayout#getJustifiedLayout\r\n */\r\npublic static final TextAttribute JUSTIFICATION = new TextAttribute(\"justification\");","field_name":"JUSTIFICATION","field_type":"java.awt.font.TextAttribute","full_declaration":"public static final java.awt.font.TextAttribute JUSTIFICATION = new TextAttribute(\"justification\")","id":1549},{"comment":"/**\r\n * Justify the line to the full requested width.  This is the\r\n * default value for <code>JUSTIFICATION</code>.\r\n * @see #JUSTIFICATION\r\n */\r\npublic static final Float JUSTIFICATION_FULL = Float.valueOf(1.0f);","field_name":"JUSTIFICATION_FULL","field_type":"java.lang.Float","full_declaration":"public static final java.lang.Float JUSTIFICATION_FULL = Float.valueOf(1.0f)","id":1550},{"comment":"/**\r\n * Do not allow the line to be justified.\r\n * @see #JUSTIFICATION\r\n */\r\npublic static final Float JUSTIFICATION_NONE = Float.valueOf(0.0f);","field_name":"JUSTIFICATION_NONE","field_type":"java.lang.Float","full_declaration":"public static final java.lang.Float JUSTIFICATION_NONE = Float.valueOf(0.0f)","id":1551},{"comment":"// \r\n// For use by input method.\r\n// \r\n/**\r\n * Attribute key for input method highlight styles.\r\n *\r\n * <p>Values are instances of {@link\r\n * java.awt.im.InputMethodHighlight} or {@link\r\n * java.text.Annotation}.  The default value is <code>null</code>,\r\n * which means that input method styles should not be applied\r\n * before rendering.\r\n *\r\n * <p>If adjacent runs of text with the same\r\n * <code>InputMethodHighlight</code> need to be rendered\r\n * separately, the <code>InputMethodHighlights</code> should be\r\n * wrapped in <code>Annotation</code> instances.\r\n *\r\n * <p>Input method highlights are used while text is being\r\n * composed by an input method. Text editing components should\r\n * retain them even if they generally only deal with unstyled\r\n * text, and make them available to the drawing routines.\r\n *\r\n * @see java.awt.Font\r\n * @see java.awt.im.InputMethodHighlight\r\n * @see java.text.Annotation\r\n */\r\npublic static final TextAttribute INPUT_METHOD_HIGHLIGHT = new TextAttribute(\"input method highlight\");","field_name":"INPUT_METHOD_HIGHLIGHT","field_type":"java.awt.font.TextAttribute","full_declaration":"public static final java.awt.font.TextAttribute INPUT_METHOD_HIGHLIGHT = new TextAttribute(\"input method highlight\")","id":1552},{"comment":"/**\r\n * Attribute key for input method underlines.  Values\r\n * are instances of <b><code>Integer</code></b>.  The default\r\n * value is <code>-1</code>, which means no underline.\r\n *\r\n * <p>Several constant values are provided, see {@link\r\n * #UNDERLINE_LOW_ONE_PIXEL}, {@link #UNDERLINE_LOW_TWO_PIXEL},\r\n * {@link #UNDERLINE_LOW_DOTTED}, {@link #UNDERLINE_LOW_GRAY}, and\r\n * {@link #UNDERLINE_LOW_DASHED}.\r\n *\r\n * <p>This may be used in conjunction with {@link #UNDERLINE} if\r\n * desired.  The primary purpose is for use by input methods.\r\n * Other use of these underlines for simple ornamentation might\r\n * confuse users.\r\n *\r\n * <p>The input method underline affects both the visual bounds and\r\n * the outline of the text.\r\n *\r\n * @since 1.3\r\n */\r\npublic static final TextAttribute INPUT_METHOD_UNDERLINE = new TextAttribute(\"input method underline\");","field_name":"INPUT_METHOD_UNDERLINE","field_type":"java.awt.font.TextAttribute","full_declaration":"public static final java.awt.font.TextAttribute INPUT_METHOD_UNDERLINE = new TextAttribute(\"input method underline\")","id":1553},{"comment":"/**\r\n * Single pixel solid low underline.\r\n * @see #INPUT_METHOD_UNDERLINE\r\n * @since 1.3\r\n */\r\npublic static final Integer UNDERLINE_LOW_ONE_PIXEL = Integer.valueOf(1);","field_name":"UNDERLINE_LOW_ONE_PIXEL","field_type":"java.lang.Integer","full_declaration":"public static final java.lang.Integer UNDERLINE_LOW_ONE_PIXEL = Integer.valueOf(1)","id":1554},{"comment":"/**\r\n * Double pixel solid low underline.\r\n * @see #INPUT_METHOD_UNDERLINE\r\n * @since 1.3\r\n */\r\npublic static final Integer UNDERLINE_LOW_TWO_PIXEL = Integer.valueOf(2);","field_name":"UNDERLINE_LOW_TWO_PIXEL","field_type":"java.lang.Integer","full_declaration":"public static final java.lang.Integer UNDERLINE_LOW_TWO_PIXEL = Integer.valueOf(2)","id":1555},{"comment":"/**\r\n * Single pixel dotted low underline.\r\n * @see #INPUT_METHOD_UNDERLINE\r\n * @since 1.3\r\n */\r\npublic static final Integer UNDERLINE_LOW_DOTTED = Integer.valueOf(3);","field_name":"UNDERLINE_LOW_DOTTED","field_type":"java.lang.Integer","full_declaration":"public static final java.lang.Integer UNDERLINE_LOW_DOTTED = Integer.valueOf(3)","id":1556},{"comment":"/**\r\n * Double pixel gray low underline.\r\n * @see #INPUT_METHOD_UNDERLINE\r\n * @since 1.3\r\n */\r\npublic static final Integer UNDERLINE_LOW_GRAY = Integer.valueOf(4);","field_name":"UNDERLINE_LOW_GRAY","field_type":"java.lang.Integer","full_declaration":"public static final java.lang.Integer UNDERLINE_LOW_GRAY = Integer.valueOf(4)","id":1557},{"comment":"/**\r\n * Single pixel dashed low underline.\r\n * @see #INPUT_METHOD_UNDERLINE\r\n * @since 1.3\r\n */\r\npublic static final Integer UNDERLINE_LOW_DASHED = Integer.valueOf(5);","field_name":"UNDERLINE_LOW_DASHED","field_type":"java.lang.Integer","full_declaration":"public static final java.lang.Integer UNDERLINE_LOW_DASHED = Integer.valueOf(5)","id":1558},{"comment":"/**\r\n * Attribute key for swapping foreground and background\r\n * <code>Paints</code>.  Values are instances of\r\n * <b><code>Boolean</code></b>.  The default value is\r\n * <code>false</code>, which means do not swap colors.\r\n *\r\n * <p>The constant value {@link #SWAP_COLORS_ON} is defined.\r\n *\r\n * <p>If the {@link #FOREGROUND} attribute is set, its\r\n * <code>Paint</code> will be used as the background, otherwise\r\n * the <code>Paint</code> currently on the <code>Graphics</code>\r\n * will be used.  If the {@link #BACKGROUND} attribute is set, its\r\n * <code>Paint</code> will be used as the foreground, otherwise\r\n * the system will find a contrasting color to the\r\n * (resolved) background so that the text will be visible.\r\n *\r\n * @see #FOREGROUND\r\n * @see #BACKGROUND\r\n */\r\npublic static final TextAttribute SWAP_COLORS = new TextAttribute(\"swap_colors\");","field_name":"SWAP_COLORS","field_type":"java.awt.font.TextAttribute","full_declaration":"public static final java.awt.font.TextAttribute SWAP_COLORS = new TextAttribute(\"swap_colors\")","id":1559},{"comment":"/**\r\n * Swap foreground and background.\r\n * @see #SWAP_COLORS\r\n * @since 1.3\r\n */\r\npublic static final Boolean SWAP_COLORS_ON = Boolean.TRUE;","field_name":"SWAP_COLORS_ON","field_type":"java.lang.Boolean","full_declaration":"public static final java.lang.Boolean SWAP_COLORS_ON = Boolean.TRUE","id":1560},{"comment":"/**\r\n * Attribute key for converting ASCII decimal digits to other\r\n * decimal ranges.  Values are instances of {@link NumericShaper}.\r\n * The default is <code>null</code>, which means do not perform\r\n * numeric shaping.\r\n *\r\n * <p>When a numeric shaper is defined, the text is first\r\n * processed by the shaper before any other analysis of the text\r\n * is performed.\r\n *\r\n * <p><em>Note:</em> This should have the same value for all the\r\n * text in the paragraph, otherwise the behavior is undetermined.\r\n *\r\n * @see NumericShaper\r\n * @since 1.4\r\n */\r\npublic static final TextAttribute NUMERIC_SHAPING = new TextAttribute(\"numeric_shaping\");","field_name":"NUMERIC_SHAPING","field_type":"java.awt.font.TextAttribute","full_declaration":"public static final java.awt.font.TextAttribute NUMERIC_SHAPING = new TextAttribute(\"numeric_shaping\")","id":1561},{"comment":"/**\r\n * Attribute key to request kerning. Values are instances of\r\n * <b><code>Integer</code></b>.  The default value is\r\n * <code>0</code>, which does not request kerning.\r\n *\r\n * <p>The constant value {@link #KERNING_ON} is provided.\r\n *\r\n * <p>The default advances of single characters are not\r\n * appropriate for some character sequences, for example \"To\" or\r\n * \"AWAY\".  Without kerning the adjacent characters appear to be\r\n * separated by too much space.  Kerning causes selected sequences\r\n * of characters to be spaced differently for a more pleasing\r\n * visual appearance.\r\n *\r\n * @since 1.6\r\n */\r\npublic static final TextAttribute KERNING = new TextAttribute(\"kerning\");","field_name":"KERNING","field_type":"java.awt.font.TextAttribute","full_declaration":"public static final java.awt.font.TextAttribute KERNING = new TextAttribute(\"kerning\")","id":1562},{"comment":"/**\r\n * Request standard kerning.\r\n * @see #KERNING\r\n * @since 1.6\r\n */\r\npublic static final Integer KERNING_ON = Integer.valueOf(1);","field_name":"KERNING_ON","field_type":"java.lang.Integer","full_declaration":"public static final java.lang.Integer KERNING_ON = Integer.valueOf(1)","id":1563},{"comment":"/**\r\n * Attribute key for enabling optional ligatures. Values are\r\n * instances of <b><code>Integer</code></b>.  The default value is\r\n * <code>0</code>, which means do not use optional ligatures.\r\n *\r\n * <p>The constant value {@link #LIGATURES_ON} is defined.\r\n *\r\n * <p>Ligatures required by the writing system are always enabled.\r\n *\r\n * @since 1.6\r\n */\r\npublic static final TextAttribute LIGATURES = new TextAttribute(\"ligatures\");","field_name":"LIGATURES","field_type":"java.awt.font.TextAttribute","full_declaration":"public static final java.awt.font.TextAttribute LIGATURES = new TextAttribute(\"ligatures\")","id":1564},{"comment":"/**\r\n * Request standard optional ligatures.\r\n * @see #LIGATURES\r\n * @since 1.6\r\n */\r\npublic static final Integer LIGATURES_ON = Integer.valueOf(1);","field_name":"LIGATURES_ON","field_type":"java.lang.Integer","full_declaration":"public static final java.lang.Integer LIGATURES_ON = Integer.valueOf(1)","id":1565},{"comment":"/**\r\n * Attribute key to control tracking.  Values are instances of\r\n * <b><code>Number</code></b>.  The default value is\r\n * <code>0</code>, which means no additional tracking.\r\n *\r\n * <p>The constant values {@link #TRACKING_TIGHT} and {@link\r\n * #TRACKING_LOOSE} are provided.\r\n *\r\n * <p>The tracking value is multiplied by the font point size and\r\n * passed through the font transform to determine an additional\r\n * amount to add to the advance of each glyph cluster.  Positive\r\n * tracking values will inhibit formation of optional ligatures.\r\n * Tracking values are typically between <code>-0.1</code> and\r\n * <code>0.3</code>; values outside this range are generally not\r\n * desireable.\r\n *\r\n * @since 1.6\r\n */\r\npublic static final TextAttribute TRACKING = new TextAttribute(\"tracking\");","field_name":"TRACKING","field_type":"java.awt.font.TextAttribute","full_declaration":"public static final java.awt.font.TextAttribute TRACKING = new TextAttribute(\"tracking\")","id":1566},{"comment":"/**\r\n * Perform tight tracking.\r\n * @see #TRACKING\r\n * @since 1.6\r\n */\r\npublic static final Float TRACKING_TIGHT = Float.valueOf(-.04f);","field_name":"TRACKING_TIGHT","field_type":"java.lang.Float","full_declaration":"public static final java.lang.Float TRACKING_TIGHT = Float.valueOf(-.04f)","id":1567},{"comment":"/**\r\n * Perform loose tracking.\r\n * @see #TRACKING\r\n * @since 1.6\r\n */\r\npublic static final Float TRACKING_LOOSE = Float.valueOf(.04f);","field_name":"TRACKING_LOOSE","field_type":"java.lang.Float","full_declaration":"public static final java.lang.Float TRACKING_LOOSE = Float.valueOf(.04f)","id":1568},{"comment":"","field_name":"charIndex","field_type":"int","full_declaration":"private int charIndex","id":1569},{"comment":"","field_name":"isLeadingEdge","field_type":"boolean","full_declaration":"private boolean isLeadingEdge","id":1570},{"comment":"","field_name":"info","field_type":"GlyphJustificationInfo[]","full_declaration":"private GlyphJustificationInfo[] info","id":1571},{"comment":"","field_name":"start","field_type":"int","full_declaration":"private int start","id":1572},{"comment":"","field_name":"limit","field_type":"int","full_declaration":"private int limit","id":1573},{"comment":"","field_name":"DEBUG","field_type":"boolean","full_declaration":"static boolean DEBUG = false","id":1574},{"comment":"","field_name":"MAX_PRIORITY","field_type":"int","full_declaration":"public static final int MAX_PRIORITY = 3","id":1575},{"comment":"","field_name":"characterCount","field_type":"int","full_declaration":"private int characterCount","id":1576},{"comment":"","field_name":"isVerticalLine","field_type":"boolean","full_declaration":"private boolean isVerticalLine = false","id":1577},{"comment":"","field_name":"baseline","field_type":"byte","full_declaration":"private byte baseline","id":1578},{"comment":"// why have these ?\r\n","field_name":"baselineOffsets","field_type":"float[]","full_declaration":"private float[] baselineOffsets","id":1579},{"comment":"private TextLine textLine;","field_name":"textLine","field_type":"java.awt.font.TextLine","full_declaration":"private java.awt.font.TextLine textLine","id":1580},{"comment":"// cached values computed from GlyphSets and set info:\r\n// all are recomputed from scratch in buildCache()\r\nprivate TextLine.TextLineMetrics lineMetrics = null;","field_name":"lineMetrics","field_type":"java.awt.font.TextLine.TextLineMetrics","full_declaration":"private java.awt.font.TextLine.TextLineMetrics lineMetrics = null","id":1581},{"comment":"","field_name":"visibleAdvance","field_type":"float","full_declaration":"private float visibleAdvance","id":1582},{"comment":"","field_name":"hashCodeCache","field_type":"int","full_declaration":"private int hashCodeCache","id":1583},{"comment":"/*\r\n     * TextLayouts are supposedly immutable.  If you mutate a TextLayout under\r\n     * the covers (like the justification code does) you'll need to set this\r\n     * back to false.  Could be replaced with textLine != null <--> cacheIsValid.\r\n     */\r\n","field_name":"cacheIsValid","field_type":"boolean","full_declaration":"private boolean cacheIsValid = false","id":1584},{"comment":"// This value is obtained from an attribute, and constrained to the\r\n// interval [0,1].  If 0, the layout cannot be justified.\r\n","field_name":"justifyRatio","field_type":"float","full_declaration":"private float justifyRatio","id":1585},{"comment":"// If a layout is produced by justification, then that layout\r\n// cannot be justified.  To enforce this constraint the\r\n// justifyRatio of the justified layout is set to this value.\r\n","field_name":"ALREADY_JUSTIFIED","field_type":"float","full_declaration":"private static final float ALREADY_JUSTIFIED = -53.9f","id":1586},{"comment":"// dx and dy specify the distance between the TextLayout's origin\r\n// and the origin of the leftmost GlyphSet (TextLayoutComponent,\r\n// actually).  They were used for hanging punctuation support,\r\n// which is no longer implemented.  Currently they are both always 0,\r\n// and TextLayout is not guaranteed to work with non-zero dx, dy\r\n// values right now.  They were left in as an aide and reminder to\r\n// anyone who implements hanging punctuation or other similar stuff.\r\n// They are static now so they don't take up space in TextLayout\r\n// instances.\r\n","field_name":"dx","field_type":"float","full_declaration":"private static float dx","id":1587},{"comment":"","field_name":"dy","field_type":"float","full_declaration":"private static float dy","id":1588},{"comment":"/*\r\n     * Natural bounds is used internally.  It is built on demand in\r\n     * getNaturalBounds.\r\n     */\r\nprivate Rectangle2D naturalBounds = null;","field_name":"naturalBounds","field_type":"java.awt.geom.Rectangle2D","full_declaration":"private java.awt.geom.Rectangle2D naturalBounds = null","id":1589},{"comment":"/*\r\n     * boundsRect encloses all of the bits this TextLayout can draw.  It\r\n     * is build on demand in getBounds.\r\n     */\r\nprivate Rectangle2D boundsRect = null;","field_name":"boundsRect","field_type":"java.awt.geom.Rectangle2D","full_declaration":"private java.awt.geom.Rectangle2D boundsRect = null","id":1590},{"comment":"/*\r\n     * flag to supress/allow carets inside of ligatures when hit testing or\r\n     * arrow-keying\r\n     */\r\n","field_name":"caretsInLigaturesAreAllowed","field_type":"boolean","full_declaration":"private boolean caretsInLigaturesAreAllowed = false","id":1591},{"comment":"/**\r\n * This <code>CaretPolicy</code> is used when a policy is not specified\r\n * by the client.  With this policy, a hit on a character whose direction\r\n * is the same as the line direction is stronger than a hit on a\r\n * counterdirectional character.  If the characters' directions are\r\n * the same, a hit on the leading edge of a character is stronger\r\n * than a hit on the trailing edge of a character.\r\n */\r\npublic static final CaretPolicy DEFAULT_CARET_POLICY = new CaretPolicy();","field_name":"DEFAULT_CARET_POLICY","field_type":"java.awt.font.TextLayout.CaretPolicy","full_declaration":"public static final java.awt.font.TextLayout.CaretPolicy DEFAULT_CARET_POLICY = new CaretPolicy()","id":1592},{"comment":"","field_name":"fComponents","field_type":"TextLineComponent[]","full_declaration":"private TextLineComponent[] fComponents","id":1593},{"comment":"","field_name":"fBaselineOffsets","field_type":"float[]","full_declaration":"private float[] fBaselineOffsets","id":1594},{"comment":"// if null, ltr\r\n","field_name":"fComponentVisualOrder","field_type":"int[]","full_declaration":"private int[] fComponentVisualOrder","id":1595},{"comment":"// x,y pairs for components in visual order\r\n","field_name":"locs","field_type":"float[]","full_declaration":"private float[] locs","id":1596},{"comment":"","field_name":"fChars","field_type":"char[]","full_declaration":"private char[] fChars","id":1597},{"comment":"","field_name":"fCharsStart","field_type":"int","full_declaration":"private int fCharsStart","id":1598},{"comment":"","field_name":"fCharsLimit","field_type":"int","full_declaration":"private int fCharsLimit","id":1599},{"comment":"// if null, ltr\r\n","field_name":"fCharVisualOrder","field_type":"int[]","full_declaration":"private int[] fCharVisualOrder","id":1600},{"comment":"// if null, ltr\r\n","field_name":"fCharLogicalOrder","field_type":"int[]","full_declaration":"private int[] fCharLogicalOrder","id":1601},{"comment":"// if null, 0\r\n","field_name":"fCharLevels","field_type":"byte[]","full_declaration":"private byte[] fCharLevels","id":1602},{"comment":"","field_name":"fIsDirectionLTR","field_type":"boolean","full_declaration":"private boolean fIsDirectionLTR","id":1603},{"comment":"private LayoutPathImpl lp;","field_name":"lp","field_type":"sun.font.LayoutPathImpl","full_declaration":"private sun.font.LayoutPathImpl lp","id":1604},{"comment":"","field_name":"isSimple","field_type":"boolean","full_declaration":"private boolean isSimple","id":1605},{"comment":"private Rectangle pixelBounds;","field_name":"pixelBounds","field_type":"java.awt.Rectangle","full_declaration":"private java.awt.Rectangle pixelBounds","id":1606},{"comment":"private FontRenderContext frc;","field_name":"frc","field_type":"java.awt.font.FontRenderContext","full_declaration":"private java.awt.font.FontRenderContext frc","id":1607},{"comment":"// built on demand in getMetrics\r\nprivate TextLineMetrics fMetrics = null;","field_name":"fMetrics","field_type":"java.awt.font.TextLine.TextLineMetrics","full_declaration":"private java.awt.font.TextLine.TextLineMetrics fMetrics = null","id":1608},{"comment":"private static Function fgPosAdvF = new Function() {\r\n\r\n    float computeFunction(TextLine line, int componentIndex, int indexInArray) {\r\n        TextLineComponent tlc = line.fComponents[componentIndex];\r\n        int vi = line.getComponentVisualIndex(componentIndex);\r\n        return line.locs[vi * 2] + tlc.getCharX(indexInArray) + tlc.getCharAdvance(indexInArray);\r\n    }\r\n};","field_name":"fgPosAdvF","field_type":"java.awt.font.TextLine.Function","full_declaration":"private static java.awt.font.TextLine.Function fgPosAdvF = new Function() {\r\n\r\n    float computeFunction(TextLine line, int componentIndex, int indexInArray) {\r\n        TextLineComponent tlc = line.fComponents[componentIndex];\r\n        int vi = line.getComponentVisualIndex(componentIndex);\r\n        return line.locs[vi * 2] + tlc.getCharX(indexInArray) + tlc.getCharAdvance(indexInArray);\r\n    }\r\n}","id":1609},{"comment":"private static Function fgAdvanceF = new Function() {\r\n\r\n    float computeFunction(TextLine line, int componentIndex, int indexInArray) {\r\n        TextLineComponent tlc = line.fComponents[componentIndex];\r\n        return tlc.getCharAdvance(indexInArray);\r\n    }\r\n};","field_name":"fgAdvanceF","field_type":"java.awt.font.TextLine.Function","full_declaration":"private static java.awt.font.TextLine.Function fgAdvanceF = new Function() {\r\n\r\n    float computeFunction(TextLine line, int componentIndex, int indexInArray) {\r\n        TextLineComponent tlc = line.fComponents[componentIndex];\r\n        return tlc.getCharAdvance(indexInArray);\r\n    }\r\n}","id":1610},{"comment":"private static Function fgXPositionF = new Function() {\r\n\r\n    float computeFunction(TextLine line, int componentIndex, int indexInArray) {\r\n        int vi = line.getComponentVisualIndex(componentIndex);\r\n        TextLineComponent tlc = line.fComponents[componentIndex];\r\n        return line.locs[vi * 2] + tlc.getCharX(indexInArray);\r\n    }\r\n};","field_name":"fgXPositionF","field_type":"java.awt.font.TextLine.Function","full_declaration":"private static java.awt.font.TextLine.Function fgXPositionF = new Function() {\r\n\r\n    float computeFunction(TextLine line, int componentIndex, int indexInArray) {\r\n        int vi = line.getComponentVisualIndex(componentIndex);\r\n        TextLineComponent tlc = line.fComponents[componentIndex];\r\n        return line.locs[vi * 2] + tlc.getCharX(indexInArray);\r\n    }\r\n}","id":1611},{"comment":"private static Function fgYPositionF = new Function() {\r\n\r\n    float computeFunction(TextLine line, int componentIndex, int indexInArray) {\r\n        TextLineComponent tlc = line.fComponents[componentIndex];\r\n        float charPos = tlc.getCharY(indexInArray);\r\n        // charPos is relative to the component - adjust for\r\n        // baseline\r\n        return charPos + line.getComponentShift(componentIndex);\r\n    }\r\n};","field_name":"fgYPositionF","field_type":"java.awt.font.TextLine.Function","full_declaration":"private static java.awt.font.TextLine.Function fgYPositionF = new Function() {\r\n\r\n    float computeFunction(TextLine line, int componentIndex, int indexInArray) {\r\n        TextLineComponent tlc = line.fComponents[componentIndex];\r\n        float charPos = tlc.getCharY(indexInArray);\r\n        // charPos is relative to the component - adjust for\r\n        // baseline\r\n        return charPos + line.getComponentShift(componentIndex);\r\n    }\r\n}","id":1612},{"comment":"","field_name":"ascent","field_type":"float","full_declaration":"public final float ascent","id":1613},{"comment":"","field_name":"descent","field_type":"float","full_declaration":"public final float descent","id":1614},{"comment":"","field_name":"leading","field_type":"float","full_declaration":"public final float leading","id":1615},{"comment":"","field_name":"advance","field_type":"float","full_declaration":"public final float advance","id":1616},{"comment":"// Number of lines to format to.\r\n","field_name":"EST_LINES","field_type":"float","full_declaration":"private static float EST_LINES = (float) 2.1","id":1617},{"comment":"/*\r\n    static {\r\n        String s = System.getProperty(\"estLines\");\r\n        if (s != null) {\r\n            try {\r\n                Float f = new Float(s);\r\n                EST_LINES = f.floatValue();\r\n            }\r\n            catch(NumberFormatException e) {\r\n            }\r\n        }\r\n        //System.out.println(\"EST_LINES=\"+EST_LINES);\r\n    }\r\n    */\r\nprivate FontRenderContext fFrc;","field_name":"fFrc","field_type":"java.awt.font.FontRenderContext","full_declaration":"private java.awt.font.FontRenderContext fFrc","id":1618},{"comment":"","field_name":"fStart","field_type":"int","full_declaration":"private int fStart","id":1619},{"comment":"// characters in source text\r\n","field_name":"fChars","field_type":"char[]","full_declaration":"private char[] fChars","id":1620},{"comment":"// Bidi for this paragraph\r\nprivate Bidi fBidi;","field_name":"fBidi","field_type":"java.text.Bidi","full_declaration":"private java.text.Bidi fBidi","id":1621},{"comment":"// Levels array for chars in this paragraph - needed to reorder\r\n// trailing counterdirectional whitespace\r\n","field_name":"fLevels","field_type":"byte[]","full_declaration":"private byte[] fLevels","id":1622},{"comment":"// line components in logical order\r\n","field_name":"fComponents","field_type":"TextLineComponent[]","full_declaration":"private TextLineComponent[] fComponents","id":1623},{"comment":"// index where components begin\r\n","field_name":"fComponentStart","field_type":"int","full_declaration":"private int fComponentStart","id":1624},{"comment":"// index where components end\r\n","field_name":"fComponentLimit","field_type":"int","full_declaration":"private int fComponentLimit","id":1625},{"comment":"","field_name":"haveLayoutWindow","field_type":"boolean","full_declaration":"private boolean haveLayoutWindow","id":1626},{"comment":"// used to find valid starting points for line components\r\nprivate BreakIterator fLineBreak = null;","field_name":"fLineBreak","field_type":"java.text.BreakIterator","full_declaration":"private java.text.BreakIterator fLineBreak = null","id":1627},{"comment":"private CharArrayIterator charIter = null;","field_name":"charIter","field_type":"java.awt.font.CharArrayIterator","full_declaration":"private java.awt.font.CharArrayIterator charIter = null","id":1628},{"comment":"","field_name":"layoutCount","field_type":"int","full_declaration":"int layoutCount = 0","id":1629},{"comment":"","field_name":"layoutCharCount","field_type":"int","full_declaration":"int layoutCharCount = 0","id":1630},{"comment":"// paragraph, with resolved fonts and styles\r\nprivate StyledParagraph fParagraph;","field_name":"fParagraph","field_type":"java.awt.font.StyledParagraph","full_declaration":"private java.awt.font.StyledParagraph fParagraph","id":1631},{"comment":"// paragraph data - same across all layouts\r\n","field_name":"fIsDirectionLTR","field_type":"boolean","full_declaration":"private boolean fIsDirectionLTR","id":1632},{"comment":"","field_name":"fBaseline","field_type":"byte","full_declaration":"private byte fBaseline","id":1633},{"comment":"","field_name":"fBaselineOffsets","field_type":"float[]","full_declaration":"private float[] fBaselineOffsets","id":1634},{"comment":"","field_name":"fJustifyRatio","field_type":"float","full_declaration":"private float fJustifyRatio = 1","id":1635},{"comment":"","field_name":"formattedChars","field_type":"int","full_declaration":"private int formattedChars = 0","id":1636},{"comment":"","field_name":"wantStats","field_type":"boolean","full_declaration":"private static boolean wantStats = false","id":1637},{"comment":"/*\"true\".equals(System.getProperty(\"collectStats\"));*/\r\n","field_name":"collectStats","field_type":"boolean","full_declaration":"private boolean collectStats = false","id":1638},{"comment":"/**\r\n * The <code>AffineTransform</code> for this\r\n * <code>TransformAttribute</code>, or <code>null</code>\r\n * if <code>AffineTransform</code> is the identity transform.\r\n */\r\nprivate AffineTransform transform;","field_name":"transform","field_type":"java.awt.geom.AffineTransform","full_declaration":"private java.awt.geom.AffineTransform transform","id":1639},{"comment":"/**\r\n * A <code>TransformAttribute</code> representing the identity transform.\r\n * @since 1.6\r\n */\r\npublic static final TransformAttribute IDENTITY = new TransformAttribute(null);","field_name":"IDENTITY","field_type":"java.awt.font.TransformAttribute","full_declaration":"public static final java.awt.font.TransformAttribute IDENTITY = new TransformAttribute(null)","id":1640},{"comment":"// Added for serial backwards compatibility (4348425)\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"static final long serialVersionUID = 3356247357827709530L","id":1641},{"comment":"/**\r\n * This is now only used during serialization.  Typically\r\n * it is null.\r\n *\r\n * @serial\r\n * @see #getAttributes()\r\n */\r\nprivate Hashtable<Object, Object> fRequestedAttributes;","field_name":"fRequestedAttributes","field_type":"java.util.Hashtable","full_declaration":"private java.util.Hashtable fRequestedAttributes","id":1642},{"comment":"/*\r\n     * Constants to be used for logical font family names.\r\n     */\r\n/**\r\n * A String constant for the canonical family name of the\r\n * logical font \"Dialog\". It is useful in Font construction\r\n * to provide compile-time verification of the name.\r\n * @since 1.6\r\n */\r\npublic static final String DIALOG = \"Dialog\";","field_name":"DIALOG","field_type":"java.lang.String","full_declaration":"public static final java.lang.String DIALOG = \"Dialog\"","id":1643},{"comment":"/**\r\n * A String constant for the canonical family name of the\r\n * logical font \"DialogInput\". It is useful in Font construction\r\n * to provide compile-time verification of the name.\r\n * @since 1.6\r\n */\r\npublic static final String DIALOG_INPUT = \"DialogInput\";","field_name":"DIALOG_INPUT","field_type":"java.lang.String","full_declaration":"public static final java.lang.String DIALOG_INPUT = \"DialogInput\"","id":1644},{"comment":"/**\r\n * A String constant for the canonical family name of the\r\n * logical font \"SansSerif\". It is useful in Font construction\r\n * to provide compile-time verification of the name.\r\n * @since 1.6\r\n */\r\npublic static final String SANS_SERIF = \"SansSerif\";","field_name":"SANS_SERIF","field_type":"java.lang.String","full_declaration":"public static final java.lang.String SANS_SERIF = \"SansSerif\"","id":1645},{"comment":"/**\r\n * A String constant for the canonical family name of the\r\n * logical font \"Serif\". It is useful in Font construction\r\n * to provide compile-time verification of the name.\r\n * @since 1.6\r\n */\r\npublic static final String SERIF = \"Serif\";","field_name":"SERIF","field_type":"java.lang.String","full_declaration":"public static final java.lang.String SERIF = \"Serif\"","id":1646},{"comment":"/**\r\n * A String constant for the canonical family name of the\r\n * logical font \"Monospaced\". It is useful in Font construction\r\n * to provide compile-time verification of the name.\r\n * @since 1.6\r\n */\r\npublic static final String MONOSPACED = \"Monospaced\";","field_name":"MONOSPACED","field_type":"java.lang.String","full_declaration":"public static final java.lang.String MONOSPACED = \"Monospaced\"","id":1647},{"comment":"/*\r\n     * Constants to be used for styles. Can be combined to mix\r\n     * styles.\r\n     */\r\n/**\r\n * The plain style constant.\r\n */\r\n","field_name":"PLAIN","field_type":"int","full_declaration":"public static final int PLAIN = 0","id":1648},{"comment":"/**\r\n * The bold style constant.  This can be combined with the other style\r\n * constants (except PLAIN) for mixed styles.\r\n */\r\n","field_name":"BOLD","field_type":"int","full_declaration":"public static final int BOLD = 1","id":1649},{"comment":"/**\r\n * The italicized style constant.  This can be combined with the other\r\n * style constants (except PLAIN) for mixed styles.\r\n */\r\n","field_name":"ITALIC","field_type":"int","full_declaration":"public static final int ITALIC = 2","id":1650},{"comment":"/**\r\n * The baseline used in most Roman scripts when laying out text.\r\n */\r\n","field_name":"ROMAN_BASELINE","field_type":"int","full_declaration":"public static final int ROMAN_BASELINE = 0","id":1651},{"comment":"/**\r\n * The baseline used in ideographic scripts like Chinese, Japanese,\r\n * and Korean when laying out text.\r\n */\r\n","field_name":"CENTER_BASELINE","field_type":"int","full_declaration":"public static final int CENTER_BASELINE = 1","id":1652},{"comment":"/**\r\n * The baseline used in Devanigiri and similar scripts when laying\r\n * out text.\r\n */\r\n","field_name":"HANGING_BASELINE","field_type":"int","full_declaration":"public static final int HANGING_BASELINE = 2","id":1653},{"comment":"/**\r\n * Identify a font resource of type TRUETYPE.\r\n * Used to specify a TrueType font resource to the\r\n * {@link #createFont} method.\r\n * The TrueType format was extended to become the OpenType\r\n * format, which adds support for fonts with Postscript outlines,\r\n * this tag therefore references these fonts, as well as those\r\n * with TrueType outlines.\r\n * @since 1.3\r\n */\r\n","field_name":"TRUETYPE_FONT","field_type":"int","full_declaration":"public static final int TRUETYPE_FONT = 0","id":1654},{"comment":"/**\r\n * Identify a font resource of type TYPE1.\r\n * Used to specify a Type1 font resource to the\r\n * {@link #createFont} method.\r\n * @since 1.5\r\n */\r\n","field_name":"TYPE1_FONT","field_type":"int","full_declaration":"public static final int TYPE1_FONT = 1","id":1655},{"comment":"/**\r\n * The logical name of this <code>Font</code>, as passed to the\r\n * constructor.\r\n * @since JDK1.0\r\n *\r\n * @serial\r\n * @see #getName\r\n */\r\nprotected String name;","field_name":"name","field_type":"java.lang.String","full_declaration":"protected java.lang.String name","id":1656},{"comment":"/**\r\n * The style of this <code>Font</code>, as passed to the constructor.\r\n * This style can be PLAIN, BOLD, ITALIC, or BOLD+ITALIC.\r\n * @since JDK1.0\r\n *\r\n * @serial\r\n * @see #getStyle()\r\n */\r\n","field_name":"style","field_type":"int","full_declaration":"protected int style","id":1657},{"comment":"/**\r\n * The point size of this <code>Font</code>, rounded to integer.\r\n * @since JDK1.0\r\n *\r\n * @serial\r\n * @see #getSize()\r\n */\r\n","field_name":"size","field_type":"int","full_declaration":"protected int size","id":1658},{"comment":"/**\r\n * The point size of this <code>Font</code> in <code>float</code>.\r\n *\r\n * @serial\r\n * @see #getSize()\r\n * @see #getSize2D()\r\n */\r\n","field_name":"pointSize","field_type":"float","full_declaration":"protected float pointSize","id":1659},{"comment":"/**\r\n * The platform specific font information.\r\n */\r\nprivate transient FontPeer peer;","field_name":"peer","field_type":"java.awt.peer.FontPeer","full_declaration":"private transient java.awt.peer.FontPeer peer","id":1660},{"comment":"// native JDK1.1 font pointer\r\n","field_name":"pData","field_type":"long","full_declaration":"private transient long pData","id":1661},{"comment":"private transient Font2DHandle font2DHandle;","field_name":"font2DHandle","field_type":"sun.font.Font2DHandle","full_declaration":"private transient sun.font.Font2DHandle font2DHandle","id":1662},{"comment":"private transient AttributeValues values;","field_name":"values","field_type":"sun.font.AttributeValues","full_declaration":"private transient sun.font.AttributeValues values","id":1663},{"comment":"","field_name":"hasLayoutAttributes","field_type":"boolean","full_declaration":"private transient boolean hasLayoutAttributes","id":1664},{"comment":"/*\r\n     * If the origin of a Font is a created font then this attribute\r\n     * must be set on all derived fonts too.\r\n     */\r\n","field_name":"createdFont","field_type":"boolean","full_declaration":"private transient boolean createdFont = false","id":1665},{"comment":"/*\r\n     * This is true if the font transform is not identity.  It\r\n     * is used to avoid unnecessary instantiation of an AffineTransform.\r\n     */\r\n","field_name":"nonIdentityTx","field_type":"boolean","full_declaration":"private transient boolean nonIdentityTx","id":1666},{"comment":"/*\r\n     * A cached value used when a transform is required for internal\r\n     * use.  This must not be exposed to callers since AffineTransform\r\n     * is mutable.\r\n     */\r\nprivate static final AffineTransform identityTx = new AffineTransform();","field_name":"identityTx","field_type":"java.awt.geom.AffineTransform","full_declaration":"private static final java.awt.geom.AffineTransform identityTx = new AffineTransform()","id":1667},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -4206021311591459213L","id":1668},{"comment":"/**\r\n * Font recognizes all attributes except FONT.\r\n */\r\n","field_name":"RECOGNIZED_MASK","field_type":"int","full_declaration":"private static final int RECOGNIZED_MASK = AttributeValues.MASK_ALL & ~AttributeValues.getMask(EFONT)","id":1669},{"comment":"/**\r\n * These attributes are considered primary by the FONT attribute.\r\n */\r\n","field_name":"PRIMARY_MASK","field_type":"int","full_declaration":"private static final int PRIMARY_MASK = AttributeValues.getMask(EFAMILY, EWEIGHT, EWIDTH, EPOSTURE, ESIZE, ETRANSFORM, ESUPERSCRIPT, ETRACKING)","id":1670},{"comment":"/**\r\n * These attributes are considered secondary by the FONT attribute.\r\n */\r\n","field_name":"SECONDARY_MASK","field_type":"int","full_declaration":"private static final int SECONDARY_MASK = RECOGNIZED_MASK & ~PRIMARY_MASK","id":1671},{"comment":"/**\r\n * These attributes are handled by layout.\r\n */\r\n","field_name":"LAYOUT_MASK","field_type":"int","full_declaration":"private static final int LAYOUT_MASK = AttributeValues.getMask(ECHAR_REPLACEMENT, EFOREGROUND, EBACKGROUND, EUNDERLINE, ESTRIKETHROUGH, ERUN_DIRECTION, EBIDI_EMBEDDING, EJUSTIFICATION, EINPUT_METHOD_HIGHLIGHT, EINPUT_METHOD_UNDERLINE, ESWAP_COLORS, ENUMERIC_SHAPING, EKERNING, ELIGATURES, ETRACKING, ESUPERSCRIPT)","id":1672},{"comment":"","field_name":"EXTRA_MASK","field_type":"int","full_declaration":"private static final int EXTRA_MASK = AttributeValues.getMask(ETRANSFORM, ESUPERSCRIPT, EWIDTH)","id":1673},{"comment":"// x = r^0 + r^1 + r^2... r^n\r\n// rx = r^1 + r^2 + r^3... r^(n+1)\r\n// x - rx = r^0 - r^(n+1)\r\n// x (1 - r) = r^0 - r^(n+1)\r\n// x = (r^0 - r^(n+1)) / (1 - r)\r\n// x = (1 - r^(n+1)) / (1 - r)\r\n// scale ratio is 2/3\r\n// trans = 1/2 of ascent * x\r\n// assume ascent is 3/4 of point size\r\n","field_name":"ssinfo","field_type":"float[]","full_declaration":"private static final float[] ssinfo = { 0.0f, 0.375f, 0.625f, 0.7916667f, 0.9027778f, 0.9768519f, 1.0262346f, 1.0591564f }","id":1674},{"comment":"","field_name":"hash","field_type":"int","full_declaration":"transient int hash","id":1675},{"comment":"// toString()\r\n/**\r\n * Serialization support.  A <code>readObject</code>\r\n *  method is neccessary because the constructor creates\r\n *  the font's peer, and we can't serialize the peer.\r\n *  Similarly the computed font \"family\" may be different\r\n *  at <code>readObject</code> time than at\r\n *  <code>writeObject</code> time.  An integer version is\r\n *  written so that future versions of this class will be\r\n *  able to recognize serialized output from this one.\r\n */\r\n/**\r\n * The <code>Font</code> Serializable Data Form.\r\n *\r\n * @serial\r\n */\r\n","field_name":"fontSerializedDataVersion","field_type":"int","full_declaration":"private int fontSerializedDataVersion = 1","id":1676},{"comment":"private transient SoftReference<FontLineMetrics> flmref;","field_name":"flmref","field_type":"java.lang.ref.SoftReference","full_declaration":"private transient java.lang.ref.SoftReference flmref","id":1677},{"comment":"/**\r\n * A flag to layoutGlyphVector indicating that text is left-to-right as\r\n * determined by Bidi analysis.\r\n */\r\n","field_name":"LAYOUT_LEFT_TO_RIGHT","field_type":"int","full_declaration":"public static final int LAYOUT_LEFT_TO_RIGHT = 0","id":1678},{"comment":"/**\r\n * A flag to layoutGlyphVector indicating that text is right-to-left as\r\n * determined by Bidi analysis.\r\n */\r\n","field_name":"LAYOUT_RIGHT_TO_LEFT","field_type":"int","full_declaration":"public static final int LAYOUT_RIGHT_TO_LEFT = 1","id":1679},{"comment":"/**\r\n * A flag to layoutGlyphVector indicating that text in the char array\r\n * before the indicated start should not be examined.\r\n */\r\n","field_name":"LAYOUT_NO_START_CONTEXT","field_type":"int","full_declaration":"public static final int LAYOUT_NO_START_CONTEXT = 2","id":1680},{"comment":"/**\r\n * A flag to layoutGlyphVector indicating that text in the char array\r\n * after the indicated limit should not be examined.\r\n */\r\n","field_name":"LAYOUT_NO_LIMIT_CONTEXT","field_type":"int","full_declaration":"public static final int LAYOUT_NO_LIMIT_CONTEXT = 4","id":1681},{"comment":"/*\r\n     * serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -4481290147811361272L","id":1682},{"comment":"private static final FontRenderContext DEFAULT_FRC = new FontRenderContext(null, false, false);","field_name":"DEFAULT_FRC","field_type":"java.awt.font.FontRenderContext","full_declaration":"private static final java.awt.font.FontRenderContext DEFAULT_FRC = new FontRenderContext(null, false, false)","id":1683},{"comment":"/**\r\n * The actual {@link Font} from which the font metrics are\r\n * created.\r\n * This cannot be null.\r\n *\r\n * @serial\r\n * @see #getFont()\r\n */\r\nprotected Font font;","field_name":"font","field_type":"java.awt.Font","full_declaration":"protected java.awt.Font font","id":1684},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 1681126225205050147L","id":1685},{"comment":"/* Note: These are being obsoleted;  programs should use the Cursor class\r\n     * variables going forward. See Cursor and Component.setCursor.\r\n     */\r\n/**\r\n * @deprecated   replaced by <code>Cursor.DEFAULT_CURSOR</code>.\r\n */\r\n@Deprecated\r\n","field_name":"DEFAULT_CURSOR","field_type":"int","full_declaration":"public static final int DEFAULT_CURSOR = Cursor.DEFAULT_CURSOR","id":1686},{"comment":"/**\r\n * @deprecated   replaced by <code>Cursor.CROSSHAIR_CURSOR</code>.\r\n */\r\n@Deprecated\r\n","field_name":"CROSSHAIR_CURSOR","field_type":"int","full_declaration":"public static final int CROSSHAIR_CURSOR = Cursor.CROSSHAIR_CURSOR","id":1687},{"comment":"/**\r\n * @deprecated   replaced by <code>Cursor.TEXT_CURSOR</code>.\r\n */\r\n@Deprecated\r\n","field_name":"TEXT_CURSOR","field_type":"int","full_declaration":"public static final int TEXT_CURSOR = Cursor.TEXT_CURSOR","id":1688},{"comment":"/**\r\n * @deprecated   replaced by <code>Cursor.WAIT_CURSOR</code>.\r\n */\r\n@Deprecated\r\n","field_name":"WAIT_CURSOR","field_type":"int","full_declaration":"public static final int WAIT_CURSOR = Cursor.WAIT_CURSOR","id":1689},{"comment":"/**\r\n * @deprecated   replaced by <code>Cursor.SW_RESIZE_CURSOR</code>.\r\n */\r\n@Deprecated\r\n","field_name":"SW_RESIZE_CURSOR","field_type":"int","full_declaration":"public static final int SW_RESIZE_CURSOR = Cursor.SW_RESIZE_CURSOR","id":1690},{"comment":"/**\r\n * @deprecated   replaced by <code>Cursor.SE_RESIZE_CURSOR</code>.\r\n */\r\n@Deprecated\r\n","field_name":"SE_RESIZE_CURSOR","field_type":"int","full_declaration":"public static final int SE_RESIZE_CURSOR = Cursor.SE_RESIZE_CURSOR","id":1691},{"comment":"/**\r\n * @deprecated   replaced by <code>Cursor.NW_RESIZE_CURSOR</code>.\r\n */\r\n@Deprecated\r\n","field_name":"NW_RESIZE_CURSOR","field_type":"int","full_declaration":"public static final int NW_RESIZE_CURSOR = Cursor.NW_RESIZE_CURSOR","id":1692},{"comment":"/**\r\n * @deprecated   replaced by <code>Cursor.NE_RESIZE_CURSOR</code>.\r\n */\r\n@Deprecated\r\n","field_name":"NE_RESIZE_CURSOR","field_type":"int","full_declaration":"public static final int NE_RESIZE_CURSOR = Cursor.NE_RESIZE_CURSOR","id":1693},{"comment":"/**\r\n * @deprecated   replaced by <code>Cursor.N_RESIZE_CURSOR</code>.\r\n */\r\n@Deprecated\r\n","field_name":"N_RESIZE_CURSOR","field_type":"int","full_declaration":"public static final int N_RESIZE_CURSOR = Cursor.N_RESIZE_CURSOR","id":1694},{"comment":"/**\r\n * @deprecated   replaced by <code>Cursor.S_RESIZE_CURSOR</code>.\r\n */\r\n@Deprecated\r\n","field_name":"S_RESIZE_CURSOR","field_type":"int","full_declaration":"public static final int S_RESIZE_CURSOR = Cursor.S_RESIZE_CURSOR","id":1695},{"comment":"/**\r\n * @deprecated   replaced by <code>Cursor.W_RESIZE_CURSOR</code>.\r\n */\r\n@Deprecated\r\n","field_name":"W_RESIZE_CURSOR","field_type":"int","full_declaration":"public static final int W_RESIZE_CURSOR = Cursor.W_RESIZE_CURSOR","id":1696},{"comment":"/**\r\n * @deprecated   replaced by <code>Cursor.E_RESIZE_CURSOR</code>.\r\n */\r\n@Deprecated\r\n","field_name":"E_RESIZE_CURSOR","field_type":"int","full_declaration":"public static final int E_RESIZE_CURSOR = Cursor.E_RESIZE_CURSOR","id":1697},{"comment":"/**\r\n * @deprecated   replaced by <code>Cursor.HAND_CURSOR</code>.\r\n */\r\n@Deprecated\r\n","field_name":"HAND_CURSOR","field_type":"int","full_declaration":"public static final int HAND_CURSOR = Cursor.HAND_CURSOR","id":1698},{"comment":"/**\r\n * @deprecated   replaced by <code>Cursor.MOVE_CURSOR</code>.\r\n */\r\n@Deprecated\r\n","field_name":"MOVE_CURSOR","field_type":"int","full_declaration":"public static final int MOVE_CURSOR = Cursor.MOVE_CURSOR","id":1699},{"comment":"/**\r\n * Frame is in the \"normal\" state.  This symbolic constant names a\r\n * frame state with all state bits cleared.\r\n * @see #setExtendedState(int)\r\n * @see #getExtendedState\r\n */\r\n","field_name":"NORMAL","field_type":"int","full_declaration":"public static final int NORMAL = 0","id":1700},{"comment":"/**\r\n * This state bit indicates that frame is iconified.\r\n * @see #setExtendedState(int)\r\n * @see #getExtendedState\r\n */\r\n","field_name":"ICONIFIED","field_type":"int","full_declaration":"public static final int ICONIFIED = 1","id":1701},{"comment":"/**\r\n * This state bit indicates that frame is maximized in the\r\n * horizontal direction.\r\n * @see #setExtendedState(int)\r\n * @see #getExtendedState\r\n * @since 1.4\r\n */\r\n","field_name":"MAXIMIZED_HORIZ","field_type":"int","full_declaration":"public static final int MAXIMIZED_HORIZ = 2","id":1702},{"comment":"/**\r\n * This state bit indicates that frame is maximized in the\r\n * vertical direction.\r\n * @see #setExtendedState(int)\r\n * @see #getExtendedState\r\n * @since 1.4\r\n */\r\n","field_name":"MAXIMIZED_VERT","field_type":"int","full_declaration":"public static final int MAXIMIZED_VERT = 4","id":1703},{"comment":"/**\r\n * This state bit mask indicates that frame is fully maximized\r\n * (that is both horizontally and vertically).  It is just a\r\n * convenience alias for\r\n * <code>MAXIMIZED_VERT&nbsp;|&nbsp;MAXIMIZED_HORIZ</code>.\r\n *\r\n * <p>Note that the correct test for frame being fully maximized is\r\n * <pre>\r\n *     (state &amp; Frame.MAXIMIZED_BOTH) == Frame.MAXIMIZED_BOTH\r\n * </pre>\r\n *\r\n * <p>To test is frame is maximized in <em>some</em> direction use\r\n * <pre>\r\n *     (state &amp; Frame.MAXIMIZED_BOTH) != 0\r\n * </pre>\r\n *\r\n * @see #setExtendedState(int)\r\n * @see #getExtendedState\r\n * @since 1.4\r\n */\r\n","field_name":"MAXIMIZED_BOTH","field_type":"int","full_declaration":"public static final int MAXIMIZED_BOTH = MAXIMIZED_VERT | MAXIMIZED_HORIZ","id":1704},{"comment":"/**\r\n * Maximized bounds for this frame.\r\n * @see     #setMaximizedBounds(Rectangle)\r\n * @see     #getMaximizedBounds\r\n * @serial\r\n * @since 1.4\r\n */\r\nRectangle maximizedBounds;","field_name":"maximizedBounds","field_type":"java.awt.Rectangle","full_declaration":"java.awt.Rectangle maximizedBounds","id":1705},{"comment":"/**\r\n * This is the title of the frame.  It can be changed\r\n * at any time.  <code>title</code> can be null and if\r\n * this is the case the <code>title</code> = \"\".\r\n *\r\n * @serial\r\n * @see #getTitle\r\n * @see #setTitle(String)\r\n */\r\nString title = \"Untitled\";","field_name":"title","field_type":"java.lang.String","full_declaration":"java.lang.String title = \"Untitled\"","id":1706},{"comment":"/**\r\n * The frames menubar.  If <code>menuBar</code> = null\r\n * the frame will not have a menubar.\r\n *\r\n * @serial\r\n * @see #getMenuBar\r\n * @see #setMenuBar(MenuBar)\r\n */\r\nMenuBar menuBar;","field_name":"menuBar","field_type":"java.awt.MenuBar","full_declaration":"java.awt.MenuBar menuBar","id":1707},{"comment":"/**\r\n * This field indicates whether the frame is resizable.\r\n * This property can be changed at any time.\r\n * <code>resizable</code> will be true if the frame is\r\n * resizable, otherwise it will be false.\r\n *\r\n * @serial\r\n * @see #isResizable()\r\n */\r\n","field_name":"resizable","field_type":"boolean","full_declaration":"boolean resizable = true","id":1708},{"comment":"/**\r\n * This field indicates whether the frame is undecorated.\r\n * This property can only be changed while the frame is not displayable.\r\n * <code>undecorated</code> will be true if the frame is\r\n * undecorated, otherwise it will be false.\r\n *\r\n * @serial\r\n * @see #setUndecorated(boolean)\r\n * @see #isUndecorated()\r\n * @see Component#isDisplayable()\r\n * @since 1.4\r\n */\r\n","field_name":"undecorated","field_type":"boolean","full_declaration":"boolean undecorated = false","id":1709},{"comment":"/**\r\n * <code>mbManagement</code> is only used by the Motif implementation.\r\n *\r\n * @serial\r\n */\r\n","field_name":"mbManagement","field_type":"boolean","full_declaration":"boolean mbManagement = false","id":1710},{"comment":"/* used only by the Motif impl. */\r\n// XXX: uwe: abuse old field for now\r\n// will need to take care of serialization\r\n","field_name":"state","field_type":"int","full_declaration":"private int state = NORMAL","id":1711},{"comment":"/*\r\n     * The Windows owned by the Frame.\r\n     * Note: in 1.2 this has been superceded by Window.ownedWindowList\r\n     *\r\n     * @serial\r\n     * @see java.awt.Window#ownedWindowList\r\n     */\r\nVector<Window> ownedWindows;","field_name":"ownedWindows","field_type":"java.util.Vector","full_declaration":"java.util.Vector ownedWindows","id":1712},{"comment":"private static final String base = \"frame\";","field_name":"base","field_type":"java.lang.String","full_declaration":"private static final java.lang.String base = \"frame\"","id":1713},{"comment":"","field_name":"nameCounter","field_type":"int","full_declaration":"private static int nameCounter = 0","id":1714},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 2673458971256075116L","id":1715},{"comment":"/* Serialization support.  If there's a MenuBar we restore\r\n     * its (transient) parent field here.  Likewise for top level\r\n     * windows that are \"owned\" by this frame.\r\n     */\r\n/**\r\n * <code>Frame</code>'s Serialized Data Version.\r\n *\r\n * @serial\r\n */\r\n","field_name":"frameSerializedDataVersion","field_type":"int","full_declaration":"private int frameSerializedDataVersion = 1","id":1716},{"comment":"/*\r\n         * JDK 1.3 serialVersionUID\r\n         */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -6172960752956030250L","id":1717},{"comment":"/*\r\n     * This constant is only useful for the cached type field.\r\n     * It indicates that the type has been decached and must be recalculated.\r\n     */\r\n","field_name":"TYPE_UNKNOWN","field_type":"int","full_declaration":"private static final int TYPE_UNKNOWN = -1","id":1718},{"comment":"/**\r\n * This constant indicates that the transform defined by this object\r\n * is an identity transform.\r\n * An identity transform is one in which the output coordinates are\r\n * always the same as the input coordinates.\r\n * If this transform is anything other than the identity transform,\r\n * the type will either be the constant GENERAL_TRANSFORM or a\r\n * combination of the appropriate flag bits for the various coordinate\r\n * conversions that this transform performs.\r\n * @see #TYPE_TRANSLATION\r\n * @see #TYPE_UNIFORM_SCALE\r\n * @see #TYPE_GENERAL_SCALE\r\n * @see #TYPE_FLIP\r\n * @see #TYPE_QUADRANT_ROTATION\r\n * @see #TYPE_GENERAL_ROTATION\r\n * @see #TYPE_GENERAL_TRANSFORM\r\n * @see #getType\r\n * @since 1.2\r\n */\r\n","field_name":"TYPE_IDENTITY","field_type":"int","full_declaration":"public static final int TYPE_IDENTITY = 0","id":1719},{"comment":"/**\r\n * This flag bit indicates that the transform defined by this object\r\n * performs a translation in addition to the conversions indicated\r\n * by other flag bits.\r\n * A translation moves the coordinates by a constant amount in x\r\n * and y without changing the length or angle of vectors.\r\n * @see #TYPE_IDENTITY\r\n * @see #TYPE_UNIFORM_SCALE\r\n * @see #TYPE_GENERAL_SCALE\r\n * @see #TYPE_FLIP\r\n * @see #TYPE_QUADRANT_ROTATION\r\n * @see #TYPE_GENERAL_ROTATION\r\n * @see #TYPE_GENERAL_TRANSFORM\r\n * @see #getType\r\n * @since 1.2\r\n */\r\n","field_name":"TYPE_TRANSLATION","field_type":"int","full_declaration":"public static final int TYPE_TRANSLATION = 1","id":1720},{"comment":"/**\r\n * This flag bit indicates that the transform defined by this object\r\n * performs a uniform scale in addition to the conversions indicated\r\n * by other flag bits.\r\n * A uniform scale multiplies the length of vectors by the same amount\r\n * in both the x and y directions without changing the angle between\r\n * vectors.\r\n * This flag bit is mutually exclusive with the TYPE_GENERAL_SCALE flag.\r\n * @see #TYPE_IDENTITY\r\n * @see #TYPE_TRANSLATION\r\n * @see #TYPE_GENERAL_SCALE\r\n * @see #TYPE_FLIP\r\n * @see #TYPE_QUADRANT_ROTATION\r\n * @see #TYPE_GENERAL_ROTATION\r\n * @see #TYPE_GENERAL_TRANSFORM\r\n * @see #getType\r\n * @since 1.2\r\n */\r\n","field_name":"TYPE_UNIFORM_SCALE","field_type":"int","full_declaration":"public static final int TYPE_UNIFORM_SCALE = 2","id":1721},{"comment":"/**\r\n * This flag bit indicates that the transform defined by this object\r\n * performs a general scale in addition to the conversions indicated\r\n * by other flag bits.\r\n * A general scale multiplies the length of vectors by different\r\n * amounts in the x and y directions without changing the angle\r\n * between perpendicular vectors.\r\n * This flag bit is mutually exclusive with the TYPE_UNIFORM_SCALE flag.\r\n * @see #TYPE_IDENTITY\r\n * @see #TYPE_TRANSLATION\r\n * @see #TYPE_UNIFORM_SCALE\r\n * @see #TYPE_FLIP\r\n * @see #TYPE_QUADRANT_ROTATION\r\n * @see #TYPE_GENERAL_ROTATION\r\n * @see #TYPE_GENERAL_TRANSFORM\r\n * @see #getType\r\n * @since 1.2\r\n */\r\n","field_name":"TYPE_GENERAL_SCALE","field_type":"int","full_declaration":"public static final int TYPE_GENERAL_SCALE = 4","id":1722},{"comment":"/**\r\n * This constant is a bit mask for any of the scale flag bits.\r\n * @see #TYPE_UNIFORM_SCALE\r\n * @see #TYPE_GENERAL_SCALE\r\n * @since 1.2\r\n */\r\n","field_name":"TYPE_MASK_SCALE","field_type":"int","full_declaration":"public static final int TYPE_MASK_SCALE = (TYPE_UNIFORM_SCALE | TYPE_GENERAL_SCALE)","id":1723},{"comment":"/**\r\n * This flag bit indicates that the transform defined by this object\r\n * performs a mirror image flip about some axis which changes the\r\n * normally right handed coordinate system into a left handed\r\n * system in addition to the conversions indicated by other flag bits.\r\n * A right handed coordinate system is one where the positive X\r\n * axis rotates counterclockwise to overlay the positive Y axis\r\n * similar to the direction that the fingers on your right hand\r\n * curl when you stare end on at your thumb.\r\n * A left handed coordinate system is one where the positive X\r\n * axis rotates clockwise to overlay the positive Y axis similar\r\n * to the direction that the fingers on your left hand curl.\r\n * There is no mathematical way to determine the angle of the\r\n * original flipping or mirroring transformation since all angles\r\n * of flip are identical given an appropriate adjusting rotation.\r\n * @see #TYPE_IDENTITY\r\n * @see #TYPE_TRANSLATION\r\n * @see #TYPE_UNIFORM_SCALE\r\n * @see #TYPE_GENERAL_SCALE\r\n * @see #TYPE_QUADRANT_ROTATION\r\n * @see #TYPE_GENERAL_ROTATION\r\n * @see #TYPE_GENERAL_TRANSFORM\r\n * @see #getType\r\n * @since 1.2\r\n */\r\n","field_name":"TYPE_FLIP","field_type":"int","full_declaration":"public static final int TYPE_FLIP = 64","id":1724},{"comment":"/* NOTE: TYPE_FLIP was added after GENERAL_TRANSFORM was in public\r\n     * circulation and the flag bits could no longer be conveniently\r\n     * renumbered without introducing binary incompatibility in outside\r\n     * code.\r\n     */\r\n/**\r\n * This flag bit indicates that the transform defined by this object\r\n * performs a quadrant rotation by some multiple of 90 degrees in\r\n * addition to the conversions indicated by other flag bits.\r\n * A rotation changes the angles of vectors by the same amount\r\n * regardless of the original direction of the vector and without\r\n * changing the length of the vector.\r\n * This flag bit is mutually exclusive with the TYPE_GENERAL_ROTATION flag.\r\n * @see #TYPE_IDENTITY\r\n * @see #TYPE_TRANSLATION\r\n * @see #TYPE_UNIFORM_SCALE\r\n * @see #TYPE_GENERAL_SCALE\r\n * @see #TYPE_FLIP\r\n * @see #TYPE_GENERAL_ROTATION\r\n * @see #TYPE_GENERAL_TRANSFORM\r\n * @see #getType\r\n * @since 1.2\r\n */\r\n","field_name":"TYPE_QUADRANT_ROTATION","field_type":"int","full_declaration":"public static final int TYPE_QUADRANT_ROTATION = 8","id":1725},{"comment":"/**\r\n * This flag bit indicates that the transform defined by this object\r\n * performs a rotation by an arbitrary angle in addition to the\r\n * conversions indicated by other flag bits.\r\n * A rotation changes the angles of vectors by the same amount\r\n * regardless of the original direction of the vector and without\r\n * changing the length of the vector.\r\n * This flag bit is mutually exclusive with the\r\n * TYPE_QUADRANT_ROTATION flag.\r\n * @see #TYPE_IDENTITY\r\n * @see #TYPE_TRANSLATION\r\n * @see #TYPE_UNIFORM_SCALE\r\n * @see #TYPE_GENERAL_SCALE\r\n * @see #TYPE_FLIP\r\n * @see #TYPE_QUADRANT_ROTATION\r\n * @see #TYPE_GENERAL_TRANSFORM\r\n * @see #getType\r\n * @since 1.2\r\n */\r\n","field_name":"TYPE_GENERAL_ROTATION","field_type":"int","full_declaration":"public static final int TYPE_GENERAL_ROTATION = 16","id":1726},{"comment":"/**\r\n * This constant is a bit mask for any of the rotation flag bits.\r\n * @see #TYPE_QUADRANT_ROTATION\r\n * @see #TYPE_GENERAL_ROTATION\r\n * @since 1.2\r\n */\r\n","field_name":"TYPE_MASK_ROTATION","field_type":"int","full_declaration":"public static final int TYPE_MASK_ROTATION = (TYPE_QUADRANT_ROTATION | TYPE_GENERAL_ROTATION)","id":1727},{"comment":"/**\r\n * This constant indicates that the transform defined by this object\r\n * performs an arbitrary conversion of the input coordinates.\r\n * If this transform can be classified by any of the above constants,\r\n * the type will either be the constant TYPE_IDENTITY or a\r\n * combination of the appropriate flag bits for the various coordinate\r\n * conversions that this transform performs.\r\n * @see #TYPE_IDENTITY\r\n * @see #TYPE_TRANSLATION\r\n * @see #TYPE_UNIFORM_SCALE\r\n * @see #TYPE_GENERAL_SCALE\r\n * @see #TYPE_FLIP\r\n * @see #TYPE_QUADRANT_ROTATION\r\n * @see #TYPE_GENERAL_ROTATION\r\n * @see #getType\r\n * @since 1.2\r\n */\r\n","field_name":"TYPE_GENERAL_TRANSFORM","field_type":"int","full_declaration":"public static final int TYPE_GENERAL_TRANSFORM = 32","id":1728},{"comment":"/**\r\n * This constant is used for the internal state variable to indicate\r\n * that no calculations need to be performed and that the source\r\n * coordinates only need to be copied to their destinations to\r\n * complete the transformation equation of this transform.\r\n * @see #APPLY_TRANSLATE\r\n * @see #APPLY_SCALE\r\n * @see #APPLY_SHEAR\r\n * @see #state\r\n */\r\n","field_name":"APPLY_IDENTITY","field_type":"int","full_declaration":"static final int APPLY_IDENTITY = 0","id":1729},{"comment":"/**\r\n * This constant is used for the internal state variable to indicate\r\n * that the translation components of the matrix (m02 and m12) need\r\n * to be added to complete the transformation equation of this transform.\r\n * @see #APPLY_IDENTITY\r\n * @see #APPLY_SCALE\r\n * @see #APPLY_SHEAR\r\n * @see #state\r\n */\r\n","field_name":"APPLY_TRANSLATE","field_type":"int","full_declaration":"static final int APPLY_TRANSLATE = 1","id":1730},{"comment":"/**\r\n * This constant is used for the internal state variable to indicate\r\n * that the scaling components of the matrix (m00 and m11) need\r\n * to be factored in to complete the transformation equation of\r\n * this transform.  If the APPLY_SHEAR bit is also set then it\r\n * indicates that the scaling components are not both 0.0.  If the\r\n * APPLY_SHEAR bit is not also set then it indicates that the\r\n * scaling components are not both 1.0.  If neither the APPLY_SHEAR\r\n * nor the APPLY_SCALE bits are set then the scaling components\r\n * are both 1.0, which means that the x and y components contribute\r\n * to the transformed coordinate, but they are not multiplied by\r\n * any scaling factor.\r\n * @see #APPLY_IDENTITY\r\n * @see #APPLY_TRANSLATE\r\n * @see #APPLY_SHEAR\r\n * @see #state\r\n */\r\n","field_name":"APPLY_SCALE","field_type":"int","full_declaration":"static final int APPLY_SCALE = 2","id":1731},{"comment":"/**\r\n * This constant is used for the internal state variable to indicate\r\n * that the shearing components of the matrix (m01 and m10) need\r\n * to be factored in to complete the transformation equation of this\r\n * transform.  The presence of this bit in the state variable changes\r\n * the interpretation of the APPLY_SCALE bit as indicated in its\r\n * documentation.\r\n * @see #APPLY_IDENTITY\r\n * @see #APPLY_TRANSLATE\r\n * @see #APPLY_SCALE\r\n * @see #state\r\n */\r\n","field_name":"APPLY_SHEAR","field_type":"int","full_declaration":"static final int APPLY_SHEAR = 4","id":1732},{"comment":"/*\r\n     * For methods which combine together the state of two separate\r\n     * transforms and dispatch based upon the combination, these constants\r\n     * specify how far to shift one of the states so that the two states\r\n     * are mutually non-interfering and provide constants for testing the\r\n     * bits of the shifted (HI) state.  The methods in this class use\r\n     * the convention that the state of \"this\" transform is unshifted and\r\n     * the state of the \"other\" or \"argument\" transform is shifted (HI).\r\n     */\r\n","field_name":"HI_SHIFT","field_type":"int","full_declaration":"private static final int HI_SHIFT = 3","id":1733},{"comment":"","field_name":"HI_IDENTITY","field_type":"int","full_declaration":"private static final int HI_IDENTITY = APPLY_IDENTITY << HI_SHIFT","id":1734},{"comment":"","field_name":"HI_TRANSLATE","field_type":"int","full_declaration":"private static final int HI_TRANSLATE = APPLY_TRANSLATE << HI_SHIFT","id":1735},{"comment":"","field_name":"HI_SCALE","field_type":"int","full_declaration":"private static final int HI_SCALE = APPLY_SCALE << HI_SHIFT","id":1736},{"comment":"","field_name":"HI_SHEAR","field_type":"int","full_declaration":"private static final int HI_SHEAR = APPLY_SHEAR << HI_SHIFT","id":1737},{"comment":"/**\r\n * The X coordinate scaling element of the 3x3\r\n * affine transformation matrix.\r\n *\r\n * @serial\r\n */\r\n","field_name":"m00","field_type":"double","full_declaration":"double m00","id":1738},{"comment":"/**\r\n * The Y coordinate shearing element of the 3x3\r\n * affine transformation matrix.\r\n *\r\n * @serial\r\n */\r\n","field_name":"m10","field_type":"double","full_declaration":"double m10","id":1739},{"comment":"/**\r\n * The X coordinate shearing element of the 3x3\r\n * affine transformation matrix.\r\n *\r\n * @serial\r\n */\r\n","field_name":"m01","field_type":"double","full_declaration":"double m01","id":1740},{"comment":"/**\r\n * The Y coordinate scaling element of the 3x3\r\n * affine transformation matrix.\r\n *\r\n * @serial\r\n */\r\n","field_name":"m11","field_type":"double","full_declaration":"double m11","id":1741},{"comment":"/**\r\n * The X coordinate of the translation element of the\r\n * 3x3 affine transformation matrix.\r\n *\r\n * @serial\r\n */\r\n","field_name":"m02","field_type":"double","full_declaration":"double m02","id":1742},{"comment":"/**\r\n * The Y coordinate of the translation element of the\r\n * 3x3 affine transformation matrix.\r\n *\r\n * @serial\r\n */\r\n","field_name":"m12","field_type":"double","full_declaration":"double m12","id":1743},{"comment":"/**\r\n * This field keeps track of which components of the matrix need to\r\n * be applied when performing a transformation.\r\n * @see #APPLY_IDENTITY\r\n * @see #APPLY_TRANSLATE\r\n * @see #APPLY_SCALE\r\n * @see #APPLY_SHEAR\r\n */\r\n","field_name":"state","field_type":"int","full_declaration":"transient int state","id":1744},{"comment":"/**\r\n * This field caches the current transformation type of the matrix.\r\n * @see #TYPE_IDENTITY\r\n * @see #TYPE_TRANSLATION\r\n * @see #TYPE_UNIFORM_SCALE\r\n * @see #TYPE_GENERAL_SCALE\r\n * @see #TYPE_FLIP\r\n * @see #TYPE_QUADRANT_ROTATION\r\n * @see #TYPE_GENERAL_ROTATION\r\n * @see #TYPE_GENERAL_TRANSFORM\r\n * @see #TYPE_UNKNOWN\r\n * @see #getType\r\n */\r\n","field_name":"type","field_type":"int","full_declaration":"private transient int type","id":1745},{"comment":"// Utility methods to optimize rotate methods.\r\n// These tables translate the flags during predictable quadrant\r\n// rotations where the shear and scale values are swapped and negated.\r\n","field_name":"rot90conversion","field_type":"int[]","full_declaration":"private static final int[] rot90conversion = { /* IDENTITY => */\r\nAPPLY_SHEAR, /* TRANSLATE (TR) => */\r\nAPPLY_SHEAR | APPLY_TRANSLATE, /* SCALE (SC) => */\r\nAPPLY_SHEAR, /* SC | TR => */\r\nAPPLY_SHEAR | APPLY_TRANSLATE, /* SHEAR (SH) => */\r\nAPPLY_SCALE, /* SH | TR => */\r\nAPPLY_SCALE | APPLY_TRANSLATE, /* SH | SC => */\r\nAPPLY_SHEAR | APPLY_SCALE, /* SH | SC | TR => */\r\nAPPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE }","id":1746},{"comment":"/* Serialization support.  A readObject method is neccessary because\r\n     * the state field is part of the implementation of this particular\r\n     * AffineTransform and not part of the public specification.  The\r\n     * state variable's value needs to be recalculated on the fly by the\r\n     * readObject method as it is in the 6-argument matrix constructor.\r\n     */\r\n/*\r\n     * JDK 1.2 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 1330973210523860834L","id":1747},{"comment":"/**\r\n * The closure type for an open arc with no path segments\r\n * connecting the two ends of the arc segment.\r\n * @since 1.2\r\n */\r\n","field_name":"OPEN","field_type":"int","full_declaration":"public final static int OPEN = 0","id":1748},{"comment":"/**\r\n * The closure type for an arc closed by drawing a straight\r\n * line segment from the start of the arc segment to the end of the\r\n * arc segment.\r\n * @since 1.2\r\n */\r\n","field_name":"CHORD","field_type":"int","full_declaration":"public final static int CHORD = 1","id":1749},{"comment":"/**\r\n * The closure type for an arc closed by drawing straight line\r\n * segments from the start of the arc segment to the center\r\n * of the full ellipse and from that point to the end of the arc segment.\r\n * @since 1.2\r\n */\r\n","field_name":"PIE","field_type":"int","full_declaration":"public final static int PIE = 2","id":1750},{"comment":"","field_name":"type","field_type":"int","full_declaration":"private int type","id":1751},{"comment":"/**\r\n * The X coordinate of the upper-left corner of the framing\r\n * rectangle of the arc.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"x","field_type":"float","full_declaration":"public float x","id":1752},{"comment":"/**\r\n * The Y coordinate of the upper-left corner of the framing\r\n * rectangle of the arc.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"y","field_type":"float","full_declaration":"public float y","id":1753},{"comment":"/**\r\n * The overall width of the full ellipse of which this arc is\r\n * a partial section (not considering the\r\n * angular extents).\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"width","field_type":"float","full_declaration":"public float width","id":1754},{"comment":"/**\r\n * The overall height of the full ellipse of which this arc is\r\n * a partial section (not considering the\r\n * angular extents).\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"height","field_type":"float","full_declaration":"public float height","id":1755},{"comment":"/**\r\n * The starting angle of the arc in degrees.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"start","field_type":"float","full_declaration":"public float start","id":1756},{"comment":"/**\r\n * The angular extent of the arc in degrees.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"extent","field_type":"float","full_declaration":"public float extent","id":1757},{"comment":"/*\r\n         * JDK 1.6 serialVersionUID\r\n         */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 9130893014586380278L","id":1758},{"comment":"/**\r\n * The X coordinate of the upper-left corner of the framing\r\n * rectangle of the arc.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"x","field_type":"double","full_declaration":"public double x","id":1759},{"comment":"/**\r\n * The Y coordinate of the upper-left corner of the framing\r\n * rectangle of the arc.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"y","field_type":"double","full_declaration":"public double y","id":1760},{"comment":"/**\r\n * The overall width of the full ellipse of which this arc is\r\n * a partial section (not considering the angular extents).\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"width","field_type":"double","full_declaration":"public double width","id":1761},{"comment":"/**\r\n * The overall height of the full ellipse of which this arc is\r\n * a partial section (not considering the angular extents).\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"height","field_type":"double","full_declaration":"public double height","id":1762},{"comment":"/**\r\n * The starting angle of the arc in degrees.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"start","field_type":"double","full_declaration":"public double start","id":1763},{"comment":"/**\r\n * The angular extent of the arc in degrees.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"extent","field_type":"double","full_declaration":"public double extent","id":1764},{"comment":"/*\r\n         * JDK 1.6 serialVersionUID\r\n         */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 728264085846882001L","id":1765},{"comment":"double x, y, w, h, angStRad, increment, cv;","field_name":"x","field_type":"double","full_declaration":"double x","id":1766},{"comment":"double x, y, w, h, angStRad, increment, cv;","field_name":"y","field_type":"double","full_declaration":"double xdouble y","id":1767},{"comment":"double x, y, w, h, angStRad, increment, cv;","field_name":"w","field_type":"double","full_declaration":"double xdouble ydouble w","id":1768},{"comment":"double x, y, w, h, angStRad, increment, cv;","field_name":"h","field_type":"double","full_declaration":"double xdouble ydouble wdouble h","id":1769},{"comment":"double x, y, w, h, angStRad, increment, cv;","field_name":"angStRad","field_type":"double","full_declaration":"double xdouble ydouble wdouble hdouble angStRad","id":1770},{"comment":"double x, y, w, h, angStRad, increment, cv;","field_name":"increment","field_type":"double","full_declaration":"double xdouble ydouble wdouble hdouble angStRaddouble increment","id":1771},{"comment":"double x, y, w, h, angStRad, increment, cv;","field_name":"cv","field_type":"double","full_declaration":"double xdouble ydouble wdouble hdouble angStRaddouble incrementdouble cv","id":1772},{"comment":"AffineTransform affine;","field_name":"affine","field_type":"java.awt.geom.AffineTransform","full_declaration":"java.awt.geom.AffineTransform affine","id":1773},{"comment":"","field_name":"index","field_type":"int","full_declaration":"int index","id":1774},{"comment":"","field_name":"arcSegs","field_type":"int","full_declaration":"int arcSegs","id":1775},{"comment":"","field_name":"lineSegs","field_type":"int","full_declaration":"int lineSegs","id":1776},{"comment":"private static Vector EmptyCurves = new Vector();","field_name":"EmptyCurves","field_type":"java.util.Vector","full_declaration":"private static java.util.Vector EmptyCurves = new Vector()","id":1777},{"comment":"private Vector curves;","field_name":"curves","field_type":"java.util.Vector","full_declaration":"private java.util.Vector curves","id":1778},{"comment":"private Rectangle2D cachedBounds;","field_name":"cachedBounds","field_type":"java.awt.geom.Rectangle2D","full_declaration":"private java.awt.geom.Rectangle2D cachedBounds","id":1779},{"comment":"private AffineTransform transform;","field_name":"transform","field_type":"java.awt.geom.AffineTransform","full_declaration":"private java.awt.geom.AffineTransform transform","id":1780},{"comment":"private Vector curves;","field_name":"curves","field_type":"java.util.Vector","full_declaration":"private java.util.Vector curves","id":1781},{"comment":"","field_name":"index","field_type":"int","full_declaration":"private int index","id":1782},{"comment":"private Curve prevcurve;","field_name":"prevcurve","field_type":"sun.awt.geom.Curve","full_declaration":"private sun.awt.geom.Curve prevcurve","id":1783},{"comment":"private Curve thiscurve;","field_name":"thiscurve","field_type":"sun.awt.geom.Curve","full_declaration":"private sun.awt.geom.Curve thiscurve","id":1784},{"comment":"/**\r\n * The X coordinate of the start point\r\n * of the cubic curve segment.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"x1","field_type":"float","full_declaration":"public float x1","id":1785},{"comment":"/**\r\n * The Y coordinate of the start point\r\n * of the cubic curve segment.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"y1","field_type":"float","full_declaration":"public float y1","id":1786},{"comment":"/**\r\n * The X coordinate of the first control point\r\n * of the cubic curve segment.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"ctrlx1","field_type":"float","full_declaration":"public float ctrlx1","id":1787},{"comment":"/**\r\n * The Y coordinate of the first control point\r\n * of the cubic curve segment.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"ctrly1","field_type":"float","full_declaration":"public float ctrly1","id":1788},{"comment":"/**\r\n * The X coordinate of the second control point\r\n * of the cubic curve segment.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"ctrlx2","field_type":"float","full_declaration":"public float ctrlx2","id":1789},{"comment":"/**\r\n * The Y coordinate of the second control point\r\n * of the cubic curve segment.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"ctrly2","field_type":"float","full_declaration":"public float ctrly2","id":1790},{"comment":"/**\r\n * The X coordinate of the end point\r\n * of the cubic curve segment.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"x2","field_type":"float","full_declaration":"public float x2","id":1791},{"comment":"/**\r\n * The Y coordinate of the end point\r\n * of the cubic curve segment.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"y2","field_type":"float","full_declaration":"public float y2","id":1792},{"comment":"/*\r\n         * JDK 1.6 serialVersionUID\r\n         */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -1272015596714244385L","id":1793},{"comment":"/**\r\n * The X coordinate of the start point\r\n * of the cubic curve segment.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"x1","field_type":"double","full_declaration":"public double x1","id":1794},{"comment":"/**\r\n * The Y coordinate of the start point\r\n * of the cubic curve segment.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"y1","field_type":"double","full_declaration":"public double y1","id":1795},{"comment":"/**\r\n * The X coordinate of the first control point\r\n * of the cubic curve segment.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"ctrlx1","field_type":"double","full_declaration":"public double ctrlx1","id":1796},{"comment":"/**\r\n * The Y coordinate of the first control point\r\n * of the cubic curve segment.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"ctrly1","field_type":"double","full_declaration":"public double ctrly1","id":1797},{"comment":"/**\r\n * The X coordinate of the second control point\r\n * of the cubic curve segment.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"ctrlx2","field_type":"double","full_declaration":"public double ctrlx2","id":1798},{"comment":"/**\r\n * The Y coordinate of the second control point\r\n * of the cubic curve segment.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"ctrly2","field_type":"double","full_declaration":"public double ctrly2","id":1799},{"comment":"/**\r\n * The X coordinate of the end point\r\n * of the cubic curve segment.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"x2","field_type":"double","full_declaration":"public double x2","id":1800},{"comment":"/**\r\n * The Y coordinate of the end point\r\n * of the cubic curve segment.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"y2","field_type":"double","full_declaration":"public double y2","id":1801},{"comment":"/*\r\n         * JDK 1.6 serialVersionUID\r\n         */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -4202960122839707295L","id":1802},{"comment":"CubicCurve2D cubic;","field_name":"cubic","field_type":"java.awt.geom.CubicCurve2D","full_declaration":"java.awt.geom.CubicCurve2D cubic","id":1803},{"comment":"AffineTransform affine;","field_name":"affine","field_type":"java.awt.geom.AffineTransform","full_declaration":"java.awt.geom.AffineTransform affine","id":1804},{"comment":"","field_name":"index","field_type":"int","full_declaration":"int index","id":1805},{"comment":"/**\r\n * The X coordinate of the upper-left corner of the\r\n * framing rectangle of this {@code Ellipse2D}.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"x","field_type":"float","full_declaration":"public float x","id":1806},{"comment":"/**\r\n * The Y coordinate of the upper-left corner of the\r\n * framing rectangle of this {@code Ellipse2D}.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"y","field_type":"float","full_declaration":"public float y","id":1807},{"comment":"/**\r\n * The overall width of this <code>Ellipse2D</code>.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"width","field_type":"float","full_declaration":"public float width","id":1808},{"comment":"/**\r\n * The overall height of this <code>Ellipse2D</code>.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"height","field_type":"float","full_declaration":"public float height","id":1809},{"comment":"/*\r\n         * JDK 1.6 serialVersionUID\r\n         */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -6633761252372475977L","id":1810},{"comment":"/**\r\n * The X coordinate of the upper-left corner of the\r\n * framing rectangle of this {@code Ellipse2D}.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"x","field_type":"double","full_declaration":"public double x","id":1811},{"comment":"/**\r\n * The Y coordinate of the upper-left corner of the\r\n * framing rectangle of this {@code Ellipse2D}.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"y","field_type":"double","full_declaration":"public double y","id":1812},{"comment":"/**\r\n * The overall width of this <code>Ellipse2D</code>.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"width","field_type":"double","full_declaration":"public double width","id":1813},{"comment":"/**\r\n * The overall height of the <code>Ellipse2D</code>.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"height","field_type":"double","full_declaration":"public double height","id":1814},{"comment":"/*\r\n         * JDK 1.6 serialVersionUID\r\n         */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 5555464816372320683L","id":1815},{"comment":"double x, y, w, h;","field_name":"x","field_type":"double","full_declaration":"double x","id":1816},{"comment":"double x, y, w, h;","field_name":"y","field_type":"double","full_declaration":"double xdouble y","id":1817},{"comment":"double x, y, w, h;","field_name":"w","field_type":"double","full_declaration":"double xdouble ydouble w","id":1818},{"comment":"double x, y, w, h;","field_name":"h","field_type":"double","full_declaration":"double xdouble ydouble wdouble h","id":1819},{"comment":"AffineTransform affine;","field_name":"affine","field_type":"java.awt.geom.AffineTransform","full_declaration":"java.awt.geom.AffineTransform affine","id":1820},{"comment":"","field_name":"index","field_type":"int","full_declaration":"int index","id":1821},{"comment":"// ArcIterator.btan(Math.PI/2)\r\n","field_name":"CtrlVal","field_type":"double","full_declaration":"public static final double CtrlVal = 0.5522847498307933","id":1822},{"comment":"/*\r\n     * ctrlpts contains the control points for a set of 4 cubic\r\n     * bezier curves that approximate a circle of radius 0.5\r\n     * centered at 0.5, 0.5\r\n     */\r\n","field_name":"pcv","field_type":"double","full_declaration":"private static final double pcv = 0.5 + CtrlVal * 0.5","id":1823},{"comment":"","field_name":"ncv","field_type":"double","full_declaration":"private static final double ncv = 0.5 - CtrlVal * 0.5","id":1824},{"comment":"","field_name":"ctrlpts","field_type":"double[][]","full_declaration":"private static double[][] ctrlpts = { { 1.0, pcv, pcv, 1.0, 0.5, 1.0 }, { ncv, 1.0, 0.0, pcv, 0.0, 0.5 }, { 0.0, ncv, ncv, 0.0, 0.5, 0.0 }, { pcv, 0.0, 1.0, ncv, 1.0, 0.5 } }","id":1825},{"comment":"// Multiple of cubic & quad curve size\r\n","field_name":"GROW_SIZE","field_type":"int","full_declaration":"static final int GROW_SIZE = 24","id":1826},{"comment":"// The source iterator\r\nPathIterator src;","field_name":"src","field_type":"java.awt.geom.PathIterator","full_declaration":"java.awt.geom.PathIterator src","id":1827},{"comment":"// Square of the flatness parameter\r\n","field_name":"squareflat","field_type":"double","full_declaration":"double squareflat","id":1828},{"comment":"// for testing against squared lengths\r\n// Maximum number of recursion levels\r\n","field_name":"limit","field_type":"int","full_declaration":"int limit","id":1829},{"comment":"// The cache of interpolated coords\r\n","field_name":"hold","field_type":"double[]","full_declaration":"double[] hold = new double[14]","id":1830},{"comment":"// Note that this must be long enough\r\n// to store a full cubic segment and\r\n// a relative cubic segment to avoid\r\n// aliasing when copying the coords\r\n// of a curve to the end of the array.\r\n// This is also serendipitously equal\r\n// to the size of a full quad segment\r\n// and 2 relative quad segments.\r\n// The ending x,y of the last segment\r\ndouble curx, cury;","field_name":"curx","field_type":"double","full_declaration":"double curx","id":1831},{"comment":"// Note that this must be long enough\r\n// to store a full cubic segment and\r\n// a relative cubic segment to avoid\r\n// aliasing when copying the coords\r\n// of a curve to the end of the array.\r\n// This is also serendipitously equal\r\n// to the size of a full quad segment\r\n// and 2 relative quad segments.\r\n// The ending x,y of the last segment\r\ndouble curx, cury;","field_name":"cury","field_type":"double","full_declaration":"double curxdouble cury","id":1832},{"comment":"// The x,y of the last move segment\r\ndouble movx, movy;","field_name":"movx","field_type":"double","full_declaration":"double movx","id":1833},{"comment":"// The x,y of the last move segment\r\ndouble movx, movy;","field_name":"movy","field_type":"double","full_declaration":"double movxdouble movy","id":1834},{"comment":"// The type of the curve being held\r\n","field_name":"holdType","field_type":"int","full_declaration":"int holdType","id":1835},{"comment":"// for interpolation\r\n// The index of the last curve segment\r\n","field_name":"holdEnd","field_type":"int","full_declaration":"int holdEnd","id":1836},{"comment":"// being held for interpolation\r\n// The index of the curve segment\r\n","field_name":"holdIndex","field_type":"int","full_declaration":"int holdIndex","id":1837},{"comment":"// that was last interpolated.  This\r\n// is the curve segment ready to be\r\n// returned in the next call to\r\n// currentSegment().\r\n// The recursion level at which\r\n","field_name":"levels","field_type":"int[]","full_declaration":"int[] levels","id":1838},{"comment":"// each curve being held in storage\r\n// was generated.\r\n// The index of the entry in the\r\n","field_name":"levelIndex","field_type":"int","full_declaration":"int levelIndex","id":1839},{"comment":"// levels array of the curve segment\r\n// at the holdIndex\r\n// True when iteration is done\r\n","field_name":"done","field_type":"boolean","full_declaration":"boolean done","id":1840},{"comment":"/*\r\n     * JDK 1.6 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -8327096662768731142L","id":1841},{"comment":"/**\r\n * The X coordinate of the start point of the line segment.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"x1","field_type":"float","full_declaration":"public float x1","id":1842},{"comment":"/**\r\n * The Y coordinate of the start point of the line segment.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"y1","field_type":"float","full_declaration":"public float y1","id":1843},{"comment":"/**\r\n * The X coordinate of the end point of the line segment.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"x2","field_type":"float","full_declaration":"public float x2","id":1844},{"comment":"/**\r\n * The Y coordinate of the end point of the line segment.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"y2","field_type":"float","full_declaration":"public float y2","id":1845},{"comment":"/*\r\n         * JDK 1.6 serialVersionUID\r\n         */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 6161772511649436349L","id":1846},{"comment":"/**\r\n * The X coordinate of the start point of the line segment.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"x1","field_type":"double","full_declaration":"public double x1","id":1847},{"comment":"/**\r\n * The Y coordinate of the start point of the line segment.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"y1","field_type":"double","full_declaration":"public double y1","id":1848},{"comment":"/**\r\n * The X coordinate of the end point of the line segment.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"x2","field_type":"double","full_declaration":"public double x2","id":1849},{"comment":"/**\r\n * The Y coordinate of the end point of the line segment.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"y2","field_type":"double","full_declaration":"public double y2","id":1850},{"comment":"/*\r\n         * JDK 1.6 serialVersionUID\r\n         */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 7979627399746467499L","id":1851},{"comment":"Line2D line;","field_name":"line","field_type":"java.awt.geom.Line2D","full_declaration":"java.awt.geom.Line2D line","id":1852},{"comment":"AffineTransform affine;","field_name":"affine","field_type":"java.awt.geom.AffineTransform","full_declaration":"java.awt.geom.AffineTransform affine","id":1853},{"comment":"","field_name":"index","field_type":"int","full_declaration":"int index","id":1854},{"comment":"/**\r\n * An even-odd winding rule for determining the interior of\r\n * a path.\r\n *\r\n * @see PathIterator#WIND_EVEN_ODD\r\n * @since 1.6\r\n */\r\n","field_name":"WIND_EVEN_ODD","field_type":"int","full_declaration":"public static final int WIND_EVEN_ODD = PathIterator.WIND_EVEN_ODD","id":1855},{"comment":"/**\r\n * A non-zero winding rule for determining the interior of a\r\n * path.\r\n *\r\n * @see PathIterator#WIND_NON_ZERO\r\n * @since 1.6\r\n */\r\n","field_name":"WIND_NON_ZERO","field_type":"int","full_declaration":"public static final int WIND_NON_ZERO = PathIterator.WIND_NON_ZERO","id":1856},{"comment":"// For code simplicity, copy these constants to our namespace\r\n// and cast them to byte constants for easy storage.\r\n","field_name":"SEG_MOVETO","field_type":"byte","full_declaration":"private static final byte SEG_MOVETO = (byte) PathIterator.SEG_MOVETO","id":1857},{"comment":"","field_name":"SEG_LINETO","field_type":"byte","full_declaration":"private static final byte SEG_LINETO = (byte) PathIterator.SEG_LINETO","id":1858},{"comment":"","field_name":"SEG_QUADTO","field_type":"byte","full_declaration":"private static final byte SEG_QUADTO = (byte) PathIterator.SEG_QUADTO","id":1859},{"comment":"","field_name":"SEG_CUBICTO","field_type":"byte","full_declaration":"private static final byte SEG_CUBICTO = (byte) PathIterator.SEG_CUBICTO","id":1860},{"comment":"","field_name":"SEG_CLOSE","field_type":"byte","full_declaration":"private static final byte SEG_CLOSE = (byte) PathIterator.SEG_CLOSE","id":1861},{"comment":"","field_name":"pointTypes","field_type":"byte[]","full_declaration":"transient byte[] pointTypes","id":1862},{"comment":"","field_name":"numTypes","field_type":"int","full_declaration":"transient int numTypes","id":1863},{"comment":"","field_name":"numCoords","field_type":"int","full_declaration":"transient int numCoords","id":1864},{"comment":"","field_name":"windingRule","field_type":"int","full_declaration":"transient int windingRule","id":1865},{"comment":"","field_name":"INIT_SIZE","field_type":"int","full_declaration":"static final int INIT_SIZE = 20","id":1866},{"comment":"","field_name":"EXPAND_MAX","field_type":"int","full_declaration":"static final int EXPAND_MAX = 500","id":1867},{"comment":"","field_name":"EXPAND_MAX_COORDS","field_type":"int","full_declaration":"static final int EXPAND_MAX_COORDS = EXPAND_MAX * 2","id":1868},{"comment":"// ensure > 6 (cubics)\r\n","field_name":"EXPAND_MIN","field_type":"int","full_declaration":"static final int EXPAND_MIN = 10","id":1869},{"comment":"// Note: It would be nice to have this return Path2D\r\n// but one of our subclasses (GeneralPath) needs to\r\n// offer \"public Object clone()\" for backwards\r\n// compatibility so we cannot restrict it further.\r\n// REMIND: Can we do both somehow?\r\n/*\r\n     * Support fields and methods for serializing the subclasses.\r\n     */\r\n","field_name":"SERIAL_STORAGE_FLT_ARRAY","field_type":"byte","full_declaration":"private static final byte SERIAL_STORAGE_FLT_ARRAY = 0x30","id":1870},{"comment":"","field_name":"SERIAL_STORAGE_DBL_ARRAY","field_type":"byte","full_declaration":"private static final byte SERIAL_STORAGE_DBL_ARRAY = 0x31","id":1871},{"comment":"","field_name":"SERIAL_SEG_FLT_MOVETO","field_type":"byte","full_declaration":"private static final byte SERIAL_SEG_FLT_MOVETO = 0x40","id":1872},{"comment":"","field_name":"SERIAL_SEG_FLT_LINETO","field_type":"byte","full_declaration":"private static final byte SERIAL_SEG_FLT_LINETO = 0x41","id":1873},{"comment":"","field_name":"SERIAL_SEG_FLT_QUADTO","field_type":"byte","full_declaration":"private static final byte SERIAL_SEG_FLT_QUADTO = 0x42","id":1874},{"comment":"","field_name":"SERIAL_SEG_FLT_CUBICTO","field_type":"byte","full_declaration":"private static final byte SERIAL_SEG_FLT_CUBICTO = 0x43","id":1875},{"comment":"","field_name":"SERIAL_SEG_DBL_MOVETO","field_type":"byte","full_declaration":"private static final byte SERIAL_SEG_DBL_MOVETO = 0x50","id":1876},{"comment":"","field_name":"SERIAL_SEG_DBL_LINETO","field_type":"byte","full_declaration":"private static final byte SERIAL_SEG_DBL_LINETO = 0x51","id":1877},{"comment":"","field_name":"SERIAL_SEG_DBL_QUADTO","field_type":"byte","full_declaration":"private static final byte SERIAL_SEG_DBL_QUADTO = 0x52","id":1878},{"comment":"","field_name":"SERIAL_SEG_DBL_CUBICTO","field_type":"byte","full_declaration":"private static final byte SERIAL_SEG_DBL_CUBICTO = 0x53","id":1879},{"comment":"","field_name":"SERIAL_SEG_CLOSE","field_type":"byte","full_declaration":"private static final byte SERIAL_SEG_CLOSE = 0x60","id":1880},{"comment":"","field_name":"SERIAL_PATH_END","field_type":"byte","full_declaration":"private static final byte SERIAL_PATH_END = 0x61","id":1881},{"comment":"","field_name":"floatCoords","field_type":"float[]","full_declaration":"transient float[] floatCoords","id":1882},{"comment":"/*\r\n         * JDK 1.6 serialVersionUID\r\n         */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 6990832515060788886L","id":1883},{"comment":"","field_name":"floatCoords","field_type":"float[]","full_declaration":"float[] floatCoords","id":1884},{"comment":"","field_name":"floatCoords","field_type":"float[]","full_declaration":"float[] floatCoords","id":1885},{"comment":"AffineTransform affine;","field_name":"affine","field_type":"java.awt.geom.AffineTransform","full_declaration":"java.awt.geom.AffineTransform affine","id":1886},{"comment":"","field_name":"doubleCoords","field_type":"double[]","full_declaration":"transient double[] doubleCoords","id":1887},{"comment":"/*\r\n         * JDK 1.6 serialVersionUID\r\n         */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 1826762518450014216L","id":1888},{"comment":"","field_name":"doubleCoords","field_type":"double[]","full_declaration":"double[] doubleCoords","id":1889},{"comment":"","field_name":"doubleCoords","field_type":"double[]","full_declaration":"double[] doubleCoords","id":1890},{"comment":"AffineTransform affine;","field_name":"affine","field_type":"java.awt.geom.AffineTransform","full_declaration":"java.awt.geom.AffineTransform affine","id":1891},{"comment":"","field_name":"typeIdx","field_type":"int","full_declaration":"int typeIdx","id":1892},{"comment":"","field_name":"pointIdx","field_type":"int","full_declaration":"int pointIdx","id":1893},{"comment":"Path2D path;","field_name":"path","field_type":"java.awt.geom.Path2D","full_declaration":"java.awt.geom.Path2D path","id":1894},{"comment":"","field_name":"curvecoords","field_type":"int[]","full_declaration":"static final int[] curvecoords = { 2, 2, 4, 6, 0 }","id":1895},{"comment":"/**\r\n * The winding rule constant for specifying an even-odd rule\r\n * for determining the interior of a path.\r\n * The even-odd rule specifies that a point lies inside the\r\n * path if a ray drawn in any direction from that point to\r\n * infinity is crossed by path segments an odd number of times.\r\n */\r\n@Native\r\n","field_name":"WIND_EVEN_ODD","field_type":"int","full_declaration":"public static final int WIND_EVEN_ODD = 0","id":1896},{"comment":"/**\r\n * The winding rule constant for specifying a non-zero rule\r\n * for determining the interior of a path.\r\n * The non-zero rule specifies that a point lies inside the\r\n * path if a ray drawn in any direction from that point to\r\n * infinity is crossed by path segments a different number\r\n * of times in the counter-clockwise direction than the\r\n * clockwise direction.\r\n */\r\n@Native\r\n","field_name":"WIND_NON_ZERO","field_type":"int","full_declaration":"public static final int WIND_NON_ZERO = 1","id":1897},{"comment":"/**\r\n * The segment type constant for a point that specifies the\r\n * starting location for a new subpath.\r\n */\r\n@Native\r\n","field_name":"SEG_MOVETO","field_type":"int","full_declaration":"public static final int SEG_MOVETO = 0","id":1898},{"comment":"/**\r\n * The segment type constant for a point that specifies the\r\n * end point of a line to be drawn from the most recently\r\n * specified point.\r\n */\r\n@Native\r\n","field_name":"SEG_LINETO","field_type":"int","full_declaration":"public static final int SEG_LINETO = 1","id":1899},{"comment":"/**\r\n * The segment type constant for the pair of points that specify\r\n * a quadratic parametric curve to be drawn from the most recently\r\n * specified point.\r\n * The curve is interpolated by solving the parametric control\r\n * equation in the range <code>(t=[0..1])</code> using\r\n * the most recently specified (current) point (CP),\r\n * the first control point (P1),\r\n * and the final interpolated control point (P2).\r\n * The parametric control equation for this curve is:\r\n * <pre>\r\n *          P(t) = B(2,0)*CP + B(2,1)*P1 + B(2,2)*P2\r\n *          0 &lt;= t &lt;= 1\r\n *\r\n *        B(n,m) = mth coefficient of nth degree Bernstein polynomial\r\n *               = C(n,m) * t^(m) * (1 - t)^(n-m)\r\n *        C(n,m) = Combinations of n things, taken m at a time\r\n *               = n! / (m! * (n-m)!)\r\n * </pre>\r\n */\r\n@Native\r\n","field_name":"SEG_QUADTO","field_type":"int","full_declaration":"public static final int SEG_QUADTO = 2","id":1900},{"comment":"/**\r\n * The segment type constant for the set of 3 points that specify\r\n * a cubic parametric curve to be drawn from the most recently\r\n * specified point.\r\n * The curve is interpolated by solving the parametric control\r\n * equation in the range <code>(t=[0..1])</code> using\r\n * the most recently specified (current) point (CP),\r\n * the first control point (P1),\r\n * the second control point (P2),\r\n * and the final interpolated control point (P3).\r\n * The parametric control equation for this curve is:\r\n * <pre>\r\n *          P(t) = B(3,0)*CP + B(3,1)*P1 + B(3,2)*P2 + B(3,3)*P3\r\n *          0 &lt;= t &lt;= 1\r\n *\r\n *        B(n,m) = mth coefficient of nth degree Bernstein polynomial\r\n *               = C(n,m) * t^(m) * (1 - t)^(n-m)\r\n *        C(n,m) = Combinations of n things, taken m at a time\r\n *               = n! / (m! * (n-m)!)\r\n * </pre>\r\n * This form of curve is commonly known as a B&eacute;zier curve.\r\n */\r\n@Native\r\n","field_name":"SEG_CUBICTO","field_type":"int","full_declaration":"public static final int SEG_CUBICTO = 3","id":1901},{"comment":"/**\r\n * The segment type constant that specifies that\r\n * the preceding subpath should be closed by appending a line segment\r\n * back to the point corresponding to the most recent SEG_MOVETO.\r\n */\r\n@Native\r\n","field_name":"SEG_CLOSE","field_type":"int","full_declaration":"public static final int SEG_CLOSE = 4","id":1902},{"comment":"/**\r\n * The X coordinate of this <code>Point2D</code>.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"x","field_type":"float","full_declaration":"public float x","id":1903},{"comment":"/**\r\n * The Y coordinate of this <code>Point2D</code>.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"y","field_type":"float","full_declaration":"public float y","id":1904},{"comment":"/*\r\n         * JDK 1.6 serialVersionUID\r\n         */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -2870572449815403710L","id":1905},{"comment":"/**\r\n * The X coordinate of this <code>Point2D</code>.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"x","field_type":"double","full_declaration":"public double x","id":1906},{"comment":"/**\r\n * The Y coordinate of this <code>Point2D</code>.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"y","field_type":"double","full_declaration":"public double y","id":1907},{"comment":"/*\r\n         * JDK 1.6 serialVersionUID\r\n         */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 6150783262733311327L","id":1908},{"comment":"","field_name":"BELOW","field_type":"int","full_declaration":"private static final int BELOW = -2","id":1909},{"comment":"","field_name":"LOWEDGE","field_type":"int","full_declaration":"private static final int LOWEDGE = -1","id":1910},{"comment":"","field_name":"INSIDE","field_type":"int","full_declaration":"private static final int INSIDE = 0","id":1911},{"comment":"","field_name":"HIGHEDGE","field_type":"int","full_declaration":"private static final int HIGHEDGE = 1","id":1912},{"comment":"","field_name":"ABOVE","field_type":"int","full_declaration":"private static final int ABOVE = 2","id":1913},{"comment":"/**\r\n * The X coordinate of the start point of the quadratic curve\r\n * segment.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"x1","field_type":"float","full_declaration":"public float x1","id":1914},{"comment":"/**\r\n * The Y coordinate of the start point of the quadratic curve\r\n * segment.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"y1","field_type":"float","full_declaration":"public float y1","id":1915},{"comment":"/**\r\n * The X coordinate of the control point of the quadratic curve\r\n * segment.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"ctrlx","field_type":"float","full_declaration":"public float ctrlx","id":1916},{"comment":"/**\r\n * The Y coordinate of the control point of the quadratic curve\r\n * segment.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"ctrly","field_type":"float","full_declaration":"public float ctrly","id":1917},{"comment":"/**\r\n * The X coordinate of the end point of the quadratic curve\r\n * segment.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"x2","field_type":"float","full_declaration":"public float x2","id":1918},{"comment":"/**\r\n * The Y coordinate of the end point of the quadratic curve\r\n * segment.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"y2","field_type":"float","full_declaration":"public float y2","id":1919},{"comment":"/*\r\n         * JDK 1.6 serialVersionUID\r\n         */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -8511188402130719609L","id":1920},{"comment":"/**\r\n * The X coordinate of the start point of the quadratic curve\r\n * segment.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"x1","field_type":"double","full_declaration":"public double x1","id":1921},{"comment":"/**\r\n * The Y coordinate of the start point of the quadratic curve\r\n * segment.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"y1","field_type":"double","full_declaration":"public double y1","id":1922},{"comment":"/**\r\n * The X coordinate of the control point of the quadratic curve\r\n * segment.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"ctrlx","field_type":"double","full_declaration":"public double ctrlx","id":1923},{"comment":"/**\r\n * The Y coordinate of the control point of the quadratic curve\r\n * segment.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"ctrly","field_type":"double","full_declaration":"public double ctrly","id":1924},{"comment":"/**\r\n * The X coordinate of the end point of the quadratic curve\r\n * segment.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"x2","field_type":"double","full_declaration":"public double x2","id":1925},{"comment":"/**\r\n * The Y coordinate of the end point of the quadratic curve\r\n * segment.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"y2","field_type":"double","full_declaration":"public double y2","id":1926},{"comment":"/*\r\n         * JDK 1.6 serialVersionUID\r\n         */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 4217149928428559721L","id":1927},{"comment":"QuadCurve2D quad;","field_name":"quad","field_type":"java.awt.geom.QuadCurve2D","full_declaration":"java.awt.geom.QuadCurve2D quad","id":1928},{"comment":"AffineTransform affine;","field_name":"affine","field_type":"java.awt.geom.AffineTransform","full_declaration":"java.awt.geom.AffineTransform affine","id":1929},{"comment":"","field_name":"index","field_type":"int","full_declaration":"int index","id":1930},{"comment":"/**\r\n * The bitmask that indicates that a point lies to the left of\r\n * this <code>Rectangle2D</code>.\r\n * @since 1.2\r\n */\r\n","field_name":"OUT_LEFT","field_type":"int","full_declaration":"public static final int OUT_LEFT = 1","id":1931},{"comment":"/**\r\n * The bitmask that indicates that a point lies above\r\n * this <code>Rectangle2D</code>.\r\n * @since 1.2\r\n */\r\n","field_name":"OUT_TOP","field_type":"int","full_declaration":"public static final int OUT_TOP = 2","id":1932},{"comment":"/**\r\n * The bitmask that indicates that a point lies to the right of\r\n * this <code>Rectangle2D</code>.\r\n * @since 1.2\r\n */\r\n","field_name":"OUT_RIGHT","field_type":"int","full_declaration":"public static final int OUT_RIGHT = 4","id":1933},{"comment":"/**\r\n * The bitmask that indicates that a point lies below\r\n * this <code>Rectangle2D</code>.\r\n * @since 1.2\r\n */\r\n","field_name":"OUT_BOTTOM","field_type":"int","full_declaration":"public static final int OUT_BOTTOM = 8","id":1934},{"comment":"/**\r\n * The X coordinate of this <code>Rectangle2D</code>.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"x","field_type":"float","full_declaration":"public float x","id":1935},{"comment":"/**\r\n * The Y coordinate of this <code>Rectangle2D</code>.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"y","field_type":"float","full_declaration":"public float y","id":1936},{"comment":"/**\r\n * The width of this <code>Rectangle2D</code>.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"width","field_type":"float","full_declaration":"public float width","id":1937},{"comment":"/**\r\n * The height of this <code>Rectangle2D</code>.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"height","field_type":"float","full_declaration":"public float height","id":1938},{"comment":"/*\r\n         * JDK 1.6 serialVersionUID\r\n         */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 3798716824173675777L","id":1939},{"comment":"/**\r\n * The X coordinate of this <code>Rectangle2D</code>.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"x","field_type":"double","full_declaration":"public double x","id":1940},{"comment":"/**\r\n * The Y coordinate of this <code>Rectangle2D</code>.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"y","field_type":"double","full_declaration":"public double y","id":1941},{"comment":"/**\r\n * The width of this <code>Rectangle2D</code>.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"width","field_type":"double","full_declaration":"public double width","id":1942},{"comment":"/**\r\n * The height of this <code>Rectangle2D</code>.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"height","field_type":"double","full_declaration":"public double height","id":1943},{"comment":"/*\r\n         * JDK 1.6 serialVersionUID\r\n         */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 7771313791441850493L","id":1944},{"comment":"double x, y, w, h;","field_name":"x","field_type":"double","full_declaration":"double x","id":1945},{"comment":"double x, y, w, h;","field_name":"y","field_type":"double","full_declaration":"double xdouble y","id":1946},{"comment":"double x, y, w, h;","field_name":"w","field_type":"double","full_declaration":"double xdouble ydouble w","id":1947},{"comment":"double x, y, w, h;","field_name":"h","field_type":"double","full_declaration":"double xdouble ydouble wdouble h","id":1948},{"comment":"AffineTransform affine;","field_name":"affine","field_type":"java.awt.geom.AffineTransform","full_declaration":"java.awt.geom.AffineTransform affine","id":1949},{"comment":"","field_name":"index","field_type":"int","full_declaration":"int index","id":1950},{"comment":"/**\r\n * The X coordinate of this <code>RoundRectangle2D</code>.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"x","field_type":"float","full_declaration":"public float x","id":1951},{"comment":"/**\r\n * The Y coordinate of this <code>RoundRectangle2D</code>.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"y","field_type":"float","full_declaration":"public float y","id":1952},{"comment":"/**\r\n * The width of this <code>RoundRectangle2D</code>.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"width","field_type":"float","full_declaration":"public float width","id":1953},{"comment":"/**\r\n * The height of this <code>RoundRectangle2D</code>.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"height","field_type":"float","full_declaration":"public float height","id":1954},{"comment":"/**\r\n * The width of the arc that rounds off the corners.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"arcwidth","field_type":"float","full_declaration":"public float arcwidth","id":1955},{"comment":"/**\r\n * The height of the arc that rounds off the corners.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"archeight","field_type":"float","full_declaration":"public float archeight","id":1956},{"comment":"/*\r\n         * JDK 1.6 serialVersionUID\r\n         */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -3423150618393866922L","id":1957},{"comment":"/**\r\n * The X coordinate of this <code>RoundRectangle2D</code>.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"x","field_type":"double","full_declaration":"public double x","id":1958},{"comment":"/**\r\n * The Y coordinate of this <code>RoundRectangle2D</code>.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"y","field_type":"double","full_declaration":"public double y","id":1959},{"comment":"/**\r\n * The width of this <code>RoundRectangle2D</code>.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"width","field_type":"double","full_declaration":"public double width","id":1960},{"comment":"/**\r\n * The height of this <code>RoundRectangle2D</code>.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"height","field_type":"double","full_declaration":"public double height","id":1961},{"comment":"/**\r\n * The width of the arc that rounds off the corners.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"arcwidth","field_type":"double","full_declaration":"public double arcwidth","id":1962},{"comment":"/**\r\n * The height of the arc that rounds off the corners.\r\n * @since 1.2\r\n * @serial\r\n */\r\n","field_name":"archeight","field_type":"double","full_declaration":"public double archeight","id":1963},{"comment":"/*\r\n         * JDK 1.6 serialVersionUID\r\n         */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 1048939333485206117L","id":1964},{"comment":"double x, y, w, h, aw, ah;","field_name":"x","field_type":"double","full_declaration":"double x","id":1965},{"comment":"double x, y, w, h, aw, ah;","field_name":"y","field_type":"double","full_declaration":"double xdouble y","id":1966},{"comment":"double x, y, w, h, aw, ah;","field_name":"w","field_type":"double","full_declaration":"double xdouble ydouble w","id":1967},{"comment":"double x, y, w, h, aw, ah;","field_name":"h","field_type":"double","full_declaration":"double xdouble ydouble wdouble h","id":1968},{"comment":"double x, y, w, h, aw, ah;","field_name":"aw","field_type":"double","full_declaration":"double xdouble ydouble wdouble hdouble aw","id":1969},{"comment":"double x, y, w, h, aw, ah;","field_name":"ah","field_type":"double","full_declaration":"double xdouble ydouble wdouble hdouble awdouble ah","id":1970},{"comment":"AffineTransform affine;","field_name":"affine","field_type":"java.awt.geom.AffineTransform","full_declaration":"java.awt.geom.AffineTransform affine","id":1971},{"comment":"","field_name":"index","field_type":"int","full_declaration":"int index","id":1972},{"comment":"","field_name":"angle","field_type":"double","full_declaration":"private static final double angle = Math.PI / 4.0","id":1973},{"comment":"","field_name":"a","field_type":"double","full_declaration":"private static final double a = 1.0 - Math.cos(angle)","id":1974},{"comment":"","field_name":"b","field_type":"double","full_declaration":"private static final double b = Math.tan(angle)","id":1975},{"comment":"","field_name":"c","field_type":"double","full_declaration":"private static final double c = Math.sqrt(1.0 + b * b) - 1 + a","id":1976},{"comment":"","field_name":"cv","field_type":"double","full_declaration":"private static final double cv = 4.0 / 3.0 * a * b / c","id":1977},{"comment":"","field_name":"acv","field_type":"double","full_declaration":"private static final double acv = (1.0 - cv) / 2.0","id":1978},{"comment":"// For each array:\r\n// 4 values for each point {v0, v1, v2, v3}:\r\n// point = (x + v0 * w + v1 * arcWidth,\r\n// y + v2 * h + v3 * arcHeight);\r\n","field_name":"ctrlpts","field_type":"double[][]","full_declaration":"private static double[][] ctrlpts = { { 0.0, 0.0, 0.0, 0.5 }, { 0.0, 0.0, 1.0, -0.5 }, { 0.0, 0.0, 1.0, -acv, 0.0, acv, 1.0, 0.0, 0.0, 0.5, 1.0, 0.0 }, { 1.0, -0.5, 1.0, 0.0 }, { 1.0, -acv, 1.0, 0.0, 1.0, 0.0, 1.0, -acv, 1.0, 0.0, 1.0, -0.5 }, { 1.0, 0.0, 0.0, 0.5 }, { 1.0, 0.0, 0.0, acv, 1.0, -acv, 0.0, 0.0, 1.0, -0.5, 0.0, 0.0 }, { 0.0, 0.5, 0.0, 0.0 }, { 0.0, acv, 0.0, 0.0, 0.0, 0.0, 0.0, acv, 0.0, 0.0, 0.0, 0.5 }, {} }","id":1979},{"comment":"","field_name":"types","field_type":"int[]","full_declaration":"private static int[] types = { SEG_MOVETO, SEG_LINETO, SEG_CUBICTO, SEG_LINETO, SEG_CUBICTO, SEG_LINETO, SEG_CUBICTO, SEG_LINETO, SEG_CUBICTO, SEG_CLOSE }","id":1980},{"comment":"Point2D.Float p1;","field_name":"p1","field_type":"java.awt.geom.Point2D.Float","full_declaration":"java.awt.geom.Point2D.Float p1","id":1981},{"comment":"Point2D.Float p2;","field_name":"p2","field_type":"java.awt.geom.Point2D.Float","full_declaration":"java.awt.geom.Point2D.Float p2","id":1982},{"comment":"Color color1;","field_name":"color1","field_type":"java.awt.Color","full_declaration":"java.awt.Color color1","id":1983},{"comment":"Color color2;","field_name":"color2","field_type":"java.awt.Color","full_declaration":"java.awt.Color color2","id":1984},{"comment":"","field_name":"cyclic","field_type":"boolean","full_declaration":"boolean cyclic","id":1985},{"comment":"static ColorModel xrgbmodel = new DirectColorModel(24, 0x00ff0000, 0x0000ff00, 0x000000ff);","field_name":"xrgbmodel","field_type":"java.awt.image.ColorModel","full_declaration":"static java.awt.image.ColorModel xrgbmodel = new DirectColorModel(24, 0x00ff0000, 0x0000ff00, 0x000000ff)","id":1986},{"comment":"static ColorModel xbgrmodel = new DirectColorModel(24, 0x000000ff, 0x0000ff00, 0x00ff0000);","field_name":"xbgrmodel","field_type":"java.awt.image.ColorModel","full_declaration":"static java.awt.image.ColorModel xbgrmodel = new DirectColorModel(24, 0x000000ff, 0x0000ff00, 0x00ff0000)","id":1987},{"comment":"static ColorModel cachedModel;","field_name":"cachedModel","field_type":"java.awt.image.ColorModel","full_declaration":"static java.awt.image.ColorModel cachedModel","id":1988},{"comment":"static WeakReference<Raster> cached;","field_name":"cached","field_type":"java.lang.ref.WeakReference","full_declaration":"static java.lang.ref.WeakReference cached","id":1989},{"comment":"","field_name":"x1","field_type":"double","full_declaration":"double x1","id":1990},{"comment":"","field_name":"y1","field_type":"double","full_declaration":"double y1","id":1991},{"comment":"","field_name":"dx","field_type":"double","full_declaration":"double dx","id":1992},{"comment":"","field_name":"dy","field_type":"double","full_declaration":"double dy","id":1993},{"comment":"","field_name":"cyclic","field_type":"boolean","full_declaration":"boolean cyclic","id":1994},{"comment":"","field_name":"interp","field_type":"int[]","full_declaration":"int[] interp","id":1995},{"comment":"Raster saved;","field_name":"saved","field_type":"java.awt.image.Raster","full_declaration":"java.awt.image.Raster saved","id":1996},{"comment":"ColorModel model;","field_name":"model","field_type":"java.awt.image.ColorModel","full_declaration":"java.awt.image.ColorModel model","id":1997},{"comment":"private static PaintCallback instance = new PaintCallback();","field_name":"instance","field_type":"java.awt.GraphicsCallback.PaintCallback","full_declaration":"private static java.awt.GraphicsCallback.PaintCallback instance = new PaintCallback()","id":1998},{"comment":"private static PrintCallback instance = new PrintCallback();","field_name":"instance","field_type":"java.awt.GraphicsCallback.PrintCallback","full_declaration":"private static java.awt.GraphicsCallback.PrintCallback instance = new PrintCallback()","id":1999},{"comment":"private static PaintAllCallback instance = new PaintAllCallback();","field_name":"instance","field_type":"java.awt.GraphicsCallback.PaintAllCallback","full_declaration":"private static java.awt.GraphicsCallback.PaintAllCallback instance = new PaintAllCallback()","id":2000},{"comment":"private static PrintAllCallback instance = new PrintAllCallback();","field_name":"instance","field_type":"java.awt.GraphicsCallback.PrintAllCallback","full_declaration":"private static java.awt.GraphicsCallback.PrintAllCallback instance = new PrintAllCallback()","id":2001},{"comment":"private static PeerPaintCallback instance = new PeerPaintCallback();","field_name":"instance","field_type":"java.awt.GraphicsCallback.PeerPaintCallback","full_declaration":"private static java.awt.GraphicsCallback.PeerPaintCallback instance = new PeerPaintCallback()","id":2002},{"comment":"private static PeerPrintCallback instance = new PeerPrintCallback();","field_name":"instance","field_type":"java.awt.GraphicsCallback.PeerPrintCallback","full_declaration":"private static java.awt.GraphicsCallback.PeerPrintCallback instance = new PeerPrintCallback()","id":2003},{"comment":"private static PaintHeavyweightComponentsCallback instance = new PaintHeavyweightComponentsCallback();","field_name":"instance","field_type":"java.awt.GraphicsCallback.PaintHeavyweightComponentsCallback","full_declaration":"private static java.awt.GraphicsCallback.PaintHeavyweightComponentsCallback instance = new PaintHeavyweightComponentsCallback()","id":2004},{"comment":"private static PrintHeavyweightComponentsCallback instance = new PrintHeavyweightComponentsCallback();","field_name":"instance","field_type":"java.awt.GraphicsCallback.PrintHeavyweightComponentsCallback","full_declaration":"private static java.awt.GraphicsCallback.PrintHeavyweightComponentsCallback instance = new PrintHeavyweightComponentsCallback()","id":2005},{"comment":"/*\r\n     * serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -8061369279557787079L","id":2006},{"comment":"/**\r\n * Value used for \"Enum\" (Integer) type.  States that this\r\n * feature is required for the <code>GraphicsConfiguration</code>\r\n * object.  If this feature is not available, do not select the\r\n * <code>GraphicsConfiguration</code> object.\r\n */\r\n","field_name":"REQUIRED","field_type":"int","full_declaration":"public static final int REQUIRED = 1","id":2007},{"comment":"/**\r\n * Value used for \"Enum\" (Integer) type.  States that this\r\n * feature is desired for the <code>GraphicsConfiguration</code>\r\n * object.  A selection with this feature is preferred over a\r\n * selection that does not include this feature, although both\r\n * selections can be considered valid matches.\r\n */\r\n","field_name":"PREFERRED","field_type":"int","full_declaration":"public static final int PREFERRED = 2","id":2008},{"comment":"/**\r\n * Value used for \"Enum\" (Integer) type.  States that this\r\n * feature is not necessary for the selection of the\r\n * <code>GraphicsConfiguration</code> object.  A selection\r\n * without this feature is preferred over a selection that\r\n * includes this feature since it is not used.\r\n */\r\n","field_name":"UNNECESSARY","field_type":"int","full_declaration":"public static final int UNNECESSARY = 3","id":2009},{"comment":"private static BufferCapabilities defaultBufferCaps;","field_name":"defaultBufferCaps","field_type":"java.awt.BufferCapabilities","full_declaration":"private static java.awt.BufferCapabilities defaultBufferCaps","id":2010},{"comment":"private static ImageCapabilities defaultImageCaps;","field_name":"defaultImageCaps","field_type":"java.awt.ImageCapabilities","full_declaration":"private static java.awt.ImageCapabilities defaultImageCaps","id":2011},{"comment":"private Window fullScreenWindow;","field_name":"fullScreenWindow","field_type":"java.awt.Window","full_declaration":"private java.awt.Window fullScreenWindow","id":2012},{"comment":"// tracks which AppContext\r\nprivate AppContext fullScreenAppContext;","field_name":"fullScreenAppContext","field_type":"sun.awt.AppContext","full_declaration":"private sun.awt.AppContext fullScreenAppContext","id":2013},{"comment":"// created the FS window\r\n// this lock is used for making synchronous changes to the AppContext's\r\n// current full screen window\r\nprivate final Object fsAppContextLock = new Object();","field_name":"fsAppContextLock","field_type":"java.lang.Object","full_declaration":"private final java.lang.Object fsAppContextLock = new Object()","id":2014},{"comment":"private Rectangle windowedModeBounds;","field_name":"windowedModeBounds","field_type":"java.awt.Rectangle","full_declaration":"private java.awt.Rectangle windowedModeBounds","id":2015},{"comment":"/**\r\n * Device is a raster screen.\r\n */\r\n","field_name":"TYPE_RASTER_SCREEN","field_type":"int","full_declaration":"public final static int TYPE_RASTER_SCREEN = 0","id":2016},{"comment":"/**\r\n * Device is a printer.\r\n */\r\n","field_name":"TYPE_PRINTER","field_type":"int","full_declaration":"public final static int TYPE_PRINTER = 1","id":2017},{"comment":"/**\r\n * Device is an image buffer.  This buffer can reside in device\r\n * or system memory but it is not physically viewable by the user.\r\n */\r\n","field_name":"TYPE_IMAGE_BUFFER","field_type":"int","full_declaration":"public final static int TYPE_IMAGE_BUFFER = 2","id":2018},{"comment":"private static GraphicsEnvironment localEnv;","field_name":"localEnv","field_type":"java.awt.GraphicsEnvironment","full_declaration":"private static java.awt.GraphicsEnvironment localEnv","id":2019},{"comment":"/**\r\n * The headless state of the Toolkit and GraphicsEnvironment\r\n */\r\nprivate static Boolean headless;","field_name":"headless","field_type":"java.lang.Boolean","full_declaration":"private static java.lang.Boolean headless","id":2020},{"comment":"/**\r\n * The headless state assumed by default\r\n */\r\nprivate static Boolean defaultHeadless;","field_name":"defaultHeadless","field_type":"java.lang.Boolean","full_declaration":"private static java.lang.Boolean defaultHeadless","id":2021},{"comment":"/**\r\n * Specifies that this component is the next-to-last component in its\r\n * column or row (<code>gridwidth</code>, <code>gridheight</code>),\r\n * or that this component be placed next to the previously added\r\n * component (<code>gridx</code>, <code>gridy</code>).\r\n * @see      java.awt.GridBagConstraints#gridwidth\r\n * @see      java.awt.GridBagConstraints#gridheight\r\n * @see      java.awt.GridBagConstraints#gridx\r\n * @see      java.awt.GridBagConstraints#gridy\r\n */\r\n","field_name":"RELATIVE","field_type":"int","full_declaration":"public static final int RELATIVE = -1","id":2022},{"comment":"/**\r\n * Specifies that this component is the\r\n * last component in its column or row.\r\n */\r\n","field_name":"REMAINDER","field_type":"int","full_declaration":"public static final int REMAINDER = 0","id":2023},{"comment":"/**\r\n * Do not resize the component.\r\n */\r\n","field_name":"NONE","field_type":"int","full_declaration":"public static final int NONE = 0","id":2024},{"comment":"/**\r\n * Resize the component both horizontally and vertically.\r\n */\r\n","field_name":"BOTH","field_type":"int","full_declaration":"public static final int BOTH = 1","id":2025},{"comment":"/**\r\n * Resize the component horizontally but not vertically.\r\n */\r\n","field_name":"HORIZONTAL","field_type":"int","full_declaration":"public static final int HORIZONTAL = 2","id":2026},{"comment":"/**\r\n * Resize the component vertically but not horizontally.\r\n */\r\n","field_name":"VERTICAL","field_type":"int","full_declaration":"public static final int VERTICAL = 3","id":2027},{"comment":"/**\r\n * Put the component in the center of its display area.\r\n */\r\n","field_name":"CENTER","field_type":"int","full_declaration":"public static final int CENTER = 10","id":2028},{"comment":"/**\r\n * Put the component at the top of its display area,\r\n * centered horizontally.\r\n */\r\n","field_name":"NORTH","field_type":"int","full_declaration":"public static final int NORTH = 11","id":2029},{"comment":"/**\r\n * Put the component at the top-right corner of its display area.\r\n */\r\n","field_name":"NORTHEAST","field_type":"int","full_declaration":"public static final int NORTHEAST = 12","id":2030},{"comment":"/**\r\n * Put the component on the right side of its display area,\r\n * centered vertically.\r\n */\r\n","field_name":"EAST","field_type":"int","full_declaration":"public static final int EAST = 13","id":2031},{"comment":"/**\r\n * Put the component at the bottom-right corner of its display area.\r\n */\r\n","field_name":"SOUTHEAST","field_type":"int","full_declaration":"public static final int SOUTHEAST = 14","id":2032},{"comment":"/**\r\n * Put the component at the bottom of its display area, centered\r\n * horizontally.\r\n */\r\n","field_name":"SOUTH","field_type":"int","full_declaration":"public static final int SOUTH = 15","id":2033},{"comment":"/**\r\n * Put the component at the bottom-left corner of its display area.\r\n */\r\n","field_name":"SOUTHWEST","field_type":"int","full_declaration":"public static final int SOUTHWEST = 16","id":2034},{"comment":"/**\r\n * Put the component on the left side of its display area,\r\n * centered vertically.\r\n */\r\n","field_name":"WEST","field_type":"int","full_declaration":"public static final int WEST = 17","id":2035},{"comment":"/**\r\n * Put the component at the top-left corner of its display area.\r\n */\r\n","field_name":"NORTHWEST","field_type":"int","full_declaration":"public static final int NORTHWEST = 18","id":2036},{"comment":"/**\r\n * Place the component centered along the edge of its display area\r\n * associated with the start of a page for the current\r\n * {@code ComponentOrientation}.  Equal to NORTH for horizontal\r\n * orientations.\r\n */\r\n","field_name":"PAGE_START","field_type":"int","full_declaration":"public static final int PAGE_START = 19","id":2037},{"comment":"/**\r\n * Place the component centered along the edge of its display area\r\n * associated with the end of a page for the current\r\n * {@code ComponentOrientation}.  Equal to SOUTH for horizontal\r\n * orientations.\r\n */\r\n","field_name":"PAGE_END","field_type":"int","full_declaration":"public static final int PAGE_END = 20","id":2038},{"comment":"/**\r\n * Place the component centered along the edge of its display area where\r\n * lines of text would normally begin for the current\r\n * {@code ComponentOrientation}.  Equal to WEST for horizontal,\r\n * left-to-right orientations and EAST for horizontal, right-to-left\r\n * orientations.\r\n */\r\n","field_name":"LINE_START","field_type":"int","full_declaration":"public static final int LINE_START = 21","id":2039},{"comment":"/**\r\n * Place the component centered along the edge of its display area where\r\n * lines of text would normally end for the current\r\n * {@code ComponentOrientation}.  Equal to EAST for horizontal,\r\n * left-to-right orientations and WEST for horizontal, right-to-left\r\n * orientations.\r\n */\r\n","field_name":"LINE_END","field_type":"int","full_declaration":"public static final int LINE_END = 22","id":2040},{"comment":"/**\r\n * Place the component in the corner of its display area where\r\n * the first line of text on a page would normally begin for the current\r\n * {@code ComponentOrientation}.  Equal to NORTHWEST for horizontal,\r\n * left-to-right orientations and NORTHEAST for horizontal, right-to-left\r\n * orientations.\r\n */\r\n","field_name":"FIRST_LINE_START","field_type":"int","full_declaration":"public static final int FIRST_LINE_START = 23","id":2041},{"comment":"/**\r\n * Place the component in the corner of its display area where\r\n * the first line of text on a page would normally end for the current\r\n * {@code ComponentOrientation}.  Equal to NORTHEAST for horizontal,\r\n * left-to-right orientations and NORTHWEST for horizontal, right-to-left\r\n * orientations.\r\n */\r\n","field_name":"FIRST_LINE_END","field_type":"int","full_declaration":"public static final int FIRST_LINE_END = 24","id":2042},{"comment":"/**\r\n * Place the component in the corner of its display area where\r\n * the last line of text on a page would normally start for the current\r\n * {@code ComponentOrientation}.  Equal to SOUTHWEST for horizontal,\r\n * left-to-right orientations and SOUTHEAST for horizontal, right-to-left\r\n * orientations.\r\n */\r\n","field_name":"LAST_LINE_START","field_type":"int","full_declaration":"public static final int LAST_LINE_START = 25","id":2043},{"comment":"/**\r\n * Place the component in the corner of its display area where\r\n * the last line of text on a page would normally end for the current\r\n * {@code ComponentOrientation}.  Equal to SOUTHEAST for horizontal,\r\n * left-to-right orientations and SOUTHWEST for horizontal, right-to-left\r\n * orientations.\r\n */\r\n","field_name":"LAST_LINE_END","field_type":"int","full_declaration":"public static final int LAST_LINE_END = 26","id":2044},{"comment":"/**\r\n * Possible value for the <code>anchor</code> field.  Specifies\r\n * that the component should be horizontally centered and\r\n * vertically aligned along the baseline of the prevailing row.\r\n * If the component does not have a baseline it will be vertically\r\n * centered.\r\n *\r\n * @since 1.6\r\n */\r\n","field_name":"BASELINE","field_type":"int","full_declaration":"public static final int BASELINE = 0x100","id":2045},{"comment":"/**\r\n * Possible value for the <code>anchor</code> field.  Specifies\r\n * that the component should be horizontally placed along the\r\n * leading edge.  For components with a left-to-right orientation,\r\n * the leading edge is the left edge.  Vertically the component is\r\n * aligned along the baseline of the prevailing row.  If the\r\n * component does not have a baseline it will be vertically\r\n * centered.\r\n *\r\n * @since 1.6\r\n */\r\n","field_name":"BASELINE_LEADING","field_type":"int","full_declaration":"public static final int BASELINE_LEADING = 0x200","id":2046},{"comment":"/**\r\n * Possible value for the <code>anchor</code> field.  Specifies\r\n * that the component should be horizontally placed along the\r\n * trailing edge.  For components with a left-to-right\r\n * orientation, the trailing edge is the right edge.  Vertically\r\n * the component is aligned along the baseline of the prevailing\r\n * row.  If the component does not have a baseline it will be\r\n * vertically centered.\r\n *\r\n * @since 1.6\r\n */\r\n","field_name":"BASELINE_TRAILING","field_type":"int","full_declaration":"public static final int BASELINE_TRAILING = 0x300","id":2047},{"comment":"/**\r\n * Possible value for the <code>anchor</code> field.  Specifies\r\n * that the component should be horizontally centered.  Vertically\r\n * the component is positioned so that its bottom edge touches\r\n * the baseline of the starting row.  If the starting row does not\r\n * have a baseline it will be vertically centered.\r\n *\r\n * @since 1.6\r\n */\r\n","field_name":"ABOVE_BASELINE","field_type":"int","full_declaration":"public static final int ABOVE_BASELINE = 0x400","id":2048},{"comment":"/**\r\n * Possible value for the <code>anchor</code> field.  Specifies\r\n * that the component should be horizontally placed along the\r\n * leading edge.  For components with a left-to-right orientation,\r\n * the leading edge is the left edge.  Vertically the component is\r\n * positioned so that its bottom edge touches the baseline of the\r\n * starting row.  If the starting row does not have a baseline it\r\n * will be vertically centered.\r\n *\r\n * @since 1.6\r\n */\r\n","field_name":"ABOVE_BASELINE_LEADING","field_type":"int","full_declaration":"public static final int ABOVE_BASELINE_LEADING = 0x500","id":2049},{"comment":"/**\r\n * Possible value for the <code>anchor</code> field.  Specifies\r\n * that the component should be horizontally placed along the\r\n * trailing edge.  For components with a left-to-right\r\n * orientation, the trailing edge is the right edge.  Vertically\r\n * the component is positioned so that its bottom edge touches\r\n * the baseline of the starting row.  If the starting row does not\r\n * have a baseline it will be vertically centered.\r\n *\r\n * @since 1.6\r\n */\r\n","field_name":"ABOVE_BASELINE_TRAILING","field_type":"int","full_declaration":"public static final int ABOVE_BASELINE_TRAILING = 0x600","id":2050},{"comment":"/**\r\n * Possible value for the <code>anchor</code> field.  Specifies\r\n * that the component should be horizontally centered.  Vertically\r\n * the component is positioned so that its top edge touches the\r\n * baseline of the starting row.  If the starting row does not\r\n * have a baseline it will be vertically centered.\r\n *\r\n * @since 1.6\r\n */\r\n","field_name":"BELOW_BASELINE","field_type":"int","full_declaration":"public static final int BELOW_BASELINE = 0x700","id":2051},{"comment":"/**\r\n * Possible value for the <code>anchor</code> field.  Specifies\r\n * that the component should be horizontally placed along the\r\n * leading edge.  For components with a left-to-right orientation,\r\n * the leading edge is the left edge.  Vertically the component is\r\n * positioned so that its top edge touches the baseline of the\r\n * starting row.  If the starting row does not have a baseline it\r\n * will be vertically centered.\r\n *\r\n * @since 1.6\r\n */\r\n","field_name":"BELOW_BASELINE_LEADING","field_type":"int","full_declaration":"public static final int BELOW_BASELINE_LEADING = 0x800","id":2052},{"comment":"/**\r\n * Possible value for the <code>anchor</code> field.  Specifies\r\n * that the component should be horizontally placed along the\r\n * trailing edge.  For components with a left-to-right\r\n * orientation, the trailing edge is the right edge.  Vertically\r\n * the component is positioned so that its top edge touches the\r\n * baseline of the starting row.  If the starting row does not\r\n * have a baseline it will be vertically centered.\r\n *\r\n * @since 1.6\r\n */\r\n","field_name":"BELOW_BASELINE_TRAILING","field_type":"int","full_declaration":"public static final int BELOW_BASELINE_TRAILING = 0x900","id":2053},{"comment":"/**\r\n * Specifies the cell containing the leading edge of the component's\r\n * display area, where the first cell in a row has <code>gridx=0</code>.\r\n * The leading edge of a component's display area is its left edge for\r\n * a horizontal, left-to-right container and its right edge for a\r\n * horizontal, right-to-left container.\r\n * The value\r\n * <code>RELATIVE</code> specifies that the component be placed\r\n * immediately following the component that was added to the container\r\n * just before this component was added.\r\n * <p>\r\n * The default value is <code>RELATIVE</code>.\r\n * <code>gridx</code> should be a non-negative value.\r\n * @serial\r\n * @see #clone()\r\n * @see java.awt.GridBagConstraints#gridy\r\n * @see java.awt.ComponentOrientation\r\n */\r\n","field_name":"gridx","field_type":"int","full_declaration":"public int gridx","id":2054},{"comment":"/**\r\n * Specifies the cell at the top of the component's display area,\r\n * where the topmost cell has <code>gridy=0</code>. The value\r\n * <code>RELATIVE</code> specifies that the component be placed just\r\n * below the component that was added to the container just before\r\n * this component was added.\r\n * <p>\r\n * The default value is <code>RELATIVE</code>.\r\n * <code>gridy</code> should be a non-negative value.\r\n * @serial\r\n * @see #clone()\r\n * @see java.awt.GridBagConstraints#gridx\r\n */\r\n","field_name":"gridy","field_type":"int","full_declaration":"public int gridy","id":2055},{"comment":"/**\r\n * Specifies the number of cells in a row for the component's\r\n * display area.\r\n * <p>\r\n * Use <code>REMAINDER</code> to specify that the component's\r\n * display area will be from <code>gridx</code> to the last\r\n * cell in the row.\r\n * Use <code>RELATIVE</code> to specify that the component's\r\n * display area will be from <code>gridx</code> to the next\r\n * to the last one in its row.\r\n * <p>\r\n * <code>gridwidth</code> should be non-negative and the default\r\n * value is 1.\r\n * @serial\r\n * @see #clone()\r\n * @see java.awt.GridBagConstraints#gridheight\r\n */\r\n","field_name":"gridwidth","field_type":"int","full_declaration":"public int gridwidth","id":2056},{"comment":"/**\r\n * Specifies the number of cells in a column for the component's\r\n * display area.\r\n * <p>\r\n * Use <code>REMAINDER</code> to specify that the component's\r\n * display area will be from <code>gridy</code> to the last\r\n * cell in the column.\r\n * Use <code>RELATIVE</code> to specify that the component's\r\n * display area will be from <code>gridy</code> to the next\r\n * to the last one in its column.\r\n * <p>\r\n * <code>gridheight</code> should be a non-negative value and the\r\n * default value is 1.\r\n * @serial\r\n * @see #clone()\r\n * @see java.awt.GridBagConstraints#gridwidth\r\n */\r\n","field_name":"gridheight","field_type":"int","full_declaration":"public int gridheight","id":2057},{"comment":"/**\r\n * Specifies how to distribute extra horizontal space.\r\n * <p>\r\n * The grid bag layout manager calculates the weight of a column to\r\n * be the maximum <code>weightx</code> of all the components in a\r\n * column. If the resulting layout is smaller horizontally than the area\r\n * it needs to fill, the extra space is distributed to each column in\r\n * proportion to its weight. A column that has a weight of zero receives\r\n * no extra space.\r\n * <p>\r\n * If all the weights are zero, all the extra space appears between\r\n * the grids of the cell and the left and right edges.\r\n * <p>\r\n * The default value of this field is <code>0</code>.\r\n * <code>weightx</code> should be a non-negative value.\r\n * @serial\r\n * @see #clone()\r\n * @see java.awt.GridBagConstraints#weighty\r\n */\r\n","field_name":"weightx","field_type":"double","full_declaration":"public double weightx","id":2058},{"comment":"/**\r\n * Specifies how to distribute extra vertical space.\r\n * <p>\r\n * The grid bag layout manager calculates the weight of a row to be\r\n * the maximum <code>weighty</code> of all the components in a row.\r\n * If the resulting layout is smaller vertically than the area it\r\n * needs to fill, the extra space is distributed to each row in\r\n * proportion to its weight. A row that has a weight of zero receives no\r\n * extra space.\r\n * <p>\r\n * If all the weights are zero, all the extra space appears between\r\n * the grids of the cell and the top and bottom edges.\r\n * <p>\r\n * The default value of this field is <code>0</code>.\r\n * <code>weighty</code> should be a non-negative value.\r\n * @serial\r\n * @see #clone()\r\n * @see java.awt.GridBagConstraints#weightx\r\n */\r\n","field_name":"weighty","field_type":"double","full_declaration":"public double weighty","id":2059},{"comment":"/**\r\n * This field is used when the component is smaller than its\r\n * display area. It determines where, within the display area, to\r\n * place the component.\r\n * <p> There are three kinds of possible values: orientation\r\n * relative, baseline relative and absolute.  Orientation relative\r\n * values are interpreted relative to the container's component\r\n * orientation property, baseline relative values are interpreted\r\n * relative to the baseline and absolute values are not.  The\r\n * absolute values are:\r\n * <code>CENTER</code>, <code>NORTH</code>, <code>NORTHEAST</code>,\r\n * <code>EAST</code>, <code>SOUTHEAST</code>, <code>SOUTH</code>,\r\n * <code>SOUTHWEST</code>, <code>WEST</code>, and <code>NORTHWEST</code>.\r\n * The orientation relative values are: <code>PAGE_START</code>,\r\n * <code>PAGE_END</code>,\r\n * <code>LINE_START</code>, <code>LINE_END</code>,\r\n * <code>FIRST_LINE_START</code>, <code>FIRST_LINE_END</code>,\r\n * <code>LAST_LINE_START</code> and <code>LAST_LINE_END</code>.  The\r\n * baseline relative values are:\r\n * <code>BASELINE</code>, <code>BASELINE_LEADING</code>,\r\n * <code>BASELINE_TRAILING</code>,\r\n * <code>ABOVE_BASELINE</code>, <code>ABOVE_BASELINE_LEADING</code>,\r\n * <code>ABOVE_BASELINE_TRAILING</code>,\r\n * <code>BELOW_BASELINE</code>, <code>BELOW_BASELINE_LEADING</code>,\r\n * and <code>BELOW_BASELINE_TRAILING</code>.\r\n * The default value is <code>CENTER</code>.\r\n * @serial\r\n * @see #clone()\r\n * @see java.awt.ComponentOrientation\r\n */\r\n","field_name":"anchor","field_type":"int","full_declaration":"public int anchor","id":2060},{"comment":"/**\r\n * This field is used when the component's display area is larger\r\n * than the component's requested size. It determines whether to\r\n * resize the component, and if so, how.\r\n * <p>\r\n * The following values are valid for <code>fill</code>:\r\n *\r\n * <ul>\r\n * <li>\r\n * <code>NONE</code>: Do not resize the component.\r\n * <li>\r\n * <code>HORIZONTAL</code>: Make the component wide enough to fill\r\n *         its display area horizontally, but do not change its height.\r\n * <li>\r\n * <code>VERTICAL</code>: Make the component tall enough to fill its\r\n *         display area vertically, but do not change its width.\r\n * <li>\r\n * <code>BOTH</code>: Make the component fill its display area\r\n *         entirely.\r\n * </ul>\r\n * <p>\r\n * The default value is <code>NONE</code>.\r\n * @serial\r\n * @see #clone()\r\n */\r\n","field_name":"fill","field_type":"int","full_declaration":"public int fill","id":2061},{"comment":"/**\r\n * This field specifies the external padding of the component, the\r\n * minimum amount of space between the component and the edges of its\r\n * display area.\r\n * <p>\r\n * The default value is <code>new Insets(0, 0, 0, 0)</code>.\r\n * @serial\r\n * @see #clone()\r\n */\r\npublic Insets insets;","field_name":"insets","field_type":"java.awt.Insets","full_declaration":"public java.awt.Insets insets","id":2062},{"comment":"/**\r\n * This field specifies the internal padding of the component, how much\r\n * space to add to the minimum width of the component. The width of\r\n * the component is at least its minimum width plus\r\n * <code>ipadx</code> pixels.\r\n * <p>\r\n * The default value is <code>0</code>.\r\n * @serial\r\n * @see #clone()\r\n * @see java.awt.GridBagConstraints#ipady\r\n */\r\n","field_name":"ipadx","field_type":"int","full_declaration":"public int ipadx","id":2063},{"comment":"/**\r\n * This field specifies the internal padding, that is, how much\r\n * space to add to the minimum height of the component. The height of\r\n * the component is at least its minimum height plus\r\n * <code>ipady</code> pixels.\r\n * <p>\r\n * The default value is 0.\r\n * @serial\r\n * @see #clone()\r\n * @see java.awt.GridBagConstraints#ipadx\r\n */\r\n","field_name":"ipady","field_type":"int","full_declaration":"public int ipady","id":2064},{"comment":"/**\r\n * Temporary place holder for the x coordinate.\r\n * @serial\r\n */\r\n","field_name":"tempX","field_type":"int","full_declaration":"int tempX","id":2065},{"comment":"/**\r\n * Temporary place holder for the y coordinate.\r\n * @serial\r\n */\r\n","field_name":"tempY","field_type":"int","full_declaration":"int tempY","id":2066},{"comment":"/**\r\n * Temporary place holder for the Width of the component.\r\n * @serial\r\n */\r\n","field_name":"tempWidth","field_type":"int","full_declaration":"int tempWidth","id":2067},{"comment":"/**\r\n * Temporary place holder for the Height of the component.\r\n * @serial\r\n */\r\n","field_name":"tempHeight","field_type":"int","full_declaration":"int tempHeight","id":2068},{"comment":"/**\r\n * The minimum width of the component.  It is used to calculate\r\n * <code>ipady</code>, where the default will be 0.\r\n * @serial\r\n * @see #ipady\r\n */\r\n","field_name":"minWidth","field_type":"int","full_declaration":"int minWidth","id":2069},{"comment":"/**\r\n * The minimum height of the component. It is used to calculate\r\n * <code>ipadx</code>, where the default will be 0.\r\n * @serial\r\n * @see #ipadx\r\n */\r\n","field_name":"minHeight","field_type":"int","full_declaration":"int minHeight","id":2070},{"comment":"// The following fields are only used if the anchor is\r\n// one of BASELINE, BASELINE_LEADING or BASELINE_TRAILING.\r\n// ascent and descent include the insets and ipady values.\r\n","field_name":"ascent","field_type":"int","full_declaration":"transient int ascent","id":2071},{"comment":"","field_name":"descent","field_type":"int","full_declaration":"transient int descent","id":2072},{"comment":"transient Component.BaselineResizeBehavior baselineResizeBehavior;","field_name":"baselineResizeBehavior","field_type":"java.awt.Component.BaselineResizeBehavior","full_declaration":"transient java.awt.Component.BaselineResizeBehavior baselineResizeBehavior","id":2073},{"comment":"// The folllowing two fields are used if the baseline type is\r\n// CENTER_OFFSET.\r\n// centerPadding is either 0 or 1 and indicates if\r\n// the height needs to be padded by one when calculating where the\r\n// baseline lands\r\n","field_name":"centerPadding","field_type":"int","full_declaration":"transient int centerPadding","id":2074},{"comment":"// Where the baseline lands relative to the center of the component.\r\n","field_name":"centerOffset","field_type":"int","full_declaration":"transient int centerOffset","id":2075},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -1000070633030801713L","id":2076},{"comment":"","field_name":"EMPIRICMULTIPLIER","field_type":"int","full_declaration":"static final int EMPIRICMULTIPLIER = 2","id":2077},{"comment":"/**\r\n * This field is no longer used to reserve arrays and kept for backward\r\n * compatibility. Previously, this was\r\n * the maximum number of grid positions (both horizontal and\r\n * vertical) that could be laid out by the grid bag layout.\r\n * Current implementation doesn't impose any limits\r\n * on the size of a grid.\r\n */\r\n","field_name":"MAXGRIDSIZE","field_type":"int","full_declaration":"protected static final int MAXGRIDSIZE = 512","id":2078},{"comment":"/**\r\n * The smallest grid that can be laid out by the grid bag layout.\r\n */\r\n","field_name":"MINSIZE","field_type":"int","full_declaration":"protected static final int MINSIZE = 1","id":2079},{"comment":"/**\r\n * The preferred grid size that can be laid out by the grid bag layout.\r\n */\r\n","field_name":"PREFERREDSIZE","field_type":"int","full_declaration":"protected static final int PREFERREDSIZE = 2","id":2080},{"comment":"/**\r\n * This hashtable maintains the association between\r\n * a component and its gridbag constraints.\r\n * The Keys in <code>comptable</code> are the components and the\r\n * values are the instances of <code>GridBagConstraints</code>.\r\n *\r\n * @serial\r\n * @see java.awt.GridBagConstraints\r\n */\r\nprotected Hashtable<Component, GridBagConstraints> comptable;","field_name":"comptable","field_type":"java.util.Hashtable","full_declaration":"protected java.util.Hashtable comptable","id":2081},{"comment":"/**\r\n * This field holds a gridbag constraints instance\r\n * containing the default values, so if a component\r\n * does not have gridbag constraints associated with\r\n * it, then the component will be assigned a\r\n * copy of the <code>defaultConstraints</code>.\r\n *\r\n * @serial\r\n * @see #getConstraints(Component)\r\n * @see #setConstraints(Component, GridBagConstraints)\r\n * @see #lookupConstraints(Component)\r\n */\r\nprotected GridBagConstraints defaultConstraints;","field_name":"defaultConstraints","field_type":"java.awt.GridBagConstraints","full_declaration":"protected java.awt.GridBagConstraints defaultConstraints","id":2082},{"comment":"/**\r\n * This field holds the layout information\r\n * for the gridbag.  The information in this field\r\n * is based on the most recent validation of the\r\n * gridbag.\r\n * If <code>layoutInfo</code> is <code>null</code>\r\n * this indicates that there are no components in\r\n * the gridbag or if there are components, they have\r\n * not yet been validated.\r\n *\r\n * @serial\r\n * @see #getLayoutInfo(Container, int)\r\n */\r\nprotected GridBagLayoutInfo layoutInfo;","field_name":"layoutInfo","field_type":"java.awt.GridBagLayoutInfo","full_declaration":"protected java.awt.GridBagLayoutInfo layoutInfo","id":2083},{"comment":"/**\r\n * This field holds the overrides to the column minimum\r\n * width.  If this field is non-<code>null</code> the values are\r\n * applied to the gridbag after all of the minimum columns\r\n * widths have been calculated.\r\n * If columnWidths has more elements than the number of\r\n * columns, columns are added to the gridbag to match\r\n * the number of elements in columnWidth.\r\n *\r\n * @serial\r\n * @see #getLayoutDimensions()\r\n */\r\n","field_name":"columnWidths","field_type":"int[]","full_declaration":"public int[] columnWidths","id":2084},{"comment":"/**\r\n * This field holds the overrides to the row minimum\r\n * heights.  If this field is non-<code>null</code> the values are\r\n * applied to the gridbag after all of the minimum row\r\n * heights have been calculated.\r\n * If <code>rowHeights</code> has more elements than the number of\r\n * rows, rows are added to the gridbag to match\r\n * the number of elements in <code>rowHeights</code>.\r\n *\r\n * @serial\r\n * @see #getLayoutDimensions()\r\n */\r\n","field_name":"rowHeights","field_type":"int[]","full_declaration":"public int[] rowHeights","id":2085},{"comment":"/**\r\n * This field holds the overrides to the column weights.\r\n * If this field is non-<code>null</code> the values are\r\n * applied to the gridbag after all of the columns\r\n * weights have been calculated.\r\n * If <code>columnWeights[i]</code> &gt; weight for column i, then\r\n * column i is assigned the weight in <code>columnWeights[i]</code>.\r\n * If <code>columnWeights</code> has more elements than the number\r\n * of columns, the excess elements are ignored - they do\r\n * not cause more columns to be created.\r\n *\r\n * @serial\r\n */\r\n","field_name":"columnWeights","field_type":"double[]","full_declaration":"public double[] columnWeights","id":2086},{"comment":"/**\r\n * This field holds the overrides to the row weights.\r\n * If this field is non-<code>null</code> the values are\r\n * applied to the gridbag after all of the rows\r\n * weights have been calculated.\r\n * If <code>rowWeights[i]</code> &gt; weight for row i, then\r\n * row i is assigned the weight in <code>rowWeights[i]</code>.\r\n * If <code>rowWeights</code> has more elements than the number\r\n * of rows, the excess elements are ignored - they do\r\n * not cause more rows to be created.\r\n *\r\n * @serial\r\n */\r\n","field_name":"rowWeights","field_type":"double[]","full_declaration":"public double[] rowWeights","id":2087},{"comment":"/**\r\n * The component being positioned.  This is set before calling into\r\n * <code>adjustForGravity</code>.\r\n */\r\nprivate Component componentAdjusting;","field_name":"componentAdjusting","field_type":"java.awt.Component","full_declaration":"private java.awt.Component componentAdjusting","id":2088},{"comment":"","field_name":"rightToLeft","field_type":"boolean","full_declaration":"transient boolean rightToLeft = false","id":2089},{"comment":"// Added for serial backwards compatibility (4348425)\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"static final long serialVersionUID = 8838754796412211005L","id":2090},{"comment":"/*\r\n     * serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -4899416460737170217L","id":2091},{"comment":"int width, height;","field_name":"width","field_type":"int","full_declaration":"int width","id":2092},{"comment":"int width, height;","field_name":"height","field_type":"int","full_declaration":"int widthint height","id":2093},{"comment":"/* number of  cells: horizontal and vertical */\r\nint startx, starty;","field_name":"startx","field_type":"int","full_declaration":"int startx","id":2094},{"comment":"/* number of  cells: horizontal and vertical */\r\nint startx, starty;","field_name":"starty","field_type":"int","full_declaration":"int startxint starty","id":2095},{"comment":"/* starting point for layout */\r\n","field_name":"minWidth","field_type":"int[]","full_declaration":"int[] minWidth","id":2096},{"comment":"/* largest minWidth in each column */\r\n","field_name":"minHeight","field_type":"int[]","full_declaration":"int[] minHeight","id":2097},{"comment":"/* largest minHeight in each row */\r\n","field_name":"weightX","field_type":"double[]","full_declaration":"double[] weightX","id":2098},{"comment":"/* largest weight in each column */\r\n","field_name":"weightY","field_type":"double[]","full_declaration":"double[] weightY","id":2099},{"comment":"/* largest weight in each row */\r\n","field_name":"hasBaseline","field_type":"boolean","full_declaration":"boolean hasBaseline","id":2100},{"comment":"/* Whether or not baseline layout has been\r\n                                 * requested and one of the components\r\n                                 * has a valid baseline. */\r\n// These are only valid if hasBaseline is true and are indexed by\r\n// row.\r\n","field_name":"baselineType","field_type":"short[]","full_declaration":"short[] baselineType","id":2101},{"comment":"/* The type of baseline for a particular\r\n                                 * row.  A mix of the BaselineResizeBehavior\r\n                                 * constants (1 << ordinal()) */\r\n","field_name":"maxAscent","field_type":"int[]","full_declaration":"int[] maxAscent","id":2102},{"comment":"/* Max ascent (baseline). */\r\n","field_name":"maxDescent","field_type":"int[]","full_declaration":"int[] maxDescent","id":2103},{"comment":"/*\r\n     * serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -7411804673224730901L","id":2104},{"comment":"/**\r\n * This is the horizontal gap (in pixels) which specifies the space\r\n * between columns.  They can be changed at any time.\r\n * This should be a non-negative integer.\r\n *\r\n * @serial\r\n * @see #getHgap()\r\n * @see #setHgap(int)\r\n */\r\n","field_name":"hgap","field_type":"int","full_declaration":"int hgap","id":2105},{"comment":"/**\r\n * This is the vertical gap (in pixels) which specifies the space\r\n * between rows.  They can be changed at any time.\r\n * This should be a non negative integer.\r\n *\r\n * @serial\r\n * @see #getVgap()\r\n * @see #setVgap(int)\r\n */\r\n","field_name":"vgap","field_type":"int","full_declaration":"int vgap","id":2106},{"comment":"/**\r\n * This is the number of rows specified for the grid.  The number\r\n * of rows can be changed at any time.\r\n * This should be a non negative integer, where '0' means\r\n * 'any number' meaning that the number of Rows in that\r\n * dimension depends on the other dimension.\r\n *\r\n * @serial\r\n * @see #getRows()\r\n * @see #setRows(int)\r\n */\r\n","field_name":"rows","field_type":"int","full_declaration":"int rows","id":2107},{"comment":"/**\r\n * This is the number of columns specified for the grid.  The number\r\n * of columns can be changed at any time.\r\n * This should be a non negative integer, where '0' means\r\n * 'any number' meaning that the number of Columns in that\r\n * dimension depends on the other dimension.\r\n *\r\n * @serial\r\n * @see #getColumns()\r\n * @see #setColumns(int)\r\n */\r\n","field_name":"cols","field_type":"int","full_declaration":"int cols","id":2108},{"comment":"/*\r\n     * JDK 1.4 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 167183644944358563L","id":2109},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -1889339587208144238L","id":2110},{"comment":"/**\r\n * Constant for the raw text state.\r\n */\r\n","field_name":"RAW_TEXT","field_type":"int","full_declaration":"public final static int RAW_TEXT = 0","id":2111},{"comment":"/**\r\n * Constant for the converted text state.\r\n */\r\n","field_name":"CONVERTED_TEXT","field_type":"int","full_declaration":"public final static int CONVERTED_TEXT = 1","id":2112},{"comment":"/**\r\n * Constant for the default highlight for unselected raw text.\r\n */\r\npublic final static InputMethodHighlight UNSELECTED_RAW_TEXT_HIGHLIGHT = new InputMethodHighlight(false, RAW_TEXT);","field_name":"UNSELECTED_RAW_TEXT_HIGHLIGHT","field_type":"java.awt.im.InputMethodHighlight","full_declaration":"public final static java.awt.im.InputMethodHighlight UNSELECTED_RAW_TEXT_HIGHLIGHT = new InputMethodHighlight(false, RAW_TEXT)","id":2113},{"comment":"/**\r\n * Constant for the default highlight for selected raw text.\r\n */\r\npublic final static InputMethodHighlight SELECTED_RAW_TEXT_HIGHLIGHT = new InputMethodHighlight(true, RAW_TEXT);","field_name":"SELECTED_RAW_TEXT_HIGHLIGHT","field_type":"java.awt.im.InputMethodHighlight","full_declaration":"public final static java.awt.im.InputMethodHighlight SELECTED_RAW_TEXT_HIGHLIGHT = new InputMethodHighlight(true, RAW_TEXT)","id":2114},{"comment":"/**\r\n * Constant for the default highlight for unselected converted text.\r\n */\r\npublic final static InputMethodHighlight UNSELECTED_CONVERTED_TEXT_HIGHLIGHT = new InputMethodHighlight(false, CONVERTED_TEXT);","field_name":"UNSELECTED_CONVERTED_TEXT_HIGHLIGHT","field_type":"java.awt.im.InputMethodHighlight","full_declaration":"public final static java.awt.im.InputMethodHighlight UNSELECTED_CONVERTED_TEXT_HIGHLIGHT = new InputMethodHighlight(false, CONVERTED_TEXT)","id":2115},{"comment":"/**\r\n * Constant for the default highlight for selected converted text.\r\n */\r\npublic final static InputMethodHighlight SELECTED_CONVERTED_TEXT_HIGHLIGHT = new InputMethodHighlight(true, CONVERTED_TEXT);","field_name":"SELECTED_CONVERTED_TEXT_HIGHLIGHT","field_type":"java.awt.im.InputMethodHighlight","full_declaration":"public final static java.awt.im.InputMethodHighlight SELECTED_CONVERTED_TEXT_HIGHLIGHT = new InputMethodHighlight(true, CONVERTED_TEXT)","id":2116},{"comment":"","field_name":"selected","field_type":"boolean","full_declaration":"private boolean selected","id":2117},{"comment":"","field_name":"state","field_type":"int","full_declaration":"private int state","id":2118},{"comment":"","field_name":"variation","field_type":"int","full_declaration":"private int variation","id":2119},{"comment":"private Map<TextAttribute, ?> style;","field_name":"style","field_type":"java.util.Map","full_declaration":"private java.util.Map style","id":2120},{"comment":"/**\r\n * Constant for all Latin characters, including the characters\r\n * in the BASIC_LATIN, LATIN_1_SUPPLEMENT, LATIN_EXTENDED_A,\r\n * LATIN_EXTENDED_B Unicode character blocks.\r\n */\r\npublic static final InputSubset LATIN = new InputSubset(\"LATIN\");","field_name":"LATIN","field_type":"java.awt.im.InputSubset","full_declaration":"public static final java.awt.im.InputSubset LATIN = new InputSubset(\"LATIN\")","id":2121},{"comment":"/**\r\n * Constant for the digits included in the BASIC_LATIN Unicode character\r\n * block.\r\n */\r\npublic static final InputSubset LATIN_DIGITS = new InputSubset(\"LATIN_DIGITS\");","field_name":"LATIN_DIGITS","field_type":"java.awt.im.InputSubset","full_declaration":"public static final java.awt.im.InputSubset LATIN_DIGITS = new InputSubset(\"LATIN_DIGITS\")","id":2122},{"comment":"/**\r\n * Constant for all Han characters used in writing Traditional Chinese,\r\n * including a subset of the CJK unified ideographs as well as Traditional\r\n * Chinese Han characters that may be defined as surrogate characters.\r\n */\r\npublic static final InputSubset TRADITIONAL_HANZI = new InputSubset(\"TRADITIONAL_HANZI\");","field_name":"TRADITIONAL_HANZI","field_type":"java.awt.im.InputSubset","full_declaration":"public static final java.awt.im.InputSubset TRADITIONAL_HANZI = new InputSubset(\"TRADITIONAL_HANZI\")","id":2123},{"comment":"/**\r\n * Constant for all Han characters used in writing Simplified Chinese,\r\n * including a subset of the CJK unified ideographs as well as Simplified\r\n * Chinese Han characters that may be defined as surrogate characters.\r\n */\r\npublic static final InputSubset SIMPLIFIED_HANZI = new InputSubset(\"SIMPLIFIED_HANZI\");","field_name":"SIMPLIFIED_HANZI","field_type":"java.awt.im.InputSubset","full_declaration":"public static final java.awt.im.InputSubset SIMPLIFIED_HANZI = new InputSubset(\"SIMPLIFIED_HANZI\")","id":2124},{"comment":"/**\r\n * Constant for all Han characters used in writing Japanese, including a\r\n * subset of the CJK unified ideographs as well as Japanese Han characters\r\n * that may be defined as surrogate characters.\r\n */\r\npublic static final InputSubset KANJI = new InputSubset(\"KANJI\");","field_name":"KANJI","field_type":"java.awt.im.InputSubset","full_declaration":"public static final java.awt.im.InputSubset KANJI = new InputSubset(\"KANJI\")","id":2125},{"comment":"/**\r\n * Constant for all Han characters used in writing Korean, including a\r\n * subset of the CJK unified ideographs as well as Korean Han characters\r\n * that may be defined as surrogate characters.\r\n */\r\npublic static final InputSubset HANJA = new InputSubset(\"HANJA\");","field_name":"HANJA","field_type":"java.awt.im.InputSubset","full_declaration":"public static final java.awt.im.InputSubset HANJA = new InputSubset(\"HANJA\")","id":2126},{"comment":"/**\r\n * Constant for the halfwidth katakana subset of the Unicode halfwidth and\r\n * fullwidth forms character block.\r\n */\r\npublic static final InputSubset HALFWIDTH_KATAKANA = new InputSubset(\"HALFWIDTH_KATAKANA\");","field_name":"HALFWIDTH_KATAKANA","field_type":"java.awt.im.InputSubset","full_declaration":"public static final java.awt.im.InputSubset HALFWIDTH_KATAKANA = new InputSubset(\"HALFWIDTH_KATAKANA\")","id":2127},{"comment":"/**\r\n * Constant for the fullwidth ASCII variants subset of the Unicode halfwidth and\r\n * fullwidth forms character block.\r\n * @since 1.3\r\n */\r\npublic static final InputSubset FULLWIDTH_LATIN = new InputSubset(\"FULLWIDTH_LATIN\");","field_name":"FULLWIDTH_LATIN","field_type":"java.awt.im.InputSubset","full_declaration":"public static final java.awt.im.InputSubset FULLWIDTH_LATIN = new InputSubset(\"FULLWIDTH_LATIN\")","id":2128},{"comment":"/**\r\n * Constant for the fullwidth digits included in the Unicode halfwidth and\r\n * fullwidth forms character block.\r\n * @since 1.3\r\n */\r\npublic static final InputSubset FULLWIDTH_DIGITS = new InputSubset(\"FULLWIDTH_DIGITS\");","field_name":"FULLWIDTH_DIGITS","field_type":"java.awt.im.InputSubset","full_declaration":"public static final java.awt.im.InputSubset FULLWIDTH_DIGITS = new InputSubset(\"FULLWIDTH_DIGITS\")","id":2129},{"comment":"private AffineTransform xform;","field_name":"xform","field_type":"java.awt.geom.AffineTransform","full_declaration":"private java.awt.geom.AffineTransform xform","id":2130},{"comment":"RenderingHints hints;","field_name":"hints","field_type":"java.awt.RenderingHints","full_declaration":"java.awt.RenderingHints hints","id":2131},{"comment":"/**\r\n * Nearest-neighbor interpolation type.\r\n */\r\n@Native\r\n","field_name":"TYPE_NEAREST_NEIGHBOR","field_type":"int","full_declaration":"public static final int TYPE_NEAREST_NEIGHBOR = 1","id":2132},{"comment":"/**\r\n * Bilinear interpolation type.\r\n */\r\n@Native\r\n","field_name":"TYPE_BILINEAR","field_type":"int","full_declaration":"public static final int TYPE_BILINEAR = 2","id":2133},{"comment":"/**\r\n * Bicubic interpolation type.\r\n */\r\n@Native\r\n","field_name":"TYPE_BICUBIC","field_type":"int","full_declaration":"public static final int TYPE_BICUBIC = 3","id":2134},{"comment":"","field_name":"interpolationType","field_type":"int","full_declaration":"int interpolationType = TYPE_NEAREST_NEIGHBOR","id":2135},{"comment":"private static final ColorModel rgbmodel = ColorModel.getRGBdefault();","field_name":"rgbmodel","field_type":"java.awt.image.ColorModel","full_declaration":"private static final java.awt.image.ColorModel rgbmodel = ColorModel.getRGBdefault()","id":2136},{"comment":"","field_name":"neededHints","field_type":"int","full_declaration":"private static final int neededHints = (TOPDOWNLEFTRIGHT | COMPLETESCANLINES)","id":2137},{"comment":"","field_name":"passthrough","field_type":"boolean","full_declaration":"private boolean passthrough","id":2138},{"comment":"private float[] reds, greens, blues, alphas;","field_name":"reds","field_type":"float[]","full_declaration":"private float[] reds","id":2139},{"comment":"private float[] reds, greens, blues, alphas;","field_name":"greens","field_type":"float[]","full_declaration":"private float[] redsfloat[] greens","id":2140},{"comment":"private float[] reds, greens, blues, alphas;","field_name":"blues","field_type":"float[]","full_declaration":"private float[] redsfloat[] greensfloat[] blues","id":2141},{"comment":"private float[] reds, greens, blues, alphas;","field_name":"alphas","field_type":"float[]","full_declaration":"private float[] redsfloat[] greensfloat[] bluesfloat[] alphas","id":2142},{"comment":"","field_name":"savedy","field_type":"int","full_declaration":"private int savedy","id":2143},{"comment":"","field_name":"savedyrem","field_type":"int","full_declaration":"private int savedyrem","id":2144},{"comment":"","field_name":"matrix","field_type":"float[][]","full_declaration":"float[][] matrix","id":2145},{"comment":"","field_name":"nrows","field_type":"int","full_declaration":"int nrows = 0","id":2146},{"comment":"","field_name":"ncols","field_type":"int","full_declaration":"int ncols = 0","id":2147},{"comment":"RenderingHints hints;","field_name":"hints","field_type":"java.awt.RenderingHints","full_declaration":"java.awt.RenderingHints hints","id":2148},{"comment":"","field_name":"imageType","field_type":"int","full_declaration":"private int imageType = TYPE_CUSTOM","id":2149},{"comment":"private ColorModel colorModel;","field_name":"colorModel","field_type":"java.awt.image.ColorModel","full_declaration":"private java.awt.image.ColorModel colorModel","id":2150},{"comment":"private final WritableRaster raster;","field_name":"raster","field_type":"java.awt.image.WritableRaster","full_declaration":"private final java.awt.image.WritableRaster raster","id":2151},{"comment":"private OffScreenImageSource osis;","field_name":"osis","field_type":"sun.awt.image.OffScreenImageSource","full_declaration":"private sun.awt.image.OffScreenImageSource osis","id":2152},{"comment":"private Hashtable<String, Object> properties;","field_name":"properties","field_type":"java.util.Hashtable","full_declaration":"private java.util.Hashtable properties","id":2153},{"comment":"/**\r\n * Image Type Constants\r\n */\r\n/**\r\n * Image type is not recognized so it must be a customized\r\n * image.  This type is only used as a return value for the getType()\r\n * method.\r\n */\r\n","field_name":"TYPE_CUSTOM","field_type":"int","full_declaration":"public static final int TYPE_CUSTOM = 0","id":2154},{"comment":"/**\r\n * Represents an image with 8-bit RGB color components packed into\r\n * integer pixels.  The image has a {@link DirectColorModel} without\r\n * alpha.\r\n * When data with non-opaque alpha is stored\r\n * in an image of this type,\r\n * the color data must be adjusted to a non-premultiplied form\r\n * and the alpha discarded,\r\n * as described in the\r\n * {@link java.awt.AlphaComposite} documentation.\r\n */\r\n","field_name":"TYPE_INT_RGB","field_type":"int","full_declaration":"public static final int TYPE_INT_RGB = 1","id":2155},{"comment":"/**\r\n * Represents an image with 8-bit RGBA color components packed into\r\n * integer pixels.  The image has a <code>DirectColorModel</code>\r\n * with alpha. The color data in this image is considered not to be\r\n * premultiplied with alpha.  When this type is used as the\r\n * <code>imageType</code> argument to a <code>BufferedImage</code>\r\n * constructor, the created image is consistent with images\r\n * created in the JDK1.1 and earlier releases.\r\n */\r\n","field_name":"TYPE_INT_ARGB","field_type":"int","full_declaration":"public static final int TYPE_INT_ARGB = 2","id":2156},{"comment":"/**\r\n * Represents an image with 8-bit RGBA color components packed into\r\n * integer pixels.  The image has a <code>DirectColorModel</code>\r\n * with alpha.  The color data in this image is considered to be\r\n * premultiplied with alpha.\r\n */\r\n","field_name":"TYPE_INT_ARGB_PRE","field_type":"int","full_declaration":"public static final int TYPE_INT_ARGB_PRE = 3","id":2157},{"comment":"/**\r\n * Represents an image with 8-bit RGB color components, corresponding\r\n * to a Windows- or Solaris- style BGR color model, with the colors\r\n * Blue, Green, and Red packed into integer pixels.  There is no alpha.\r\n * The image has a {@link DirectColorModel}.\r\n * When data with non-opaque alpha is stored\r\n * in an image of this type,\r\n * the color data must be adjusted to a non-premultiplied form\r\n * and the alpha discarded,\r\n * as described in the\r\n * {@link java.awt.AlphaComposite} documentation.\r\n */\r\n","field_name":"TYPE_INT_BGR","field_type":"int","full_declaration":"public static final int TYPE_INT_BGR = 4","id":2158},{"comment":"/**\r\n * Represents an image with 8-bit RGB color components, corresponding\r\n * to a Windows-style BGR color model) with the colors Blue, Green,\r\n * and Red stored in 3 bytes.  There is no alpha.  The image has a\r\n * <code>ComponentColorModel</code>.\r\n * When data with non-opaque alpha is stored\r\n * in an image of this type,\r\n * the color data must be adjusted to a non-premultiplied form\r\n * and the alpha discarded,\r\n * as described in the\r\n * {@link java.awt.AlphaComposite} documentation.\r\n */\r\n","field_name":"TYPE_3BYTE_BGR","field_type":"int","full_declaration":"public static final int TYPE_3BYTE_BGR = 5","id":2159},{"comment":"/**\r\n * Represents an image with 8-bit RGBA color components with the colors\r\n * Blue, Green, and Red stored in 3 bytes and 1 byte of alpha.  The\r\n * image has a <code>ComponentColorModel</code> with alpha.  The\r\n * color data in this image is considered not to be premultiplied with\r\n * alpha.  The byte data is interleaved in a single\r\n * byte array in the order A, B, G, R\r\n * from lower to higher byte addresses within each pixel.\r\n */\r\n","field_name":"TYPE_4BYTE_ABGR","field_type":"int","full_declaration":"public static final int TYPE_4BYTE_ABGR = 6","id":2160},{"comment":"/**\r\n * Represents an image with 8-bit RGBA color components with the colors\r\n * Blue, Green, and Red stored in 3 bytes and 1 byte of alpha.  The\r\n * image has a <code>ComponentColorModel</code> with alpha. The color\r\n * data in this image is considered to be premultiplied with alpha.\r\n * The byte data is interleaved in a single byte array in the order\r\n * A, B, G, R from lower to higher byte addresses within each pixel.\r\n */\r\n","field_name":"TYPE_4BYTE_ABGR_PRE","field_type":"int","full_declaration":"public static final int TYPE_4BYTE_ABGR_PRE = 7","id":2161},{"comment":"/**\r\n * Represents an image with 5-6-5 RGB color components (5-bits red,\r\n * 6-bits green, 5-bits blue) with no alpha.  This image has\r\n * a <code>DirectColorModel</code>.\r\n * When data with non-opaque alpha is stored\r\n * in an image of this type,\r\n * the color data must be adjusted to a non-premultiplied form\r\n * and the alpha discarded,\r\n * as described in the\r\n * {@link java.awt.AlphaComposite} documentation.\r\n */\r\n","field_name":"TYPE_USHORT_565_RGB","field_type":"int","full_declaration":"public static final int TYPE_USHORT_565_RGB = 8","id":2162},{"comment":"/**\r\n * Represents an image with 5-5-5 RGB color components (5-bits red,\r\n * 5-bits green, 5-bits blue) with no alpha.  This image has\r\n * a <code>DirectColorModel</code>.\r\n * When data with non-opaque alpha is stored\r\n * in an image of this type,\r\n * the color data must be adjusted to a non-premultiplied form\r\n * and the alpha discarded,\r\n * as described in the\r\n * {@link java.awt.AlphaComposite} documentation.\r\n */\r\n","field_name":"TYPE_USHORT_555_RGB","field_type":"int","full_declaration":"public static final int TYPE_USHORT_555_RGB = 9","id":2163},{"comment":"/**\r\n * Represents a unsigned byte grayscale image, non-indexed.  This\r\n * image has a <code>ComponentColorModel</code> with a CS_GRAY\r\n * {@link ColorSpace}.\r\n * When data with non-opaque alpha is stored\r\n * in an image of this type,\r\n * the color data must be adjusted to a non-premultiplied form\r\n * and the alpha discarded,\r\n * as described in the\r\n * {@link java.awt.AlphaComposite} documentation.\r\n */\r\n","field_name":"TYPE_BYTE_GRAY","field_type":"int","full_declaration":"public static final int TYPE_BYTE_GRAY = 10","id":2164},{"comment":"/**\r\n * Represents an unsigned short grayscale image, non-indexed).  This\r\n * image has a <code>ComponentColorModel</code> with a CS_GRAY\r\n * <code>ColorSpace</code>.\r\n * When data with non-opaque alpha is stored\r\n * in an image of this type,\r\n * the color data must be adjusted to a non-premultiplied form\r\n * and the alpha discarded,\r\n * as described in the\r\n * {@link java.awt.AlphaComposite} documentation.\r\n */\r\n","field_name":"TYPE_USHORT_GRAY","field_type":"int","full_declaration":"public static final int TYPE_USHORT_GRAY = 11","id":2165},{"comment":"/**\r\n * Represents an opaque byte-packed 1, 2, or 4 bit image.  The\r\n * image has an {@link IndexColorModel} without alpha.  When this\r\n * type is used as the <code>imageType</code> argument to the\r\n * <code>BufferedImage</code> constructor that takes an\r\n * <code>imageType</code> argument but no <code>ColorModel</code>\r\n * argument, a 1-bit image is created with an\r\n * <code>IndexColorModel</code> with two colors in the default\r\n * sRGB <code>ColorSpace</code>: {0,&nbsp;0,&nbsp;0} and\r\n * {255,&nbsp;255,&nbsp;255}.\r\n *\r\n * <p> Images with 2 or 4 bits per pixel may be constructed via\r\n * the <code>BufferedImage</code> constructor that takes a\r\n * <code>ColorModel</code> argument by supplying a\r\n * <code>ColorModel</code> with an appropriate map size.\r\n *\r\n * <p> Images with 8 bits per pixel should use the image types\r\n * <code>TYPE_BYTE_INDEXED</code> or <code>TYPE_BYTE_GRAY</code>\r\n * depending on their <code>ColorModel</code>.\r\n *\r\n * <p> When color data is stored in an image of this type,\r\n * the closest color in the colormap is determined\r\n * by the <code>IndexColorModel</code> and the resulting index is stored.\r\n * Approximation and loss of alpha or color components\r\n * can result, depending on the colors in the\r\n * <code>IndexColorModel</code> colormap.\r\n */\r\n","field_name":"TYPE_BYTE_BINARY","field_type":"int","full_declaration":"public static final int TYPE_BYTE_BINARY = 12","id":2166},{"comment":"/**\r\n * Represents an indexed byte image.  When this type is used as the\r\n * <code>imageType</code> argument to the <code>BufferedImage</code>\r\n * constructor that takes an <code>imageType</code> argument\r\n * but no <code>ColorModel</code> argument, an\r\n * <code>IndexColorModel</code> is created with\r\n * a 256-color 6/6/6 color cube palette with the rest of the colors\r\n * from 216-255 populated by grayscale values in the\r\n * default sRGB ColorSpace.\r\n *\r\n * <p> When color data is stored in an image of this type,\r\n * the closest color in the colormap is determined\r\n * by the <code>IndexColorModel</code> and the resulting index is stored.\r\n * Approximation and loss of alpha or color components\r\n * can result, depending on the colors in the\r\n * <code>IndexColorModel</code> colormap.\r\n */\r\n","field_name":"TYPE_BYTE_INDEXED","field_type":"int","full_declaration":"public static final int TYPE_BYTE_INDEXED = 13","id":2167},{"comment":"","field_name":"DCM_RED_MASK","field_type":"int","full_declaration":"private static final int DCM_RED_MASK = 0x00ff0000","id":2168},{"comment":"","field_name":"DCM_GREEN_MASK","field_type":"int","full_declaration":"private static final int DCM_GREEN_MASK = 0x0000ff00","id":2169},{"comment":"","field_name":"DCM_BLUE_MASK","field_type":"int","full_declaration":"private static final int DCM_BLUE_MASK = 0x000000ff","id":2170},{"comment":"","field_name":"DCM_ALPHA_MASK","field_type":"int","full_declaration":"private static final int DCM_ALPHA_MASK = 0xff000000","id":2171},{"comment":"","field_name":"DCM_565_RED_MASK","field_type":"int","full_declaration":"private static final int DCM_565_RED_MASK = 0xf800","id":2172},{"comment":"","field_name":"DCM_565_GRN_MASK","field_type":"int","full_declaration":"private static final int DCM_565_GRN_MASK = 0x07E0","id":2173},{"comment":"","field_name":"DCM_565_BLU_MASK","field_type":"int","full_declaration":"private static final int DCM_565_BLU_MASK = 0x001F","id":2174},{"comment":"","field_name":"DCM_555_RED_MASK","field_type":"int","full_declaration":"private static final int DCM_555_RED_MASK = 0x7C00","id":2175},{"comment":"","field_name":"DCM_555_GRN_MASK","field_type":"int","full_declaration":"private static final int DCM_555_GRN_MASK = 0x03E0","id":2176},{"comment":"","field_name":"DCM_555_BLU_MASK","field_type":"int","full_declaration":"private static final int DCM_555_BLU_MASK = 0x001F","id":2177},{"comment":"","field_name":"DCM_BGR_RED_MASK","field_type":"int","full_declaration":"private static final int DCM_BGR_RED_MASK = 0x0000ff","id":2178},{"comment":"","field_name":"DCM_BGR_GRN_MASK","field_type":"int","full_declaration":"private static final int DCM_BGR_GRN_MASK = 0x00ff00","id":2179},{"comment":"","field_name":"DCM_BGR_BLU_MASK","field_type":"int","full_declaration":"private static final int DCM_BGR_BLU_MASK = 0xff0000","id":2180},{"comment":"BufferedImageOp bufferedImageOp;","field_name":"bufferedImageOp","field_type":"java.awt.image.BufferedImageOp","full_declaration":"java.awt.image.BufferedImageOp bufferedImageOp","id":2181},{"comment":"ColorModel model;","field_name":"model","field_type":"java.awt.image.ColorModel","full_declaration":"java.awt.image.ColorModel model","id":2182},{"comment":"","field_name":"width","field_type":"int","full_declaration":"int width","id":2183},{"comment":"","field_name":"height","field_type":"int","full_declaration":"int height","id":2184},{"comment":"","field_name":"bytePixels","field_type":"byte[]","full_declaration":"byte[] bytePixels","id":2185},{"comment":"","field_name":"intPixels","field_type":"int[]","full_declaration":"int[] intPixels","id":2186},{"comment":"/**\r\n * Constants\r\n */\r\n","field_name":"data","field_type":"byte[][]","full_declaration":"byte[][] data","id":2187},{"comment":"","field_name":"profileList","field_type":"ICC_Profile[]","full_declaration":"ICC_Profile[] profileList","id":2188},{"comment":"","field_name":"CSList","field_type":"ColorSpace[]","full_declaration":"ColorSpace[] CSList","id":2189},{"comment":"ColorTransform thisTransform, thisRasterTransform;","field_name":"thisTransform","field_type":"sun.java2d.cmm.ColorTransform","full_declaration":"sun.java2d.cmm.ColorTransform thisTransform","id":2190},{"comment":"ColorTransform thisTransform, thisRasterTransform;","field_name":"thisRasterTransform","field_type":"sun.java2d.cmm.ColorTransform","full_declaration":"sun.java2d.cmm.ColorTransform thisTransformsun.java2d.cmm.ColorTransform thisRasterTransform","id":2191},{"comment":"ICC_Profile thisSrcProfile, thisDestProfile;","field_name":"thisSrcProfile","field_type":"java.awt.color.ICC_Profile","full_declaration":"java.awt.color.ICC_Profile thisSrcProfile","id":2192},{"comment":"ICC_Profile thisSrcProfile, thisDestProfile;","field_name":"thisDestProfile","field_type":"java.awt.color.ICC_Profile","full_declaration":"java.awt.color.ICC_Profile thisSrcProfilejava.awt.color.ICC_Profile thisDestProfile","id":2193},{"comment":"RenderingHints hints;","field_name":"hints","field_type":"java.awt.RenderingHints","full_declaration":"java.awt.RenderingHints hints","id":2194},{"comment":"","field_name":"gotProfiles","field_type":"boolean","full_declaration":"boolean gotProfiles","id":2195},{"comment":"float[] srcMinVals, srcMaxVals, dstMinVals, dstMaxVals;","field_name":"srcMinVals","field_type":"float[]","full_declaration":"float[] srcMinVals","id":2196},{"comment":"float[] srcMinVals, srcMaxVals, dstMinVals, dstMaxVals;","field_name":"srcMaxVals","field_type":"float[]","full_declaration":"float[] srcMinValsfloat[] srcMaxVals","id":2197},{"comment":"float[] srcMinVals, srcMaxVals, dstMinVals, dstMaxVals;","field_name":"dstMinVals","field_type":"float[]","full_declaration":"float[] srcMinValsfloat[] srcMaxValsfloat[] dstMinVals","id":2198},{"comment":"float[] srcMinVals, srcMaxVals, dstMinVals, dstMaxVals;","field_name":"dstMaxVals","field_type":"float[]","full_declaration":"float[] srcMinValsfloat[] srcMaxValsfloat[] dstMinValsfloat[] dstMaxVals","id":2199},{"comment":"// Placeholder for data for native functions\r\n","field_name":"pData","field_type":"long","full_declaration":"private long pData","id":2200},{"comment":"/**\r\n * The total number of bits in the pixel.\r\n */\r\n","field_name":"pixel_bits","field_type":"int","full_declaration":"protected int pixel_bits","id":2201},{"comment":"","field_name":"nBits","field_type":"int[]","full_declaration":"int[] nBits","id":2202},{"comment":"","field_name":"transparency","field_type":"int","full_declaration":"int transparency = Transparency.TRANSLUCENT","id":2203},{"comment":"","field_name":"supportsAlpha","field_type":"boolean","full_declaration":"boolean supportsAlpha = true","id":2204},{"comment":"","field_name":"isAlphaPremultiplied","field_type":"boolean","full_declaration":"boolean isAlphaPremultiplied = false","id":2205},{"comment":"","field_name":"numComponents","field_type":"int","full_declaration":"int numComponents = -1","id":2206},{"comment":"","field_name":"numColorComponents","field_type":"int","full_declaration":"int numColorComponents = -1","id":2207},{"comment":"ColorSpace colorSpace = ColorSpace.getInstance(ColorSpace.CS_sRGB);","field_name":"colorSpace","field_type":"java.awt.color.ColorSpace","full_declaration":"java.awt.color.ColorSpace colorSpace = ColorSpace.getInstance(ColorSpace.CS_sRGB)","id":2208},{"comment":"","field_name":"colorSpaceType","field_type":"int","full_declaration":"int colorSpaceType = ColorSpace.TYPE_RGB","id":2209},{"comment":"","field_name":"maxBits","field_type":"int","full_declaration":"int maxBits","id":2210},{"comment":"","field_name":"is_sRGB","field_type":"boolean","full_declaration":"boolean is_sRGB = true","id":2211},{"comment":"/**\r\n * Data type of the array used to represent pixel values.\r\n */\r\n","field_name":"transferType","field_type":"int","full_declaration":"protected int transferType","id":2212},{"comment":"/**\r\n * This is copied from java.awt.Toolkit since we need the library\r\n * loaded in java.awt.image also:\r\n *\r\n * WARNING: This is a temporary workaround for a problem in the\r\n * way the AWT loads native libraries. A number of classes in the\r\n * AWT package have a native method, initIDs(), which initializes\r\n * the JNI field and method ids used in the native portion of\r\n * their implementation.\r\n *\r\n * Since the use and storage of these ids is done by the\r\n * implementation libraries, the implementation of these method is\r\n * provided by the particular AWT implementations (for example,\r\n * \"Toolkit\"s/Peer), such as Motif, Microsoft Windows, or Tiny. The\r\n * problem is that this means that the native libraries must be\r\n * loaded by the java.* classes, which do not necessarily know the\r\n * names of the libraries to load. A better way of doing this\r\n * would be to provide a separate library which defines java.awt.*\r\n * initIDs, and exports the relevant symbols out to the\r\n * implementation libraries.\r\n *\r\n * For now, we know it's done by the implementation, and we assume\r\n * that the name of the library is \"awt\".  -br.\r\n */\r\n","field_name":"loaded","field_type":"boolean","full_declaration":"private static boolean loaded = false","id":2213},{"comment":"private static ColorModel RGBdefault;","field_name":"RGBdefault","field_type":"java.awt.image.ColorModel","full_declaration":"private static java.awt.image.ColorModel RGBdefault","id":2214},{"comment":"// 8-bit linear to 8-bit non-linear sRGB LUT\r\n","field_name":"l8Tos8","field_type":"byte[]","full_declaration":"static byte[] l8Tos8 = null","id":2215},{"comment":"// 8-bit non-linear sRGB to 8-bit linear LUT\r\n","field_name":"s8Tol8","field_type":"byte[]","full_declaration":"static byte[] s8Tol8 = null","id":2216},{"comment":"// 16-bit linear to 8-bit non-linear sRGB LUT\r\n","field_name":"l16Tos8","field_type":"byte[]","full_declaration":"static byte[] l16Tos8 = null","id":2217},{"comment":"// 8-bit non-linear sRGB to 16-bit linear LUT\r\n","field_name":"s8Tol16","field_type":"short[]","full_declaration":"static short[] s8Tol16 = null","id":2218},{"comment":"// Maps to hold LUTs for grayscale conversions\r\n// 8-bit gray values to 8-bit sRGB values\r\nstatic Map<ICC_ColorSpace, byte[]> g8Tos8Map = null;","field_name":"g8Tos8Map","field_type":"java.util.Map","full_declaration":"static java.util.Map g8Tos8Map = null","id":2219},{"comment":"// 16-bit linear to 8-bit \"other\" gray\r\nstatic Map<ICC_ColorSpace, byte[]> lg16Toog8Map = null;","field_name":"lg16Toog8Map","field_type":"java.util.Map","full_declaration":"static java.util.Map lg16Toog8Map = null","id":2220},{"comment":"// 16-bit gray values to 8-bit sRGB values\r\nstatic Map<ICC_ColorSpace, byte[]> g16Tos8Map = null;","field_name":"g16Tos8Map","field_type":"java.util.Map","full_declaration":"static java.util.Map g16Tos8Map = null","id":2221},{"comment":"// 16-bit linear to 16-bit \"other\" gray\r\nstatic Map<ICC_ColorSpace, short[]> lg16Toog16Map = null;","field_name":"lg16Toog16Map","field_type":"java.util.Map","full_declaration":"static java.util.Map lg16Toog16Map = null","id":2222},{"comment":"/**\r\n * <code>signed</code>  is <code>true</code> for <code>short</code>,\r\n * <code>float</code>, and <code>double</code> transfer types; it\r\n * is <code>false</code> for <code>byte</code>, <code>ushort</code>,\r\n * and <code>int</code> transfer types.\r\n */\r\n// true for transfer types short, float, double\r\n","field_name":"signed","field_type":"boolean","full_declaration":"private boolean signed","id":2223},{"comment":"// false for byte, ushort, int\r\n","field_name":"is_sRGB_stdScale","field_type":"boolean","full_declaration":"private boolean is_sRGB_stdScale","id":2224},{"comment":"","field_name":"is_LinearRGB_stdScale","field_type":"boolean","full_declaration":"private boolean is_LinearRGB_stdScale","id":2225},{"comment":"","field_name":"is_LinearGray_stdScale","field_type":"boolean","full_declaration":"private boolean is_LinearGray_stdScale","id":2226},{"comment":"","field_name":"is_ICCGray_stdScale","field_type":"boolean","full_declaration":"private boolean is_ICCGray_stdScale","id":2227},{"comment":"","field_name":"tosRGB8LUT","field_type":"byte[]","full_declaration":"private byte[] tosRGB8LUT","id":2228},{"comment":"","field_name":"fromsRGB8LUT8","field_type":"byte[]","full_declaration":"private byte[] fromsRGB8LUT8","id":2229},{"comment":"","field_name":"fromsRGB8LUT16","field_type":"short[]","full_declaration":"private short[] fromsRGB8LUT16","id":2230},{"comment":"","field_name":"fromLinearGray16ToOtherGray8LUT","field_type":"byte[]","full_declaration":"private byte[] fromLinearGray16ToOtherGray8LUT","id":2231},{"comment":"","field_name":"fromLinearGray16ToOtherGray16LUT","field_type":"short[]","full_declaration":"private short[] fromLinearGray16ToOtherGray16LUT","id":2232},{"comment":"","field_name":"needScaleInit","field_type":"boolean","full_declaration":"private boolean needScaleInit","id":2233},{"comment":"","field_name":"noUnnorm","field_type":"boolean","full_declaration":"private boolean noUnnorm","id":2234},{"comment":"","field_name":"nonStdScale","field_type":"boolean","full_declaration":"private boolean nonStdScale","id":2235},{"comment":"","field_name":"min","field_type":"float[]","full_declaration":"private float[] min","id":2236},{"comment":"","field_name":"diffMinMax","field_type":"float[]","full_declaration":"private float[] diffMinMax","id":2237},{"comment":"","field_name":"compOffset","field_type":"float[]","full_declaration":"private float[] compOffset","id":2238},{"comment":"","field_name":"compScale","field_type":"float[]","full_declaration":"private float[] compScale","id":2239},{"comment":"/**\r\n * Offsets for all bands in data array elements.\r\n */\r\n","field_name":"bandOffsets","field_type":"int[]","full_declaration":"protected int[] bandOffsets","id":2240},{"comment":"/**\r\n * Index for each bank storing a band of image data.\r\n */\r\n","field_name":"bankIndices","field_type":"int[]","full_declaration":"protected int[] bankIndices","id":2241},{"comment":"/**\r\n * The number of bands in this\r\n * <code>ComponentSampleModel</code>.\r\n */\r\n","field_name":"numBands","field_type":"int","full_declaration":"protected int numBands = 1","id":2242},{"comment":"/**\r\n * The number of banks in this\r\n * <code>ComponentSampleModel</code>.\r\n */\r\n","field_name":"numBanks","field_type":"int","full_declaration":"protected int numBanks = 1","id":2243},{"comment":"/**\r\n *  Line stride (in data array elements) of the region of image\r\n *  data described by this ComponentSampleModel.\r\n */\r\n","field_name":"scanlineStride","field_type":"int","full_declaration":"protected int scanlineStride","id":2244},{"comment":"/**\r\n * Pixel stride (in data array elements) of the region of image\r\n *  data described by this ComponentSampleModel.\r\n */\r\n","field_name":"pixelStride","field_type":"int","full_declaration":"protected int pixelStride","id":2245},{"comment":"Kernel kernel;","field_name":"kernel","field_type":"java.awt.image.Kernel","full_declaration":"java.awt.image.Kernel kernel","id":2246},{"comment":"","field_name":"edgeHint","field_type":"int","full_declaration":"int edgeHint","id":2247},{"comment":"RenderingHints hints;","field_name":"hints","field_type":"java.awt.RenderingHints","full_declaration":"java.awt.RenderingHints hints","id":2248},{"comment":"/**\r\n * Edge condition constants.\r\n */\r\n/**\r\n * Pixels at the edge of the destination image are set to zero.  This\r\n * is the default.\r\n */\r\n@Native\r\n","field_name":"EDGE_ZERO_FILL","field_type":"int","full_declaration":"public static final int EDGE_ZERO_FILL = 0","id":2249},{"comment":"/**\r\n * Pixels at the edge of the source image are copied to\r\n * the corresponding pixels in the destination without modification.\r\n */\r\n@Native\r\n","field_name":"EDGE_NO_OP","field_type":"int","full_declaration":"public static final int EDGE_NO_OP = 1","id":2250},{"comment":"","field_name":"cropX","field_type":"int","full_declaration":"int cropX","id":2251},{"comment":"","field_name":"cropY","field_type":"int","full_declaration":"int cropY","id":2252},{"comment":"","field_name":"cropW","field_type":"int","full_declaration":"int cropW","id":2253},{"comment":"","field_name":"cropH","field_type":"int","full_declaration":"int cropH","id":2254},{"comment":"/**\r\n * Tag for unsigned byte data.\r\n */\r\n@Native\r\n","field_name":"TYPE_BYTE","field_type":"int","full_declaration":"public static final int TYPE_BYTE = 0","id":2255},{"comment":"/**\r\n * Tag for unsigned short data.\r\n */\r\n@Native\r\n","field_name":"TYPE_USHORT","field_type":"int","full_declaration":"public static final int TYPE_USHORT = 1","id":2256},{"comment":"/**\r\n * Tag for signed short data.  Placeholder for future use.\r\n */\r\n@Native\r\n","field_name":"TYPE_SHORT","field_type":"int","full_declaration":"public static final int TYPE_SHORT = 2","id":2257},{"comment":"/**\r\n * Tag for int data.\r\n */\r\n@Native\r\n","field_name":"TYPE_INT","field_type":"int","full_declaration":"public static final int TYPE_INT = 3","id":2258},{"comment":"/**\r\n * Tag for float data.  Placeholder for future use.\r\n */\r\n@Native\r\n","field_name":"TYPE_FLOAT","field_type":"int","full_declaration":"public static final int TYPE_FLOAT = 4","id":2259},{"comment":"/**\r\n * Tag for double data.  Placeholder for future use.\r\n */\r\n@Native\r\n","field_name":"TYPE_DOUBLE","field_type":"int","full_declaration":"public static final int TYPE_DOUBLE = 5","id":2260},{"comment":"/**\r\n * Tag for undefined data.\r\n */\r\n@Native\r\n","field_name":"TYPE_UNDEFINED","field_type":"int","full_declaration":"public static final int TYPE_UNDEFINED = 32","id":2261},{"comment":"/**\r\n * The data type of this DataBuffer.\r\n */\r\n","field_name":"dataType","field_type":"int","full_declaration":"protected int dataType","id":2262},{"comment":"/**\r\n * The number of banks in this DataBuffer.\r\n */\r\n","field_name":"banks","field_type":"int","full_declaration":"protected int banks","id":2263},{"comment":"/**\r\n * Offset into default (first) bank from which to get the first element.\r\n */\r\n","field_name":"offset","field_type":"int","full_declaration":"protected int offset","id":2264},{"comment":"/**\r\n * Usable size of all banks.\r\n */\r\n","field_name":"size","field_type":"int","full_declaration":"protected int size","id":2265},{"comment":"/**\r\n * Offsets into all banks.\r\n */\r\n","field_name":"offsets","field_type":"int[]","full_declaration":"protected int[] offsets","id":2266},{"comment":"/* The current StateTrackable state. */\r\nStateTrackableDelegate theTrackable;","field_name":"theTrackable","field_type":"sun.java2d.StateTrackableDelegate","full_declaration":"sun.java2d.StateTrackableDelegate theTrackable","id":2267},{"comment":"/**\r\n * Size of the data types indexed by DataType tags defined above.\r\n */\r\n","field_name":"dataTypeSize","field_type":"int[]","full_declaration":"private static final int[] dataTypeSize = { 8, 16, 16, 32, 32, 64 }","id":2268},{"comment":"/**\r\n * The default data bank.\r\n */\r\n","field_name":"data","field_type":"byte[]","full_declaration":"byte[] data","id":2269},{"comment":"/**\r\n * All data banks\r\n */\r\n","field_name":"bankdata","field_type":"byte[][]","full_declaration":"byte[][] bankdata","id":2270},{"comment":"/**\r\n * The array of data banks.\r\n */\r\n","field_name":"bankdata","field_type":"double[][]","full_declaration":"double[][] bankdata","id":2271},{"comment":"/**\r\n * A reference to the default data bank.\r\n */\r\n","field_name":"data","field_type":"double[]","full_declaration":"double[] data","id":2272},{"comment":"/**\r\n * The array of data banks.\r\n */\r\n","field_name":"bankdata","field_type":"float[][]","full_declaration":"float[][] bankdata","id":2273},{"comment":"/**\r\n * A reference to the default data bank.\r\n */\r\n","field_name":"data","field_type":"float[]","full_declaration":"float[] data","id":2274},{"comment":"/**\r\n * The default data bank.\r\n */\r\n","field_name":"data","field_type":"int[]","full_declaration":"int[] data","id":2275},{"comment":"/**\r\n * All data banks\r\n */\r\n","field_name":"bankdata","field_type":"int[][]","full_declaration":"int[][] bankdata","id":2276},{"comment":"/**\r\n * The default data bank.\r\n */\r\n","field_name":"data","field_type":"short[]","full_declaration":"short[] data","id":2277},{"comment":"/**\r\n * All data banks\r\n */\r\n","field_name":"bankdata","field_type":"short[][]","full_declaration":"short[][] bankdata","id":2278},{"comment":"/**\r\n * The default data bank.\r\n */\r\n","field_name":"data","field_type":"short[]","full_declaration":"short[] data","id":2279},{"comment":"/**\r\n * All data banks\r\n */\r\n","field_name":"bankdata","field_type":"short[][]","full_declaration":"short[][] bankdata","id":2280},{"comment":"","field_name":"red_mask","field_type":"int","full_declaration":"private int red_mask","id":2281},{"comment":"","field_name":"green_mask","field_type":"int","full_declaration":"private int green_mask","id":2282},{"comment":"","field_name":"blue_mask","field_type":"int","full_declaration":"private int blue_mask","id":2283},{"comment":"","field_name":"alpha_mask","field_type":"int","full_declaration":"private int alpha_mask","id":2284},{"comment":"","field_name":"red_offset","field_type":"int","full_declaration":"private int red_offset","id":2285},{"comment":"","field_name":"green_offset","field_type":"int","full_declaration":"private int green_offset","id":2286},{"comment":"","field_name":"blue_offset","field_type":"int","full_declaration":"private int blue_offset","id":2287},{"comment":"","field_name":"alpha_offset","field_type":"int","full_declaration":"private int alpha_offset","id":2288},{"comment":"","field_name":"red_scale","field_type":"int","full_declaration":"private int red_scale","id":2289},{"comment":"","field_name":"green_scale","field_type":"int","full_declaration":"private int green_scale","id":2290},{"comment":"","field_name":"blue_scale","field_type":"int","full_declaration":"private int blue_scale","id":2291},{"comment":"","field_name":"alpha_scale","field_type":"int","full_declaration":"private int alpha_scale","id":2292},{"comment":"","field_name":"is_LinearRGB","field_type":"boolean","full_declaration":"private boolean is_LinearRGB","id":2293},{"comment":"","field_name":"lRGBprecision","field_type":"int","full_declaration":"private int lRGBprecision","id":2294},{"comment":"","field_name":"tosRGB8LUT","field_type":"byte[]","full_declaration":"private byte[] tosRGB8LUT","id":2295},{"comment":"","field_name":"fromsRGB8LUT8","field_type":"byte[]","full_declaration":"private byte[] fromsRGB8LUT8","id":2296},{"comment":"","field_name":"fromsRGB8LUT16","field_type":"short[]","full_declaration":"private short[] fromsRGB8LUT16","id":2297},{"comment":"ImageProducer src;","field_name":"src","field_type":"java.awt.image.ImageProducer","full_declaration":"java.awt.image.ImageProducer src","id":2298},{"comment":"ImageFilter filter;","field_name":"filter","field_type":"java.awt.image.ImageFilter","full_declaration":"java.awt.image.ImageFilter filter","id":2299},{"comment":"private Hashtable proxies;","field_name":"proxies","field_type":"java.util.Hashtable","full_declaration":"private java.util.Hashtable proxies","id":2300},{"comment":"/**\r\n * The pixels will be delivered in a random order.  This tells the\r\n * ImageConsumer not to use any optimizations that depend on the\r\n * order of pixel delivery, which should be the default assumption\r\n * in the absence of any call to the setHints method.\r\n * @see #setHints\r\n */\r\n","field_name":"RANDOMPIXELORDER","field_type":"int","full_declaration":"int RANDOMPIXELORDER = 1","id":2301},{"comment":"/**\r\n * The pixels will be delivered in top-down, left-to-right order.\r\n * @see #setHints\r\n */\r\n","field_name":"TOPDOWNLEFTRIGHT","field_type":"int","full_declaration":"int TOPDOWNLEFTRIGHT = 2","id":2302},{"comment":"/**\r\n * The pixels will be delivered in (multiples of) complete scanlines\r\n * at a time.\r\n * @see #setHints\r\n */\r\n","field_name":"COMPLETESCANLINES","field_type":"int","full_declaration":"int COMPLETESCANLINES = 4","id":2303},{"comment":"/**\r\n * The pixels will be delivered in a single pass.  Each pixel will\r\n * appear in only one call to any of the setPixels methods.  An\r\n * example of an image format which does not meet this criterion\r\n * is a progressive JPEG image which defines pixels in multiple\r\n * passes, each more refined than the previous.\r\n * @see #setHints\r\n */\r\n","field_name":"SINGLEPASS","field_type":"int","full_declaration":"int SINGLEPASS = 8","id":2304},{"comment":"/**\r\n * The image contain a single static image.  The pixels will be defined\r\n * in calls to the setPixels methods and then the imageComplete method\r\n * will be called with the STATICIMAGEDONE flag after which no more\r\n * image data will be delivered.  An example of an image type which\r\n * would not meet these criteria would be the output of a video feed,\r\n * or the representation of a 3D rendering being manipulated\r\n * by the user.  The end of each frame in those types of images will\r\n * be indicated by calling imageComplete with the SINGLEFRAMEDONE flag.\r\n * @see #setHints\r\n * @see #imageComplete\r\n */\r\n","field_name":"SINGLEFRAME","field_type":"int","full_declaration":"int SINGLEFRAME = 16","id":2305},{"comment":"/**\r\n * An error was encountered while producing the image.\r\n * @see #imageComplete\r\n */\r\n","field_name":"IMAGEERROR","field_type":"int","full_declaration":"int IMAGEERROR = 1","id":2306},{"comment":"/**\r\n * One frame of the image is complete but there are more frames\r\n * to be delivered.\r\n * @see #imageComplete\r\n */\r\n","field_name":"SINGLEFRAMEDONE","field_type":"int","full_declaration":"int SINGLEFRAMEDONE = 2","id":2307},{"comment":"/**\r\n * The image is complete and there are no more pixels or frames\r\n * to be delivered.\r\n * @see #imageComplete\r\n */\r\n","field_name":"STATICIMAGEDONE","field_type":"int","full_declaration":"int STATICIMAGEDONE = 3","id":2308},{"comment":"/**\r\n * The image creation process was deliberately aborted.\r\n * @see #imageComplete\r\n */\r\n","field_name":"IMAGEABORTED","field_type":"int","full_declaration":"int IMAGEABORTED = 4","id":2309},{"comment":"/**\r\n * The consumer of the particular image data stream for which this\r\n * instance of the ImageFilter is filtering data.  It is not\r\n * initialized during the constructor, but rather during the\r\n * getFilterInstance() method call when the FilteredImageSource\r\n * is creating a unique instance of this object for a particular\r\n * image data stream.\r\n * @see #getFilterInstance\r\n * @see ImageConsumer\r\n */\r\nprotected ImageConsumer consumer;","field_name":"consumer","field_type":"java.awt.image.ImageConsumer","full_declaration":"protected java.awt.image.ImageConsumer consumer","id":2310},{"comment":"/**\r\n * This flag in the infoflags argument to imageUpdate indicates that\r\n * the width of the base image is now available and can be taken\r\n * from the width argument to the imageUpdate callback method.\r\n * @see Image#getWidth\r\n * @see #imageUpdate\r\n */\r\n","field_name":"WIDTH","field_type":"int","full_declaration":"public static final int WIDTH = 1","id":2311},{"comment":"/**\r\n * This flag in the infoflags argument to imageUpdate indicates that\r\n * the height of the base image is now available and can be taken\r\n * from the height argument to the imageUpdate callback method.\r\n * @see Image#getHeight\r\n * @see #imageUpdate\r\n */\r\n","field_name":"HEIGHT","field_type":"int","full_declaration":"public static final int HEIGHT = 2","id":2312},{"comment":"/**\r\n * This flag in the infoflags argument to imageUpdate indicates that\r\n * the properties of the image are now available.\r\n * @see Image#getProperty\r\n * @see #imageUpdate\r\n */\r\n","field_name":"PROPERTIES","field_type":"int","full_declaration":"public static final int PROPERTIES = 4","id":2313},{"comment":"/**\r\n * This flag in the infoflags argument to imageUpdate indicates that\r\n * more pixels needed for drawing a scaled variation of the image\r\n * are available.  The bounding box of the new pixels can be taken\r\n * from the x, y, width, and height arguments to the imageUpdate\r\n * callback method.\r\n * @see java.awt.Graphics#drawImage\r\n * @see #imageUpdate\r\n */\r\n","field_name":"SOMEBITS","field_type":"int","full_declaration":"public static final int SOMEBITS = 8","id":2314},{"comment":"/**\r\n * This flag in the infoflags argument to imageUpdate indicates that\r\n * another complete frame of a multi-frame image which was previously\r\n * drawn is now available to be drawn again.  The x, y, width, and height\r\n * arguments to the imageUpdate callback method should be ignored.\r\n * @see java.awt.Graphics#drawImage\r\n * @see #imageUpdate\r\n */\r\n","field_name":"FRAMEBITS","field_type":"int","full_declaration":"public static final int FRAMEBITS = 16","id":2315},{"comment":"/**\r\n * This flag in the infoflags argument to imageUpdate indicates that\r\n * a static image which was previously drawn is now complete and can\r\n * be drawn again in its final form.  The x, y, width, and height\r\n * arguments to the imageUpdate callback method should be ignored.\r\n * @see java.awt.Graphics#drawImage\r\n * @see #imageUpdate\r\n */\r\n","field_name":"ALLBITS","field_type":"int","full_declaration":"public static final int ALLBITS = 32","id":2316},{"comment":"/**\r\n * This flag in the infoflags argument to imageUpdate indicates that\r\n * an image which was being tracked asynchronously has encountered\r\n * an error.  No further information will become available and\r\n * drawing the image will fail.\r\n * As a convenience, the ABORT flag will be indicated at the same\r\n * time to indicate that the image production was aborted.\r\n * @see #imageUpdate\r\n */\r\n","field_name":"ERROR","field_type":"int","full_declaration":"public static final int ERROR = 64","id":2317},{"comment":"/**\r\n * This flag in the infoflags argument to imageUpdate indicates that\r\n * an image which was being tracked asynchronously was aborted before\r\n * production was complete.  No more information will become available\r\n * without further action to trigger another image production sequence.\r\n * If the ERROR flag was not also set in this image update, then\r\n * accessing any of the data in the image will restart the production\r\n * again, probably from the beginning.\r\n * @see #imageUpdate\r\n */\r\n","field_name":"ABORT","field_type":"int","full_declaration":"public static final int ABORT = 128","id":2318},{"comment":"","field_name":"rgb","field_type":"int[]","full_declaration":"private int[] rgb","id":2319},{"comment":"","field_name":"map_size","field_type":"int","full_declaration":"private int map_size","id":2320},{"comment":"","field_name":"pixel_mask","field_type":"int","full_declaration":"private int pixel_mask","id":2321},{"comment":"","field_name":"transparent_index","field_type":"int","full_declaration":"private int transparent_index = -1","id":2322},{"comment":"","field_name":"allgrayopaque","field_type":"boolean","full_declaration":"private boolean allgrayopaque","id":2323},{"comment":"private BigInteger validBits;","field_name":"validBits","field_type":"java.math.BigInteger","full_declaration":"private java.math.BigInteger validBits","id":2324},{"comment":"","field_name":"colorData","field_type":"sun.awt.image.BufImgSurfaceData.ICMColorData","full_declaration":"private sun.awt.image.BufImgSurfaceData.ICMColorData colorData = null","id":2325},{"comment":"","field_name":"opaqueBits","field_type":"int[]","full_declaration":"private static int[] opaqueBits = { 8, 8, 8 }","id":2326},{"comment":"","field_name":"alphaBits","field_type":"int[]","full_declaration":"private static int[] alphaBits = { 8, 8, 8, 8 }","id":2327},{"comment":"","field_name":"CACHESIZE","field_type":"int","full_declaration":"private static final int CACHESIZE = 40","id":2328},{"comment":"","field_name":"lookupcache","field_type":"int[]","full_declaration":"private int[] lookupcache = new int[CACHESIZE]","id":2329},{"comment":"","field_name":"width","field_type":"int","full_declaration":"private int width","id":2330},{"comment":"","field_name":"height","field_type":"int","full_declaration":"private int height","id":2331},{"comment":"","field_name":"xOrigin","field_type":"int","full_declaration":"private int xOrigin","id":2332},{"comment":"","field_name":"yOrigin","field_type":"int","full_declaration":"private int yOrigin","id":2333},{"comment":"","field_name":"data","field_type":"float[]","full_declaration":"private float[] data","id":2334},{"comment":"private LookupTable ltable;","field_name":"ltable","field_type":"java.awt.image.LookupTable","full_declaration":"private java.awt.image.LookupTable ltable","id":2335},{"comment":"","field_name":"numComponents","field_type":"int","full_declaration":"private int numComponents","id":2336},{"comment":"RenderingHints hints;","field_name":"hints","field_type":"java.awt.RenderingHints","full_declaration":"java.awt.RenderingHints hints","id":2337},{"comment":"/**\r\n * Constants\r\n */\r\n","field_name":"numComponents","field_type":"int","full_declaration":"int numComponents","id":2338},{"comment":"","field_name":"offset","field_type":"int","full_declaration":"int offset","id":2339},{"comment":"","field_name":"numEntries","field_type":"int","full_declaration":"int numEntries","id":2340},{"comment":"","field_name":"width","field_type":"int","full_declaration":"int width","id":2341},{"comment":"","field_name":"height","field_type":"int","full_declaration":"int height","id":2342},{"comment":"ColorModel model;","field_name":"model","field_type":"java.awt.image.ColorModel","full_declaration":"java.awt.image.ColorModel model","id":2343},{"comment":"Object pixels;","field_name":"pixels","field_type":"java.lang.Object","full_declaration":"java.lang.Object pixels","id":2344},{"comment":"","field_name":"pixeloffset","field_type":"int","full_declaration":"int pixeloffset","id":2345},{"comment":"","field_name":"pixelscan","field_type":"int","full_declaration":"int pixelscan","id":2346},{"comment":"Hashtable properties;","field_name":"properties","field_type":"java.util.Hashtable","full_declaration":"java.util.Hashtable properties","id":2347},{"comment":"Vector theConsumers = new Vector();","field_name":"theConsumers","field_type":"java.util.Vector","full_declaration":"java.util.Vector theConsumers = new Vector()","id":2348},{"comment":"","field_name":"animating","field_type":"boolean","full_declaration":"boolean animating","id":2349},{"comment":"","field_name":"fullbuffers","field_type":"boolean","full_declaration":"boolean fullbuffers","id":2350},{"comment":"/**\r\n * The number of bits from one pixel to the next.\r\n */\r\n","field_name":"pixelBitStride","field_type":"int","full_declaration":"int pixelBitStride","id":2351},{"comment":"/**\r\n * Bitmask that extracts the rightmost pixel of a data element.\r\n */\r\n","field_name":"bitMask","field_type":"int","full_declaration":"int bitMask","id":2352},{"comment":"/**\r\n * The number of pixels that fit in a data element.  Also used\r\n * as the number of bits per pixel.\r\n */\r\n","field_name":"pixelsPerDataElement","field_type":"int","full_declaration":"int pixelsPerDataElement","id":2353},{"comment":"/**\r\n * The size of a data element in bits.\r\n */\r\n","field_name":"dataElementSize","field_type":"int","full_declaration":"int dataElementSize","id":2354},{"comment":"/**\r\n * The bit offset into the data array where the first pixel begins.\r\n */\r\n","field_name":"dataBitOffset","field_type":"int","full_declaration":"int dataBitOffset","id":2355},{"comment":"/**\r\n * ScanlineStride of the data buffer described in data array elements.\r\n */\r\n","field_name":"scanlineStride","field_type":"int","full_declaration":"int scanlineStride","id":2356},{"comment":"","field_name":"maskArray","field_type":"int[]","full_declaration":"int[] maskArray","id":2357},{"comment":"","field_name":"maskOffsets","field_type":"int[]","full_declaration":"int[] maskOffsets","id":2358},{"comment":"","field_name":"scaleFactors","field_type":"float[]","full_declaration":"float[] scaleFactors","id":2359},{"comment":"ImageProducer producer;","field_name":"producer","field_type":"java.awt.image.ImageProducer","full_declaration":"java.awt.image.ImageProducer producer","id":2360},{"comment":"","field_name":"dstX","field_type":"int","full_declaration":"int dstX","id":2361},{"comment":"","field_name":"dstY","field_type":"int","full_declaration":"int dstY","id":2362},{"comment":"","field_name":"dstW","field_type":"int","full_declaration":"int dstW","id":2363},{"comment":"","field_name":"dstH","field_type":"int","full_declaration":"int dstH","id":2364},{"comment":"ColorModel imageModel;","field_name":"imageModel","field_type":"java.awt.image.ColorModel","full_declaration":"java.awt.image.ColorModel imageModel","id":2365},{"comment":"","field_name":"bytePixels","field_type":"byte[]","full_declaration":"byte[] bytePixels","id":2366},{"comment":"","field_name":"intPixels","field_type":"int[]","full_declaration":"int[] intPixels","id":2367},{"comment":"","field_name":"dstOff","field_type":"int","full_declaration":"int dstOff","id":2368},{"comment":"","field_name":"dstScan","field_type":"int","full_declaration":"int dstScan","id":2369},{"comment":"","field_name":"grabbing","field_type":"boolean","full_declaration":"private boolean grabbing","id":2370},{"comment":"","field_name":"flags","field_type":"int","full_declaration":"private int flags","id":2371},{"comment":"","field_name":"GRABBEDBITS","field_type":"int","full_declaration":"private static final int GRABBEDBITS = (ImageObserver.FRAMEBITS | ImageObserver.ALLBITS)","id":2372},{"comment":"","field_name":"DONEBITS","field_type":"int","full_declaration":"private static final int DONEBITS = (GRABBEDBITS | ImageObserver.ERROR)","id":2373},{"comment":"/**\r\n * The SampleModel that describes how pixels from this Raster\r\n * are stored in the DataBuffer.\r\n */\r\nprotected SampleModel sampleModel;","field_name":"sampleModel","field_type":"java.awt.image.SampleModel","full_declaration":"protected java.awt.image.SampleModel sampleModel","id":2374},{"comment":"/**\r\n * The DataBuffer that stores the image data.\r\n */\r\nprotected DataBuffer dataBuffer;","field_name":"dataBuffer","field_type":"java.awt.image.DataBuffer","full_declaration":"protected java.awt.image.DataBuffer dataBuffer","id":2375},{"comment":"/**\r\n * The X coordinate of the upper-left pixel of this Raster.\r\n */\r\n","field_name":"minX","field_type":"int","full_declaration":"protected int minX","id":2376},{"comment":"/**\r\n * The Y coordinate of the upper-left pixel of this Raster.\r\n */\r\n","field_name":"minY","field_type":"int","full_declaration":"protected int minY","id":2377},{"comment":"/**\r\n * The width of this Raster.\r\n */\r\n","field_name":"width","field_type":"int","full_declaration":"protected int width","id":2378},{"comment":"/**\r\n * The height of this Raster.\r\n */\r\n","field_name":"height","field_type":"int","full_declaration":"protected int height","id":2379},{"comment":"/**\r\n * The X translation from the coordinate space of the\r\n * Raster's SampleModel to that of the Raster.\r\n */\r\n","field_name":"sampleModelTranslateX","field_type":"int","full_declaration":"protected int sampleModelTranslateX","id":2380},{"comment":"/**\r\n * The Y translation from the coordinate space of the\r\n * Raster's SampleModel to that of the Raster.\r\n */\r\n","field_name":"sampleModelTranslateY","field_type":"int","full_declaration":"protected int sampleModelTranslateY","id":2381},{"comment":"/**\r\n * The number of bands in the Raster.\r\n */\r\n","field_name":"numBands","field_type":"int","full_declaration":"protected int numBands","id":2382},{"comment":"/**\r\n * The number of DataBuffer data elements per pixel.\r\n */\r\n","field_name":"numDataElements","field_type":"int","full_declaration":"protected int numDataElements","id":2383},{"comment":"/**\r\n * The parent of this Raster, or null.\r\n */\r\nprotected Raster parent;","field_name":"parent","field_type":"java.awt.image.Raster","full_declaration":"protected java.awt.image.Raster parent","id":2384},{"comment":"/**\r\n * A Vector of sources, stored as arbitrary Objects.\r\n */\r\nprotected Vector<Object> sources = new Vector<Object>();","field_name":"sources","field_type":"java.util.Vector","full_declaration":"protected java.util.Vector sources = new Vector<Object>()","id":2385},{"comment":"/**\r\n * A Vector of non-source parameters, stored as arbitrary Objects.\r\n */\r\nprotected Vector<Object> parameters = new Vector<Object>();","field_name":"parameters","field_type":"java.util.Vector","full_declaration":"protected java.util.Vector parameters = new Vector<Object>()","id":2386},{"comment":"/**\r\n * String constant that can be used to identify a property on\r\n * a RenderedImage obtained via the createRendering or\r\n * createScaledRendering methods.  If such a property exists,\r\n * the value of the property will be a RenderingHints object\r\n * specifying which hints were observed in creating the rendering.\r\n */\r\nstatic final String HINTS_OBSERVED = \"HINTS_OBSERVED\";","field_name":"HINTS_OBSERVED","field_type":"java.lang.String","full_declaration":"static final java.lang.String HINTS_OBSERVED = \"HINTS_OBSERVED\"","id":2387},{"comment":"/**\r\n * A ParameterBlock containing source and parameters.\r\n */\r\nParameterBlock paramBlock;","field_name":"paramBlock","field_type":"java.awt.image.renderable.ParameterBlock","full_declaration":"java.awt.image.renderable.ParameterBlock paramBlock","id":2388},{"comment":"/**\r\n * The associated ContextualRenderedImageFactory.\r\n */\r\nContextualRenderedImageFactory myCRIF;","field_name":"myCRIF","field_type":"java.awt.image.renderable.ContextualRenderedImageFactory","full_declaration":"java.awt.image.renderable.ContextualRenderedImageFactory myCRIF","id":2389},{"comment":"/**\r\n * The bounding box of the results of this RenderableImageOp.\r\n */\r\nRectangle2D boundingBox;","field_name":"boundingBox","field_type":"java.awt.geom.Rectangle2D","full_declaration":"java.awt.geom.Rectangle2D boundingBox","id":2390},{"comment":"/**\r\n * The RenderableImage source for the producer.\r\n */\r\nRenderableImage rdblImage;","field_name":"rdblImage","field_type":"java.awt.image.renderable.RenderableImage","full_declaration":"java.awt.image.renderable.RenderableImage rdblImage","id":2391},{"comment":"/**\r\n * The RenderContext to use for producing the image.\r\n */\r\nRenderContext rc;","field_name":"rc","field_type":"java.awt.image.renderable.RenderContext","full_declaration":"java.awt.image.renderable.RenderContext rc","id":2392},{"comment":"/**\r\n * A Vector of image consumers.\r\n */\r\nVector ics = new Vector();","field_name":"ics","field_type":"java.util.Vector","full_declaration":"java.util.Vector ics = new Vector()","id":2393},{"comment":"/**\r\n * Table of hints. May be null.\r\n */\r\nRenderingHints hints;","field_name":"hints","field_type":"java.awt.RenderingHints","full_declaration":"java.awt.RenderingHints hints","id":2394},{"comment":"/**\r\n * Transform to convert user coordinates to device coordinates.\r\n */\r\nAffineTransform usr2dev;","field_name":"usr2dev","field_type":"java.awt.geom.AffineTransform","full_declaration":"java.awt.geom.AffineTransform usr2dev","id":2395},{"comment":"/**\r\n * The area of interest.  May be null.\r\n */\r\nShape aoi;","field_name":"aoi","field_type":"java.awt.Shape","full_declaration":"java.awt.Shape aoi","id":2396},{"comment":"/**\r\n * The width of the source image.\r\n */\r\n","field_name":"srcWidth","field_type":"int","full_declaration":"protected int srcWidth","id":2397},{"comment":"/**\r\n * The height of the source image.\r\n */\r\n","field_name":"srcHeight","field_type":"int","full_declaration":"protected int srcHeight","id":2398},{"comment":"/**\r\n * The target width to scale the image.\r\n */\r\n","field_name":"destWidth","field_type":"int","full_declaration":"protected int destWidth","id":2399},{"comment":"/**\r\n * The target height to scale the image.\r\n */\r\n","field_name":"destHeight","field_type":"int","full_declaration":"protected int destHeight","id":2400},{"comment":"/**\r\n * An <code>int</code> array containing information about a\r\n * row of pixels.\r\n */\r\n","field_name":"srcrows","field_type":"int[]","full_declaration":"protected int[] srcrows","id":2401},{"comment":"/**\r\n * An <code>int</code> array containing information about a\r\n * column of pixels.\r\n */\r\n","field_name":"srccols","field_type":"int[]","full_declaration":"protected int[] srccols","id":2402},{"comment":"/**\r\n * A <code>byte</code> array initialized with a size of\r\n * {@link #destWidth} and used to deliver a row of pixel\r\n * data to the {@link ImageConsumer}.\r\n */\r\nprotected Object outpixbuf;","field_name":"outpixbuf","field_type":"java.lang.Object","full_declaration":"protected java.lang.Object outpixbuf","id":2403},{"comment":"","field_name":"scaleFactors","field_type":"float[]","full_declaration":"float[] scaleFactors","id":2404},{"comment":"","field_name":"offsets","field_type":"float[]","full_declaration":"float[] offsets","id":2405},{"comment":"","field_name":"length","field_type":"int","full_declaration":"int length = 0","id":2406},{"comment":"RenderingHints hints;","field_name":"hints","field_type":"java.awt.RenderingHints","full_declaration":"java.awt.RenderingHints hints","id":2407},{"comment":"","field_name":"srcNbits","field_type":"int","full_declaration":"private int srcNbits","id":2408},{"comment":"","field_name":"dstNbits","field_type":"int","full_declaration":"private int dstNbits","id":2409},{"comment":"/**\r\n * The <code>ColorModel</code> to be replaced by\r\n * <code>newmodel</code> when the user calls\r\n * {@link #substituteColorModel(ColorModel, ColorModel) substituteColorModel}.\r\n */\r\nprotected ColorModel origmodel;","field_name":"origmodel","field_type":"java.awt.image.ColorModel","full_declaration":"protected java.awt.image.ColorModel origmodel","id":2410},{"comment":"/**\r\n * The <code>ColorModel</code> with which to\r\n * replace <code>origmodel</code> when the user calls\r\n * <code>substituteColorModel</code>.\r\n */\r\nprotected ColorModel newmodel;","field_name":"newmodel","field_type":"java.awt.image.ColorModel","full_declaration":"protected java.awt.image.ColorModel newmodel","id":2411},{"comment":"/**\r\n * This boolean indicates whether or not it is acceptable to apply\r\n * the color filtering of the filterRGB method to the color table\r\n * entries of an IndexColorModel object in lieu of pixel by pixel\r\n * filtering.  Subclasses should set this variable to true in their\r\n * constructor if their filterRGB method does not depend on the\r\n * coordinate of the pixel being filtered.\r\n * @see #substituteColorModel\r\n * @see #filterRGB\r\n * @see IndexColorModel\r\n */\r\n","field_name":"canFilterIndexColorModel","field_type":"boolean","full_declaration":"protected boolean canFilterIndexColorModel","id":2412},{"comment":"/**\r\n * Width in pixels of the region of image data that this SampleModel\r\n *  describes.\r\n */\r\n","field_name":"width","field_type":"int","full_declaration":"protected int width","id":2413},{"comment":"/**\r\n * Height in pixels of the region of image data that this SampleModel\r\n *  describes.\r\n */\r\n","field_name":"height","field_type":"int","full_declaration":"protected int height","id":2414},{"comment":"/**\r\n * Number of bands of the image data that this SampleModel describes.\r\n */\r\n","field_name":"numBands","field_type":"int","full_declaration":"protected int numBands","id":2415},{"comment":"/**\r\n * Data type of the DataBuffer storing the pixel data.\r\n *  @see java.awt.image.DataBuffer\r\n */\r\n","field_name":"dataType","field_type":"int","full_declaration":"protected int dataType","id":2416},{"comment":"/**\r\n * Constants\r\n */\r\n","field_name":"data","field_type":"short[][]","full_declaration":"short[][] data","id":2417},{"comment":"/**\r\n * Bit masks for all bands of the image data.\r\n */\r\n","field_name":"bitMasks","field_type":"int[]","full_declaration":"private int[] bitMasks","id":2418},{"comment":"/**\r\n * Bit Offsets for all bands of the image data.\r\n */\r\n","field_name":"bitOffsets","field_type":"int[]","full_declaration":"private int[] bitOffsets","id":2419},{"comment":"/**\r\n * Bit sizes for all the bands of the image data.\r\n */\r\n","field_name":"bitSizes","field_type":"int[]","full_declaration":"private int[] bitSizes","id":2420},{"comment":"/**\r\n * Maximum bit size.\r\n */\r\n","field_name":"maxBitSize","field_type":"int","full_declaration":"private int maxBitSize","id":2421},{"comment":"/**\r\n * Line stride of the region of image data described by this\r\n *  SinglePixelPackedSampleModel.\r\n */\r\n","field_name":"scanlineStride","field_type":"int","full_declaration":"private int scanlineStride","id":2422},{"comment":"// Return codes for validate() method\r\n/**\r\n * Validated image is ready to use as-is.\r\n */\r\n","field_name":"IMAGE_OK","field_type":"int","full_declaration":"public static final int IMAGE_OK = 0","id":2423},{"comment":"/**\r\n * Validated image has been restored and is now ready to use.\r\n * Note that restoration causes contents of the image to be lost.\r\n */\r\n","field_name":"IMAGE_RESTORED","field_type":"int","full_declaration":"public static final int IMAGE_RESTORED = 1","id":2424},{"comment":"/**\r\n * Validated image is incompatible with supplied\r\n * <code>GraphicsConfiguration</code> object and should be\r\n * re-created as appropriate.  Usage of the image as-is\r\n * after receiving this return code from <code>validate</code>\r\n * is undefined.\r\n */\r\n","field_name":"IMAGE_INCOMPATIBLE","field_type":"int","full_declaration":"public static final int IMAGE_INCOMPATIBLE = 2","id":2425},{"comment":"/**\r\n * The transparency value with which this image was created.\r\n * @see java.awt.GraphicsConfiguration#createCompatibleVolatileImage(int,\r\n *      int,int)\r\n * @see java.awt.GraphicsConfiguration#createCompatibleVolatileImage(int,\r\n *      int,ImageCapabilities,int)\r\n * @see Transparency\r\n * @since 1.5\r\n */\r\n","field_name":"transparency","field_type":"int","full_declaration":"protected int transparency = TRANSLUCENT","id":2426},{"comment":"/**\r\n * convenience object; we can use this single static object for\r\n * all images that do not create their own image caps; it holds the\r\n * default (unaccelerated) properties.\r\n */\r\nprivate static ImageCapabilities defaultImageCaps = new ImageCapabilities(false);","field_name":"defaultImageCaps","field_type":"java.awt.ImageCapabilities","full_declaration":"private static java.awt.ImageCapabilities defaultImageCaps = new ImageCapabilities(false)","id":2427},{"comment":"/**\r\n * Priority for accelerating this image.  Subclasses are free to\r\n * set different default priorities and applications are free to\r\n * set the priority for specific images via the\r\n * <code>setAccelerationPriority(float)</code> method.\r\n * @since 1.5\r\n */\r\n","field_name":"accelerationPriority","field_type":"float","full_declaration":"protected float accelerationPriority = .5f","id":2428},{"comment":"/**\r\n * The <code>UndefinedProperty</code> object should be returned whenever a\r\n * property which was not defined for a particular image is fetched.\r\n */\r\npublic static final Object UndefinedProperty = new Object();","field_name":"UndefinedProperty","field_type":"java.lang.Object","full_declaration":"public static final java.lang.Object UndefinedProperty = new Object()","id":2429},{"comment":"/**\r\n * Use the default image-scaling algorithm.\r\n * @since JDK1.1\r\n */\r\n","field_name":"SCALE_DEFAULT","field_type":"int","full_declaration":"public static final int SCALE_DEFAULT = 1","id":2430},{"comment":"/**\r\n * Choose an image-scaling algorithm that gives higher priority\r\n * to scaling speed than smoothness of the scaled image.\r\n * @since JDK1.1\r\n */\r\n","field_name":"SCALE_FAST","field_type":"int","full_declaration":"public static final int SCALE_FAST = 2","id":2431},{"comment":"/**\r\n * Choose an image-scaling algorithm that gives higher priority\r\n * to image smoothness than scaling speed.\r\n * @since JDK1.1\r\n */\r\n","field_name":"SCALE_SMOOTH","field_type":"int","full_declaration":"public static final int SCALE_SMOOTH = 4","id":2432},{"comment":"/**\r\n * Use the image scaling algorithm embodied in the\r\n * <code>ReplicateScaleFilter</code> class.\r\n * The <code>Image</code> object is free to substitute a different filter\r\n * that performs the same algorithm yet integrates more efficiently\r\n * into the imaging infrastructure supplied by the toolkit.\r\n * @see        java.awt.image.ReplicateScaleFilter\r\n * @since      JDK1.1\r\n */\r\n","field_name":"SCALE_REPLICATE","field_type":"int","full_declaration":"public static final int SCALE_REPLICATE = 8","id":2433},{"comment":"/**\r\n * Use the Area Averaging image scaling algorithm.  The\r\n * image object is free to substitute a different filter that\r\n * performs the same algorithm yet integrates more efficiently\r\n * into the image infrastructure supplied by the toolkit.\r\n * @see java.awt.image.AreaAveragingScaleFilter\r\n * @since JDK1.1\r\n */\r\n","field_name":"SCALE_AREA_AVERAGING","field_type":"int","full_declaration":"public static final int SCALE_AREA_AVERAGING = 16","id":2434},{"comment":"SurfaceManager surfaceManager;","field_name":"surfaceManager","field_type":"sun.awt.image.SurfaceManager","full_declaration":"sun.awt.image.SurfaceManager surfaceManager","id":2435},{"comment":"","field_name":"accelerated","field_type":"boolean","full_declaration":"private boolean accelerated = false","id":2436},{"comment":"/**\r\n * The inset from the top.\r\n * This value is added to the Top of the rectangle\r\n * to yield a new location for the Top.\r\n *\r\n * @serial\r\n * @see #clone()\r\n */\r\n","field_name":"top","field_type":"int","full_declaration":"public int top","id":2437},{"comment":"/**\r\n * The inset from the left.\r\n * This value is added to the Left of the rectangle\r\n * to yield a new location for the Left edge.\r\n *\r\n * @serial\r\n * @see #clone()\r\n */\r\n","field_name":"left","field_type":"int","full_declaration":"public int left","id":2438},{"comment":"/**\r\n * The inset from the bottom.\r\n * This value is subtracted from the Bottom of the rectangle\r\n * to yield a new location for the Bottom.\r\n *\r\n * @serial\r\n * @see #clone()\r\n */\r\n","field_name":"bottom","field_type":"int","full_declaration":"public int bottom","id":2439},{"comment":"/**\r\n * The inset from the right.\r\n * This value is subtracted from the Right of the rectangle\r\n * to yield a new location for the Right edge.\r\n *\r\n * @serial\r\n * @see #clone()\r\n */\r\n","field_name":"right","field_type":"int","full_declaration":"public int right","id":2440},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -2272572637695466749L","id":2441},{"comment":"","field_name":"copies","field_type":"int","full_declaration":"private int copies","id":2442},{"comment":"private DefaultSelectionType defaultSelection;","field_name":"defaultSelection","field_type":"java.awt.JobAttributes.DefaultSelectionType","full_declaration":"private java.awt.JobAttributes.DefaultSelectionType defaultSelection","id":2443},{"comment":"private DestinationType destination;","field_name":"destination","field_type":"java.awt.JobAttributes.DestinationType","full_declaration":"private java.awt.JobAttributes.DestinationType destination","id":2444},{"comment":"private DialogType dialog;","field_name":"dialog","field_type":"java.awt.JobAttributes.DialogType","full_declaration":"private java.awt.JobAttributes.DialogType dialog","id":2445},{"comment":"private String fileName;","field_name":"fileName","field_type":"java.lang.String","full_declaration":"private java.lang.String fileName","id":2446},{"comment":"","field_name":"fromPage","field_type":"int","full_declaration":"private int fromPage","id":2447},{"comment":"","field_name":"maxPage","field_type":"int","full_declaration":"private int maxPage","id":2448},{"comment":"","field_name":"minPage","field_type":"int","full_declaration":"private int minPage","id":2449},{"comment":"private MultipleDocumentHandlingType multipleDocumentHandling;","field_name":"multipleDocumentHandling","field_type":"java.awt.JobAttributes.MultipleDocumentHandlingType","full_declaration":"private java.awt.JobAttributes.MultipleDocumentHandlingType multipleDocumentHandling","id":2450},{"comment":"","field_name":"pageRanges","field_type":"int[][]","full_declaration":"private int[][] pageRanges","id":2451},{"comment":"","field_name":"prFirst","field_type":"int","full_declaration":"private int prFirst","id":2452},{"comment":"","field_name":"prLast","field_type":"int","full_declaration":"private int prLast","id":2453},{"comment":"private String printer;","field_name":"printer","field_type":"java.lang.String","full_declaration":"private java.lang.String printer","id":2454},{"comment":"private SidesType sides;","field_name":"sides","field_type":"java.awt.JobAttributes.SidesType","full_declaration":"private java.awt.JobAttributes.SidesType sides","id":2455},{"comment":"","field_name":"toPage","field_type":"int","full_declaration":"private int toPage","id":2456},{"comment":"","field_name":"I_ALL","field_type":"int","full_declaration":"private static final int I_ALL = 0","id":2457},{"comment":"","field_name":"I_RANGE","field_type":"int","full_declaration":"private static final int I_RANGE = 1","id":2458},{"comment":"","field_name":"I_SELECTION","field_type":"int","full_declaration":"private static final int I_SELECTION = 2","id":2459},{"comment":"","field_name":"NAMES","field_type":"String[]","full_declaration":"private static final String[] NAMES = { \"all\", \"range\", \"selection\" }","id":2460},{"comment":"/**\r\n * The <code>DefaultSelectionType</code> instance to use for\r\n * specifying that all pages of the job should be printed.\r\n */\r\npublic static final DefaultSelectionType ALL = new DefaultSelectionType(I_ALL);","field_name":"ALL","field_type":"java.awt.JobAttributes.DefaultSelectionType","full_declaration":"public static final java.awt.JobAttributes.DefaultSelectionType ALL = new DefaultSelectionType(I_ALL)","id":2461},{"comment":"/**\r\n * The <code>DefaultSelectionType</code> instance to use for\r\n * specifying that a range of pages of the job should be printed.\r\n */\r\npublic static final DefaultSelectionType RANGE = new DefaultSelectionType(I_RANGE);","field_name":"RANGE","field_type":"java.awt.JobAttributes.DefaultSelectionType","full_declaration":"public static final java.awt.JobAttributes.DefaultSelectionType RANGE = new DefaultSelectionType(I_RANGE)","id":2462},{"comment":"/**\r\n * The <code>DefaultSelectionType</code> instance to use for\r\n * specifying that the current selection should be printed.\r\n */\r\npublic static final DefaultSelectionType SELECTION = new DefaultSelectionType(I_SELECTION);","field_name":"SELECTION","field_type":"java.awt.JobAttributes.DefaultSelectionType","full_declaration":"public static final java.awt.JobAttributes.DefaultSelectionType SELECTION = new DefaultSelectionType(I_SELECTION)","id":2463},{"comment":"","field_name":"I_FILE","field_type":"int","full_declaration":"private static final int I_FILE = 0","id":2464},{"comment":"","field_name":"I_PRINTER","field_type":"int","full_declaration":"private static final int I_PRINTER = 1","id":2465},{"comment":"","field_name":"NAMES","field_type":"String[]","full_declaration":"private static final String[] NAMES = { \"file\", \"printer\" }","id":2466},{"comment":"/**\r\n * The <code>DestinationType</code> instance to use for\r\n * specifying print to file.\r\n */\r\npublic static final DestinationType FILE = new DestinationType(I_FILE);","field_name":"FILE","field_type":"java.awt.JobAttributes.DestinationType","full_declaration":"public static final java.awt.JobAttributes.DestinationType FILE = new DestinationType(I_FILE)","id":2467},{"comment":"/**\r\n * The <code>DestinationType</code> instance to use for\r\n * specifying print to printer.\r\n */\r\npublic static final DestinationType PRINTER = new DestinationType(I_PRINTER);","field_name":"PRINTER","field_type":"java.awt.JobAttributes.DestinationType","full_declaration":"public static final java.awt.JobAttributes.DestinationType PRINTER = new DestinationType(I_PRINTER)","id":2468},{"comment":"","field_name":"I_COMMON","field_type":"int","full_declaration":"private static final int I_COMMON = 0","id":2469},{"comment":"","field_name":"I_NATIVE","field_type":"int","full_declaration":"private static final int I_NATIVE = 1","id":2470},{"comment":"","field_name":"I_NONE","field_type":"int","full_declaration":"private static final int I_NONE = 2","id":2471},{"comment":"","field_name":"NAMES","field_type":"String[]","full_declaration":"private static final String[] NAMES = { \"common\", \"native\", \"none\" }","id":2472},{"comment":"/**\r\n * The <code>DialogType</code> instance to use for\r\n * specifying the cross-platform, pure Java print dialog.\r\n */\r\npublic static final DialogType COMMON = new DialogType(I_COMMON);","field_name":"COMMON","field_type":"java.awt.JobAttributes.DialogType","full_declaration":"public static final java.awt.JobAttributes.DialogType COMMON = new DialogType(I_COMMON)","id":2473},{"comment":"/**\r\n * The <code>DialogType</code> instance to use for\r\n * specifying the platform's native print dialog.\r\n */\r\npublic static final DialogType NATIVE = new DialogType(I_NATIVE);","field_name":"NATIVE","field_type":"java.awt.JobAttributes.DialogType","full_declaration":"public static final java.awt.JobAttributes.DialogType NATIVE = new DialogType(I_NATIVE)","id":2474},{"comment":"/**\r\n * The <code>DialogType</code> instance to use for\r\n * specifying no print dialog.\r\n */\r\npublic static final DialogType NONE = new DialogType(I_NONE);","field_name":"NONE","field_type":"java.awt.JobAttributes.DialogType","full_declaration":"public static final java.awt.JobAttributes.DialogType NONE = new DialogType(I_NONE)","id":2475},{"comment":"","field_name":"I_SEPARATE_DOCUMENTS_COLLATED_COPIES","field_type":"int","full_declaration":"private static final int I_SEPARATE_DOCUMENTS_COLLATED_COPIES = 0","id":2476},{"comment":"","field_name":"I_SEPARATE_DOCUMENTS_UNCOLLATED_COPIES","field_type":"int","full_declaration":"private static final int I_SEPARATE_DOCUMENTS_UNCOLLATED_COPIES = 1","id":2477},{"comment":"","field_name":"NAMES","field_type":"String[]","full_declaration":"private static final String[] NAMES = { \"separate-documents-collated-copies\", \"separate-documents-uncollated-copies\" }","id":2478},{"comment":"/**\r\n * The <code>MultipleDocumentHandlingType</code> instance to use for specifying\r\n * that the job should be divided into separate, collated copies.\r\n */\r\npublic static final MultipleDocumentHandlingType SEPARATE_DOCUMENTS_COLLATED_COPIES = new MultipleDocumentHandlingType(I_SEPARATE_DOCUMENTS_COLLATED_COPIES);","field_name":"SEPARATE_DOCUMENTS_COLLATED_COPIES","field_type":"java.awt.JobAttributes.MultipleDocumentHandlingType","full_declaration":"public static final java.awt.JobAttributes.MultipleDocumentHandlingType SEPARATE_DOCUMENTS_COLLATED_COPIES = new MultipleDocumentHandlingType(I_SEPARATE_DOCUMENTS_COLLATED_COPIES)","id":2479},{"comment":"/**\r\n * The <code>MultipleDocumentHandlingType</code> instance to use for specifying\r\n * that the job should be divided into separate, uncollated copies.\r\n */\r\npublic static final MultipleDocumentHandlingType SEPARATE_DOCUMENTS_UNCOLLATED_COPIES = new MultipleDocumentHandlingType(I_SEPARATE_DOCUMENTS_UNCOLLATED_COPIES);","field_name":"SEPARATE_DOCUMENTS_UNCOLLATED_COPIES","field_type":"java.awt.JobAttributes.MultipleDocumentHandlingType","full_declaration":"public static final java.awt.JobAttributes.MultipleDocumentHandlingType SEPARATE_DOCUMENTS_UNCOLLATED_COPIES = new MultipleDocumentHandlingType(I_SEPARATE_DOCUMENTS_UNCOLLATED_COPIES)","id":2480},{"comment":"","field_name":"I_ONE_SIDED","field_type":"int","full_declaration":"private static final int I_ONE_SIDED = 0","id":2481},{"comment":"","field_name":"I_TWO_SIDED_LONG_EDGE","field_type":"int","full_declaration":"private static final int I_TWO_SIDED_LONG_EDGE = 1","id":2482},{"comment":"","field_name":"I_TWO_SIDED_SHORT_EDGE","field_type":"int","full_declaration":"private static final int I_TWO_SIDED_SHORT_EDGE = 2","id":2483},{"comment":"","field_name":"NAMES","field_type":"String[]","full_declaration":"private static final String[] NAMES = { \"one-sided\", \"two-sided-long-edge\", \"two-sided-short-edge\" }","id":2484},{"comment":"/**\r\n * The <code>SidesType</code> instance to use for specifying that\r\n * consecutive job pages should be printed upon the same side of\r\n * consecutive media sheets.\r\n */\r\npublic static final SidesType ONE_SIDED = new SidesType(I_ONE_SIDED);","field_name":"ONE_SIDED","field_type":"java.awt.JobAttributes.SidesType","full_declaration":"public static final java.awt.JobAttributes.SidesType ONE_SIDED = new SidesType(I_ONE_SIDED)","id":2485},{"comment":"/**\r\n * The <code>SidesType</code> instance to use for specifying that\r\n * consecutive job pages should be printed upon front and back sides\r\n * of consecutive media sheets, such that the orientation of each pair\r\n * of pages on the medium would be correct for the reader as if for\r\n * binding on the long edge.\r\n */\r\npublic static final SidesType TWO_SIDED_LONG_EDGE = new SidesType(I_TWO_SIDED_LONG_EDGE);","field_name":"TWO_SIDED_LONG_EDGE","field_type":"java.awt.JobAttributes.SidesType","full_declaration":"public static final java.awt.JobAttributes.SidesType TWO_SIDED_LONG_EDGE = new SidesType(I_TWO_SIDED_LONG_EDGE)","id":2486},{"comment":"/**\r\n * The <code>SidesType</code> instance to use for specifying that\r\n * consecutive job pages should be printed upon front and back sides\r\n * of consecutive media sheets, such that the orientation of each pair\r\n * of pages on the medium would be correct for the reader as if for\r\n * binding on the short edge.\r\n */\r\npublic static final SidesType TWO_SIDED_SHORT_EDGE = new SidesType(I_TWO_SIDED_SHORT_EDGE);","field_name":"TWO_SIDED_SHORT_EDGE","field_type":"java.awt.JobAttributes.SidesType","full_declaration":"public static final java.awt.JobAttributes.SidesType TWO_SIDED_SHORT_EDGE = new SidesType(I_TWO_SIDED_SHORT_EDGE)","id":2487},{"comment":"// Shared focus engine logger\r\nprivate static final PlatformLogger focusLog = PlatformLogger.getLogger(\"java.awt.focus.KeyboardFocusManager\");","field_name":"focusLog","field_type":"sun.util.logging.PlatformLogger","full_declaration":"private static final sun.util.logging.PlatformLogger focusLog = PlatformLogger.getLogger(\"java.awt.focus.KeyboardFocusManager\")","id":2488},{"comment":"transient KeyboardFocusManagerPeer peer;","field_name":"peer","field_type":"java.awt.peer.KeyboardFocusManagerPeer","full_declaration":"transient java.awt.peer.KeyboardFocusManagerPeer peer","id":2489},{"comment":"private static final PlatformLogger log = PlatformLogger.getLogger(\"java.awt.KeyboardFocusManager\");","field_name":"log","field_type":"sun.util.logging.PlatformLogger","full_declaration":"private static final sun.util.logging.PlatformLogger log = PlatformLogger.getLogger(\"java.awt.KeyboardFocusManager\")","id":2490},{"comment":"/**\r\n * The identifier for the Forward focus traversal keys.\r\n *\r\n * @see #setDefaultFocusTraversalKeys\r\n * @see #getDefaultFocusTraversalKeys\r\n * @see Component#setFocusTraversalKeys\r\n * @see Component#getFocusTraversalKeys\r\n */\r\n","field_name":"FORWARD_TRAVERSAL_KEYS","field_type":"int","full_declaration":"public static final int FORWARD_TRAVERSAL_KEYS = 0","id":2491},{"comment":"/**\r\n * The identifier for the Backward focus traversal keys.\r\n *\r\n * @see #setDefaultFocusTraversalKeys\r\n * @see #getDefaultFocusTraversalKeys\r\n * @see Component#setFocusTraversalKeys\r\n * @see Component#getFocusTraversalKeys\r\n */\r\n","field_name":"BACKWARD_TRAVERSAL_KEYS","field_type":"int","full_declaration":"public static final int BACKWARD_TRAVERSAL_KEYS = 1","id":2492},{"comment":"/**\r\n * The identifier for the Up Cycle focus traversal keys.\r\n *\r\n * @see #setDefaultFocusTraversalKeys\r\n * @see #getDefaultFocusTraversalKeys\r\n * @see Component#setFocusTraversalKeys\r\n * @see Component#getFocusTraversalKeys\r\n */\r\n","field_name":"UP_CYCLE_TRAVERSAL_KEYS","field_type":"int","full_declaration":"public static final int UP_CYCLE_TRAVERSAL_KEYS = 2","id":2493},{"comment":"/**\r\n * The identifier for the Down Cycle focus traversal keys.\r\n *\r\n * @see #setDefaultFocusTraversalKeys\r\n * @see #getDefaultFocusTraversalKeys\r\n * @see Component#setFocusTraversalKeys\r\n * @see Component#getFocusTraversalKeys\r\n */\r\n","field_name":"DOWN_CYCLE_TRAVERSAL_KEYS","field_type":"int","full_declaration":"public static final int DOWN_CYCLE_TRAVERSAL_KEYS = 3","id":2494},{"comment":"","field_name":"TRAVERSAL_KEY_LENGTH","field_type":"int","full_declaration":"static final int TRAVERSAL_KEY_LENGTH = DOWN_CYCLE_TRAVERSAL_KEYS + 1","id":2495},{"comment":"/**\r\n * The Component in an application that will typically receive all\r\n * KeyEvents generated by the user.\r\n */\r\nprivate static Component focusOwner;","field_name":"focusOwner","field_type":"java.awt.Component","full_declaration":"private static java.awt.Component focusOwner","id":2496},{"comment":"/**\r\n * The Component in an application that will regain focus when an\r\n * outstanding temporary focus transfer has completed, or the focus owner,\r\n * if no outstanding temporary transfer exists.\r\n */\r\nprivate static Component permanentFocusOwner;","field_name":"permanentFocusOwner","field_type":"java.awt.Component","full_declaration":"private static java.awt.Component permanentFocusOwner","id":2497},{"comment":"/**\r\n * The Window which is, or contains, the focus owner.\r\n */\r\nprivate static Window focusedWindow;","field_name":"focusedWindow","field_type":"java.awt.Window","full_declaration":"private static java.awt.Window focusedWindow","id":2498},{"comment":"/**\r\n * Only a Frame or a Dialog can be the active Window. The native windowing\r\n * system may denote the active Window with a special decoration, such as a\r\n * highlighted title bar. The active Window is always either the focused\r\n * Window, or the first Frame or Dialog which is an owner of the focused\r\n * Window.\r\n */\r\nprivate static Window activeWindow;","field_name":"activeWindow","field_type":"java.awt.Window","full_declaration":"private static java.awt.Window activeWindow","id":2499},{"comment":"/**\r\n * The default FocusTraversalPolicy for all Windows that have no policy of\r\n * their own set. If those Windows have focus-cycle-root children that have\r\n * no keyboard-traversal policy of their own, then those children will also\r\n * inherit this policy (as will, recursively, their focus-cycle-root\r\n * children).\r\n */\r\nprivate FocusTraversalPolicy defaultPolicy = new DefaultFocusTraversalPolicy();","field_name":"defaultPolicy","field_type":"java.awt.FocusTraversalPolicy","full_declaration":"private java.awt.FocusTraversalPolicy defaultPolicy = new DefaultFocusTraversalPolicy()","id":2500},{"comment":"/**\r\n * The bound property names of each focus traversal key.\r\n */\r\n","field_name":"defaultFocusTraversalKeyPropertyNames","field_type":"String[]","full_declaration":"private static final String[] defaultFocusTraversalKeyPropertyNames = { \"forwardDefaultFocusTraversalKeys\", \"backwardDefaultFocusTraversalKeys\", \"upCycleDefaultFocusTraversalKeys\", \"downCycleDefaultFocusTraversalKeys\" }","id":2501},{"comment":"/**\r\n * The default strokes for initializing the default focus traversal keys.\r\n */\r\n","field_name":"defaultFocusTraversalKeyStrokes","field_type":"AWTKeyStroke[][]","full_declaration":"private static final AWTKeyStroke[][] defaultFocusTraversalKeyStrokes = { { AWTKeyStroke.getAWTKeyStroke(KeyEvent.VK_TAB, 0, false), AWTKeyStroke.getAWTKeyStroke(KeyEvent.VK_TAB, InputEvent.CTRL_DOWN_MASK | InputEvent.CTRL_MASK, false) }, { AWTKeyStroke.getAWTKeyStroke(KeyEvent.VK_TAB, InputEvent.SHIFT_DOWN_MASK | InputEvent.SHIFT_MASK, false), AWTKeyStroke.getAWTKeyStroke(KeyEvent.VK_TAB, InputEvent.SHIFT_DOWN_MASK | InputEvent.SHIFT_MASK | InputEvent.CTRL_DOWN_MASK | InputEvent.CTRL_MASK, false) }, {}, {} }","id":2502},{"comment":"/**\r\n * The default focus traversal keys. Each array of traversal keys will be\r\n * in effect on all Windows that have no such array of their own explicitly\r\n * set. Each array will also be inherited, recursively, by any child\r\n * Component of those Windows that has no such array of its own explicitly\r\n * set.\r\n */\r\n","field_name":"defaultFocusTraversalKeys","field_type":"Set<AWTKeyStroke>[]","full_declaration":"private Set<AWTKeyStroke>[] defaultFocusTraversalKeys = new Set[4]","id":2503},{"comment":"/**\r\n * The current focus cycle root. If the focus owner is itself a focus cycle\r\n * root, then it may be ambiguous as to which Components represent the next\r\n * and previous Components to focus during normal focus traversal. In that\r\n * case, the current focus cycle root is used to differentiate among the\r\n * possibilities.\r\n */\r\nprivate static Container currentFocusCycleRoot;","field_name":"currentFocusCycleRoot","field_type":"java.awt.Container","full_declaration":"private static java.awt.Container currentFocusCycleRoot","id":2504},{"comment":"/**\r\n * A description of any VetoableChangeListeners which have been registered.\r\n */\r\nprivate VetoableChangeSupport vetoableSupport;","field_name":"vetoableSupport","field_type":"java.beans.VetoableChangeSupport","full_declaration":"private java.beans.VetoableChangeSupport vetoableSupport","id":2505},{"comment":"/**\r\n * A description of any PropertyChangeListeners which have been registered.\r\n */\r\nprivate PropertyChangeSupport changeSupport;","field_name":"changeSupport","field_type":"java.beans.PropertyChangeSupport","full_declaration":"private java.beans.PropertyChangeSupport changeSupport","id":2506},{"comment":"/**\r\n * This KeyboardFocusManager's KeyEventDispatcher chain. The List does not\r\n * include this KeyboardFocusManager unless it was explicitly re-registered\r\n * via a call to <code>addKeyEventDispatcher</code>. If no other\r\n * KeyEventDispatchers are registered, this field may be null or refer to\r\n * a List of length 0.\r\n */\r\nprivate java.util.LinkedList<KeyEventDispatcher> keyEventDispatchers;","field_name":"keyEventDispatchers","field_type":"java.util.LinkedList","full_declaration":"private java.util.LinkedList keyEventDispatchers","id":2507},{"comment":"/**\r\n * This KeyboardFocusManager's KeyEventPostProcessor chain. The List does\r\n * not include this KeyboardFocusManager unless it was explicitly\r\n * re-registered via a call to <code>addKeyEventPostProcessor</code>.\r\n * If no other KeyEventPostProcessors are registered, this field may be\r\n * null or refer to a List of length 0.\r\n */\r\nprivate java.util.LinkedList<KeyEventPostProcessor> keyEventPostProcessors;","field_name":"keyEventPostProcessors","field_type":"java.util.LinkedList","full_declaration":"private java.util.LinkedList keyEventPostProcessors","id":2508},{"comment":"/**\r\n * Maps Windows to those Windows' most recent focus owners.\r\n */\r\nprivate static java.util.Map<Window, WeakReference<Component>> mostRecentFocusOwners = new WeakHashMap<>();","field_name":"mostRecentFocusOwners","field_type":"java.util.Map","full_declaration":"private static java.util.Map mostRecentFocusOwners = new WeakHashMap<>()","id":2509},{"comment":"/**\r\n * We cache the permission used to verify that the calling thread is\r\n * permitted to access the global focus state.\r\n */\r\nprivate static AWTPermission replaceKeyboardFocusManagerPermission;","field_name":"replaceKeyboardFocusManagerPermission","field_type":"java.awt.AWTPermission","full_declaration":"private static java.awt.AWTPermission replaceKeyboardFocusManagerPermission","id":2510},{"comment":"/*\r\n     * SequencedEvent which is currently dispatched in AppContext.\r\n     */\r\ntransient SequencedEvent currentSequencedEvent = null;","field_name":"currentSequencedEvent","field_type":"java.awt.SequencedEvent","full_declaration":"transient java.awt.SequencedEvent currentSequencedEvent = null","id":2511},{"comment":"/*\r\n     * heavyweightRequests is used as a monitor for synchronized changes of\r\n     * currentLightweightRequests, clearingCurrentLightweightRequests and\r\n     * newFocusOwner.\r\n     */\r\nprivate static LinkedList<HeavyweightFocusRequest> heavyweightRequests = new LinkedList<HeavyweightFocusRequest>();","field_name":"heavyweightRequests","field_type":"java.util.LinkedList","full_declaration":"private static java.util.LinkedList heavyweightRequests = new LinkedList<HeavyweightFocusRequest>()","id":2512},{"comment":"private static LinkedList<LightweightFocusRequest> currentLightweightRequests;","field_name":"currentLightweightRequests","field_type":"java.util.LinkedList","full_declaration":"private static java.util.LinkedList currentLightweightRequests","id":2513},{"comment":"","field_name":"clearingCurrentLightweightRequests","field_type":"boolean","full_declaration":"private static boolean clearingCurrentLightweightRequests","id":2514},{"comment":"","field_name":"allowSyncFocusRequests","field_type":"boolean","full_declaration":"private static boolean allowSyncFocusRequests = true","id":2515},{"comment":"private static Component newFocusOwner = null;","field_name":"newFocusOwner","field_type":"java.awt.Component","full_declaration":"private static java.awt.Component newFocusOwner = null","id":2516},{"comment":"","field_name":"disableRestoreFocus","field_type":"boolean","full_declaration":"private static volatile boolean disableRestoreFocus","id":2517},{"comment":"","field_name":"SNFH_FAILURE","field_type":"int","full_declaration":"static final int SNFH_FAILURE = 0","id":2518},{"comment":"","field_name":"SNFH_SUCCESS_HANDLED","field_type":"int","full_declaration":"static final int SNFH_SUCCESS_HANDLED = 1","id":2519},{"comment":"","field_name":"SNFH_SUCCESS_PROCEED","field_type":"int","full_declaration":"static final int SNFH_SUCCESS_PROCEED = 2","id":2520},{"comment":"static Field proxyActive;","field_name":"proxyActive","field_type":"java.lang.reflect.Field","full_declaration":"static java.lang.reflect.Field proxyActive","id":2521},{"comment":"final Component component;","field_name":"component","field_type":"java.awt.Component","full_declaration":"final java.awt.Component component","id":2522},{"comment":"","field_name":"temporary","field_type":"boolean","full_declaration":"final boolean temporary","id":2523},{"comment":"final CausedFocusEvent.Cause cause;","field_name":"cause","field_type":"sun.awt.CausedFocusEvent.Cause","full_declaration":"final sun.awt.CausedFocusEvent.Cause cause","id":2524},{"comment":"final Component heavyweight;","field_name":"heavyweight","field_type":"java.awt.Component","full_declaration":"final java.awt.Component heavyweight","id":2525},{"comment":"final LinkedList<LightweightFocusRequest> lightweightRequests;","field_name":"lightweightRequests","field_type":"java.util.LinkedList","full_declaration":"final java.util.LinkedList lightweightRequests","id":2526},{"comment":"static final HeavyweightFocusRequest CLEAR_GLOBAL_FOCUS_OWNER = new HeavyweightFocusRequest();","field_name":"CLEAR_GLOBAL_FOCUS_OWNER","field_type":"java.awt.KeyboardFocusManager.HeavyweightFocusRequest","full_declaration":"static final java.awt.KeyboardFocusManager.HeavyweightFocusRequest CLEAR_GLOBAL_FOCUS_OWNER = new HeavyweightFocusRequest()","id":2527},{"comment":"/**\r\n * Indicates that the label should be left justified.\r\n */\r\n","field_name":"LEFT","field_type":"int","full_declaration":"public static final int LEFT = 0","id":2528},{"comment":"/**\r\n * Indicates that the label should be centered.\r\n */\r\n","field_name":"CENTER","field_type":"int","full_declaration":"public static final int CENTER = 1","id":2529},{"comment":"/**\r\n * Indicates that the label should be right justified.\r\n * @since   JDK1.0t.\r\n */\r\n","field_name":"RIGHT","field_type":"int","full_declaration":"public static final int RIGHT = 2","id":2530},{"comment":"/**\r\n * The text of this label.\r\n * This text can be modified by the program\r\n * but never by the user.\r\n *\r\n * @serial\r\n * @see #getText()\r\n * @see #setText(String)\r\n */\r\nString text;","field_name":"text","field_type":"java.lang.String","full_declaration":"java.lang.String text","id":2531},{"comment":"/**\r\n * The label's alignment.  The default alignment is set\r\n * to be left justified.\r\n *\r\n * @serial\r\n * @see #getAlignment()\r\n * @see #setAlignment(int)\r\n */\r\n","field_name":"alignment","field_type":"int","full_declaration":"int alignment = LEFT","id":2532},{"comment":"private static final String base = \"label\";","field_name":"base","field_type":"java.lang.String","full_declaration":"private static final java.lang.String base = \"label\"","id":2533},{"comment":"","field_name":"nameCounter","field_type":"int","full_declaration":"private static int nameCounter = 0","id":2534},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 3094126758329070636L","id":2535},{"comment":"/*\r\n         * JDK 1.3 serialVersionUID\r\n         */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -3568967560160480438L","id":2536},{"comment":"/**\r\n * Gradient start and end points.\r\n */\r\nprivate final Point2D start, end;","field_name":"start","field_type":"java.awt.geom.Point2D","full_declaration":"private final java.awt.geom.Point2D start","id":2537},{"comment":"/**\r\n * Gradient start and end points.\r\n */\r\nprivate final Point2D start, end;","field_name":"end","field_type":"java.awt.geom.Point2D","full_declaration":"private final java.awt.geom.Point2D startjava.awt.geom.Point2D end","id":2538},{"comment":"/**\r\n * The following invariants are used to process the gradient value from\r\n * a device space coordinate, (X, Y):\r\n *     g(X, Y) = dgdX*X + dgdY*Y + gc\r\n */\r\nprivate float dgdX, dgdY, gc;","field_name":"dgdX","field_type":"float","full_declaration":"private float dgdX","id":2539},{"comment":"/**\r\n * The following invariants are used to process the gradient value from\r\n * a device space coordinate, (X, Y):\r\n *     g(X, Y) = dgdX*X + dgdY*Y + gc\r\n */\r\nprivate float dgdX, dgdY, gc;","field_name":"dgdY","field_type":"float","full_declaration":"private float dgdXfloat dgdY","id":2540},{"comment":"/**\r\n * The following invariants are used to process the gradient value from\r\n * a device space coordinate, (X, Y):\r\n *     g(X, Y) = dgdX*X + dgdY*Y + gc\r\n */\r\nprivate float dgdX, dgdY, gc;","field_name":"gc","field_type":"float","full_declaration":"private float dgdXfloat dgdYfloat gc","id":2541},{"comment":"/**\r\n * A vector created to contain items which will become\r\n * part of the List Component.\r\n *\r\n * @serial\r\n * @see #addItem(String)\r\n * @see #getItem(int)\r\n */\r\nVector<String> items = new Vector<>();","field_name":"items","field_type":"java.util.Vector","full_declaration":"java.util.Vector items = new Vector<>()","id":2542},{"comment":"/**\r\n * This field will represent the number of visible rows in the\r\n * <code>List</code> Component.  It is specified only once, and\r\n * that is when the list component is actually\r\n * created.  It will never change.\r\n *\r\n * @serial\r\n * @see #getRows()\r\n */\r\n","field_name":"rows","field_type":"int","full_declaration":"int rows = 0","id":2543},{"comment":"/**\r\n * <code>multipleMode</code> is a variable that will\r\n * be set to <code>true</code> if a list component is to be set to\r\n * multiple selection mode, that is where the user can\r\n * select more than one item in a list at one time.\r\n * <code>multipleMode</code> will be set to false if the\r\n * list component is set to single selection, that is where\r\n * the user can only select one item on the list at any\r\n * one time.\r\n *\r\n * @serial\r\n * @see #isMultipleMode()\r\n * @see #setMultipleMode(boolean)\r\n */\r\n","field_name":"multipleMode","field_type":"boolean","full_declaration":"boolean multipleMode = false","id":2544},{"comment":"/**\r\n * <code>selected</code> is an array that will contain\r\n * the indices of items that have been selected.\r\n *\r\n * @serial\r\n * @see #getSelectedIndexes()\r\n * @see #getSelectedIndex()\r\n */\r\n","field_name":"selected","field_type":"int[]","full_declaration":"int[] selected = new int[0]","id":2545},{"comment":"/**\r\n * This variable contains the value that will be used\r\n * when trying to make a particular list item visible.\r\n *\r\n * @serial\r\n * @see #makeVisible(int)\r\n */\r\n","field_name":"visibleIndex","field_type":"int","full_declaration":"int visibleIndex = -1","id":2546},{"comment":"transient ActionListener actionListener;","field_name":"actionListener","field_type":"java.awt.event.ActionListener","full_declaration":"transient java.awt.event.ActionListener actionListener","id":2547},{"comment":"transient ItemListener itemListener;","field_name":"itemListener","field_type":"java.awt.event.ItemListener","full_declaration":"transient java.awt.event.ItemListener itemListener","id":2548},{"comment":"private static final String base = \"list\";","field_name":"base","field_type":"java.lang.String","full_declaration":"private static final java.lang.String base = \"list\"","id":2549},{"comment":"","field_name":"nameCounter","field_type":"int","full_declaration":"private static int nameCounter = 0","id":2550},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -3304312411574666869L","id":2551},{"comment":"/**\r\n * The default number of visible rows is 4.  A list with\r\n * zero rows is unusable and unsightly.\r\n */\r\n","field_name":"DEFAULT_VISIBLE_ROWS","field_type":"int","full_declaration":"final static int DEFAULT_VISIBLE_ROWS = 4","id":2552},{"comment":"/*\r\n     * Serialization support.  Since the value of the selected\r\n     * field isn't necessarily up to date, we sync it up with the\r\n     * peer before serializing.\r\n     */\r\n/**\r\n * The <code>List</code> component's\r\n * Serialized Data Version.\r\n *\r\n * @serial\r\n */\r\n","field_name":"listSerializedDataVersion","field_type":"int","full_declaration":"private int listSerializedDataVersion = 1","id":2553},{"comment":"/*\r\n         * JDK 1.3 serialVersionUID\r\n         */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 7924617370136012829L","id":2554},{"comment":"/*\r\n             * JDK 1.3 serialVersionUID\r\n             */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 4412022926028300317L","id":2555},{"comment":"// [[[FIXME]]] need to finish implementing this!!!\r\nprivate List parent;","field_name":"parent","field_type":"java.awt.List","full_declaration":"private java.awt.List parent","id":2556},{"comment":"","field_name":"indexInParent","field_type":"int","full_declaration":"private int indexInParent","id":2557},{"comment":"/**\r\n * A given <code>Component</code> that will be\r\n * tracked by a media tracker where the image will\r\n * eventually be drawn.\r\n *\r\n * @serial\r\n * @see #MediaTracker(Component)\r\n */\r\nComponent target;","field_name":"target","field_type":"java.awt.Component","full_declaration":"java.awt.Component target","id":2558},{"comment":"/**\r\n * The head of the list of <code>Images</code> that is being\r\n * tracked by the <code>MediaTracker</code>.\r\n *\r\n * @serial\r\n * @see #addImage(Image, int)\r\n * @see #removeImage(Image)\r\n */\r\nMediaEntry head;","field_name":"head","field_type":"java.awt.MediaEntry","full_declaration":"java.awt.MediaEntry head","id":2559},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -483174189758638095L","id":2560},{"comment":"/**\r\n * Flag indicating that media is currently being loaded.\r\n * @see         java.awt.MediaTracker#statusAll\r\n * @see         java.awt.MediaTracker#statusID\r\n */\r\n","field_name":"LOADING","field_type":"int","full_declaration":"public static final int LOADING = 1","id":2561},{"comment":"/**\r\n * Flag indicating that the downloading of media was aborted.\r\n * @see         java.awt.MediaTracker#statusAll\r\n * @see         java.awt.MediaTracker#statusID\r\n */\r\n","field_name":"ABORTED","field_type":"int","full_declaration":"public static final int ABORTED = 2","id":2562},{"comment":"/**\r\n * Flag indicating that the downloading of media encountered\r\n * an error.\r\n * @see         java.awt.MediaTracker#statusAll\r\n * @see         java.awt.MediaTracker#statusID\r\n */\r\n","field_name":"ERRORED","field_type":"int","full_declaration":"public static final int ERRORED = 4","id":2563},{"comment":"/**\r\n * Flag indicating that the downloading of media was completed\r\n * successfully.\r\n * @see         java.awt.MediaTracker#statusAll\r\n * @see         java.awt.MediaTracker#statusID\r\n */\r\n","field_name":"COMPLETE","field_type":"int","full_declaration":"public static final int COMPLETE = 8","id":2564},{"comment":"","field_name":"DONE","field_type":"int","full_declaration":"static final int DONE = (ABORTED | ERRORED | COMPLETE)","id":2565},{"comment":"MediaTracker tracker;","field_name":"tracker","field_type":"java.awt.MediaTracker","full_declaration":"java.awt.MediaTracker tracker","id":2566},{"comment":"","field_name":"ID","field_type":"int","full_declaration":"int ID","id":2567},{"comment":"MediaEntry next;","field_name":"next","field_type":"java.awt.MediaEntry","full_declaration":"java.awt.MediaEntry next","id":2568},{"comment":"","field_name":"status","field_type":"int","full_declaration":"int status","id":2569},{"comment":"","field_name":"cancelled","field_type":"boolean","full_declaration":"boolean cancelled","id":2570},{"comment":"","field_name":"LOADING","field_type":"int","full_declaration":"static final int LOADING = MediaTracker.LOADING","id":2571},{"comment":"","field_name":"ABORTED","field_type":"int","full_declaration":"static final int ABORTED = MediaTracker.ABORTED","id":2572},{"comment":"","field_name":"ERRORED","field_type":"int","full_declaration":"static final int ERRORED = MediaTracker.ERRORED","id":2573},{"comment":"","field_name":"COMPLETE","field_type":"int","full_declaration":"static final int COMPLETE = MediaTracker.COMPLETE","id":2574},{"comment":"","field_name":"LOADSTARTED","field_type":"int","full_declaration":"static final int LOADSTARTED = (LOADING | ERRORED | COMPLETE)","id":2575},{"comment":"","field_name":"DONE","field_type":"int","full_declaration":"static final int DONE = (ABORTED | ERRORED | COMPLETE)","id":2576},{"comment":"Image image;","field_name":"image","field_type":"java.awt.Image","full_declaration":"java.awt.Image image","id":2577},{"comment":"","field_name":"width","field_type":"int","full_declaration":"int width","id":2578},{"comment":"","field_name":"height","field_type":"int","full_declaration":"int height","id":2579},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 4739377000350280650L","id":2580},{"comment":"/**\r\n * A vector of the items that will be part of the Menu.\r\n *\r\n * @serial\r\n * @see #countItems()\r\n */\r\nVector<MenuComponent> items = new Vector<>();","field_name":"items","field_type":"java.util.Vector","full_declaration":"java.util.Vector items = new Vector<>()","id":2581},{"comment":"/**\r\n * This field indicates whether the menu has the\r\n * tear of property or not.  It will be set to\r\n * <code>true</code> if the menu has the tear off\r\n * property and it will be set to <code>false</code>\r\n * if it does not.\r\n * A torn off menu can be deleted by a user when\r\n * it is no longer needed.\r\n *\r\n * @serial\r\n * @see #isTearOff()\r\n */\r\n","field_name":"tearOff","field_type":"boolean","full_declaration":"boolean tearOff","id":2582},{"comment":"/**\r\n * This field will be set to <code>true</code>\r\n * if the Menu in question is actually a help\r\n * menu.  Otherwise it will be set to <code>\r\n * false</code>.\r\n *\r\n * @serial\r\n */\r\n","field_name":"isHelpMenu","field_type":"boolean","full_declaration":"boolean isHelpMenu","id":2583},{"comment":"private static final String base = \"menu\";","field_name":"base","field_type":"java.lang.String","full_declaration":"private static final java.lang.String base = \"menu\"","id":2584},{"comment":"","field_name":"nameCounter","field_type":"int","full_declaration":"private static int nameCounter = 0","id":2585},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -8809584163345499784L","id":2586},{"comment":"/* Serialization support.  A MenuContainer is responsible for\r\n     * restoring the parent fields of its children.\r\n     */\r\n/**\r\n * The menu serialized Data Version.\r\n *\r\n * @serial\r\n */\r\n","field_name":"menuSerializedDataVersion","field_type":"int","full_declaration":"private int menuSerializedDataVersion = 1","id":2587},{"comment":"/*\r\n         * JDK 1.3 serialVersionUID\r\n         */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 5228160894980069094L","id":2588},{"comment":"/**\r\n * This field represents a vector of the\r\n * actual menus that will be part of the MenuBar.\r\n *\r\n * @serial\r\n * @see #countMenus()\r\n */\r\nVector<Menu> menus = new Vector<>();","field_name":"menus","field_type":"java.util.Vector","full_declaration":"java.util.Vector menus = new Vector<>()","id":2589},{"comment":"/**\r\n * This menu is a special menu dedicated to\r\n * help.  The one thing to note about this menu\r\n * is that on some platforms it appears at the\r\n * right edge of the menubar.\r\n *\r\n * @serial\r\n * @see #getHelpMenu()\r\n * @see #setHelpMenu(Menu)\r\n */\r\nMenu helpMenu;","field_name":"helpMenu","field_type":"java.awt.Menu","full_declaration":"java.awt.Menu helpMenu","id":2590},{"comment":"private static final String base = \"menubar\";","field_name":"base","field_type":"java.lang.String","full_declaration":"private static final java.lang.String base = \"menubar\"","id":2591},{"comment":"","field_name":"nameCounter","field_type":"int","full_declaration":"private static int nameCounter = 0","id":2592},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -4930327919388951260L","id":2593},{"comment":"/* Serialization support.  Restore the (transient) parent\r\n     * fields of Menubar menus here.\r\n     */\r\n/**\r\n * The MenuBar's serialized data version.\r\n *\r\n * @serial\r\n */\r\n","field_name":"menuBarSerializedDataVersion","field_type":"int","full_declaration":"private int menuBarSerializedDataVersion = 1","id":2594},{"comment":"/*\r\n         * JDK 1.3 serialVersionUID\r\n         */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -8577604491830083815L","id":2595},{"comment":"transient MenuComponentPeer peer;","field_name":"peer","field_type":"java.awt.peer.MenuComponentPeer","full_declaration":"transient java.awt.peer.MenuComponentPeer peer","id":2596},{"comment":"transient MenuContainer parent;","field_name":"parent","field_type":"java.awt.MenuContainer","full_declaration":"transient java.awt.MenuContainer parent","id":2597},{"comment":"/**\r\n * The <code>AppContext</code> of the <code>MenuComponent</code>.\r\n * This is set in the constructor and never changes.\r\n */\r\ntransient AppContext appContext;","field_name":"appContext","field_type":"sun.awt.AppContext","full_declaration":"transient sun.awt.AppContext appContext","id":2598},{"comment":"/**\r\n * The menu component's font. This value can be\r\n * <code>null</code> at which point a default will be used.\r\n * This defaults to <code>null</code>.\r\n *\r\n * @serial\r\n * @see #setFont(Font)\r\n * @see #getFont()\r\n */\r\nvolatile Font font;","field_name":"font","field_type":"java.awt.Font","full_declaration":"volatile java.awt.Font font","id":2599},{"comment":"/**\r\n * The menu component's name, which defaults to <code>null</code>.\r\n * @serial\r\n * @see #getName()\r\n * @see #setName(String)\r\n */\r\nprivate String name;","field_name":"name","field_type":"java.lang.String","full_declaration":"private java.lang.String name","id":2600},{"comment":"/**\r\n * A variable to indicate whether a name is explicitly set.\r\n * If <code>true</code> the name will be set explicitly.\r\n * This defaults to <code>false</code>.\r\n * @serial\r\n * @see #setName(String)\r\n */\r\n","field_name":"nameExplicitlySet","field_type":"boolean","full_declaration":"private boolean nameExplicitlySet = false","id":2601},{"comment":"/**\r\n * Defaults to <code>false</code>.\r\n * @serial\r\n * @see #dispatchEvent(AWTEvent)\r\n */\r\n","field_name":"newEventsOnly","field_type":"boolean","full_declaration":"boolean newEventsOnly = false","id":2602},{"comment":"/*\r\n     * The menu's AccessControlContext.\r\n     */\r\nprivate transient volatile AccessControlContext acc = AccessController.getContext();","field_name":"acc","field_type":"java.security.AccessControlContext","full_declaration":"private transient volatile java.security.AccessControlContext acc = AccessController.getContext()","id":2603},{"comment":"/*\r\n     * Internal constants for serialization.\r\n     */\r\nfinal static String actionListenerK = Component.actionListenerK;","field_name":"actionListenerK","field_type":"java.lang.String","full_declaration":"final static java.lang.String actionListenerK = Component.actionListenerK","id":2604},{"comment":"final static String itemListenerK = Component.itemListenerK;","field_name":"itemListenerK","field_type":"java.lang.String","full_declaration":"final static java.lang.String itemListenerK = Component.itemListenerK","id":2605},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -4536902356223894379L","id":2606},{"comment":"/*\r\n     * --- Accessibility Support ---\r\n     *\r\n     *  MenuComponent will contain all of the methods in interface Accessible,\r\n     *  though it won't actually implement the interface - that will be up\r\n     *  to the individual objects which extend MenuComponent.\r\n     */\r\nAccessibleContext accessibleContext = null;","field_name":"accessibleContext","field_type":"javax.accessibility.AccessibleContext","full_declaration":"javax.accessibility.AccessibleContext accessibleContext = null","id":2607},{"comment":"/*\r\n         * JDK 1.3 serialVersionUID\r\n         */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -4269533416223798698L","id":2608},{"comment":"/**\r\n * A value to indicate whether a menu item is enabled\r\n * or not.  If it is enabled, <code>enabled</code> will\r\n * be set to true.  Else <code>enabled</code> will\r\n * be set to false.\r\n *\r\n * @serial\r\n * @see #isEnabled()\r\n * @see #setEnabled(boolean)\r\n */\r\n","field_name":"enabled","field_type":"boolean","full_declaration":"boolean enabled = true","id":2609},{"comment":"/**\r\n * <code>label</code> is the label of a menu item.\r\n * It can be any string.\r\n *\r\n * @serial\r\n * @see #getLabel()\r\n * @see #setLabel(String)\r\n */\r\nString label;","field_name":"label","field_type":"java.lang.String","full_declaration":"java.lang.String label","id":2610},{"comment":"/**\r\n * This field indicates the command tha has been issued\r\n * by a  particular menu item.\r\n * By default the <code>actionCommand</code>\r\n * is the label of the menu item, unless it has been\r\n * set using setActionCommand.\r\n *\r\n * @serial\r\n * @see #setActionCommand(String)\r\n * @see #getActionCommand()\r\n */\r\nString actionCommand;","field_name":"actionCommand","field_type":"java.lang.String","full_declaration":"java.lang.String actionCommand","id":2611},{"comment":"/**\r\n * The eventMask is ONLY set by subclasses via enableEvents.\r\n * The mask should NOT be set when listeners are registered\r\n * so that we can distinguish the difference between when\r\n * listeners request events and subclasses request them.\r\n *\r\n * @serial\r\n */\r\n","field_name":"eventMask","field_type":"long","full_declaration":"long eventMask","id":2612},{"comment":"transient ActionListener actionListener;","field_name":"actionListener","field_type":"java.awt.event.ActionListener","full_declaration":"transient java.awt.event.ActionListener actionListener","id":2613},{"comment":"/**\r\n * A sequence of key stokes that ia associated with\r\n * a menu item.\r\n * Note :in 1.1.2 you must use setActionCommand()\r\n * on a menu item in order for its shortcut to\r\n * work.\r\n *\r\n * @serial\r\n * @see #getShortcut()\r\n * @see #setShortcut(MenuShortcut)\r\n * @see #deleteShortcut()\r\n */\r\nprivate MenuShortcut shortcut = null;","field_name":"shortcut","field_type":"java.awt.MenuShortcut","full_declaration":"private java.awt.MenuShortcut shortcut = null","id":2614},{"comment":"private static final String base = \"menuitem\";","field_name":"base","field_type":"java.lang.String","full_declaration":"private static final java.lang.String base = \"menuitem\"","id":2615},{"comment":"","field_name":"nameCounter","field_type":"int","full_declaration":"private static int nameCounter = 0","id":2616},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -21757335363267194L","id":2617},{"comment":"/* Serialization support.\r\n     */\r\n/**\r\n * Menu item serialized data version.\r\n *\r\n * @serial\r\n */\r\n","field_name":"menuItemSerializedDataVersion","field_type":"int","full_declaration":"private int menuItemSerializedDataVersion = 1","id":2618},{"comment":"/*\r\n         * JDK 1.3 serialVersionUID\r\n         */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -217847831945965825L","id":2619},{"comment":"/**\r\n * The virtual keycode for the menu shortcut.\r\n * This is the keycode with which the menu shortcut will be created.\r\n * Note that it is a virtual keycode, not a character,\r\n * e.g. KeyEvent.VK_A, not 'a'.\r\n * Note: in 1.1.x you must use setActionCommand() on a menu item\r\n * in order for its shortcut to work, otherwise it will fire a null\r\n * action command.\r\n *\r\n * @serial\r\n * @see #getKey()\r\n * @see #usesShiftModifier()\r\n * @see java.awt.event.KeyEvent\r\n * @since JDK1.1\r\n */\r\n","field_name":"key","field_type":"int","full_declaration":"int key","id":2620},{"comment":"/**\r\n * Indicates whether the shft key was pressed.\r\n * If true, the shift key was pressed.\r\n * If false, the shift key was not pressed\r\n *\r\n * @serial\r\n * @see #usesShiftModifier()\r\n * @since JDK1.1\r\n */\r\n","field_name":"usesShift","field_type":"boolean","full_declaration":"boolean usesShift","id":2621},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 143448358473180225L","id":2622},{"comment":"protected Dialog modalDialog;","field_name":"modalDialog","field_type":"java.awt.Dialog","full_declaration":"protected java.awt.Dialog modalDialog","id":2623},{"comment":"","field_name":"disabled","field_type":"boolean","full_declaration":"protected boolean disabled","id":2624},{"comment":"private AppContext appContext;","field_name":"appContext","field_type":"sun.awt.AppContext","full_declaration":"private sun.awt.AppContext appContext","id":2625},{"comment":"private AppContext appContext;","field_name":"appContext","field_type":"sun.awt.AppContext","full_declaration":"private sun.awt.AppContext appContext","id":2626},{"comment":"private Window documentRoot;","field_name":"documentRoot","field_type":"java.awt.Window","full_declaration":"private java.awt.Window documentRoot","id":2627},{"comment":"/**\r\n * The transparency of this paint object.\r\n */\r\n","field_name":"transparency","field_type":"int","full_declaration":"final int transparency","id":2628},{"comment":"/**\r\n * Gradient keyframe values in the range 0 to 1.\r\n */\r\n","field_name":"fractions","field_type":"float[]","full_declaration":"final float[] fractions","id":2629},{"comment":"/**\r\n * Gradient colors.\r\n */\r\n","field_name":"colors","field_type":"Color[]","full_declaration":"final Color[] colors","id":2630},{"comment":"/**\r\n * Transform to apply to gradient.\r\n */\r\nfinal AffineTransform gradientTransform;","field_name":"gradientTransform","field_type":"java.awt.geom.AffineTransform","full_declaration":"final java.awt.geom.AffineTransform gradientTransform","id":2631},{"comment":"/**\r\n * The method to use when painting outside the gradient bounds.\r\n */\r\nfinal CycleMethod cycleMethod;","field_name":"cycleMethod","field_type":"java.awt.MultipleGradientPaint.CycleMethod","full_declaration":"final java.awt.MultipleGradientPaint.CycleMethod cycleMethod","id":2632},{"comment":"/**\r\n * The color space in which to perform the gradient interpolation.\r\n */\r\nfinal ColorSpaceType colorSpace;","field_name":"colorSpace","field_type":"java.awt.MultipleGradientPaint.ColorSpaceType","full_declaration":"final java.awt.MultipleGradientPaint.ColorSpaceType colorSpace","id":2633},{"comment":"/**\r\n * The following fields are used only by MultipleGradientPaintContext\r\n * to cache certain values that remain constant and do not need to be\r\n * recalculated for each context created from this paint instance.\r\n */\r\nColorModel model;","field_name":"model","field_type":"java.awt.image.ColorModel","full_declaration":"java.awt.image.ColorModel model","id":2634},{"comment":"","field_name":"normalizedIntervals","field_type":"float[]","full_declaration":"float[] normalizedIntervals","id":2635},{"comment":"","field_name":"isSimpleLookup","field_type":"boolean","full_declaration":"boolean isSimpleLookup","id":2636},{"comment":"SoftReference<int[][]> gradients;","field_name":"gradients","field_type":"java.lang.ref.SoftReference","full_declaration":"java.lang.ref.SoftReference gradients","id":2637},{"comment":"SoftReference<int[]> gradient;","field_name":"gradient","field_type":"java.lang.ref.SoftReference","full_declaration":"java.lang.ref.SoftReference gradient","id":2638},{"comment":"","field_name":"fastGradientArraySize","field_type":"int","full_declaration":"int fastGradientArraySize","id":2639},{"comment":"/**\r\n * The PaintContext's ColorModel.  This is ARGB if colors are not all\r\n * opaque, otherwise it is RGB.\r\n */\r\nprotected ColorModel model;","field_name":"model","field_type":"java.awt.image.ColorModel","full_declaration":"protected java.awt.image.ColorModel model","id":2640},{"comment":"/**\r\n * Color model used if gradient colors are all opaque.\r\n */\r\nprivate static ColorModel xrgbmodel = new DirectColorModel(24, 0x00ff0000, 0x0000ff00, 0x000000ff);","field_name":"xrgbmodel","field_type":"java.awt.image.ColorModel","full_declaration":"private static java.awt.image.ColorModel xrgbmodel = new DirectColorModel(24, 0x00ff0000, 0x0000ff00, 0x000000ff)","id":2641},{"comment":"/**\r\n * The cached ColorModel.\r\n */\r\nprotected static ColorModel cachedModel;","field_name":"cachedModel","field_type":"java.awt.image.ColorModel","full_declaration":"protected static java.awt.image.ColorModel cachedModel","id":2642},{"comment":"/**\r\n * The cached raster, which is reusable among instances.\r\n */\r\nprotected static WeakReference<Raster> cached;","field_name":"cached","field_type":"java.lang.ref.WeakReference","full_declaration":"protected static java.lang.ref.WeakReference cached","id":2643},{"comment":"/**\r\n * Raster is reused whenever possible.\r\n */\r\nprotected Raster saved;","field_name":"saved","field_type":"java.awt.image.Raster","full_declaration":"protected java.awt.image.Raster saved","id":2644},{"comment":"/**\r\n * The method to use when painting out of the gradient bounds.\r\n */\r\nprotected CycleMethod cycleMethod;","field_name":"cycleMethod","field_type":"java.awt.MultipleGradientPaint.CycleMethod","full_declaration":"protected java.awt.MultipleGradientPaint.CycleMethod cycleMethod","id":2645},{"comment":"/**\r\n * The ColorSpace in which to perform the interpolation\r\n */\r\nprotected ColorSpaceType colorSpace;","field_name":"colorSpace","field_type":"java.awt.MultipleGradientPaint.ColorSpaceType","full_declaration":"protected java.awt.MultipleGradientPaint.ColorSpaceType colorSpace","id":2646},{"comment":"/**\r\n * Elements of the inverse transform matrix.\r\n */\r\nprotected float a00, a01, a10, a11, a02, a12;","field_name":"a00","field_type":"float","full_declaration":"protected float a00","id":2647},{"comment":"/**\r\n * Elements of the inverse transform matrix.\r\n */\r\nprotected float a00, a01, a10, a11, a02, a12;","field_name":"a01","field_type":"float","full_declaration":"protected float a00float a01","id":2648},{"comment":"/**\r\n * Elements of the inverse transform matrix.\r\n */\r\nprotected float a00, a01, a10, a11, a02, a12;","field_name":"a10","field_type":"float","full_declaration":"protected float a00float a01float a10","id":2649},{"comment":"/**\r\n * Elements of the inverse transform matrix.\r\n */\r\nprotected float a00, a01, a10, a11, a02, a12;","field_name":"a11","field_type":"float","full_declaration":"protected float a00float a01float a10float a11","id":2650},{"comment":"/**\r\n * Elements of the inverse transform matrix.\r\n */\r\nprotected float a00, a01, a10, a11, a02, a12;","field_name":"a02","field_type":"float","full_declaration":"protected float a00float a01float a10float a11float a02","id":2651},{"comment":"/**\r\n * Elements of the inverse transform matrix.\r\n */\r\nprotected float a00, a01, a10, a11, a02, a12;","field_name":"a12","field_type":"float","full_declaration":"protected float a00float a01float a10float a11float a02float a12","id":2652},{"comment":"/**\r\n * This boolean specifies whether we are in simple lookup mode, where an\r\n * input value between 0 and 1 may be used to directly index into a single\r\n * array of gradient colors.  If this boolean value is false, then we have\r\n * to use a 2-step process where we have to determine which gradient array\r\n * we fall into, then determine the index into that array.\r\n */\r\n","field_name":"isSimpleLookup","field_type":"boolean","full_declaration":"protected boolean isSimpleLookup","id":2653},{"comment":"/**\r\n * Size of gradients array for scaling the 0-1 index when looking up\r\n * colors the fast way.\r\n */\r\n","field_name":"fastGradientArraySize","field_type":"int","full_declaration":"protected int fastGradientArraySize","id":2654},{"comment":"/**\r\n * Array which contains the interpolated color values for each interval,\r\n * used by calculateSingleArrayGradient().  It is protected for possible\r\n * direct access by subclasses.\r\n */\r\n","field_name":"gradient","field_type":"int[]","full_declaration":"protected int[] gradient","id":2655},{"comment":"/**\r\n * Array of gradient arrays, one array for each interval.  Used by\r\n * calculateMultipleArrayGradient().\r\n */\r\n","field_name":"gradients","field_type":"int[][]","full_declaration":"private int[][] gradients","id":2656},{"comment":"/**\r\n * Normalized intervals array.\r\n */\r\n","field_name":"normalizedIntervals","field_type":"float[]","full_declaration":"private float[] normalizedIntervals","id":2657},{"comment":"/**\r\n * Fractions array.\r\n */\r\n","field_name":"fractions","field_type":"float[]","full_declaration":"private float[] fractions","id":2658},{"comment":"/**\r\n * Used to determine if gradient colors are all opaque.\r\n */\r\n","field_name":"transparencyTest","field_type":"int","full_declaration":"private int transparencyTest","id":2659},{"comment":"/**\r\n * Color space conversion lookup tables.\r\n */\r\n","field_name":"SRGBtoLinearRGB","field_type":"int[]","full_declaration":"private static final int[] SRGBtoLinearRGB = new int[256]","id":2660},{"comment":"","field_name":"LinearRGBtoSRGB","field_type":"int[]","full_declaration":"private static final int[] LinearRGBtoSRGB = new int[256]","id":2661},{"comment":"/**\r\n * Constant number of max colors between any 2 arbitrary colors.\r\n * Used for creating and indexing gradients arrays.\r\n */\r\n","field_name":"GRADIENT_SIZE","field_type":"int","full_declaration":"protected static final int GRADIENT_SIZE = 256","id":2662},{"comment":"","field_name":"GRADIENT_SIZE_INDEX","field_type":"int","full_declaration":"protected static final int GRADIENT_SIZE_INDEX = GRADIENT_SIZE - 1","id":2663},{"comment":"/**\r\n * Maximum length of the fast single-array.  If the estimated array size\r\n * is greater than this, switch over to the slow lookup method.\r\n * No particular reason for choosing this number, but it seems to provide\r\n * satisfactory performance for the common case (fast lookup).\r\n */\r\n","field_name":"MAX_GRADIENT_ARRAY_SIZE","field_type":"int","full_declaration":"private static final int MAX_GRADIENT_ARRAY_SIZE = 5000","id":2664},{"comment":"private ColorType color;","field_name":"color","field_type":"java.awt.PageAttributes.ColorType","full_declaration":"private java.awt.PageAttributes.ColorType color","id":2665},{"comment":"private MediaType media;","field_name":"media","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"private java.awt.PageAttributes.MediaType media","id":2666},{"comment":"private OrientationRequestedType orientationRequested;","field_name":"orientationRequested","field_type":"java.awt.PageAttributes.OrientationRequestedType","full_declaration":"private java.awt.PageAttributes.OrientationRequestedType orientationRequested","id":2667},{"comment":"private OriginType origin;","field_name":"origin","field_type":"java.awt.PageAttributes.OriginType","full_declaration":"private java.awt.PageAttributes.OriginType origin","id":2668},{"comment":"private PrintQualityType printQuality;","field_name":"printQuality","field_type":"java.awt.PageAttributes.PrintQualityType","full_declaration":"private java.awt.PageAttributes.PrintQualityType printQuality","id":2669},{"comment":"","field_name":"printerResolution","field_type":"int[]","full_declaration":"private int[] printerResolution","id":2670},{"comment":"","field_name":"I_COLOR","field_type":"int","full_declaration":"private static final int I_COLOR = 0","id":2671},{"comment":"","field_name":"I_MONOCHROME","field_type":"int","full_declaration":"private static final int I_MONOCHROME = 1","id":2672},{"comment":"","field_name":"NAMES","field_type":"String[]","full_declaration":"private static final String[] NAMES = { \"color\", \"monochrome\" }","id":2673},{"comment":"/**\r\n * The ColorType instance to use for specifying color printing.\r\n */\r\npublic static final ColorType COLOR = new ColorType(I_COLOR);","field_name":"COLOR","field_type":"java.awt.PageAttributes.ColorType","full_declaration":"public static final java.awt.PageAttributes.ColorType COLOR = new ColorType(I_COLOR)","id":2674},{"comment":"/**\r\n * The ColorType instance to use for specifying monochrome printing.\r\n */\r\npublic static final ColorType MONOCHROME = new ColorType(I_MONOCHROME);","field_name":"MONOCHROME","field_type":"java.awt.PageAttributes.ColorType","full_declaration":"public static final java.awt.PageAttributes.ColorType MONOCHROME = new ColorType(I_MONOCHROME)","id":2675},{"comment":"","field_name":"I_ISO_4A0","field_type":"int","full_declaration":"private static final int I_ISO_4A0 = 0","id":2676},{"comment":"","field_name":"I_ISO_2A0","field_type":"int","full_declaration":"private static final int I_ISO_2A0 = 1","id":2677},{"comment":"","field_name":"I_ISO_A0","field_type":"int","full_declaration":"private static final int I_ISO_A0 = 2","id":2678},{"comment":"","field_name":"I_ISO_A1","field_type":"int","full_declaration":"private static final int I_ISO_A1 = 3","id":2679},{"comment":"","field_name":"I_ISO_A2","field_type":"int","full_declaration":"private static final int I_ISO_A2 = 4","id":2680},{"comment":"","field_name":"I_ISO_A3","field_type":"int","full_declaration":"private static final int I_ISO_A3 = 5","id":2681},{"comment":"","field_name":"I_ISO_A4","field_type":"int","full_declaration":"private static final int I_ISO_A4 = 6","id":2682},{"comment":"","field_name":"I_ISO_A5","field_type":"int","full_declaration":"private static final int I_ISO_A5 = 7","id":2683},{"comment":"","field_name":"I_ISO_A6","field_type":"int","full_declaration":"private static final int I_ISO_A6 = 8","id":2684},{"comment":"","field_name":"I_ISO_A7","field_type":"int","full_declaration":"private static final int I_ISO_A7 = 9","id":2685},{"comment":"","field_name":"I_ISO_A8","field_type":"int","full_declaration":"private static final int I_ISO_A8 = 10","id":2686},{"comment":"","field_name":"I_ISO_A9","field_type":"int","full_declaration":"private static final int I_ISO_A9 = 11","id":2687},{"comment":"","field_name":"I_ISO_A10","field_type":"int","full_declaration":"private static final int I_ISO_A10 = 12","id":2688},{"comment":"","field_name":"I_ISO_B0","field_type":"int","full_declaration":"private static final int I_ISO_B0 = 13","id":2689},{"comment":"","field_name":"I_ISO_B1","field_type":"int","full_declaration":"private static final int I_ISO_B1 = 14","id":2690},{"comment":"","field_name":"I_ISO_B2","field_type":"int","full_declaration":"private static final int I_ISO_B2 = 15","id":2691},{"comment":"","field_name":"I_ISO_B3","field_type":"int","full_declaration":"private static final int I_ISO_B3 = 16","id":2692},{"comment":"","field_name":"I_ISO_B4","field_type":"int","full_declaration":"private static final int I_ISO_B4 = 17","id":2693},{"comment":"","field_name":"I_ISO_B5","field_type":"int","full_declaration":"private static final int I_ISO_B5 = 18","id":2694},{"comment":"","field_name":"I_ISO_B6","field_type":"int","full_declaration":"private static final int I_ISO_B6 = 19","id":2695},{"comment":"","field_name":"I_ISO_B7","field_type":"int","full_declaration":"private static final int I_ISO_B7 = 20","id":2696},{"comment":"","field_name":"I_ISO_B8","field_type":"int","full_declaration":"private static final int I_ISO_B8 = 21","id":2697},{"comment":"","field_name":"I_ISO_B9","field_type":"int","full_declaration":"private static final int I_ISO_B9 = 22","id":2698},{"comment":"","field_name":"I_ISO_B10","field_type":"int","full_declaration":"private static final int I_ISO_B10 = 23","id":2699},{"comment":"","field_name":"I_JIS_B0","field_type":"int","full_declaration":"private static final int I_JIS_B0 = 24","id":2700},{"comment":"","field_name":"I_JIS_B1","field_type":"int","full_declaration":"private static final int I_JIS_B1 = 25","id":2701},{"comment":"","field_name":"I_JIS_B2","field_type":"int","full_declaration":"private static final int I_JIS_B2 = 26","id":2702},{"comment":"","field_name":"I_JIS_B3","field_type":"int","full_declaration":"private static final int I_JIS_B3 = 27","id":2703},{"comment":"","field_name":"I_JIS_B4","field_type":"int","full_declaration":"private static final int I_JIS_B4 = 28","id":2704},{"comment":"","field_name":"I_JIS_B5","field_type":"int","full_declaration":"private static final int I_JIS_B5 = 29","id":2705},{"comment":"","field_name":"I_JIS_B6","field_type":"int","full_declaration":"private static final int I_JIS_B6 = 30","id":2706},{"comment":"","field_name":"I_JIS_B7","field_type":"int","full_declaration":"private static final int I_JIS_B7 = 31","id":2707},{"comment":"","field_name":"I_JIS_B8","field_type":"int","full_declaration":"private static final int I_JIS_B8 = 32","id":2708},{"comment":"","field_name":"I_JIS_B9","field_type":"int","full_declaration":"private static final int I_JIS_B9 = 33","id":2709},{"comment":"","field_name":"I_JIS_B10","field_type":"int","full_declaration":"private static final int I_JIS_B10 = 34","id":2710},{"comment":"","field_name":"I_ISO_C0","field_type":"int","full_declaration":"private static final int I_ISO_C0 = 35","id":2711},{"comment":"","field_name":"I_ISO_C1","field_type":"int","full_declaration":"private static final int I_ISO_C1 = 36","id":2712},{"comment":"","field_name":"I_ISO_C2","field_type":"int","full_declaration":"private static final int I_ISO_C2 = 37","id":2713},{"comment":"","field_name":"I_ISO_C3","field_type":"int","full_declaration":"private static final int I_ISO_C3 = 38","id":2714},{"comment":"","field_name":"I_ISO_C4","field_type":"int","full_declaration":"private static final int I_ISO_C4 = 39","id":2715},{"comment":"","field_name":"I_ISO_C5","field_type":"int","full_declaration":"private static final int I_ISO_C5 = 40","id":2716},{"comment":"","field_name":"I_ISO_C6","field_type":"int","full_declaration":"private static final int I_ISO_C6 = 41","id":2717},{"comment":"","field_name":"I_ISO_C7","field_type":"int","full_declaration":"private static final int I_ISO_C7 = 42","id":2718},{"comment":"","field_name":"I_ISO_C8","field_type":"int","full_declaration":"private static final int I_ISO_C8 = 43","id":2719},{"comment":"","field_name":"I_ISO_C9","field_type":"int","full_declaration":"private static final int I_ISO_C9 = 44","id":2720},{"comment":"","field_name":"I_ISO_C10","field_type":"int","full_declaration":"private static final int I_ISO_C10 = 45","id":2721},{"comment":"","field_name":"I_ISO_DESIGNATED_LONG","field_type":"int","full_declaration":"private static final int I_ISO_DESIGNATED_LONG = 46","id":2722},{"comment":"","field_name":"I_EXECUTIVE","field_type":"int","full_declaration":"private static final int I_EXECUTIVE = 47","id":2723},{"comment":"","field_name":"I_FOLIO","field_type":"int","full_declaration":"private static final int I_FOLIO = 48","id":2724},{"comment":"","field_name":"I_INVOICE","field_type":"int","full_declaration":"private static final int I_INVOICE = 49","id":2725},{"comment":"","field_name":"I_LEDGER","field_type":"int","full_declaration":"private static final int I_LEDGER = 50","id":2726},{"comment":"","field_name":"I_NA_LETTER","field_type":"int","full_declaration":"private static final int I_NA_LETTER = 51","id":2727},{"comment":"","field_name":"I_NA_LEGAL","field_type":"int","full_declaration":"private static final int I_NA_LEGAL = 52","id":2728},{"comment":"","field_name":"I_QUARTO","field_type":"int","full_declaration":"private static final int I_QUARTO = 53","id":2729},{"comment":"","field_name":"I_A","field_type":"int","full_declaration":"private static final int I_A = 54","id":2730},{"comment":"","field_name":"I_B","field_type":"int","full_declaration":"private static final int I_B = 55","id":2731},{"comment":"","field_name":"I_C","field_type":"int","full_declaration":"private static final int I_C = 56","id":2732},{"comment":"","field_name":"I_D","field_type":"int","full_declaration":"private static final int I_D = 57","id":2733},{"comment":"","field_name":"I_E","field_type":"int","full_declaration":"private static final int I_E = 58","id":2734},{"comment":"","field_name":"I_NA_10X15_ENVELOPE","field_type":"int","full_declaration":"private static final int I_NA_10X15_ENVELOPE = 59","id":2735},{"comment":"","field_name":"I_NA_10X14_ENVELOPE","field_type":"int","full_declaration":"private static final int I_NA_10X14_ENVELOPE = 60","id":2736},{"comment":"","field_name":"I_NA_10X13_ENVELOPE","field_type":"int","full_declaration":"private static final int I_NA_10X13_ENVELOPE = 61","id":2737},{"comment":"","field_name":"I_NA_9X12_ENVELOPE","field_type":"int","full_declaration":"private static final int I_NA_9X12_ENVELOPE = 62","id":2738},{"comment":"","field_name":"I_NA_9X11_ENVELOPE","field_type":"int","full_declaration":"private static final int I_NA_9X11_ENVELOPE = 63","id":2739},{"comment":"","field_name":"I_NA_7X9_ENVELOPE","field_type":"int","full_declaration":"private static final int I_NA_7X9_ENVELOPE = 64","id":2740},{"comment":"","field_name":"I_NA_6X9_ENVELOPE","field_type":"int","full_declaration":"private static final int I_NA_6X9_ENVELOPE = 65","id":2741},{"comment":"","field_name":"I_NA_NUMBER_9_ENVELOPE","field_type":"int","full_declaration":"private static final int I_NA_NUMBER_9_ENVELOPE = 66","id":2742},{"comment":"","field_name":"I_NA_NUMBER_10_ENVELOPE","field_type":"int","full_declaration":"private static final int I_NA_NUMBER_10_ENVELOPE = 67","id":2743},{"comment":"","field_name":"I_NA_NUMBER_11_ENVELOPE","field_type":"int","full_declaration":"private static final int I_NA_NUMBER_11_ENVELOPE = 68","id":2744},{"comment":"","field_name":"I_NA_NUMBER_12_ENVELOPE","field_type":"int","full_declaration":"private static final int I_NA_NUMBER_12_ENVELOPE = 69","id":2745},{"comment":"","field_name":"I_NA_NUMBER_14_ENVELOPE","field_type":"int","full_declaration":"private static final int I_NA_NUMBER_14_ENVELOPE = 70","id":2746},{"comment":"","field_name":"I_INVITE_ENVELOPE","field_type":"int","full_declaration":"private static final int I_INVITE_ENVELOPE = 71","id":2747},{"comment":"","field_name":"I_ITALY_ENVELOPE","field_type":"int","full_declaration":"private static final int I_ITALY_ENVELOPE = 72","id":2748},{"comment":"","field_name":"I_MONARCH_ENVELOPE","field_type":"int","full_declaration":"private static final int I_MONARCH_ENVELOPE = 73","id":2749},{"comment":"","field_name":"I_PERSONAL_ENVELOPE","field_type":"int","full_declaration":"private static final int I_PERSONAL_ENVELOPE = 74","id":2750},{"comment":"","field_name":"NAMES","field_type":"String[]","full_declaration":"private static final String[] NAMES = { \"iso-4a0\", \"iso-2a0\", \"iso-a0\", \"iso-a1\", \"iso-a2\", \"iso-a3\", \"iso-a4\", \"iso-a5\", \"iso-a6\", \"iso-a7\", \"iso-a8\", \"iso-a9\", \"iso-a10\", \"iso-b0\", \"iso-b1\", \"iso-b2\", \"iso-b3\", \"iso-b4\", \"iso-b5\", \"iso-b6\", \"iso-b7\", \"iso-b8\", \"iso-b9\", \"iso-b10\", \"jis-b0\", \"jis-b1\", \"jis-b2\", \"jis-b3\", \"jis-b4\", \"jis-b5\", \"jis-b6\", \"jis-b7\", \"jis-b8\", \"jis-b9\", \"jis-b10\", \"iso-c0\", \"iso-c1\", \"iso-c2\", \"iso-c3\", \"iso-c4\", \"iso-c5\", \"iso-c6\", \"iso-c7\", \"iso-c8\", \"iso-c9\", \"iso-c10\", \"iso-designated-long\", \"executive\", \"folio\", \"invoice\", \"ledger\", \"na-letter\", \"na-legal\", \"quarto\", \"a\", \"b\", \"c\", \"d\", \"e\", \"na-10x15-envelope\", \"na-10x14-envelope\", \"na-10x13-envelope\", \"na-9x12-envelope\", \"na-9x11-envelope\", \"na-7x9-envelope\", \"na-6x9-envelope\", \"na-number-9-envelope\", \"na-number-10-envelope\", \"na-number-11-envelope\", \"na-number-12-envelope\", \"na-number-14-envelope\", \"invite-envelope\", \"italy-envelope\", \"monarch-envelope\", \"personal-envelope\" }","id":2751},{"comment":"/**\r\n * The MediaType instance for ISO/DIN and JIS 4A0, 1682 x 2378 mm.\r\n */\r\npublic static final MediaType ISO_4A0 = new MediaType(I_ISO_4A0);","field_name":"ISO_4A0","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_4A0 = new MediaType(I_ISO_4A0)","id":2752},{"comment":"/**\r\n * The MediaType instance for ISO/DIN and JIS 2A0, 1189 x 1682 mm.\r\n */\r\npublic static final MediaType ISO_2A0 = new MediaType(I_ISO_2A0);","field_name":"ISO_2A0","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_2A0 = new MediaType(I_ISO_2A0)","id":2753},{"comment":"/**\r\n * The MediaType instance for ISO/DIN and JIS A0, 841 x 1189 mm.\r\n */\r\npublic static final MediaType ISO_A0 = new MediaType(I_ISO_A0);","field_name":"ISO_A0","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_A0 = new MediaType(I_ISO_A0)","id":2754},{"comment":"/**\r\n * The MediaType instance for ISO/DIN and JIS A1, 594 x 841 mm.\r\n */\r\npublic static final MediaType ISO_A1 = new MediaType(I_ISO_A1);","field_name":"ISO_A1","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_A1 = new MediaType(I_ISO_A1)","id":2755},{"comment":"/**\r\n * The MediaType instance for ISO/DIN and JIS A2, 420 x 594 mm.\r\n */\r\npublic static final MediaType ISO_A2 = new MediaType(I_ISO_A2);","field_name":"ISO_A2","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_A2 = new MediaType(I_ISO_A2)","id":2756},{"comment":"/**\r\n * The MediaType instance for ISO/DIN and JIS A3, 297 x 420 mm.\r\n */\r\npublic static final MediaType ISO_A3 = new MediaType(I_ISO_A3);","field_name":"ISO_A3","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_A3 = new MediaType(I_ISO_A3)","id":2757},{"comment":"/**\r\n * The MediaType instance for ISO/DIN and JIS A4, 210 x 297 mm.\r\n */\r\npublic static final MediaType ISO_A4 = new MediaType(I_ISO_A4);","field_name":"ISO_A4","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_A4 = new MediaType(I_ISO_A4)","id":2758},{"comment":"/**\r\n * The MediaType instance for ISO/DIN and JIS A5, 148 x 210 mm.\r\n */\r\npublic static final MediaType ISO_A5 = new MediaType(I_ISO_A5);","field_name":"ISO_A5","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_A5 = new MediaType(I_ISO_A5)","id":2759},{"comment":"/**\r\n * The MediaType instance for ISO/DIN and JIS A6, 105 x 148 mm.\r\n */\r\npublic static final MediaType ISO_A6 = new MediaType(I_ISO_A6);","field_name":"ISO_A6","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_A6 = new MediaType(I_ISO_A6)","id":2760},{"comment":"/**\r\n * The MediaType instance for ISO/DIN and JIS A7, 74 x 105 mm.\r\n */\r\npublic static final MediaType ISO_A7 = new MediaType(I_ISO_A7);","field_name":"ISO_A7","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_A7 = new MediaType(I_ISO_A7)","id":2761},{"comment":"/**\r\n * The MediaType instance for ISO/DIN and JIS A8, 52 x 74 mm.\r\n */\r\npublic static final MediaType ISO_A8 = new MediaType(I_ISO_A8);","field_name":"ISO_A8","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_A8 = new MediaType(I_ISO_A8)","id":2762},{"comment":"/**\r\n * The MediaType instance for ISO/DIN and JIS A9, 37 x 52 mm.\r\n */\r\npublic static final MediaType ISO_A9 = new MediaType(I_ISO_A9);","field_name":"ISO_A9","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_A9 = new MediaType(I_ISO_A9)","id":2763},{"comment":"/**\r\n * The MediaType instance for ISO/DIN and JIS A10, 26 x 37 mm.\r\n */\r\npublic static final MediaType ISO_A10 = new MediaType(I_ISO_A10);","field_name":"ISO_A10","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_A10 = new MediaType(I_ISO_A10)","id":2764},{"comment":"/**\r\n * The MediaType instance for ISO/DIN B0, 1000 x 1414 mm.\r\n */\r\npublic static final MediaType ISO_B0 = new MediaType(I_ISO_B0);","field_name":"ISO_B0","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_B0 = new MediaType(I_ISO_B0)","id":2765},{"comment":"/**\r\n * The MediaType instance for ISO/DIN B1, 707 x 1000 mm.\r\n */\r\npublic static final MediaType ISO_B1 = new MediaType(I_ISO_B1);","field_name":"ISO_B1","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_B1 = new MediaType(I_ISO_B1)","id":2766},{"comment":"/**\r\n * The MediaType instance for ISO/DIN B2, 500 x 707 mm.\r\n */\r\npublic static final MediaType ISO_B2 = new MediaType(I_ISO_B2);","field_name":"ISO_B2","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_B2 = new MediaType(I_ISO_B2)","id":2767},{"comment":"/**\r\n * The MediaType instance for ISO/DIN B3, 353 x 500 mm.\r\n */\r\npublic static final MediaType ISO_B3 = new MediaType(I_ISO_B3);","field_name":"ISO_B3","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_B3 = new MediaType(I_ISO_B3)","id":2768},{"comment":"/**\r\n * The MediaType instance for ISO/DIN B4, 250 x 353 mm.\r\n */\r\npublic static final MediaType ISO_B4 = new MediaType(I_ISO_B4);","field_name":"ISO_B4","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_B4 = new MediaType(I_ISO_B4)","id":2769},{"comment":"/**\r\n * The MediaType instance for ISO/DIN B5, 176 x 250 mm.\r\n */\r\npublic static final MediaType ISO_B5 = new MediaType(I_ISO_B5);","field_name":"ISO_B5","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_B5 = new MediaType(I_ISO_B5)","id":2770},{"comment":"/**\r\n * The MediaType instance for ISO/DIN B6, 125 x 176 mm.\r\n */\r\npublic static final MediaType ISO_B6 = new MediaType(I_ISO_B6);","field_name":"ISO_B6","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_B6 = new MediaType(I_ISO_B6)","id":2771},{"comment":"/**\r\n * The MediaType instance for ISO/DIN B7, 88 x 125 mm.\r\n */\r\npublic static final MediaType ISO_B7 = new MediaType(I_ISO_B7);","field_name":"ISO_B7","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_B7 = new MediaType(I_ISO_B7)","id":2772},{"comment":"/**\r\n * The MediaType instance for ISO/DIN B8, 62 x 88 mm.\r\n */\r\npublic static final MediaType ISO_B8 = new MediaType(I_ISO_B8);","field_name":"ISO_B8","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_B8 = new MediaType(I_ISO_B8)","id":2773},{"comment":"/**\r\n * The MediaType instance for ISO/DIN B9, 44 x 62 mm.\r\n */\r\npublic static final MediaType ISO_B9 = new MediaType(I_ISO_B9);","field_name":"ISO_B9","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_B9 = new MediaType(I_ISO_B9)","id":2774},{"comment":"/**\r\n * The MediaType instance for ISO/DIN B10, 31 x 44 mm.\r\n */\r\npublic static final MediaType ISO_B10 = new MediaType(I_ISO_B10);","field_name":"ISO_B10","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_B10 = new MediaType(I_ISO_B10)","id":2775},{"comment":"/**\r\n * The MediaType instance for JIS B0, 1030 x 1456 mm.\r\n */\r\npublic static final MediaType JIS_B0 = new MediaType(I_JIS_B0);","field_name":"JIS_B0","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType JIS_B0 = new MediaType(I_JIS_B0)","id":2776},{"comment":"/**\r\n * The MediaType instance for JIS B1, 728 x 1030 mm.\r\n */\r\npublic static final MediaType JIS_B1 = new MediaType(I_JIS_B1);","field_name":"JIS_B1","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType JIS_B1 = new MediaType(I_JIS_B1)","id":2777},{"comment":"/**\r\n * The MediaType instance for JIS B2, 515 x 728 mm.\r\n */\r\npublic static final MediaType JIS_B2 = new MediaType(I_JIS_B2);","field_name":"JIS_B2","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType JIS_B2 = new MediaType(I_JIS_B2)","id":2778},{"comment":"/**\r\n * The MediaType instance for JIS B3, 364 x 515 mm.\r\n */\r\npublic static final MediaType JIS_B3 = new MediaType(I_JIS_B3);","field_name":"JIS_B3","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType JIS_B3 = new MediaType(I_JIS_B3)","id":2779},{"comment":"/**\r\n * The MediaType instance for JIS B4, 257 x 364 mm.\r\n */\r\npublic static final MediaType JIS_B4 = new MediaType(I_JIS_B4);","field_name":"JIS_B4","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType JIS_B4 = new MediaType(I_JIS_B4)","id":2780},{"comment":"/**\r\n * The MediaType instance for JIS B5, 182 x 257 mm.\r\n */\r\npublic static final MediaType JIS_B5 = new MediaType(I_JIS_B5);","field_name":"JIS_B5","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType JIS_B5 = new MediaType(I_JIS_B5)","id":2781},{"comment":"/**\r\n * The MediaType instance for JIS B6, 128 x 182 mm.\r\n */\r\npublic static final MediaType JIS_B6 = new MediaType(I_JIS_B6);","field_name":"JIS_B6","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType JIS_B6 = new MediaType(I_JIS_B6)","id":2782},{"comment":"/**\r\n * The MediaType instance for JIS B7, 91 x 128 mm.\r\n */\r\npublic static final MediaType JIS_B7 = new MediaType(I_JIS_B7);","field_name":"JIS_B7","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType JIS_B7 = new MediaType(I_JIS_B7)","id":2783},{"comment":"/**\r\n * The MediaType instance for JIS B8, 64 x 91 mm.\r\n */\r\npublic static final MediaType JIS_B8 = new MediaType(I_JIS_B8);","field_name":"JIS_B8","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType JIS_B8 = new MediaType(I_JIS_B8)","id":2784},{"comment":"/**\r\n * The MediaType instance for JIS B9, 45 x 64 mm.\r\n */\r\npublic static final MediaType JIS_B9 = new MediaType(I_JIS_B9);","field_name":"JIS_B9","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType JIS_B9 = new MediaType(I_JIS_B9)","id":2785},{"comment":"/**\r\n * The MediaType instance for JIS B10, 32 x 45 mm.\r\n */\r\npublic static final MediaType JIS_B10 = new MediaType(I_JIS_B10);","field_name":"JIS_B10","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType JIS_B10 = new MediaType(I_JIS_B10)","id":2786},{"comment":"/**\r\n * The MediaType instance for ISO/DIN C0, 917 x 1297 mm.\r\n */\r\npublic static final MediaType ISO_C0 = new MediaType(I_ISO_C0);","field_name":"ISO_C0","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_C0 = new MediaType(I_ISO_C0)","id":2787},{"comment":"/**\r\n * The MediaType instance for ISO/DIN C1, 648 x 917 mm.\r\n */\r\npublic static final MediaType ISO_C1 = new MediaType(I_ISO_C1);","field_name":"ISO_C1","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_C1 = new MediaType(I_ISO_C1)","id":2788},{"comment":"/**\r\n * The MediaType instance for ISO/DIN C2, 458 x 648 mm.\r\n */\r\npublic static final MediaType ISO_C2 = new MediaType(I_ISO_C2);","field_name":"ISO_C2","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_C2 = new MediaType(I_ISO_C2)","id":2789},{"comment":"/**\r\n * The MediaType instance for ISO/DIN C3, 324 x 458 mm.\r\n */\r\npublic static final MediaType ISO_C3 = new MediaType(I_ISO_C3);","field_name":"ISO_C3","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_C3 = new MediaType(I_ISO_C3)","id":2790},{"comment":"/**\r\n * The MediaType instance for ISO/DIN C4, 229 x 324 mm.\r\n */\r\npublic static final MediaType ISO_C4 = new MediaType(I_ISO_C4);","field_name":"ISO_C4","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_C4 = new MediaType(I_ISO_C4)","id":2791},{"comment":"/**\r\n * The MediaType instance for ISO/DIN C5, 162 x 229 mm.\r\n */\r\npublic static final MediaType ISO_C5 = new MediaType(I_ISO_C5);","field_name":"ISO_C5","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_C5 = new MediaType(I_ISO_C5)","id":2792},{"comment":"/**\r\n * The MediaType instance for ISO/DIN C6, 114 x 162 mm.\r\n */\r\npublic static final MediaType ISO_C6 = new MediaType(I_ISO_C6);","field_name":"ISO_C6","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_C6 = new MediaType(I_ISO_C6)","id":2793},{"comment":"/**\r\n * The MediaType instance for ISO/DIN C7, 81 x 114 mm.\r\n */\r\npublic static final MediaType ISO_C7 = new MediaType(I_ISO_C7);","field_name":"ISO_C7","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_C7 = new MediaType(I_ISO_C7)","id":2794},{"comment":"/**\r\n * The MediaType instance for ISO/DIN C8, 57 x 81 mm.\r\n */\r\npublic static final MediaType ISO_C8 = new MediaType(I_ISO_C8);","field_name":"ISO_C8","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_C8 = new MediaType(I_ISO_C8)","id":2795},{"comment":"/**\r\n * The MediaType instance for ISO/DIN C9, 40 x 57 mm.\r\n */\r\npublic static final MediaType ISO_C9 = new MediaType(I_ISO_C9);","field_name":"ISO_C9","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_C9 = new MediaType(I_ISO_C9)","id":2796},{"comment":"/**\r\n * The MediaType instance for ISO/DIN C10, 28 x 40 mm.\r\n */\r\npublic static final MediaType ISO_C10 = new MediaType(I_ISO_C10);","field_name":"ISO_C10","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_C10 = new MediaType(I_ISO_C10)","id":2797},{"comment":"/**\r\n * The MediaType instance for ISO Designated Long, 110 x 220 mm.\r\n */\r\npublic static final MediaType ISO_DESIGNATED_LONG = new MediaType(I_ISO_DESIGNATED_LONG);","field_name":"ISO_DESIGNATED_LONG","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_DESIGNATED_LONG = new MediaType(I_ISO_DESIGNATED_LONG)","id":2798},{"comment":"/**\r\n * The MediaType instance for Executive, 7 1/4 x 10 1/2 in.\r\n */\r\npublic static final MediaType EXECUTIVE = new MediaType(I_EXECUTIVE);","field_name":"EXECUTIVE","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType EXECUTIVE = new MediaType(I_EXECUTIVE)","id":2799},{"comment":"/**\r\n * The MediaType instance for Folio, 8 1/2 x 13 in.\r\n */\r\npublic static final MediaType FOLIO = new MediaType(I_FOLIO);","field_name":"FOLIO","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType FOLIO = new MediaType(I_FOLIO)","id":2800},{"comment":"/**\r\n * The MediaType instance for Invoice, 5 1/2 x 8 1/2 in.\r\n */\r\npublic static final MediaType INVOICE = new MediaType(I_INVOICE);","field_name":"INVOICE","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType INVOICE = new MediaType(I_INVOICE)","id":2801},{"comment":"/**\r\n * The MediaType instance for Ledger, 11 x 17 in.\r\n */\r\npublic static final MediaType LEDGER = new MediaType(I_LEDGER);","field_name":"LEDGER","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType LEDGER = new MediaType(I_LEDGER)","id":2802},{"comment":"/**\r\n * The MediaType instance for North American Letter, 8 1/2 x 11 in.\r\n */\r\npublic static final MediaType NA_LETTER = new MediaType(I_NA_LETTER);","field_name":"NA_LETTER","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType NA_LETTER = new MediaType(I_NA_LETTER)","id":2803},{"comment":"/**\r\n * The MediaType instance for North American Legal, 8 1/2 x 14 in.\r\n */\r\npublic static final MediaType NA_LEGAL = new MediaType(I_NA_LEGAL);","field_name":"NA_LEGAL","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType NA_LEGAL = new MediaType(I_NA_LEGAL)","id":2804},{"comment":"/**\r\n * The MediaType instance for Quarto, 215 x 275 mm.\r\n */\r\npublic static final MediaType QUARTO = new MediaType(I_QUARTO);","field_name":"QUARTO","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType QUARTO = new MediaType(I_QUARTO)","id":2805},{"comment":"/**\r\n * The MediaType instance for Engineering A, 8 1/2 x 11 in.\r\n */\r\npublic static final MediaType A = new MediaType(I_A);","field_name":"A","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType A = new MediaType(I_A)","id":2806},{"comment":"/**\r\n * The MediaType instance for Engineering B, 11 x 17 in.\r\n */\r\npublic static final MediaType B = new MediaType(I_B);","field_name":"B","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType B = new MediaType(I_B)","id":2807},{"comment":"/**\r\n * The MediaType instance for Engineering C, 17 x 22 in.\r\n */\r\npublic static final MediaType C = new MediaType(I_C);","field_name":"C","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType C = new MediaType(I_C)","id":2808},{"comment":"/**\r\n * The MediaType instance for Engineering D, 22 x 34 in.\r\n */\r\npublic static final MediaType D = new MediaType(I_D);","field_name":"D","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType D = new MediaType(I_D)","id":2809},{"comment":"/**\r\n * The MediaType instance for Engineering E, 34 x 44 in.\r\n */\r\npublic static final MediaType E = new MediaType(I_E);","field_name":"E","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType E = new MediaType(I_E)","id":2810},{"comment":"/**\r\n * The MediaType instance for North American 10 x 15 in.\r\n */\r\npublic static final MediaType NA_10X15_ENVELOPE = new MediaType(I_NA_10X15_ENVELOPE);","field_name":"NA_10X15_ENVELOPE","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType NA_10X15_ENVELOPE = new MediaType(I_NA_10X15_ENVELOPE)","id":2811},{"comment":"/**\r\n * The MediaType instance for North American 10 x 14 in.\r\n */\r\npublic static final MediaType NA_10X14_ENVELOPE = new MediaType(I_NA_10X14_ENVELOPE);","field_name":"NA_10X14_ENVELOPE","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType NA_10X14_ENVELOPE = new MediaType(I_NA_10X14_ENVELOPE)","id":2812},{"comment":"/**\r\n * The MediaType instance for North American 10 x 13 in.\r\n */\r\npublic static final MediaType NA_10X13_ENVELOPE = new MediaType(I_NA_10X13_ENVELOPE);","field_name":"NA_10X13_ENVELOPE","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType NA_10X13_ENVELOPE = new MediaType(I_NA_10X13_ENVELOPE)","id":2813},{"comment":"/**\r\n * The MediaType instance for North American 9 x 12 in.\r\n */\r\npublic static final MediaType NA_9X12_ENVELOPE = new MediaType(I_NA_9X12_ENVELOPE);","field_name":"NA_9X12_ENVELOPE","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType NA_9X12_ENVELOPE = new MediaType(I_NA_9X12_ENVELOPE)","id":2814},{"comment":"/**\r\n * The MediaType instance for North American 9 x 11 in.\r\n */\r\npublic static final MediaType NA_9X11_ENVELOPE = new MediaType(I_NA_9X11_ENVELOPE);","field_name":"NA_9X11_ENVELOPE","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType NA_9X11_ENVELOPE = new MediaType(I_NA_9X11_ENVELOPE)","id":2815},{"comment":"/**\r\n * The MediaType instance for North American 7 x 9 in.\r\n */\r\npublic static final MediaType NA_7X9_ENVELOPE = new MediaType(I_NA_7X9_ENVELOPE);","field_name":"NA_7X9_ENVELOPE","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType NA_7X9_ENVELOPE = new MediaType(I_NA_7X9_ENVELOPE)","id":2816},{"comment":"/**\r\n * The MediaType instance for North American 6 x 9 in.\r\n */\r\npublic static final MediaType NA_6X9_ENVELOPE = new MediaType(I_NA_6X9_ENVELOPE);","field_name":"NA_6X9_ENVELOPE","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType NA_6X9_ENVELOPE = new MediaType(I_NA_6X9_ENVELOPE)","id":2817},{"comment":"/**\r\n * The MediaType instance for North American #9 Business Envelope,\r\n * 3 7/8 x 8 7/8 in.\r\n */\r\npublic static final MediaType NA_NUMBER_9_ENVELOPE = new MediaType(I_NA_NUMBER_9_ENVELOPE);","field_name":"NA_NUMBER_9_ENVELOPE","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType NA_NUMBER_9_ENVELOPE = new MediaType(I_NA_NUMBER_9_ENVELOPE)","id":2818},{"comment":"/**\r\n * The MediaType instance for North American #10 Business Envelope,\r\n * 4 1/8 x 9 1/2 in.\r\n */\r\npublic static final MediaType NA_NUMBER_10_ENVELOPE = new MediaType(I_NA_NUMBER_10_ENVELOPE);","field_name":"NA_NUMBER_10_ENVELOPE","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType NA_NUMBER_10_ENVELOPE = new MediaType(I_NA_NUMBER_10_ENVELOPE)","id":2819},{"comment":"/**\r\n * The MediaType instance for North American #11 Business Envelope,\r\n * 4 1/2 x 10 3/8 in.\r\n */\r\npublic static final MediaType NA_NUMBER_11_ENVELOPE = new MediaType(I_NA_NUMBER_11_ENVELOPE);","field_name":"NA_NUMBER_11_ENVELOPE","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType NA_NUMBER_11_ENVELOPE = new MediaType(I_NA_NUMBER_11_ENVELOPE)","id":2820},{"comment":"/**\r\n * The MediaType instance for North American #12 Business Envelope,\r\n * 4 3/4 x 11 in.\r\n */\r\npublic static final MediaType NA_NUMBER_12_ENVELOPE = new MediaType(I_NA_NUMBER_12_ENVELOPE);","field_name":"NA_NUMBER_12_ENVELOPE","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType NA_NUMBER_12_ENVELOPE = new MediaType(I_NA_NUMBER_12_ENVELOPE)","id":2821},{"comment":"/**\r\n * The MediaType instance for North American #14 Business Envelope,\r\n * 5 x 11 1/2 in.\r\n */\r\npublic static final MediaType NA_NUMBER_14_ENVELOPE = new MediaType(I_NA_NUMBER_14_ENVELOPE);","field_name":"NA_NUMBER_14_ENVELOPE","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType NA_NUMBER_14_ENVELOPE = new MediaType(I_NA_NUMBER_14_ENVELOPE)","id":2822},{"comment":"/**\r\n * The MediaType instance for Invitation Envelope, 220 x 220 mm.\r\n */\r\npublic static final MediaType INVITE_ENVELOPE = new MediaType(I_INVITE_ENVELOPE);","field_name":"INVITE_ENVELOPE","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType INVITE_ENVELOPE = new MediaType(I_INVITE_ENVELOPE)","id":2823},{"comment":"/**\r\n * The MediaType instance for Italy Envelope, 110 x 230 mm.\r\n */\r\npublic static final MediaType ITALY_ENVELOPE = new MediaType(I_ITALY_ENVELOPE);","field_name":"ITALY_ENVELOPE","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ITALY_ENVELOPE = new MediaType(I_ITALY_ENVELOPE)","id":2824},{"comment":"/**\r\n * The MediaType instance for Monarch Envelope, 3 7/8 x 7 1/2 in.\r\n */\r\npublic static final MediaType MONARCH_ENVELOPE = new MediaType(I_MONARCH_ENVELOPE);","field_name":"MONARCH_ENVELOPE","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType MONARCH_ENVELOPE = new MediaType(I_MONARCH_ENVELOPE)","id":2825},{"comment":"/**\r\n * The MediaType instance for 6 3/4 envelope, 3 5/8 x 6 1/2 in.\r\n */\r\npublic static final MediaType PERSONAL_ENVELOPE = new MediaType(I_PERSONAL_ENVELOPE);","field_name":"PERSONAL_ENVELOPE","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType PERSONAL_ENVELOPE = new MediaType(I_PERSONAL_ENVELOPE)","id":2826},{"comment":"/**\r\n * An alias for ISO_A0.\r\n */\r\npublic static final MediaType A0 = ISO_A0;","field_name":"A0","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType A0 = ISO_A0","id":2827},{"comment":"/**\r\n * An alias for ISO_A1.\r\n */\r\npublic static final MediaType A1 = ISO_A1;","field_name":"A1","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType A1 = ISO_A1","id":2828},{"comment":"/**\r\n * An alias for ISO_A2.\r\n */\r\npublic static final MediaType A2 = ISO_A2;","field_name":"A2","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType A2 = ISO_A2","id":2829},{"comment":"/**\r\n * An alias for ISO_A3.\r\n */\r\npublic static final MediaType A3 = ISO_A3;","field_name":"A3","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType A3 = ISO_A3","id":2830},{"comment":"/**\r\n * An alias for ISO_A4.\r\n */\r\npublic static final MediaType A4 = ISO_A4;","field_name":"A4","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType A4 = ISO_A4","id":2831},{"comment":"/**\r\n * An alias for ISO_A5.\r\n */\r\npublic static final MediaType A5 = ISO_A5;","field_name":"A5","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType A5 = ISO_A5","id":2832},{"comment":"/**\r\n * An alias for ISO_A6.\r\n */\r\npublic static final MediaType A6 = ISO_A6;","field_name":"A6","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType A6 = ISO_A6","id":2833},{"comment":"/**\r\n * An alias for ISO_A7.\r\n */\r\npublic static final MediaType A7 = ISO_A7;","field_name":"A7","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType A7 = ISO_A7","id":2834},{"comment":"/**\r\n * An alias for ISO_A8.\r\n */\r\npublic static final MediaType A8 = ISO_A8;","field_name":"A8","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType A8 = ISO_A8","id":2835},{"comment":"/**\r\n * An alias for ISO_A9.\r\n */\r\npublic static final MediaType A9 = ISO_A9;","field_name":"A9","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType A9 = ISO_A9","id":2836},{"comment":"/**\r\n * An alias for ISO_A10.\r\n */\r\npublic static final MediaType A10 = ISO_A10;","field_name":"A10","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType A10 = ISO_A10","id":2837},{"comment":"/**\r\n * An alias for ISO_B0.\r\n */\r\npublic static final MediaType B0 = ISO_B0;","field_name":"B0","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType B0 = ISO_B0","id":2838},{"comment":"/**\r\n * An alias for ISO_B1.\r\n */\r\npublic static final MediaType B1 = ISO_B1;","field_name":"B1","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType B1 = ISO_B1","id":2839},{"comment":"/**\r\n * An alias for ISO_B2.\r\n */\r\npublic static final MediaType B2 = ISO_B2;","field_name":"B2","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType B2 = ISO_B2","id":2840},{"comment":"/**\r\n * An alias for ISO_B3.\r\n */\r\npublic static final MediaType B3 = ISO_B3;","field_name":"B3","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType B3 = ISO_B3","id":2841},{"comment":"/**\r\n * An alias for ISO_B4.\r\n */\r\npublic static final MediaType B4 = ISO_B4;","field_name":"B4","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType B4 = ISO_B4","id":2842},{"comment":"/**\r\n * An alias for ISO_B4.\r\n */\r\npublic static final MediaType ISO_B4_ENVELOPE = ISO_B4;","field_name":"ISO_B4_ENVELOPE","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_B4_ENVELOPE = ISO_B4","id":2843},{"comment":"/**\r\n * An alias for ISO_B5.\r\n */\r\npublic static final MediaType B5 = ISO_B5;","field_name":"B5","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType B5 = ISO_B5","id":2844},{"comment":"/**\r\n * An alias for ISO_B5.\r\n */\r\npublic static final MediaType ISO_B5_ENVELOPE = ISO_B5;","field_name":"ISO_B5_ENVELOPE","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_B5_ENVELOPE = ISO_B5","id":2845},{"comment":"/**\r\n * An alias for ISO_B6.\r\n */\r\npublic static final MediaType B6 = ISO_B6;","field_name":"B6","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType B6 = ISO_B6","id":2846},{"comment":"/**\r\n * An alias for ISO_B7.\r\n */\r\npublic static final MediaType B7 = ISO_B7;","field_name":"B7","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType B7 = ISO_B7","id":2847},{"comment":"/**\r\n * An alias for ISO_B8.\r\n */\r\npublic static final MediaType B8 = ISO_B8;","field_name":"B8","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType B8 = ISO_B8","id":2848},{"comment":"/**\r\n * An alias for ISO_B9.\r\n */\r\npublic static final MediaType B9 = ISO_B9;","field_name":"B9","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType B9 = ISO_B9","id":2849},{"comment":"/**\r\n * An alias for ISO_B10.\r\n */\r\npublic static final MediaType B10 = ISO_B10;","field_name":"B10","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType B10 = ISO_B10","id":2850},{"comment":"/**\r\n * An alias for ISO_C0.\r\n */\r\npublic static final MediaType C0 = ISO_C0;","field_name":"C0","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType C0 = ISO_C0","id":2851},{"comment":"/**\r\n * An alias for ISO_C0.\r\n */\r\npublic static final MediaType ISO_C0_ENVELOPE = ISO_C0;","field_name":"ISO_C0_ENVELOPE","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_C0_ENVELOPE = ISO_C0","id":2852},{"comment":"/**\r\n * An alias for ISO_C1.\r\n */\r\npublic static final MediaType C1 = ISO_C1;","field_name":"C1","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType C1 = ISO_C1","id":2853},{"comment":"/**\r\n * An alias for ISO_C1.\r\n */\r\npublic static final MediaType ISO_C1_ENVELOPE = ISO_C1;","field_name":"ISO_C1_ENVELOPE","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_C1_ENVELOPE = ISO_C1","id":2854},{"comment":"/**\r\n * An alias for ISO_C2.\r\n */\r\npublic static final MediaType C2 = ISO_C2;","field_name":"C2","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType C2 = ISO_C2","id":2855},{"comment":"/**\r\n * An alias for ISO_C2.\r\n */\r\npublic static final MediaType ISO_C2_ENVELOPE = ISO_C2;","field_name":"ISO_C2_ENVELOPE","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_C2_ENVELOPE = ISO_C2","id":2856},{"comment":"/**\r\n * An alias for ISO_C3.\r\n */\r\npublic static final MediaType C3 = ISO_C3;","field_name":"C3","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType C3 = ISO_C3","id":2857},{"comment":"/**\r\n * An alias for ISO_C3.\r\n */\r\npublic static final MediaType ISO_C3_ENVELOPE = ISO_C3;","field_name":"ISO_C3_ENVELOPE","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_C3_ENVELOPE = ISO_C3","id":2858},{"comment":"/**\r\n * An alias for ISO_C4.\r\n */\r\npublic static final MediaType C4 = ISO_C4;","field_name":"C4","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType C4 = ISO_C4","id":2859},{"comment":"/**\r\n * An alias for ISO_C4.\r\n */\r\npublic static final MediaType ISO_C4_ENVELOPE = ISO_C4;","field_name":"ISO_C4_ENVELOPE","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_C4_ENVELOPE = ISO_C4","id":2860},{"comment":"/**\r\n * An alias for ISO_C5.\r\n */\r\npublic static final MediaType C5 = ISO_C5;","field_name":"C5","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType C5 = ISO_C5","id":2861},{"comment":"/**\r\n * An alias for ISO_C5.\r\n */\r\npublic static final MediaType ISO_C5_ENVELOPE = ISO_C5;","field_name":"ISO_C5_ENVELOPE","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_C5_ENVELOPE = ISO_C5","id":2862},{"comment":"/**\r\n * An alias for ISO_C6.\r\n */\r\npublic static final MediaType C6 = ISO_C6;","field_name":"C6","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType C6 = ISO_C6","id":2863},{"comment":"/**\r\n * An alias for ISO_C6.\r\n */\r\npublic static final MediaType ISO_C6_ENVELOPE = ISO_C6;","field_name":"ISO_C6_ENVELOPE","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_C6_ENVELOPE = ISO_C6","id":2864},{"comment":"/**\r\n * An alias for ISO_C7.\r\n */\r\npublic static final MediaType C7 = ISO_C7;","field_name":"C7","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType C7 = ISO_C7","id":2865},{"comment":"/**\r\n * An alias for ISO_C7.\r\n */\r\npublic static final MediaType ISO_C7_ENVELOPE = ISO_C7;","field_name":"ISO_C7_ENVELOPE","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_C7_ENVELOPE = ISO_C7","id":2866},{"comment":"/**\r\n * An alias for ISO_C8.\r\n */\r\npublic static final MediaType C8 = ISO_C8;","field_name":"C8","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType C8 = ISO_C8","id":2867},{"comment":"/**\r\n * An alias for ISO_C8.\r\n */\r\npublic static final MediaType ISO_C8_ENVELOPE = ISO_C8;","field_name":"ISO_C8_ENVELOPE","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_C8_ENVELOPE = ISO_C8","id":2868},{"comment":"/**\r\n * An alias for ISO_C9.\r\n */\r\npublic static final MediaType C9 = ISO_C9;","field_name":"C9","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType C9 = ISO_C9","id":2869},{"comment":"/**\r\n * An alias for ISO_C9.\r\n */\r\npublic static final MediaType ISO_C9_ENVELOPE = ISO_C9;","field_name":"ISO_C9_ENVELOPE","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_C9_ENVELOPE = ISO_C9","id":2870},{"comment":"/**\r\n * An alias for ISO_C10.\r\n */\r\npublic static final MediaType C10 = ISO_C10;","field_name":"C10","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType C10 = ISO_C10","id":2871},{"comment":"/**\r\n * An alias for ISO_C10.\r\n */\r\npublic static final MediaType ISO_C10_ENVELOPE = ISO_C10;","field_name":"ISO_C10_ENVELOPE","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_C10_ENVELOPE = ISO_C10","id":2872},{"comment":"/**\r\n * An alias for ISO_DESIGNATED_LONG.\r\n */\r\npublic static final MediaType ISO_DESIGNATED_LONG_ENVELOPE = ISO_DESIGNATED_LONG;","field_name":"ISO_DESIGNATED_LONG_ENVELOPE","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ISO_DESIGNATED_LONG_ENVELOPE = ISO_DESIGNATED_LONG","id":2873},{"comment":"/**\r\n * An alias for INVOICE.\r\n */\r\npublic static final MediaType STATEMENT = INVOICE;","field_name":"STATEMENT","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType STATEMENT = INVOICE","id":2874},{"comment":"/**\r\n * An alias for LEDGER.\r\n */\r\npublic static final MediaType TABLOID = LEDGER;","field_name":"TABLOID","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType TABLOID = LEDGER","id":2875},{"comment":"/**\r\n * An alias for NA_LETTER.\r\n */\r\npublic static final MediaType LETTER = NA_LETTER;","field_name":"LETTER","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType LETTER = NA_LETTER","id":2876},{"comment":"/**\r\n * An alias for NA_LETTER.\r\n */\r\npublic static final MediaType NOTE = NA_LETTER;","field_name":"NOTE","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType NOTE = NA_LETTER","id":2877},{"comment":"/**\r\n * An alias for NA_LEGAL.\r\n */\r\npublic static final MediaType LEGAL = NA_LEGAL;","field_name":"LEGAL","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType LEGAL = NA_LEGAL","id":2878},{"comment":"/**\r\n * An alias for NA_10X15_ENVELOPE.\r\n */\r\npublic static final MediaType ENV_10X15 = NA_10X15_ENVELOPE;","field_name":"ENV_10X15","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ENV_10X15 = NA_10X15_ENVELOPE","id":2879},{"comment":"/**\r\n * An alias for NA_10X14_ENVELOPE.\r\n */\r\npublic static final MediaType ENV_10X14 = NA_10X14_ENVELOPE;","field_name":"ENV_10X14","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ENV_10X14 = NA_10X14_ENVELOPE","id":2880},{"comment":"/**\r\n * An alias for NA_10X13_ENVELOPE.\r\n */\r\npublic static final MediaType ENV_10X13 = NA_10X13_ENVELOPE;","field_name":"ENV_10X13","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ENV_10X13 = NA_10X13_ENVELOPE","id":2881},{"comment":"/**\r\n * An alias for NA_9X12_ENVELOPE.\r\n */\r\npublic static final MediaType ENV_9X12 = NA_9X12_ENVELOPE;","field_name":"ENV_9X12","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ENV_9X12 = NA_9X12_ENVELOPE","id":2882},{"comment":"/**\r\n * An alias for NA_9X11_ENVELOPE.\r\n */\r\npublic static final MediaType ENV_9X11 = NA_9X11_ENVELOPE;","field_name":"ENV_9X11","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ENV_9X11 = NA_9X11_ENVELOPE","id":2883},{"comment":"/**\r\n * An alias for NA_7X9_ENVELOPE.\r\n */\r\npublic static final MediaType ENV_7X9 = NA_7X9_ENVELOPE;","field_name":"ENV_7X9","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ENV_7X9 = NA_7X9_ENVELOPE","id":2884},{"comment":"/**\r\n * An alias for NA_6X9_ENVELOPE.\r\n */\r\npublic static final MediaType ENV_6X9 = NA_6X9_ENVELOPE;","field_name":"ENV_6X9","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ENV_6X9 = NA_6X9_ENVELOPE","id":2885},{"comment":"/**\r\n * An alias for NA_NUMBER_9_ENVELOPE.\r\n */\r\npublic static final MediaType ENV_9 = NA_NUMBER_9_ENVELOPE;","field_name":"ENV_9","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ENV_9 = NA_NUMBER_9_ENVELOPE","id":2886},{"comment":"/**\r\n * An alias for NA_NUMBER_10_ENVELOPE.\r\n */\r\npublic static final MediaType ENV_10 = NA_NUMBER_10_ENVELOPE;","field_name":"ENV_10","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ENV_10 = NA_NUMBER_10_ENVELOPE","id":2887},{"comment":"/**\r\n * An alias for NA_NUMBER_11_ENVELOPE.\r\n */\r\npublic static final MediaType ENV_11 = NA_NUMBER_11_ENVELOPE;","field_name":"ENV_11","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ENV_11 = NA_NUMBER_11_ENVELOPE","id":2888},{"comment":"/**\r\n * An alias for NA_NUMBER_12_ENVELOPE.\r\n */\r\npublic static final MediaType ENV_12 = NA_NUMBER_12_ENVELOPE;","field_name":"ENV_12","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ENV_12 = NA_NUMBER_12_ENVELOPE","id":2889},{"comment":"/**\r\n * An alias for NA_NUMBER_14_ENVELOPE.\r\n */\r\npublic static final MediaType ENV_14 = NA_NUMBER_14_ENVELOPE;","field_name":"ENV_14","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ENV_14 = NA_NUMBER_14_ENVELOPE","id":2890},{"comment":"/**\r\n * An alias for INVITE_ENVELOPE.\r\n */\r\npublic static final MediaType ENV_INVITE = INVITE_ENVELOPE;","field_name":"ENV_INVITE","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ENV_INVITE = INVITE_ENVELOPE","id":2891},{"comment":"/**\r\n * An alias for ITALY_ENVELOPE.\r\n */\r\npublic static final MediaType ENV_ITALY = ITALY_ENVELOPE;","field_name":"ENV_ITALY","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ENV_ITALY = ITALY_ENVELOPE","id":2892},{"comment":"/**\r\n * An alias for MONARCH_ENVELOPE.\r\n */\r\npublic static final MediaType ENV_MONARCH = MONARCH_ENVELOPE;","field_name":"ENV_MONARCH","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ENV_MONARCH = MONARCH_ENVELOPE","id":2893},{"comment":"/**\r\n * An alias for PERSONAL_ENVELOPE.\r\n */\r\npublic static final MediaType ENV_PERSONAL = PERSONAL_ENVELOPE;","field_name":"ENV_PERSONAL","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ENV_PERSONAL = PERSONAL_ENVELOPE","id":2894},{"comment":"/**\r\n * An alias for INVITE_ENVELOPE.\r\n */\r\npublic static final MediaType INVITE = INVITE_ENVELOPE;","field_name":"INVITE","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType INVITE = INVITE_ENVELOPE","id":2895},{"comment":"/**\r\n * An alias for ITALY_ENVELOPE.\r\n */\r\npublic static final MediaType ITALY = ITALY_ENVELOPE;","field_name":"ITALY","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType ITALY = ITALY_ENVELOPE","id":2896},{"comment":"/**\r\n * An alias for MONARCH_ENVELOPE.\r\n */\r\npublic static final MediaType MONARCH = MONARCH_ENVELOPE;","field_name":"MONARCH","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType MONARCH = MONARCH_ENVELOPE","id":2897},{"comment":"/**\r\n * An alias for PERSONAL_ENVELOPE.\r\n */\r\npublic static final MediaType PERSONAL = PERSONAL_ENVELOPE;","field_name":"PERSONAL","field_type":"java.awt.PageAttributes.MediaType","full_declaration":"public static final java.awt.PageAttributes.MediaType PERSONAL = PERSONAL_ENVELOPE","id":2898},{"comment":"","field_name":"I_PORTRAIT","field_type":"int","full_declaration":"private static final int I_PORTRAIT = 0","id":2899},{"comment":"","field_name":"I_LANDSCAPE","field_type":"int","full_declaration":"private static final int I_LANDSCAPE = 1","id":2900},{"comment":"","field_name":"NAMES","field_type":"String[]","full_declaration":"private static final String[] NAMES = { \"portrait\", \"landscape\" }","id":2901},{"comment":"/**\r\n * The OrientationRequestedType instance to use for specifying a\r\n * portrait orientation.\r\n */\r\npublic static final OrientationRequestedType PORTRAIT = new OrientationRequestedType(I_PORTRAIT);","field_name":"PORTRAIT","field_type":"java.awt.PageAttributes.OrientationRequestedType","full_declaration":"public static final java.awt.PageAttributes.OrientationRequestedType PORTRAIT = new OrientationRequestedType(I_PORTRAIT)","id":2902},{"comment":"/**\r\n * The OrientationRequestedType instance to use for specifying a\r\n * landscape orientation.\r\n */\r\npublic static final OrientationRequestedType LANDSCAPE = new OrientationRequestedType(I_LANDSCAPE);","field_name":"LANDSCAPE","field_type":"java.awt.PageAttributes.OrientationRequestedType","full_declaration":"public static final java.awt.PageAttributes.OrientationRequestedType LANDSCAPE = new OrientationRequestedType(I_LANDSCAPE)","id":2903},{"comment":"","field_name":"I_PHYSICAL","field_type":"int","full_declaration":"private static final int I_PHYSICAL = 0","id":2904},{"comment":"","field_name":"I_PRINTABLE","field_type":"int","full_declaration":"private static final int I_PRINTABLE = 1","id":2905},{"comment":"","field_name":"NAMES","field_type":"String[]","full_declaration":"private static final String[] NAMES = { \"physical\", \"printable\" }","id":2906},{"comment":"/**\r\n * The OriginType instance to use for specifying a physical origin.\r\n */\r\npublic static final OriginType PHYSICAL = new OriginType(I_PHYSICAL);","field_name":"PHYSICAL","field_type":"java.awt.PageAttributes.OriginType","full_declaration":"public static final java.awt.PageAttributes.OriginType PHYSICAL = new OriginType(I_PHYSICAL)","id":2907},{"comment":"/**\r\n * The OriginType instance to use for specifying a printable origin.\r\n */\r\npublic static final OriginType PRINTABLE = new OriginType(I_PRINTABLE);","field_name":"PRINTABLE","field_type":"java.awt.PageAttributes.OriginType","full_declaration":"public static final java.awt.PageAttributes.OriginType PRINTABLE = new OriginType(I_PRINTABLE)","id":2908},{"comment":"","field_name":"I_HIGH","field_type":"int","full_declaration":"private static final int I_HIGH = 0","id":2909},{"comment":"","field_name":"I_NORMAL","field_type":"int","full_declaration":"private static final int I_NORMAL = 1","id":2910},{"comment":"","field_name":"I_DRAFT","field_type":"int","full_declaration":"private static final int I_DRAFT = 2","id":2911},{"comment":"","field_name":"NAMES","field_type":"String[]","full_declaration":"private static final String[] NAMES = { \"high\", \"normal\", \"draft\" }","id":2912},{"comment":"/**\r\n * The PrintQualityType instance to use for specifying a high print\r\n * quality.\r\n */\r\npublic static final PrintQualityType HIGH = new PrintQualityType(I_HIGH);","field_name":"HIGH","field_type":"java.awt.PageAttributes.PrintQualityType","full_declaration":"public static final java.awt.PageAttributes.PrintQualityType HIGH = new PrintQualityType(I_HIGH)","id":2913},{"comment":"/**\r\n * The PrintQualityType instance to use for specifying a normal print\r\n * quality.\r\n */\r\npublic static final PrintQualityType NORMAL = new PrintQualityType(I_NORMAL);","field_name":"NORMAL","field_type":"java.awt.PageAttributes.PrintQualityType","full_declaration":"public static final java.awt.PageAttributes.PrintQualityType NORMAL = new PrintQualityType(I_NORMAL)","id":2914},{"comment":"/**\r\n * The PrintQualityType instance to use for specifying a draft print\r\n * quality.\r\n */\r\npublic static final PrintQualityType DRAFT = new PrintQualityType(I_DRAFT);","field_name":"DRAFT","field_type":"java.awt.PageAttributes.PrintQualityType","full_declaration":"public static final java.awt.PageAttributes.PrintQualityType DRAFT = new PrintQualityType(I_DRAFT)","id":2915},{"comment":"private static final String base = \"panel\";","field_name":"base","field_type":"java.lang.String","full_declaration":"private static final java.lang.String base = \"panel\"","id":2916},{"comment":"","field_name":"nameCounter","field_type":"int","full_declaration":"private static int nameCounter = 0","id":2917},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -2728009084054400034L","id":2918},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -6409552226660031050L","id":2919},{"comment":"/**\r\n * Operation for {@link #setBounds(int, int, int, int, int)}, indicating\r\n * a change in the component location only.\r\n *\r\n * @see #setBounds(int, int, int, int, int)\r\n */\r\n","field_name":"SET_LOCATION","field_type":"int","full_declaration":"public static final int SET_LOCATION = 1","id":2920},{"comment":"/**\r\n * Operation for {@link #setBounds(int, int, int, int, int)}, indicating\r\n * a change in the component size only.\r\n *\r\n * @see #setBounds(int, int, int, int, int)\r\n */\r\n","field_name":"SET_SIZE","field_type":"int","full_declaration":"public static final int SET_SIZE = 2","id":2921},{"comment":"/**\r\n * Operation for {@link #setBounds(int, int, int, int, int)}, indicating\r\n * a change in the component size and location.\r\n *\r\n * @see #setBounds(int, int, int, int, int)\r\n */\r\n","field_name":"SET_BOUNDS","field_type":"int","full_declaration":"public static final int SET_BOUNDS = 3","id":2922},{"comment":"/**\r\n * Operation for {@link #setBounds(int, int, int, int, int)}, indicating\r\n * a change in the component client size. This is used for setting\r\n * the 'inside' size of windows, without the border insets.\r\n *\r\n * @see #setBounds(int, int, int, int, int)\r\n */\r\n","field_name":"SET_CLIENT_SIZE","field_type":"int","full_declaration":"public static final int SET_CLIENT_SIZE = 4","id":2923},{"comment":"/**\r\n * Resets the setBounds() operation to DEFAULT_OPERATION. This is not\r\n * passed into {@link #setBounds(int, int, int, int, int)}.\r\n *\r\n * TODO: This is only used internally and should probably be moved outside\r\n *       the peer interface.\r\n *\r\n * @see Component#setBoundsOp\r\n */\r\n","field_name":"RESET_OPERATION","field_type":"int","full_declaration":"public static final int RESET_OPERATION = 5","id":2924},{"comment":"/**\r\n * A flag that is used to suppress checks for embedded frames.\r\n *\r\n * TODO: This is only used internally and should probably be moved outside\r\n *       the peer interface.\r\n */\r\n","field_name":"NO_EMBEDDED_CHECK","field_type":"int","full_declaration":"public static final int NO_EMBEDDED_CHECK = (1 << 14)","id":2925},{"comment":"/**\r\n * The default operation, which is to set size and location.\r\n *\r\n * TODO: This is only used internally and should probably be moved outside\r\n *       the peer interface.\r\n *\r\n * @see Component#setBoundsOp\r\n */\r\n","field_name":"DEFAULT_OPERATION","field_type":"int","full_declaration":"public static final int DEFAULT_OPERATION = SET_BOUNDS","id":2926},{"comment":"/**\r\n * The X coordinate of this <code>Point</code>.\r\n * If no X coordinate is set it will default to 0.\r\n *\r\n * @serial\r\n * @see #getLocation()\r\n * @see #move(int, int)\r\n * @since 1.0\r\n */\r\n","field_name":"x","field_type":"int","full_declaration":"public int x","id":2927},{"comment":"/**\r\n * The Y coordinate of this <code>Point</code>.\r\n * If no Y coordinate is set it will default to 0.\r\n *\r\n * @serial\r\n * @see #getLocation()\r\n * @see #move(int, int)\r\n * @since 1.0\r\n */\r\n","field_name":"y","field_type":"int","full_declaration":"public int y","id":2928},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -5276940640259749850L","id":2929},{"comment":"private final GraphicsDevice device;","field_name":"device","field_type":"java.awt.GraphicsDevice","full_declaration":"private final java.awt.GraphicsDevice device","id":2930},{"comment":"private final Point location;","field_name":"location","field_type":"java.awt.Point","full_declaration":"private final java.awt.Point location","id":2931},{"comment":"/**\r\n * The total number of points.  The value of <code>npoints</code>\r\n * represents the number of valid points in this <code>Polygon</code>\r\n * and might be less than the number of elements in\r\n * {@link #xpoints xpoints} or {@link #ypoints ypoints}.\r\n * This value can be NULL.\r\n *\r\n * @serial\r\n * @see #addPoint(int, int)\r\n * @since 1.0\r\n */\r\n","field_name":"npoints","field_type":"int","full_declaration":"public int npoints","id":2932},{"comment":"/**\r\n * The array of X coordinates.  The number of elements in\r\n * this array might be more than the number of X coordinates\r\n * in this <code>Polygon</code>.  The extra elements allow new points\r\n * to be added to this <code>Polygon</code> without re-creating this\r\n * array.  The value of {@link #npoints npoints} is equal to the\r\n * number of valid points in this <code>Polygon</code>.\r\n *\r\n * @serial\r\n * @see #addPoint(int, int)\r\n * @since 1.0\r\n */\r\n","field_name":"xpoints","field_type":"int[]","full_declaration":"public int[] xpoints","id":2933},{"comment":"/**\r\n * The array of Y coordinates.  The number of elements in\r\n * this array might be more than the number of Y coordinates\r\n * in this <code>Polygon</code>.  The extra elements allow new points\r\n * to be added to this <code>Polygon</code> without re-creating this\r\n * array.  The value of <code>npoints</code> is equal to the\r\n * number of valid points in this <code>Polygon</code>.\r\n *\r\n * @serial\r\n * @see #addPoint(int, int)\r\n * @since 1.0\r\n */\r\n","field_name":"ypoints","field_type":"int[]","full_declaration":"public int[] ypoints","id":2934},{"comment":"/**\r\n * The bounds of this {@code Polygon}.\r\n * This value can be null.\r\n *\r\n * @serial\r\n * @see #getBoundingBox()\r\n * @see #getBounds()\r\n * @since 1.0\r\n */\r\nprotected Rectangle bounds;","field_name":"bounds","field_type":"java.awt.Rectangle","full_declaration":"protected java.awt.Rectangle bounds","id":2935},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -6460061437900069969L","id":2936},{"comment":"/*\r\n     * Default length for xpoints and ypoints.\r\n     */\r\n","field_name":"MIN_LENGTH","field_type":"int","full_declaration":"private static final int MIN_LENGTH = 4","id":2937},{"comment":"Polygon poly;","field_name":"poly","field_type":"java.awt.Polygon","full_declaration":"java.awt.Polygon poly","id":2938},{"comment":"AffineTransform transform;","field_name":"transform","field_type":"java.awt.geom.AffineTransform","full_declaration":"java.awt.geom.AffineTransform transform","id":2939},{"comment":"","field_name":"index","field_type":"int","full_declaration":"int index","id":2940},{"comment":"private static final String base = \"popup\";","field_name":"base","field_type":"java.lang.String","full_declaration":"private static final java.lang.String base = \"popup\"","id":2941},{"comment":"","field_name":"nameCounter","field_type":"int","full_declaration":"static int nameCounter = 0","id":2942},{"comment":"","field_name":"isTrayIconPopup","field_type":"boolean","full_declaration":"transient boolean isTrayIconPopup = false","id":2943},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -4620452533522760060L","id":2944},{"comment":"/*\r\n         * JDK 1.3 serialVersionUID\r\n         */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -4282044795947239955L","id":2945},{"comment":"/* Class Constants */\r\n/* Class Variables */\r\n/* Instance Variables */\r\n/**\r\n * The set of pages that make up the Book.\r\n */\r\nprivate Vector mPages;","field_name":"mPages","field_type":"java.util.Vector","full_declaration":"private java.util.Vector mPages","id":2946},{"comment":"/**\r\n *  The size and orientation of the page.\r\n */\r\nprivate PageFormat mFormat;","field_name":"mFormat","field_type":"java.awt.print.PageFormat","full_declaration":"private java.awt.print.PageFormat mFormat","id":2947},{"comment":"/**\r\n * The instance that will draw the page.\r\n */\r\nprivate Printable mPainter;","field_name":"mPainter","field_type":"java.awt.print.Printable","full_declaration":"private java.awt.print.Printable mPainter","id":2948},{"comment":"/**\r\n * This constant is returned from the\r\n * {@link #getNumberOfPages() getNumberOfPages}\r\n * method if a <code>Pageable</code> implementation does not know\r\n * the number of pages in its set.\r\n */\r\n@Native\r\n","field_name":"UNKNOWN_NUMBER_OF_PAGES","field_type":"int","full_declaration":"int UNKNOWN_NUMBER_OF_PAGES = -1","id":2949},{"comment":"/* Class Constants */\r\n/**\r\n *  The origin is at the bottom left of the paper with\r\n *  x running bottom to top and y running left to right.\r\n *  Note that this is not the Macintosh landscape but\r\n *  is the Window's and PostScript landscape.\r\n */\r\n@Native\r\n","field_name":"LANDSCAPE","field_type":"int","full_declaration":"public static final int LANDSCAPE = 0","id":2950},{"comment":"/**\r\n *  The origin is at the top left of the paper with\r\n *  x running to the right and y running down the\r\n *  paper.\r\n */\r\n@Native\r\n","field_name":"PORTRAIT","field_type":"int","full_declaration":"public static final int PORTRAIT = 1","id":2951},{"comment":"/**\r\n *  The origin is at the top right of the paper with x\r\n *  running top to bottom and y running right to left.\r\n *  Note that this is the Macintosh landscape.\r\n */\r\n@Native\r\n","field_name":"REVERSE_LANDSCAPE","field_type":"int","full_declaration":"public static final int REVERSE_LANDSCAPE = 2","id":2952},{"comment":"/* Instance Variables */\r\n/**\r\n * A description of the physical piece of paper.\r\n */\r\nprivate Paper mPaper;","field_name":"mPaper","field_type":"java.awt.print.Paper","full_declaration":"private java.awt.print.Paper mPaper","id":2953},{"comment":"/**\r\n * The orientation of the current page. This will be\r\n * one of the constants: PORTRIAT, LANDSCAPE, or\r\n * REVERSE_LANDSCAPE,\r\n */\r\n","field_name":"mOrientation","field_type":"int","full_declaration":"private int mOrientation = PORTRAIT","id":2954},{"comment":"/* Private Class Variables */\r\n","field_name":"INCH","field_type":"int","full_declaration":"private static final int INCH = 72","id":2955},{"comment":"","field_name":"LETTER_WIDTH","field_type":"double","full_declaration":"private static final double LETTER_WIDTH = 8.5 * INCH","id":2956},{"comment":"","field_name":"LETTER_HEIGHT","field_type":"double","full_declaration":"private static final double LETTER_HEIGHT = 11 * INCH","id":2957},{"comment":"/* Instance Variables */\r\n/**\r\n * The height of the physical page in 1/72nds\r\n * of an inch. The number is stored as a floating\r\n * point value rather than as an integer\r\n * to facilitate the conversion from metric\r\n * units to 1/72nds of an inch and then back.\r\n * (This may or may not be a good enough reason\r\n * for a float).\r\n */\r\n","field_name":"mHeight","field_type":"double","full_declaration":"private double mHeight","id":2958},{"comment":"/**\r\n * The width of the physical page in 1/72nds\r\n * of an inch.\r\n */\r\n","field_name":"mWidth","field_type":"double","full_declaration":"private double mWidth","id":2959},{"comment":"/**\r\n * The area of the page on which drawing will\r\n * be visable. The area outside of this\r\n * rectangle but on the Page generally\r\n * reflects the printer's hardware margins.\r\n * The origin of the physical page is\r\n * at (0, 0) with this rectangle provided\r\n * in that coordinate system.\r\n */\r\nprivate Rectangle2D mImageableArea;","field_name":"mImageableArea","field_type":"java.awt.geom.Rectangle2D","full_declaration":"private java.awt.geom.Rectangle2D mImageableArea","id":2960},{"comment":"/**\r\n * Returned from {@link #print(Graphics, PageFormat, int)}\r\n * to signify that the requested page was rendered.\r\n */\r\n","field_name":"PAGE_EXISTS","field_type":"int","full_declaration":"int PAGE_EXISTS = 0","id":2961},{"comment":"/**\r\n * Returned from <code>print</code> to signify that the\r\n * <code>pageIndex</code> is too large and that the requested page\r\n * does not exist.\r\n */\r\n","field_name":"NO_SUCH_PAGE","field_type":"int","full_declaration":"int NO_SUCH_PAGE = 1","id":2962},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"static final long serialVersionUID = 5850870712125932846L","id":2963},{"comment":"/**\r\n * The IO error that terminated the print job.\r\n * @serial\r\n */\r\nprivate IOException mException;","field_name":"mException","field_type":"java.io.IOException","full_declaration":"private java.io.IOException mException","id":2964},{"comment":"/**\r\n * Focus point which defines the 0% gradient stop X coordinate.\r\n */\r\nprivate final Point2D focus;","field_name":"focus","field_type":"java.awt.geom.Point2D","full_declaration":"private final java.awt.geom.Point2D focus","id":2965},{"comment":"/**\r\n * Center of the circle defining the 100% gradient stop X coordinate.\r\n */\r\nprivate final Point2D center;","field_name":"center","field_type":"java.awt.geom.Point2D","full_declaration":"private final java.awt.geom.Point2D center","id":2966},{"comment":"/**\r\n * Radius of the outermost circle defining the 100% gradient stop.\r\n */\r\n","field_name":"radius","field_type":"float","full_declaration":"private final float radius","id":2967},{"comment":"/**\r\n * True when (focus == center).\r\n */\r\n","field_name":"isSimpleFocus","field_type":"boolean","full_declaration":"private boolean isSimpleFocus = false","id":2968},{"comment":"/**\r\n * True when (cycleMethod == NO_CYCLE).\r\n */\r\n","field_name":"isNonCyclic","field_type":"boolean","full_declaration":"private boolean isNonCyclic = false","id":2969},{"comment":"/**\r\n * Radius of the outermost circle defining the 100% gradient stop.\r\n */\r\n","field_name":"radius","field_type":"float","full_declaration":"private float radius","id":2970},{"comment":"/**\r\n * Variables representing center and focus points.\r\n */\r\nprivate float centerX, centerY, focusX, focusY;","field_name":"centerX","field_type":"float","full_declaration":"private float centerX","id":2971},{"comment":"/**\r\n * Variables representing center and focus points.\r\n */\r\nprivate float centerX, centerY, focusX, focusY;","field_name":"centerY","field_type":"float","full_declaration":"private float centerXfloat centerY","id":2972},{"comment":"/**\r\n * Variables representing center and focus points.\r\n */\r\nprivate float centerX, centerY, focusX, focusY;","field_name":"focusX","field_type":"float","full_declaration":"private float centerXfloat centerYfloat focusX","id":2973},{"comment":"/**\r\n * Variables representing center and focus points.\r\n */\r\nprivate float centerX, centerY, focusX, focusY;","field_name":"focusY","field_type":"float","full_declaration":"private float centerXfloat centerYfloat focusXfloat focusY","id":2974},{"comment":"/**\r\n * Radius of the gradient circle squared.\r\n */\r\n","field_name":"radiusSq","field_type":"float","full_declaration":"private float radiusSq","id":2975},{"comment":"/**\r\n * Constant part of X, Y user space coordinates.\r\n */\r\nprivate float constA, constB;","field_name":"constA","field_type":"float","full_declaration":"private float constA","id":2976},{"comment":"/**\r\n * Constant part of X, Y user space coordinates.\r\n */\r\nprivate float constA, constB;","field_name":"constB","field_type":"float","full_declaration":"private float constAfloat constB","id":2977},{"comment":"/**\r\n * Constant second order delta for simple loop.\r\n */\r\n","field_name":"gDeltaDelta","field_type":"float","full_declaration":"private float gDeltaDelta","id":2978},{"comment":"/**\r\n * This value represents the solution when focusX == X.  It is called\r\n * trivial because it is easier to calculate than the general case.\r\n */\r\n","field_name":"trivial","field_type":"float","full_declaration":"private float trivial","id":2979},{"comment":"/**\r\n * Amount for offset when clamping focus.\r\n */\r\n","field_name":"SCALEBACK","field_type":"float","full_declaration":"private static final float SCALEBACK = .99f","id":2980},{"comment":"// SQRT_LUT_SIZE must be a power of 2 for the test above to work.\r\n","field_name":"SQRT_LUT_SIZE","field_type":"int","full_declaration":"private static final int SQRT_LUT_SIZE = (1 << 11)","id":2981},{"comment":"","field_name":"sqrtLut","field_type":"float[]","full_declaration":"private static float[] sqrtLut = new float[SQRT_LUT_SIZE + 1]","id":2982},{"comment":"/**\r\n * The X coordinate of the upper-left corner of the <code>Rectangle</code>.\r\n *\r\n * @serial\r\n * @see #setLocation(int, int)\r\n * @see #getLocation()\r\n * @since 1.0\r\n */\r\n","field_name":"x","field_type":"int","full_declaration":"public int x","id":2983},{"comment":"/**\r\n * The Y coordinate of the upper-left corner of the <code>Rectangle</code>.\r\n *\r\n * @serial\r\n * @see #setLocation(int, int)\r\n * @see #getLocation()\r\n * @since 1.0\r\n */\r\n","field_name":"y","field_type":"int","full_declaration":"public int y","id":2984},{"comment":"/**\r\n * The width of the <code>Rectangle</code>.\r\n * @serial\r\n * @see #setSize(int, int)\r\n * @see #getSize()\r\n * @since 1.0\r\n */\r\n","field_name":"width","field_type":"int","full_declaration":"public int width","id":2985},{"comment":"/**\r\n * The height of the <code>Rectangle</code>.\r\n *\r\n * @serial\r\n * @see #setSize(int, int)\r\n * @see #getSize()\r\n * @since 1.0\r\n */\r\n","field_name":"height","field_type":"int","full_declaration":"public int height","id":2986},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -4345857070255674764L","id":2987},{"comment":"HashMap<Object, Object> hintmap = new HashMap<>(7);","field_name":"hintmap","field_type":"java.util.HashMap","full_declaration":"java.util.HashMap hintmap = new HashMap<>(7)","id":2988},{"comment":"/**\r\n * Antialiasing hint key.\r\n * The {@code ANTIALIASING} hint controls whether or not the\r\n * geometry rendering methods of a {@link Graphics2D} object\r\n * will attempt to reduce aliasing artifacts along the edges\r\n * of shapes.\r\n * <p>\r\n * A typical antialiasing algorithm works by blending the existing\r\n * colors of the pixels along the boundary of a shape with the\r\n * requested fill paint according to the estimated partial pixel\r\n * coverage of the shape.\r\n * <p>\r\n * The allowable values for this hint are\r\n * <ul>\r\n * <li>{@link #VALUE_ANTIALIAS_ON}\r\n * <li>{@link #VALUE_ANTIALIAS_OFF}\r\n * <li>{@link #VALUE_ANTIALIAS_DEFAULT}\r\n * </ul>\r\n */\r\npublic static final Key KEY_ANTIALIASING = SunHints.KEY_ANTIALIASING;","field_name":"KEY_ANTIALIASING","field_type":"java.awt.RenderingHints.Key","full_declaration":"public static final java.awt.RenderingHints.Key KEY_ANTIALIASING = SunHints.KEY_ANTIALIASING","id":2989},{"comment":"/**\r\n * Antialiasing hint value -- rendering is done with antialiasing.\r\n * @see #KEY_ANTIALIASING\r\n */\r\npublic static final Object VALUE_ANTIALIAS_ON = SunHints.VALUE_ANTIALIAS_ON;","field_name":"VALUE_ANTIALIAS_ON","field_type":"java.lang.Object","full_declaration":"public static final java.lang.Object VALUE_ANTIALIAS_ON = SunHints.VALUE_ANTIALIAS_ON","id":2990},{"comment":"/**\r\n * Antialiasing hint value -- rendering is done without antialiasing.\r\n * @see #KEY_ANTIALIASING\r\n */\r\npublic static final Object VALUE_ANTIALIAS_OFF = SunHints.VALUE_ANTIALIAS_OFF;","field_name":"VALUE_ANTIALIAS_OFF","field_type":"java.lang.Object","full_declaration":"public static final java.lang.Object VALUE_ANTIALIAS_OFF = SunHints.VALUE_ANTIALIAS_OFF","id":2991},{"comment":"/**\r\n * Antialiasing hint value -- rendering is done with a default\r\n * antialiasing mode chosen by the implementation.\r\n * @see #KEY_ANTIALIASING\r\n */\r\npublic static final Object VALUE_ANTIALIAS_DEFAULT = SunHints.VALUE_ANTIALIAS_DEFAULT;","field_name":"VALUE_ANTIALIAS_DEFAULT","field_type":"java.lang.Object","full_declaration":"public static final java.lang.Object VALUE_ANTIALIAS_DEFAULT = SunHints.VALUE_ANTIALIAS_DEFAULT","id":2992},{"comment":"/**\r\n * Rendering hint key.\r\n * The {@code RENDERING} hint is a general hint that provides\r\n * a high level recommendation as to whether to bias algorithm\r\n * choices more for speed or quality when evaluating tradeoffs.\r\n * This hint could be consulted for any rendering or image\r\n * manipulation operation, but decisions will usually honor\r\n * other, more specific hints in preference to this hint.\r\n * <p>\r\n * The allowable values for this hint are\r\n * <ul>\r\n * <li>{@link #VALUE_RENDER_SPEED}\r\n * <li>{@link #VALUE_RENDER_QUALITY}\r\n * <li>{@link #VALUE_RENDER_DEFAULT}\r\n * </ul>\r\n */\r\npublic static final Key KEY_RENDERING = SunHints.KEY_RENDERING;","field_name":"KEY_RENDERING","field_type":"java.awt.RenderingHints.Key","full_declaration":"public static final java.awt.RenderingHints.Key KEY_RENDERING = SunHints.KEY_RENDERING","id":2993},{"comment":"/**\r\n * Rendering hint value -- rendering algorithms are chosen\r\n * with a preference for output speed.\r\n * @see #KEY_RENDERING\r\n */\r\npublic static final Object VALUE_RENDER_SPEED = SunHints.VALUE_RENDER_SPEED;","field_name":"VALUE_RENDER_SPEED","field_type":"java.lang.Object","full_declaration":"public static final java.lang.Object VALUE_RENDER_SPEED = SunHints.VALUE_RENDER_SPEED","id":2994},{"comment":"/**\r\n * Rendering hint value -- rendering algorithms are chosen\r\n * with a preference for output quality.\r\n * @see #KEY_RENDERING\r\n */\r\npublic static final Object VALUE_RENDER_QUALITY = SunHints.VALUE_RENDER_QUALITY;","field_name":"VALUE_RENDER_QUALITY","field_type":"java.lang.Object","full_declaration":"public static final java.lang.Object VALUE_RENDER_QUALITY = SunHints.VALUE_RENDER_QUALITY","id":2995},{"comment":"/**\r\n * Rendering hint value -- rendering algorithms are chosen\r\n * by the implementation for a good tradeoff of performance\r\n * vs. quality.\r\n * @see #KEY_RENDERING\r\n */\r\npublic static final Object VALUE_RENDER_DEFAULT = SunHints.VALUE_RENDER_DEFAULT;","field_name":"VALUE_RENDER_DEFAULT","field_type":"java.lang.Object","full_declaration":"public static final java.lang.Object VALUE_RENDER_DEFAULT = SunHints.VALUE_RENDER_DEFAULT","id":2996},{"comment":"/**\r\n * Dithering hint key.\r\n * The {@code DITHERING} hint controls how closely to approximate\r\n * a color when storing into a destination with limited color\r\n * resolution.\r\n * <p>\r\n * Some rendering destinations may support a limited number of\r\n * color choices which may not be able to accurately represent\r\n * the full spectrum of colors that can result during rendering\r\n * operations.\r\n * For such a destination the {@code DITHERING} hint controls\r\n * whether rendering is done with a flat solid fill of a single\r\n * pixel value which is the closest supported color to what was\r\n * requested, or whether shapes will be filled with a pattern of\r\n * colors which combine to better approximate that color.\r\n * <p>\r\n * The allowable values for this hint are\r\n * <ul>\r\n * <li>{@link #VALUE_DITHER_DISABLE}\r\n * <li>{@link #VALUE_DITHER_ENABLE}\r\n * <li>{@link #VALUE_DITHER_DEFAULT}\r\n * </ul>\r\n */\r\npublic static final Key KEY_DITHERING = SunHints.KEY_DITHERING;","field_name":"KEY_DITHERING","field_type":"java.awt.RenderingHints.Key","full_declaration":"public static final java.awt.RenderingHints.Key KEY_DITHERING = SunHints.KEY_DITHERING","id":2997},{"comment":"/**\r\n * Dithering hint value -- do not dither when rendering geometry.\r\n * @see #KEY_DITHERING\r\n */\r\npublic static final Object VALUE_DITHER_DISABLE = SunHints.VALUE_DITHER_DISABLE;","field_name":"VALUE_DITHER_DISABLE","field_type":"java.lang.Object","full_declaration":"public static final java.lang.Object VALUE_DITHER_DISABLE = SunHints.VALUE_DITHER_DISABLE","id":2998},{"comment":"/**\r\n * Dithering hint value -- dither when rendering geometry, if needed.\r\n * @see #KEY_DITHERING\r\n */\r\npublic static final Object VALUE_DITHER_ENABLE = SunHints.VALUE_DITHER_ENABLE;","field_name":"VALUE_DITHER_ENABLE","field_type":"java.lang.Object","full_declaration":"public static final java.lang.Object VALUE_DITHER_ENABLE = SunHints.VALUE_DITHER_ENABLE","id":2999},{"comment":"/**\r\n * Dithering hint value -- use a default for dithering chosen by\r\n * the implementation.\r\n * @see #KEY_DITHERING\r\n */\r\npublic static final Object VALUE_DITHER_DEFAULT = SunHints.VALUE_DITHER_DEFAULT;","field_name":"VALUE_DITHER_DEFAULT","field_type":"java.lang.Object","full_declaration":"public static final java.lang.Object VALUE_DITHER_DEFAULT = SunHints.VALUE_DITHER_DEFAULT","id":3000},{"comment":"/**\r\n * Text antialiasing hint key.\r\n * The {@code TEXT_ANTIALIASING} hint can control the use of\r\n * antialiasing algorithms for text independently of the\r\n * choice used for shape rendering.\r\n * Often an application may want to use antialiasing for text\r\n * only and not for other shapes.\r\n * Additionally, the algorithms for reducing the aliasing\r\n * artifacts for text are often more sophisticated than those\r\n * that have been developed for general rendering so this\r\n * hint key provides additional values which can control\r\n * the choices of some of those text-specific algorithms.\r\n * If left in the {@code DEFAULT} state, this hint will\r\n * generally defer to the value of the regular\r\n * {@link #KEY_ANTIALIASING} hint key.\r\n * <p>\r\n * The allowable values for this hint are\r\n * <ul>\r\n * <li>{@link #VALUE_TEXT_ANTIALIAS_ON}\r\n * <li>{@link #VALUE_TEXT_ANTIALIAS_OFF}\r\n * <li>{@link #VALUE_TEXT_ANTIALIAS_DEFAULT}\r\n * <li>{@link #VALUE_TEXT_ANTIALIAS_GASP}\r\n * <li>{@link #VALUE_TEXT_ANTIALIAS_LCD_HRGB}\r\n * <li>{@link #VALUE_TEXT_ANTIALIAS_LCD_HBGR}\r\n * <li>{@link #VALUE_TEXT_ANTIALIAS_LCD_VRGB}\r\n * <li>{@link #VALUE_TEXT_ANTIALIAS_LCD_VBGR}\r\n * </ul>\r\n */\r\npublic static final Key KEY_TEXT_ANTIALIASING = SunHints.KEY_TEXT_ANTIALIASING;","field_name":"KEY_TEXT_ANTIALIASING","field_type":"java.awt.RenderingHints.Key","full_declaration":"public static final java.awt.RenderingHints.Key KEY_TEXT_ANTIALIASING = SunHints.KEY_TEXT_ANTIALIASING","id":3001},{"comment":"/**\r\n * Text antialiasing hint value -- text rendering is done with\r\n * some form of antialiasing.\r\n * @see #KEY_TEXT_ANTIALIASING\r\n */\r\npublic static final Object VALUE_TEXT_ANTIALIAS_ON = SunHints.VALUE_TEXT_ANTIALIAS_ON;","field_name":"VALUE_TEXT_ANTIALIAS_ON","field_type":"java.lang.Object","full_declaration":"public static final java.lang.Object VALUE_TEXT_ANTIALIAS_ON = SunHints.VALUE_TEXT_ANTIALIAS_ON","id":3002},{"comment":"/**\r\n * Text antialiasing hint value -- text rendering is done without\r\n * any form of antialiasing.\r\n * @see #KEY_TEXT_ANTIALIASING\r\n */\r\npublic static final Object VALUE_TEXT_ANTIALIAS_OFF = SunHints.VALUE_TEXT_ANTIALIAS_OFF;","field_name":"VALUE_TEXT_ANTIALIAS_OFF","field_type":"java.lang.Object","full_declaration":"public static final java.lang.Object VALUE_TEXT_ANTIALIAS_OFF = SunHints.VALUE_TEXT_ANTIALIAS_OFF","id":3003},{"comment":"/**\r\n * Text antialiasing hint value -- text rendering is done according\r\n * to the {@link #KEY_ANTIALIASING} hint or a default chosen by the\r\n * implementation.\r\n * @see #KEY_TEXT_ANTIALIASING\r\n */\r\npublic static final Object VALUE_TEXT_ANTIALIAS_DEFAULT = SunHints.VALUE_TEXT_ANTIALIAS_DEFAULT;","field_name":"VALUE_TEXT_ANTIALIAS_DEFAULT","field_type":"java.lang.Object","full_declaration":"public static final java.lang.Object VALUE_TEXT_ANTIALIAS_DEFAULT = SunHints.VALUE_TEXT_ANTIALIAS_DEFAULT","id":3004},{"comment":"/**\r\n * Text antialiasing hint value -- text rendering is requested to\r\n * use information in the font resource which specifies for each point\r\n * size whether to apply {@link #VALUE_TEXT_ANTIALIAS_ON} or\r\n * {@link #VALUE_TEXT_ANTIALIAS_OFF}.\r\n * <p>\r\n * TrueType fonts typically provide this information in the 'gasp' table.\r\n * In the absence of this information, the behaviour for a particular\r\n * font and size is determined by implementation defaults.\r\n * <p>\r\n * <i>Note:</i>A font designer will typically carefully hint a font for\r\n * the most common user interface point sizes. Consequently the 'gasp'\r\n * table will likely specify to use only hinting at those sizes and not\r\n * \"smoothing\". So in many cases the resulting text display is\r\n * equivalent to {@code VALUE_TEXT_ANTIALIAS_OFF}.\r\n * This may be unexpected but is correct.\r\n * <p>\r\n * Logical fonts which are composed of multiple physical fonts will for\r\n * consistency will use the setting most appropriate for the overall\r\n * composite font.\r\n *\r\n * @see #KEY_TEXT_ANTIALIASING\r\n * @since 1.6\r\n */\r\npublic static final Object VALUE_TEXT_ANTIALIAS_GASP = SunHints.VALUE_TEXT_ANTIALIAS_GASP;","field_name":"VALUE_TEXT_ANTIALIAS_GASP","field_type":"java.lang.Object","full_declaration":"public static final java.lang.Object VALUE_TEXT_ANTIALIAS_GASP = SunHints.VALUE_TEXT_ANTIALIAS_GASP","id":3005},{"comment":"/**\r\n * Text antialiasing hint value -- request that text be displayed\r\n * optimised for an LCD display with subpixels in order from display\r\n * left to right of R,G,B such that the horizontal subpixel resolution\r\n * is three times that of the full pixel horizontal resolution (HRGB).\r\n * This is the most common configuration.\r\n * Selecting this hint for displays with one of the other LCD subpixel\r\n * configurations will likely result in unfocused text.\r\n * <p>\r\n * <i>Notes:</i><br>\r\n * An implementation when choosing whether to apply any of the\r\n * LCD text hint values may take into account factors including requiring\r\n * color depth of the destination to be at least 15 bits per pixel\r\n * (ie 5 bits per color component),\r\n * characteristics of a font such as whether embedded bitmaps may\r\n * produce better results, or when displaying to a non-local networked\r\n * display device enabling it only if suitable protocols are available,\r\n * or ignoring the hint if performing very high resolution rendering\r\n * or the target device is not appropriate: eg when printing.\r\n * <p>\r\n * These hints can equally be applied when rendering to software images,\r\n * but these images may not then be suitable for general export, as the\r\n * text will have been rendered appropriately for a specific subpixel\r\n * organisation. Also lossy images are not a good choice, nor image\r\n * formats such as GIF which have limited colors.\r\n * So unless the image is destined solely for rendering on a\r\n * display device with the same configuration, some other text\r\n * anti-aliasing hint such as\r\n * {@link #VALUE_TEXT_ANTIALIAS_ON}\r\n * may be a better choice.\r\n * <p>Selecting a value which does not match the LCD display in use\r\n * will likely lead to a degradation in text quality.\r\n * On display devices (ie CRTs) which do not have the same characteristics\r\n * as LCD displays, the overall effect may appear similar to standard text\r\n * anti-aliasing, but the quality may be degraded by color distortion.\r\n * Analog connected LCD displays may also show little advantage over\r\n * standard text-antialiasing and be similar to CRTs.\r\n * <p>\r\n * In other words for the best results use an LCD display with a digital\r\n * display connector and specify the appropriate sub-pixel configuration.\r\n *\r\n * @see #KEY_TEXT_ANTIALIASING\r\n * @since 1.6\r\n */\r\npublic static final Object VALUE_TEXT_ANTIALIAS_LCD_HRGB = SunHints.VALUE_TEXT_ANTIALIAS_LCD_HRGB;","field_name":"VALUE_TEXT_ANTIALIAS_LCD_HRGB","field_type":"java.lang.Object","full_declaration":"public static final java.lang.Object VALUE_TEXT_ANTIALIAS_LCD_HRGB = SunHints.VALUE_TEXT_ANTIALIAS_LCD_HRGB","id":3006},{"comment":"/**\r\n * Text antialiasing hint value -- request that text be displayed\r\n * optimised for an LCD display with subpixels in order from display\r\n * left to right of B,G,R such that the horizontal subpixel resolution\r\n * is three times that of the full pixel horizontal resolution (HBGR).\r\n * This is a much less common configuration than HRGB.\r\n * Selecting this hint for displays with one of the other LCD subpixel\r\n * configurations will likely result in unfocused text.\r\n * See {@link #VALUE_TEXT_ANTIALIAS_LCD_HRGB},\r\n * for more information on when this hint is applied.\r\n *\r\n * @see #KEY_TEXT_ANTIALIASING\r\n * @since 1.6\r\n */\r\npublic static final Object VALUE_TEXT_ANTIALIAS_LCD_HBGR = SunHints.VALUE_TEXT_ANTIALIAS_LCD_HBGR;","field_name":"VALUE_TEXT_ANTIALIAS_LCD_HBGR","field_type":"java.lang.Object","full_declaration":"public static final java.lang.Object VALUE_TEXT_ANTIALIAS_LCD_HBGR = SunHints.VALUE_TEXT_ANTIALIAS_LCD_HBGR","id":3007},{"comment":"/**\r\n * Text antialiasing hint value -- request that text be displayed\r\n * optimised for an LCD display with subpixel organisation from display\r\n * top to bottom of R,G,B such that the vertical subpixel resolution is\r\n * three times that of the full pixel vertical resolution (VRGB).\r\n * Vertical orientation is very uncommon and probably mainly useful\r\n * for a physically rotated display.\r\n * Selecting this hint for displays with one of the other LCD subpixel\r\n * configurations will likely result in unfocused text.\r\n * See {@link #VALUE_TEXT_ANTIALIAS_LCD_HRGB},\r\n * for more information on when this hint is applied.\r\n *\r\n * @see #KEY_TEXT_ANTIALIASING\r\n * @since 1.6\r\n */\r\npublic static final Object VALUE_TEXT_ANTIALIAS_LCD_VRGB = SunHints.VALUE_TEXT_ANTIALIAS_LCD_VRGB;","field_name":"VALUE_TEXT_ANTIALIAS_LCD_VRGB","field_type":"java.lang.Object","full_declaration":"public static final java.lang.Object VALUE_TEXT_ANTIALIAS_LCD_VRGB = SunHints.VALUE_TEXT_ANTIALIAS_LCD_VRGB","id":3008},{"comment":"/**\r\n * Text antialiasing hint value -- request that text be displayed\r\n * optimised for an LCD display with subpixel organisation from display\r\n * top to bottom of B,G,R such that the vertical subpixel resolution is\r\n * three times that of the full pixel vertical resolution (VBGR).\r\n * Vertical orientation is very uncommon and probably mainly useful\r\n * for a physically rotated display.\r\n * Selecting this hint for displays with one of the other LCD subpixel\r\n * configurations will likely result in unfocused text.\r\n * See {@link #VALUE_TEXT_ANTIALIAS_LCD_HRGB},\r\n * for more information on when this hint is applied.\r\n *\r\n * @see #KEY_TEXT_ANTIALIASING\r\n * @since 1.6\r\n */\r\npublic static final Object VALUE_TEXT_ANTIALIAS_LCD_VBGR = SunHints.VALUE_TEXT_ANTIALIAS_LCD_VBGR;","field_name":"VALUE_TEXT_ANTIALIAS_LCD_VBGR","field_type":"java.lang.Object","full_declaration":"public static final java.lang.Object VALUE_TEXT_ANTIALIAS_LCD_VBGR = SunHints.VALUE_TEXT_ANTIALIAS_LCD_VBGR","id":3009},{"comment":"/**\r\n * LCD text contrast rendering hint key.\r\n * The value is an <code>Integer</code> object which is used as a text\r\n * contrast adjustment when used in conjunction with an LCD text\r\n * anti-aliasing hint such as\r\n * {@link #VALUE_TEXT_ANTIALIAS_LCD_HRGB}.\r\n * <ul>\r\n * <li>Values should be a positive integer in the range 100 to 250.\r\n * <li>A lower value (eg 100) corresponds to higher contrast text when\r\n * displaying dark text on a light background.\r\n * <li>A higher value (eg 200) corresponds to lower contrast text when\r\n * displaying dark text on a light background.\r\n * <li>A typical useful value is in the narrow range 140-180.\r\n * <li>If no value is specified, a system or implementation default value\r\n * will be applied.\r\n * </ul>\r\n * The default value can be expected to be adequate for most purposes,\r\n * so clients should rarely need to specify a value for this hint unless\r\n * they have concrete information as to an appropriate value.\r\n * A higher value does not mean a higher contrast, in fact the opposite\r\n * is true.\r\n * The correction is applied in a similar manner to a gamma adjustment\r\n * for non-linear perceptual luminance response of display systems, but\r\n * does not indicate a full correction for this.\r\n *\r\n * @see #KEY_TEXT_ANTIALIASING\r\n * @since 1.6\r\n */\r\npublic static final Key KEY_TEXT_LCD_CONTRAST = SunHints.KEY_TEXT_ANTIALIAS_LCD_CONTRAST;","field_name":"KEY_TEXT_LCD_CONTRAST","field_type":"java.awt.RenderingHints.Key","full_declaration":"public static final java.awt.RenderingHints.Key KEY_TEXT_LCD_CONTRAST = SunHints.KEY_TEXT_ANTIALIAS_LCD_CONTRAST","id":3010},{"comment":"/**\r\n * Font fractional metrics hint key.\r\n * The {@code FRACTIONALMETRICS} hint controls whether the positioning\r\n * of individual character glyphs takes into account the sub-pixel\r\n * accuracy of the scaled character advances of the font or whether\r\n * such advance vectors are rounded to an integer number of whole\r\n * device pixels.\r\n * This hint only recommends how much accuracy should be used to\r\n * position the glyphs and does not specify or recommend whether or\r\n * not the actual rasterization or pixel bounds of the glyph should\r\n * be modified to match.\r\n * <p>\r\n * Rendering text to a low resolution device like a screen will\r\n * necessarily involve a number of rounding operations as the\r\n * high quality and very precise definition of the shape and\r\n * metrics of the character glyphs must be matched to discrete\r\n * device pixels.\r\n * Ideally the positioning of glyphs during text layout would be\r\n * calculated by scaling the design metrics in the font according\r\n * to the point size, but then the scaled advance width will not\r\n * necessarily be an integer number of pixels.\r\n * If the glyphs are positioned with sub-pixel accuracy according\r\n * to these scaled design metrics then the rasterization would\r\n * ideally need to be adjusted for each possible sub-pixel origin.\r\n * <p>\r\n * Unfortunately, scaling each glyph customized to its exact\r\n * subpixel origin during text layout would be prohibitively\r\n * expensive so a simplified system based on integer device\r\n * positions is typically used to lay out the text.\r\n * The rasterization of the glyph and the scaled advance width\r\n * are both adjusted together to yield text that looks good at\r\n * device resolution and has consistent integer pixel distances\r\n * between glyphs that help the glyphs look uniformly and\r\n * consistently spaced and readable.\r\n * <p>\r\n * This process of rounding advance widths for rasterized glyphs\r\n * to integer distances means that the character density and the\r\n * overall length of a string of text will be different from the\r\n * theoretical design measurements due to the accumulation of\r\n * a series of small differences in the adjusted widths of\r\n * each glyph.\r\n * The specific differences will be different for each glyph,\r\n * some being wider and some being narrower than their theoretical\r\n * design measurements.\r\n * Thus the overall difference in character density and length\r\n * will vary by a number of factors including the font, the\r\n * specific device resolution being targeted, and the glyphs\r\n * chosen to represent the string being rendered.\r\n * As a result, rendering the same string at multiple device\r\n * resolutions can yield widely varying metrics for whole strings.\r\n * <p>\r\n * When {@code FRACTIONALMETRICS} are enabled, the true font design\r\n * metrics are scaled by the point size and used for layout with\r\n * sub-pixel accuracy.\r\n * The average density of glyphs and total length of a long\r\n * string of characters will therefore more closely match the\r\n * theoretical design of the font, but readability may be affected\r\n * since individual pairs of characters may not always appear to\r\n * be consistent distances apart depending on how the sub-pixel\r\n * accumulation of the glyph origins meshes with the device pixel\r\n * grid.\r\n * Enabling this hint may be desirable when text layout is being\r\n * performed that must be consistent across a wide variety of\r\n * output resolutions.\r\n * Specifically, this hint may be desirable in situations where\r\n * the layout of text is being previewed on a low resolution\r\n * device like a screen for output that will eventually be\r\n * rendered on a high resolution printer or typesetting device.\r\n * <p>\r\n * When disabled, the scaled design metrics are rounded or adjusted\r\n * to integer distances for layout.\r\n * The distances between any specific pair of glyphs will be more\r\n * uniform on the device, but the density and total length of long\r\n * strings may no longer match the theoretical intentions of the\r\n * font designer.\r\n * Disabling this hint will typically produce more readable results\r\n * on low resolution devices like computer monitors.\r\n * <p>\r\n * The allowable values for this key are\r\n * <ul>\r\n * <li>{@link #VALUE_FRACTIONALMETRICS_OFF}\r\n * <li>{@link #VALUE_FRACTIONALMETRICS_ON}\r\n * <li>{@link #VALUE_FRACTIONALMETRICS_DEFAULT}\r\n * </ul>\r\n */\r\npublic static final Key KEY_FRACTIONALMETRICS = SunHints.KEY_FRACTIONALMETRICS;","field_name":"KEY_FRACTIONALMETRICS","field_type":"java.awt.RenderingHints.Key","full_declaration":"public static final java.awt.RenderingHints.Key KEY_FRACTIONALMETRICS = SunHints.KEY_FRACTIONALMETRICS","id":3011},{"comment":"/**\r\n * Font fractional metrics hint value -- character glyphs are\r\n * positioned with advance widths rounded to pixel boundaries.\r\n * @see #KEY_FRACTIONALMETRICS\r\n */\r\npublic static final Object VALUE_FRACTIONALMETRICS_OFF = SunHints.VALUE_FRACTIONALMETRICS_OFF;","field_name":"VALUE_FRACTIONALMETRICS_OFF","field_type":"java.lang.Object","full_declaration":"public static final java.lang.Object VALUE_FRACTIONALMETRICS_OFF = SunHints.VALUE_FRACTIONALMETRICS_OFF","id":3012},{"comment":"/**\r\n * Font fractional metrics hint value -- character glyphs are\r\n * positioned with sub-pixel accuracy.\r\n * @see #KEY_FRACTIONALMETRICS\r\n */\r\npublic static final Object VALUE_FRACTIONALMETRICS_ON = SunHints.VALUE_FRACTIONALMETRICS_ON;","field_name":"VALUE_FRACTIONALMETRICS_ON","field_type":"java.lang.Object","full_declaration":"public static final java.lang.Object VALUE_FRACTIONALMETRICS_ON = SunHints.VALUE_FRACTIONALMETRICS_ON","id":3013},{"comment":"/**\r\n * Font fractional metrics hint value -- character glyphs are\r\n * positioned with accuracy chosen by the implementation.\r\n * @see #KEY_FRACTIONALMETRICS\r\n */\r\npublic static final Object VALUE_FRACTIONALMETRICS_DEFAULT = SunHints.VALUE_FRACTIONALMETRICS_DEFAULT;","field_name":"VALUE_FRACTIONALMETRICS_DEFAULT","field_type":"java.lang.Object","full_declaration":"public static final java.lang.Object VALUE_FRACTIONALMETRICS_DEFAULT = SunHints.VALUE_FRACTIONALMETRICS_DEFAULT","id":3014},{"comment":"/**\r\n * Interpolation hint key.\r\n * The {@code INTERPOLATION} hint controls how image pixels are\r\n * filtered or resampled during an image rendering operation.\r\n * <p>\r\n * Implicitly images are defined to provide color samples at\r\n * integer coordinate locations.\r\n * When images are rendered upright with no scaling onto a\r\n * destination, the choice of which image pixels map to which\r\n * device pixels is obvious and the samples at the integer\r\n * coordinate locations in the image are transfered to the\r\n * pixels at the corresponding integer locations on the device\r\n * pixel grid one for one.\r\n * When images are rendered in a scaled, rotated, or otherwise\r\n * transformed coordinate system, then the mapping of device\r\n * pixel coordinates back to the image can raise the question\r\n * of what color sample to use for the continuous coordinates\r\n * that lie between the integer locations of the provided image\r\n * samples.\r\n * Interpolation algorithms define functions which provide a\r\n * color sample for any continuous coordinate in an image based\r\n * on the color samples at the surrounding integer coordinates.\r\n * <p>\r\n * The allowable values for this hint are\r\n * <ul>\r\n * <li>{@link #VALUE_INTERPOLATION_NEAREST_NEIGHBOR}\r\n * <li>{@link #VALUE_INTERPOLATION_BILINEAR}\r\n * <li>{@link #VALUE_INTERPOLATION_BICUBIC}\r\n * </ul>\r\n */\r\npublic static final Key KEY_INTERPOLATION = SunHints.KEY_INTERPOLATION;","field_name":"KEY_INTERPOLATION","field_type":"java.awt.RenderingHints.Key","full_declaration":"public static final java.awt.RenderingHints.Key KEY_INTERPOLATION = SunHints.KEY_INTERPOLATION","id":3015},{"comment":"/**\r\n * Interpolation hint value -- the color sample of the nearest\r\n * neighboring integer coordinate sample in the image is used.\r\n * Conceptually the image is viewed as a grid of unit-sized\r\n * square regions of color centered around the center of each\r\n * image pixel.\r\n * <p>\r\n * As the image is scaled up, it will look correspondingly blocky.\r\n * As the image is scaled down, the colors for source pixels will\r\n * be either used unmodified, or skipped entirely in the output\r\n * representation.\r\n *\r\n * @see #KEY_INTERPOLATION\r\n */\r\npublic static final Object VALUE_INTERPOLATION_NEAREST_NEIGHBOR = SunHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR;","field_name":"VALUE_INTERPOLATION_NEAREST_NEIGHBOR","field_type":"java.lang.Object","full_declaration":"public static final java.lang.Object VALUE_INTERPOLATION_NEAREST_NEIGHBOR = SunHints.VALUE_INTERPOLATION_NEAREST_NEIGHBOR","id":3016},{"comment":"/**\r\n * Interpolation hint value -- the color samples of the 4 nearest\r\n * neighboring integer coordinate samples in the image are\r\n * interpolated linearly to produce a color sample.\r\n * Conceptually the image is viewed as a set of infinitely small\r\n * point color samples which have value only at the centers of\r\n * integer coordinate pixels and the space between those pixel\r\n * centers is filled with linear ramps of colors that connect\r\n * adjacent discrete samples in a straight line.\r\n * <p>\r\n * As the image is scaled up, there are no blocky edges between\r\n * the colors in the image as there are with\r\n * {@link #VALUE_INTERPOLATION_NEAREST_NEIGHBOR NEAREST_NEIGHBOR},\r\n * but the blending may show some subtle discontinuities along the\r\n * horizontal and vertical edges that line up with the samples\r\n * caused by a sudden change in the slope of the interpolation\r\n * from one side of a sample to the other.\r\n * As the image is scaled down, more image pixels have their\r\n * color samples represented in the resulting output since each\r\n * output pixel receives color information from up to 4 image\r\n * pixels.\r\n *\r\n * @see #KEY_INTERPOLATION\r\n */\r\npublic static final Object VALUE_INTERPOLATION_BILINEAR = SunHints.VALUE_INTERPOLATION_BILINEAR;","field_name":"VALUE_INTERPOLATION_BILINEAR","field_type":"java.lang.Object","full_declaration":"public static final java.lang.Object VALUE_INTERPOLATION_BILINEAR = SunHints.VALUE_INTERPOLATION_BILINEAR","id":3017},{"comment":"/**\r\n * Interpolation hint value -- the color samples of 9 nearby\r\n * integer coordinate samples in the image are interpolated using\r\n * a cubic function in both {@code X} and {@code Y} to produce\r\n * a color sample.\r\n * Conceptually the view of the image is very similar to the view\r\n * used in the {@link #VALUE_INTERPOLATION_BILINEAR BILINEAR}\r\n * algorithm except that the ramps of colors that connect between\r\n * the samples are curved and have better continuity of slope\r\n * as they cross over between sample boundaries.\r\n * <p>\r\n * As the image is scaled up, there are no blocky edges and the\r\n * interpolation should appear smoother and with better depictions\r\n * of any edges in the original image than with {@code BILINEAR}.\r\n * As the image is scaled down, even more of the original color\r\n * samples from the original image will have their color information\r\n * carried through and represented.\r\n *\r\n * @see #KEY_INTERPOLATION\r\n */\r\npublic static final Object VALUE_INTERPOLATION_BICUBIC = SunHints.VALUE_INTERPOLATION_BICUBIC;","field_name":"VALUE_INTERPOLATION_BICUBIC","field_type":"java.lang.Object","full_declaration":"public static final java.lang.Object VALUE_INTERPOLATION_BICUBIC = SunHints.VALUE_INTERPOLATION_BICUBIC","id":3018},{"comment":"/**\r\n * Alpha interpolation hint key.\r\n * The {@code ALPHA_INTERPOLATION} hint is a general hint that\r\n * provides a high level recommendation as to whether to bias\r\n * alpha blending algorithm choices more for speed or quality\r\n * when evaluating tradeoffs.\r\n * <p>\r\n * This hint could control the choice of alpha blending\r\n * calculations that sacrifice some precision to use fast\r\n * lookup tables or lower precision SIMD instructions.\r\n * This hint could also control whether or not the color\r\n * and alpha values are converted into a linear color space\r\n * during the calculations for a more linear visual effect\r\n * at the expense of additional per-pixel calculations.\r\n * <p>\r\n * The allowable values for this hint are\r\n * <ul>\r\n * <li>{@link #VALUE_ALPHA_INTERPOLATION_SPEED}\r\n * <li>{@link #VALUE_ALPHA_INTERPOLATION_QUALITY}\r\n * <li>{@link #VALUE_ALPHA_INTERPOLATION_DEFAULT}\r\n * </ul>\r\n */\r\npublic static final Key KEY_ALPHA_INTERPOLATION = SunHints.KEY_ALPHA_INTERPOLATION;","field_name":"KEY_ALPHA_INTERPOLATION","field_type":"java.awt.RenderingHints.Key","full_declaration":"public static final java.awt.RenderingHints.Key KEY_ALPHA_INTERPOLATION = SunHints.KEY_ALPHA_INTERPOLATION","id":3019},{"comment":"/**\r\n * Alpha interpolation hint value -- alpha blending algorithms\r\n * are chosen with a preference for calculation speed.\r\n * @see #KEY_ALPHA_INTERPOLATION\r\n */\r\npublic static final Object VALUE_ALPHA_INTERPOLATION_SPEED = SunHints.VALUE_ALPHA_INTERPOLATION_SPEED;","field_name":"VALUE_ALPHA_INTERPOLATION_SPEED","field_type":"java.lang.Object","full_declaration":"public static final java.lang.Object VALUE_ALPHA_INTERPOLATION_SPEED = SunHints.VALUE_ALPHA_INTERPOLATION_SPEED","id":3020},{"comment":"/**\r\n * Alpha interpolation hint value -- alpha blending algorithms\r\n * are chosen with a preference for precision and visual quality.\r\n * @see #KEY_ALPHA_INTERPOLATION\r\n */\r\npublic static final Object VALUE_ALPHA_INTERPOLATION_QUALITY = SunHints.VALUE_ALPHA_INTERPOLATION_QUALITY;","field_name":"VALUE_ALPHA_INTERPOLATION_QUALITY","field_type":"java.lang.Object","full_declaration":"public static final java.lang.Object VALUE_ALPHA_INTERPOLATION_QUALITY = SunHints.VALUE_ALPHA_INTERPOLATION_QUALITY","id":3021},{"comment":"/**\r\n * Alpha interpolation hint value -- alpha blending algorithms\r\n * are chosen by the implementation for a good tradeoff of\r\n * performance vs. quality.\r\n * @see #KEY_ALPHA_INTERPOLATION\r\n */\r\npublic static final Object VALUE_ALPHA_INTERPOLATION_DEFAULT = SunHints.VALUE_ALPHA_INTERPOLATION_DEFAULT;","field_name":"VALUE_ALPHA_INTERPOLATION_DEFAULT","field_type":"java.lang.Object","full_declaration":"public static final java.lang.Object VALUE_ALPHA_INTERPOLATION_DEFAULT = SunHints.VALUE_ALPHA_INTERPOLATION_DEFAULT","id":3022},{"comment":"/**\r\n * Color rendering hint key.\r\n * The {@code COLOR_RENDERING} hint controls the accuracy of\r\n * approximation and conversion when storing colors into a\r\n * destination image or surface.\r\n * <p>\r\n * When a rendering or image manipulation operation produces\r\n * a color value that must be stored into a destination, it\r\n * must first convert that color into a form suitable for\r\n * storing into the destination image or surface.\r\n * Minimally, the color components must be converted to bit\r\n * representations and ordered in the correct order or an\r\n * index into a color lookup table must be chosen before\r\n * the data can be stored into the destination memory.\r\n * Without this minimal conversion, the data in the destination\r\n * would likely represent random, incorrect or possibly even\r\n * unsupported values.\r\n * Algorithms to quickly convert the results of rendering\r\n * operations into the color format of most common destinations\r\n * are well known and fairly optimal to execute.\r\n * <p>\r\n * Simply performing the most basic color format conversion to\r\n * store colors into a destination can potentially ignore a\r\n * difference in the calibration of the\r\n * {@link java.awt.color.ColorSpace}\r\n * of the source and destination or other factors such as the\r\n * linearity of the gamma correction.\r\n * Unless the source and destination {@code ColorSpace} are\r\n * identical, to correctly perform a rendering operation with\r\n * the most care taken for the accuracy of the colors being\r\n * represented, the source colors should be converted to a\r\n * device independent {@code ColorSpace} and the results then\r\n * converted back to the destination {@code ColorSpace}.\r\n * Furthermore, if calculations such as the blending of multiple\r\n * source colors are to be performed during the rendering\r\n * operation, greater visual clarity can be achieved if the\r\n * intermediate device independent {@code ColorSpace} is\r\n * chosen to have a linear relationship between the values\r\n * being calculated and the perception of the human eye to\r\n * the response curves of the output device.\r\n * <p>\r\n * The allowable values for this hint are\r\n * <ul>\r\n * <li>{@link #VALUE_COLOR_RENDER_SPEED}\r\n * <li>{@link #VALUE_COLOR_RENDER_QUALITY}\r\n * <li>{@link #VALUE_COLOR_RENDER_DEFAULT}\r\n * </ul>\r\n */\r\npublic static final Key KEY_COLOR_RENDERING = SunHints.KEY_COLOR_RENDERING;","field_name":"KEY_COLOR_RENDERING","field_type":"java.awt.RenderingHints.Key","full_declaration":"public static final java.awt.RenderingHints.Key KEY_COLOR_RENDERING = SunHints.KEY_COLOR_RENDERING","id":3023},{"comment":"/**\r\n * Color rendering hint value -- perform the fastest color\r\n * conversion to the format of the output device.\r\n * @see #KEY_COLOR_RENDERING\r\n */\r\npublic static final Object VALUE_COLOR_RENDER_SPEED = SunHints.VALUE_COLOR_RENDER_SPEED;","field_name":"VALUE_COLOR_RENDER_SPEED","field_type":"java.lang.Object","full_declaration":"public static final java.lang.Object VALUE_COLOR_RENDER_SPEED = SunHints.VALUE_COLOR_RENDER_SPEED","id":3024},{"comment":"/**\r\n * Color rendering hint value -- perform the color conversion\r\n * calculations with the highest accuracy and visual quality.\r\n * @see #KEY_COLOR_RENDERING\r\n */\r\npublic static final Object VALUE_COLOR_RENDER_QUALITY = SunHints.VALUE_COLOR_RENDER_QUALITY;","field_name":"VALUE_COLOR_RENDER_QUALITY","field_type":"java.lang.Object","full_declaration":"public static final java.lang.Object VALUE_COLOR_RENDER_QUALITY = SunHints.VALUE_COLOR_RENDER_QUALITY","id":3025},{"comment":"/**\r\n * Color rendering hint value -- perform color conversion\r\n * calculations as chosen by the implementation to represent\r\n * the best available tradeoff between performance and\r\n * accuracy.\r\n * @see #KEY_COLOR_RENDERING\r\n */\r\npublic static final Object VALUE_COLOR_RENDER_DEFAULT = SunHints.VALUE_COLOR_RENDER_DEFAULT;","field_name":"VALUE_COLOR_RENDER_DEFAULT","field_type":"java.lang.Object","full_declaration":"public static final java.lang.Object VALUE_COLOR_RENDER_DEFAULT = SunHints.VALUE_COLOR_RENDER_DEFAULT","id":3026},{"comment":"/**\r\n * Stroke normalization control hint key.\r\n * The {@code STROKE_CONTROL} hint controls whether a rendering\r\n * implementation should or is allowed to modify the geometry\r\n * of rendered shapes for various purposes.\r\n * <p>\r\n * Some implementations may be able to use an optimized platform\r\n * rendering library which may be faster than traditional software\r\n * rendering algorithms on a given platform, but which may also\r\n * not support floating point coordinates.\r\n * Some implementations may also have sophisticated algorithms\r\n * which perturb the coordinates of a path so that wide lines\r\n * appear more uniform in width and spacing.\r\n * <p>\r\n * If an implementation performs any type of modification or\r\n * \"normalization\" of a path, it should never move the coordinates\r\n * by more than half a pixel in any direction.\r\n * <p>\r\n * The allowable values for this hint are\r\n * <ul>\r\n * <li>{@link #VALUE_STROKE_NORMALIZE}\r\n * <li>{@link #VALUE_STROKE_PURE}\r\n * <li>{@link #VALUE_STROKE_DEFAULT}\r\n * </ul>\r\n * @since 1.3\r\n */\r\npublic static final Key KEY_STROKE_CONTROL = SunHints.KEY_STROKE_CONTROL;","field_name":"KEY_STROKE_CONTROL","field_type":"java.awt.RenderingHints.Key","full_declaration":"public static final java.awt.RenderingHints.Key KEY_STROKE_CONTROL = SunHints.KEY_STROKE_CONTROL","id":3027},{"comment":"/**\r\n * Stroke normalization control hint value -- geometry may be\r\n * modified or left pure depending on the tradeoffs in a given\r\n * implementation.\r\n * Typically this setting allows an implementation to use a fast\r\n * integer coordinate based platform rendering library, but does\r\n * not specifically request normalization for uniformity or\r\n * aesthetics.\r\n *\r\n * @see #KEY_STROKE_CONTROL\r\n * @since 1.3\r\n */\r\npublic static final Object VALUE_STROKE_DEFAULT = SunHints.VALUE_STROKE_DEFAULT;","field_name":"VALUE_STROKE_DEFAULT","field_type":"java.lang.Object","full_declaration":"public static final java.lang.Object VALUE_STROKE_DEFAULT = SunHints.VALUE_STROKE_DEFAULT","id":3028},{"comment":"/**\r\n * Stroke normalization control hint value -- geometry should\r\n * be normalized to improve uniformity or spacing of lines and\r\n * overall aesthetics.\r\n * Note that different normalization algorithms may be more\r\n * successful than others for given input paths.\r\n *\r\n * @see #KEY_STROKE_CONTROL\r\n * @since 1.3\r\n */\r\npublic static final Object VALUE_STROKE_NORMALIZE = SunHints.VALUE_STROKE_NORMALIZE;","field_name":"VALUE_STROKE_NORMALIZE","field_type":"java.lang.Object","full_declaration":"public static final java.lang.Object VALUE_STROKE_NORMALIZE = SunHints.VALUE_STROKE_NORMALIZE","id":3029},{"comment":"/**\r\n * Stroke normalization control hint value -- geometry should\r\n * be left unmodified and rendered with sub-pixel accuracy.\r\n *\r\n * @see #KEY_STROKE_CONTROL\r\n * @since 1.3\r\n */\r\npublic static final Object VALUE_STROKE_PURE = SunHints.VALUE_STROKE_PURE;","field_name":"VALUE_STROKE_PURE","field_type":"java.lang.Object","full_declaration":"public static final java.lang.Object VALUE_STROKE_PURE = SunHints.VALUE_STROKE_PURE","id":3030},{"comment":"private static HashMap<Object, Object> identitymap = new HashMap<>(17);","field_name":"identitymap","field_type":"java.util.HashMap","full_declaration":"private static java.util.HashMap identitymap = new HashMap<>(17)","id":3031},{"comment":"","field_name":"privatekey","field_type":"int","full_declaration":"private int privatekey","id":3032},{"comment":"","field_name":"MAX_DELAY","field_type":"int","full_declaration":"private static final int MAX_DELAY = 60000","id":3033},{"comment":"private RobotPeer peer;","field_name":"peer","field_type":"java.awt.peer.RobotPeer","full_declaration":"private java.awt.peer.RobotPeer peer","id":3034},{"comment":"","field_name":"isAutoWaitForIdle","field_type":"boolean","full_declaration":"private boolean isAutoWaitForIdle = false","id":3035},{"comment":"","field_name":"autoDelay","field_type":"int","full_declaration":"private int autoDelay = 0","id":3036},{"comment":"","field_name":"LEGAL_BUTTON_MASK","field_type":"int","full_declaration":"private static int LEGAL_BUTTON_MASK = 0","id":3037},{"comment":"private DirectColorModel screenCapCM = null;","field_name":"screenCapCM","field_type":"java.awt.image.DirectColorModel","full_declaration":"private java.awt.image.DirectColorModel screenCapCM = null","id":3038},{"comment":"private transient Object anchor = new Object();","field_name":"anchor","field_type":"java.lang.Object","full_declaration":"private transient java.lang.Object anchor = new Object()","id":3039},{"comment":"private transient RobotDisposer disposer;","field_name":"disposer","field_type":"java.awt.Robot.RobotDisposer","full_declaration":"private transient java.awt.Robot.RobotDisposer disposer","id":3040},{"comment":"private final RobotPeer peer;","field_name":"peer","field_type":"java.awt.peer.RobotPeer","full_declaration":"private final java.awt.peer.RobotPeer peer","id":3041},{"comment":"/**\r\n * A constant that indicates a horizontal scroll bar.\r\n */\r\n","field_name":"HORIZONTAL","field_type":"int","full_declaration":"public static final int HORIZONTAL = 0","id":3042},{"comment":"/**\r\n * A constant that indicates a vertical scroll bar.\r\n */\r\n","field_name":"VERTICAL","field_type":"int","full_declaration":"public static final int VERTICAL = 1","id":3043},{"comment":"/**\r\n * The value of the <code>Scrollbar</code>.\r\n * This property must be greater than or equal to <code>minimum</code>\r\n * and less than or equal to\r\n * <code>maximum - visibleAmount</code>\r\n *\r\n * @serial\r\n * @see #getValue\r\n * @see #setValue\r\n */\r\n","field_name":"value","field_type":"int","full_declaration":"int value","id":3044},{"comment":"/**\r\n * The maximum value of the <code>Scrollbar</code>.\r\n * This value must be greater than the <code>minimum</code>\r\n * value.<br>\r\n *\r\n * @serial\r\n * @see #getMaximum\r\n * @see #setMaximum\r\n */\r\n","field_name":"maximum","field_type":"int","full_declaration":"int maximum","id":3045},{"comment":"/**\r\n * The minimum value of the <code>Scrollbar</code>.\r\n * This value must be less than the <code>maximum</code>\r\n * value.<br>\r\n *\r\n * @serial\r\n * @see #getMinimum\r\n * @see #setMinimum\r\n */\r\n","field_name":"minimum","field_type":"int","full_declaration":"int minimum","id":3046},{"comment":"/**\r\n * The size of the <code>Scrollbar</code>'s bubble.\r\n * When a scroll bar is used to select a range of values,\r\n * the visibleAmount represents the size of this range.\r\n * Depending on platform, this may be visually indicated\r\n * by the size of the bubble.\r\n *\r\n * @serial\r\n * @see #getVisibleAmount\r\n * @see #setVisibleAmount\r\n */\r\n","field_name":"visibleAmount","field_type":"int","full_declaration":"int visibleAmount","id":3047},{"comment":"/**\r\n * The <code>Scrollbar</code>'s orientation--being either horizontal\r\n * or vertical.\r\n * This value should be specified when the scrollbar is created.<BR>\r\n * orientation can be either : <code>VERTICAL</code> or\r\n * <code>HORIZONTAL</code> only.\r\n *\r\n * @serial\r\n * @see #getOrientation\r\n * @see #setOrientation\r\n */\r\n","field_name":"orientation","field_type":"int","full_declaration":"int orientation","id":3048},{"comment":"/**\r\n * The amount by which the scrollbar value will change when going\r\n * up or down by a line.\r\n * This value must be greater than zero.\r\n *\r\n * @serial\r\n * @see #getLineIncrement\r\n * @see #setLineIncrement\r\n */\r\n","field_name":"lineIncrement","field_type":"int","full_declaration":"int lineIncrement = 1","id":3049},{"comment":"/**\r\n * The amount by which the scrollbar value will change when going\r\n * up or down by a page.\r\n * This value must be greater than zero.\r\n *\r\n * @serial\r\n * @see #getPageIncrement\r\n * @see #setPageIncrement\r\n */\r\n","field_name":"pageIncrement","field_type":"int","full_declaration":"int pageIncrement = 10","id":3050},{"comment":"/**\r\n * The adjusting status of the <code>Scrollbar</code>.\r\n * True if the value is in the process of changing as a result of\r\n * actions being taken by the user.\r\n *\r\n * @see #getValueIsAdjusting\r\n * @see #setValueIsAdjusting\r\n * @since 1.4\r\n */\r\n","field_name":"isAdjusting","field_type":"boolean","full_declaration":"transient boolean isAdjusting","id":3051},{"comment":"transient AdjustmentListener adjustmentListener;","field_name":"adjustmentListener","field_type":"java.awt.event.AdjustmentListener","full_declaration":"transient java.awt.event.AdjustmentListener adjustmentListener","id":3052},{"comment":"private static final String base = \"scrollbar\";","field_name":"base","field_type":"java.lang.String","full_declaration":"private static final java.lang.String base = \"scrollbar\"","id":3053},{"comment":"","field_name":"nameCounter","field_type":"int","full_declaration":"private static int nameCounter = 0","id":3054},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 8451667562882310543L","id":3055},{"comment":"/* Serialization support.\r\n     */\r\n/**\r\n * The scroll bar's serialized Data Version.\r\n *\r\n * @serial\r\n */\r\n","field_name":"scrollbarSerializedDataVersion","field_type":"int","full_declaration":"private int scrollbarSerializedDataVersion = 1","id":3056},{"comment":"/*\r\n         * JDK 1.3 serialVersionUID\r\n         */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -344337268523697807L","id":3057},{"comment":"/**\r\n * Specifies that horizontal/vertical scrollbar should be shown\r\n * only when the size of the child exceeds the size of the scrollpane\r\n * in the horizontal/vertical dimension.\r\n */\r\n","field_name":"SCROLLBARS_AS_NEEDED","field_type":"int","full_declaration":"public static final int SCROLLBARS_AS_NEEDED = 0","id":3058},{"comment":"/**\r\n * Specifies that horizontal/vertical scrollbars should always be\r\n * shown regardless of the respective sizes of the scrollpane and child.\r\n */\r\n","field_name":"SCROLLBARS_ALWAYS","field_type":"int","full_declaration":"public static final int SCROLLBARS_ALWAYS = 1","id":3059},{"comment":"/**\r\n * Specifies that horizontal/vertical scrollbars should never be shown\r\n * regardless of the respective sizes of the scrollpane and child.\r\n */\r\n","field_name":"SCROLLBARS_NEVER","field_type":"int","full_declaration":"public static final int SCROLLBARS_NEVER = 2","id":3060},{"comment":"/**\r\n * There are 3 ways in which a scroll bar can be displayed.\r\n * This integer will represent one of these 3 displays -\r\n * (SCROLLBARS_ALWAYS, SCROLLBARS_AS_NEEDED, SCROLLBARS_NEVER)\r\n *\r\n * @serial\r\n * @see #getScrollbarDisplayPolicy\r\n */\r\n","field_name":"scrollbarDisplayPolicy","field_type":"int","full_declaration":"private int scrollbarDisplayPolicy","id":3061},{"comment":"/**\r\n * An adjustable vertical scrollbar.\r\n * It is important to note that you must <em>NOT</em> call 3\r\n * <code>Adjustable</code> methods, namely:\r\n * <code>setMinimum()</code>, <code>setMaximum()</code>,\r\n * <code>setVisibleAmount()</code>.\r\n *\r\n * @serial\r\n * @see #getVAdjustable\r\n */\r\nprivate ScrollPaneAdjustable vAdjustable;","field_name":"vAdjustable","field_type":"java.awt.ScrollPaneAdjustable","full_declaration":"private java.awt.ScrollPaneAdjustable vAdjustable","id":3062},{"comment":"/**\r\n * An adjustable horizontal scrollbar.\r\n * It is important to note that you must <em>NOT</em> call 3\r\n * <code>Adjustable</code> methods, namely:\r\n * <code>setMinimum()</code>, <code>setMaximum()</code>,\r\n * <code>setVisibleAmount()</code>.\r\n *\r\n * @serial\r\n * @see #getHAdjustable\r\n */\r\nprivate ScrollPaneAdjustable hAdjustable;","field_name":"hAdjustable","field_type":"java.awt.ScrollPaneAdjustable","full_declaration":"private java.awt.ScrollPaneAdjustable hAdjustable","id":3063},{"comment":"private static final String base = \"scrollpane\";","field_name":"base","field_type":"java.lang.String","full_declaration":"private static final java.lang.String base = \"scrollpane\"","id":3064},{"comment":"","field_name":"nameCounter","field_type":"int","full_declaration":"private static int nameCounter = 0","id":3065},{"comment":"","field_name":"defaultWheelScroll","field_type":"boolean","full_declaration":"private static final boolean defaultWheelScroll = true","id":3066},{"comment":"/**\r\n * Indicates whether or not scrolling should take place when a\r\n * MouseWheelEvent is received.\r\n *\r\n * @serial\r\n * @since 1.4\r\n */\r\n","field_name":"wheelScrollingEnabled","field_type":"boolean","full_declaration":"private boolean wheelScrollingEnabled = defaultWheelScroll","id":3067},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 7956609840827222915L","id":3068},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 1043664721353696630L","id":3069},{"comment":"private ScrollPane scroller;","field_name":"scroller","field_type":"java.awt.ScrollPane","full_declaration":"private java.awt.ScrollPane scroller","id":3070},{"comment":"/*\r\n         * JDK 1.3 serialVersionUID\r\n         */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 6100703663886637L","id":3071},{"comment":"/*\r\n     * serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 7051237413532574756L","id":3072},{"comment":"private ScrollPane scroller;","field_name":"scroller","field_type":"java.awt.ScrollPane","full_declaration":"private java.awt.ScrollPane scroller","id":3073},{"comment":"/**\r\n * The <code>ScrollPane</code> this object is a scrollbar of.\r\n * @serial\r\n */\r\nprivate ScrollPane sp;","field_name":"sp","field_type":"java.awt.ScrollPane","full_declaration":"private java.awt.ScrollPane sp","id":3074},{"comment":"/**\r\n * Orientation of this scrollbar.\r\n *\r\n * @serial\r\n * @see #getOrientation\r\n * @see java.awt.Adjustable#HORIZONTAL\r\n * @see java.awt.Adjustable#VERTICAL\r\n */\r\n","field_name":"orientation","field_type":"int","full_declaration":"private int orientation","id":3075},{"comment":"/**\r\n * The value of this scrollbar.\r\n * <code>value</code> should be greater than <code>minimum</code>\r\n * and less than <code>maximum</code>\r\n *\r\n * @serial\r\n * @see #getValue\r\n * @see #setValue\r\n */\r\n","field_name":"value","field_type":"int","full_declaration":"private int value","id":3076},{"comment":"/**\r\n * The minimum value of this scrollbar.\r\n * This value can only be set by the <code>ScrollPane</code>.\r\n * <p>\r\n * <strong>ATTN:</strong> In current implementation\r\n * <code>minimum</code> is always <code>0</code>.  This field can\r\n * only be altered via <code>setSpan</code> method and\r\n * <code>ScrollPane</code> always calls that method with\r\n * <code>0</code> for the minimum.  <code>getMinimum</code> method\r\n * always returns <code>0</code> without checking this field.\r\n *\r\n * @serial\r\n * @see #getMinimum\r\n * @see #setSpan(int, int, int)\r\n */\r\n","field_name":"minimum","field_type":"int","full_declaration":"private int minimum","id":3077},{"comment":"/**\r\n * The maximum value of this scrollbar.\r\n * This value can only be set by the <code>ScrollPane</code>.\r\n *\r\n * @serial\r\n * @see #getMaximum\r\n * @see #setSpan(int, int, int)\r\n */\r\n","field_name":"maximum","field_type":"int","full_declaration":"private int maximum","id":3078},{"comment":"/**\r\n * The size of the visible portion of this scrollbar.\r\n * This value can only be set by the <code>ScrollPane</code>.\r\n *\r\n * @serial\r\n * @see #getVisibleAmount\r\n * @see #setSpan(int, int, int)\r\n */\r\n","field_name":"visibleAmount","field_type":"int","full_declaration":"private int visibleAmount","id":3079},{"comment":"/**\r\n * The adjusting status of the <code>Scrollbar</code>.\r\n * True if the value is in the process of changing as a result of\r\n * actions being taken by the user.\r\n *\r\n * @see #getValueIsAdjusting\r\n * @see #setValueIsAdjusting\r\n * @since 1.4\r\n */\r\n","field_name":"isAdjusting","field_type":"boolean","full_declaration":"private transient boolean isAdjusting","id":3080},{"comment":"/**\r\n * The amount by which the scrollbar value will change when going\r\n * up or down by a line.\r\n * This value should be a non negative integer.\r\n *\r\n * @serial\r\n * @see #getUnitIncrement\r\n * @see #setUnitIncrement\r\n */\r\n","field_name":"unitIncrement","field_type":"int","full_declaration":"private int unitIncrement = 1","id":3081},{"comment":"/**\r\n * The amount by which the scrollbar value will change when going\r\n * up or down by a page.\r\n * This value should be a non negative integer.\r\n *\r\n * @serial\r\n * @see #getBlockIncrement\r\n * @see #setBlockIncrement\r\n */\r\n","field_name":"blockIncrement","field_type":"int","full_declaration":"private int blockIncrement = 1","id":3082},{"comment":"private AdjustmentListener adjustmentListener;","field_name":"adjustmentListener","field_type":"java.awt.event.AdjustmentListener","full_declaration":"private java.awt.event.AdjustmentListener adjustmentListener","id":3083},{"comment":"/**\r\n * Error message for <code>AWTError</code> reported when one of\r\n * the public but unsupported methods is called.\r\n */\r\nprivate static final String SCROLLPANE_ONLY = \"Can be set by scrollpane only\";","field_name":"SCROLLPANE_ONLY","field_type":"java.lang.String","full_declaration":"private static final java.lang.String SCROLLPANE_ONLY = \"Can be set by scrollpane only\"","id":3084},{"comment":"/**\r\n * JDK 1.1 serialVersionUID.\r\n */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -3359745691033257079L","id":3085},{"comment":"/*\r\n     * serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -383615247028828931L","id":3086},{"comment":"","field_name":"ID","field_type":"int","full_declaration":"static final int ID = java.awt.event.FocusEvent.FOCUS_LAST + 2","id":3087},{"comment":"","field_name":"dispatched","field_type":"boolean","full_declaration":"boolean dispatched","id":3088},{"comment":"private AWTEvent nested;","field_name":"nested","field_type":"java.awt.AWTEvent","full_declaration":"private java.awt.AWTEvent nested","id":3089},{"comment":"private AppContext toNotify;","field_name":"toNotify","field_type":"sun.awt.AppContext","full_declaration":"private sun.awt.AppContext toNotify","id":3090},{"comment":"/*\r\n     * serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 547742659238625067L","id":3091},{"comment":"","field_name":"ID","field_type":"int","full_declaration":"private static final int ID = java.awt.event.FocusEvent.FOCUS_LAST + 1","id":3092},{"comment":"private static final LinkedList<SequencedEvent> list = new LinkedList<>();","field_name":"list","field_type":"java.util.LinkedList","full_declaration":"private static final java.util.LinkedList list = new LinkedList<>()","id":3093},{"comment":"private final AWTEvent nested;","field_name":"nested","field_type":"java.awt.AWTEvent","full_declaration":"private final java.awt.AWTEvent nested","id":3094},{"comment":"private AppContext appContext;","field_name":"appContext","field_type":"sun.awt.AppContext","full_declaration":"private sun.awt.AppContext appContext","id":3095},{"comment":"","field_name":"disposed","field_type":"boolean","full_declaration":"private boolean disposed","id":3096},{"comment":"// overlay image\r\nprivate BufferedImage image;","field_name":"image","field_type":"java.awt.image.BufferedImage","full_declaration":"private java.awt.image.BufferedImage image","id":3097},{"comment":"// pointer to native Splash structure\r\n","field_name":"splashPtr","field_type":"long","full_declaration":"private final long splashPtr","id":3098},{"comment":"","field_name":"wasClosed","field_type":"boolean","full_declaration":"private static boolean wasClosed = false","id":3099},{"comment":"private URL imageURL;","field_name":"imageURL","field_type":"java.net.URL","full_declaration":"private java.net.URL imageURL","id":3100},{"comment":"/**\r\n * The instance reference for the singleton.\r\n * (<code>null</code> if no instance exists yet.)\r\n *\r\n * @see #getSplashScreen\r\n * @see #close\r\n */\r\nprivate static SplashScreen theInstance = null;","field_name":"theInstance","field_type":"java.awt.SplashScreen","full_declaration":"private static java.awt.SplashScreen theInstance = null","id":3101},{"comment":"private static final PlatformLogger log = PlatformLogger.getLogger(\"java.awt.SplashScreen\");","field_name":"log","field_type":"sun.util.logging.PlatformLogger","full_declaration":"private static final sun.util.logging.PlatformLogger log = PlatformLogger.getLogger(\"java.awt.SplashScreen\")","id":3102},{"comment":"/**\r\n * The array index for the\r\n * {@link #desktop} system color.\r\n * @see SystemColor#desktop\r\n */\r\n@Native\r\n","field_name":"DESKTOP","field_type":"int","full_declaration":"public final static int DESKTOP = 0","id":3103},{"comment":"/**\r\n * The array index for the\r\n * {@link #activeCaption} system color.\r\n * @see SystemColor#activeCaption\r\n */\r\n@Native\r\n","field_name":"ACTIVE_CAPTION","field_type":"int","full_declaration":"public final static int ACTIVE_CAPTION = 1","id":3104},{"comment":"/**\r\n * The array index for the\r\n * {@link #activeCaptionText} system color.\r\n * @see SystemColor#activeCaptionText\r\n */\r\n@Native\r\n","field_name":"ACTIVE_CAPTION_TEXT","field_type":"int","full_declaration":"public final static int ACTIVE_CAPTION_TEXT = 2","id":3105},{"comment":"/**\r\n * The array index for the\r\n * {@link #activeCaptionBorder} system color.\r\n * @see SystemColor#activeCaptionBorder\r\n */\r\n@Native\r\n","field_name":"ACTIVE_CAPTION_BORDER","field_type":"int","full_declaration":"public final static int ACTIVE_CAPTION_BORDER = 3","id":3106},{"comment":"/**\r\n * The array index for the\r\n * {@link #inactiveCaption} system color.\r\n * @see SystemColor#inactiveCaption\r\n */\r\n@Native\r\n","field_name":"INACTIVE_CAPTION","field_type":"int","full_declaration":"public final static int INACTIVE_CAPTION = 4","id":3107},{"comment":"/**\r\n * The array index for the\r\n * {@link #inactiveCaptionText} system color.\r\n * @see SystemColor#inactiveCaptionText\r\n */\r\n@Native\r\n","field_name":"INACTIVE_CAPTION_TEXT","field_type":"int","full_declaration":"public final static int INACTIVE_CAPTION_TEXT = 5","id":3108},{"comment":"/**\r\n * The array index for the\r\n * {@link #inactiveCaptionBorder} system color.\r\n * @see SystemColor#inactiveCaptionBorder\r\n */\r\n@Native\r\n","field_name":"INACTIVE_CAPTION_BORDER","field_type":"int","full_declaration":"public final static int INACTIVE_CAPTION_BORDER = 6","id":3109},{"comment":"/**\r\n * The array index for the\r\n * {@link #window} system color.\r\n * @see SystemColor#window\r\n */\r\n@Native\r\n","field_name":"WINDOW","field_type":"int","full_declaration":"public final static int WINDOW = 7","id":3110},{"comment":"/**\r\n * The array index for the\r\n * {@link #windowBorder} system color.\r\n * @see SystemColor#windowBorder\r\n */\r\n@Native\r\n","field_name":"WINDOW_BORDER","field_type":"int","full_declaration":"public final static int WINDOW_BORDER = 8","id":3111},{"comment":"/**\r\n * The array index for the\r\n * {@link #windowText} system color.\r\n * @see SystemColor#windowText\r\n */\r\n@Native\r\n","field_name":"WINDOW_TEXT","field_type":"int","full_declaration":"public final static int WINDOW_TEXT = 9","id":3112},{"comment":"/**\r\n * The array index for the\r\n * {@link #menu} system color.\r\n * @see SystemColor#menu\r\n */\r\n@Native\r\n","field_name":"MENU","field_type":"int","full_declaration":"public final static int MENU = 10","id":3113},{"comment":"/**\r\n * The array index for the\r\n * {@link #menuText} system color.\r\n * @see SystemColor#menuText\r\n */\r\n@Native\r\n","field_name":"MENU_TEXT","field_type":"int","full_declaration":"public final static int MENU_TEXT = 11","id":3114},{"comment":"/**\r\n * The array index for the\r\n * {@link #text} system color.\r\n * @see SystemColor#text\r\n */\r\n@Native\r\n","field_name":"TEXT","field_type":"int","full_declaration":"public final static int TEXT = 12","id":3115},{"comment":"/**\r\n * The array index for the\r\n * {@link #textText} system color.\r\n * @see SystemColor#textText\r\n */\r\n@Native\r\n","field_name":"TEXT_TEXT","field_type":"int","full_declaration":"public final static int TEXT_TEXT = 13","id":3116},{"comment":"/**\r\n * The array index for the\r\n * {@link #textHighlight} system color.\r\n * @see SystemColor#textHighlight\r\n */\r\n@Native\r\n","field_name":"TEXT_HIGHLIGHT","field_type":"int","full_declaration":"public final static int TEXT_HIGHLIGHT = 14","id":3117},{"comment":"/**\r\n * The array index for the\r\n * {@link #textHighlightText} system color.\r\n * @see SystemColor#textHighlightText\r\n */\r\n@Native\r\n","field_name":"TEXT_HIGHLIGHT_TEXT","field_type":"int","full_declaration":"public final static int TEXT_HIGHLIGHT_TEXT = 15","id":3118},{"comment":"/**\r\n * The array index for the\r\n * {@link #textInactiveText} system color.\r\n * @see SystemColor#textInactiveText\r\n */\r\n@Native\r\n","field_name":"TEXT_INACTIVE_TEXT","field_type":"int","full_declaration":"public final static int TEXT_INACTIVE_TEXT = 16","id":3119},{"comment":"/**\r\n * The array index for the\r\n * {@link #control} system color.\r\n * @see SystemColor#control\r\n */\r\n@Native\r\n","field_name":"CONTROL","field_type":"int","full_declaration":"public final static int CONTROL = 17","id":3120},{"comment":"/**\r\n * The array index for the\r\n * {@link #controlText} system color.\r\n * @see SystemColor#controlText\r\n */\r\n@Native\r\n","field_name":"CONTROL_TEXT","field_type":"int","full_declaration":"public final static int CONTROL_TEXT = 18","id":3121},{"comment":"/**\r\n * The array index for the\r\n * {@link #controlHighlight} system color.\r\n * @see SystemColor#controlHighlight\r\n */\r\n@Native\r\n","field_name":"CONTROL_HIGHLIGHT","field_type":"int","full_declaration":"public final static int CONTROL_HIGHLIGHT = 19","id":3122},{"comment":"/**\r\n * The array index for the\r\n * {@link #controlLtHighlight} system color.\r\n * @see SystemColor#controlLtHighlight\r\n */\r\n@Native\r\n","field_name":"CONTROL_LT_HIGHLIGHT","field_type":"int","full_declaration":"public final static int CONTROL_LT_HIGHLIGHT = 20","id":3123},{"comment":"/**\r\n * The array index for the\r\n * {@link #controlShadow} system color.\r\n * @see SystemColor#controlShadow\r\n */\r\n@Native\r\n","field_name":"CONTROL_SHADOW","field_type":"int","full_declaration":"public final static int CONTROL_SHADOW = 21","id":3124},{"comment":"/**\r\n * The array index for the\r\n * {@link #controlDkShadow} system color.\r\n * @see SystemColor#controlDkShadow\r\n */\r\n@Native\r\n","field_name":"CONTROL_DK_SHADOW","field_type":"int","full_declaration":"public final static int CONTROL_DK_SHADOW = 22","id":3125},{"comment":"/**\r\n * The array index for the\r\n * {@link #scrollbar} system color.\r\n * @see SystemColor#scrollbar\r\n */\r\n@Native\r\n","field_name":"SCROLLBAR","field_type":"int","full_declaration":"public final static int SCROLLBAR = 23","id":3126},{"comment":"/**\r\n * The array index for the\r\n * {@link #info} system color.\r\n * @see SystemColor#info\r\n */\r\n@Native\r\n","field_name":"INFO","field_type":"int","full_declaration":"public final static int INFO = 24","id":3127},{"comment":"/**\r\n * The array index for the\r\n * {@link #infoText} system color.\r\n * @see SystemColor#infoText\r\n */\r\n@Native\r\n","field_name":"INFO_TEXT","field_type":"int","full_declaration":"public final static int INFO_TEXT = 25","id":3128},{"comment":"/**\r\n * The number of system colors in the array.\r\n */\r\n@Native\r\n","field_name":"NUM_COLORS","field_type":"int","full_declaration":"public final static int NUM_COLORS = 26","id":3129},{"comment":"/**\r\n * **************************************************************************************\r\n */\r\n/*\r\n     * System colors with default initial values, overwritten by toolkit if\r\n     * system values differ and are available.\r\n     * Should put array initialization above first field that is using\r\n     * SystemColor constructor to initialize.\r\n     */\r\n","field_name":"systemColors","field_type":"int[]","full_declaration":"private static int[] systemColors = { // desktop = new Color(0,92,92);\r\n0xFF005C5C, // activeCaption = new Color(0,0,128);\r\n0xFF000080, // activeCaptionText = Color.white;\r\n0xFFFFFFFF, // activeCaptionBorder = Color.lightGray;\r\n0xFFC0C0C0, // inactiveCaption = Color.gray;\r\n0xFF808080, // inactiveCaptionText = Color.lightGray;\r\n0xFFC0C0C0, // inactiveCaptionBorder = Color.lightGray;\r\n0xFFC0C0C0, // window = Color.white;\r\n0xFFFFFFFF, // windowBorder = Color.black;\r\n0xFF000000, // windowText = Color.black;\r\n0xFF000000, // menu = Color.lightGray;\r\n0xFFC0C0C0, // menuText = Color.black;\r\n0xFF000000, // text = Color.lightGray;\r\n0xFFC0C0C0, // textText = Color.black;\r\n0xFF000000, // textHighlight = new Color(0,0,128);\r\n0xFF000080, // textHighlightText = Color.white;\r\n0xFFFFFFFF, // textInactiveText = Color.gray;\r\n0xFF808080, // control = Color.lightGray;\r\n0xFFC0C0C0, // controlText = Color.black;\r\n0xFF000000, // controlHighlight = Color.white;\r\n0xFFFFFFFF, // controlLtHighlight = new Color(224,224,224);\r\n0xFFE0E0E0, // controlShadow = Color.gray;\r\n0xFF808080, // controlDkShadow = Color.black;\r\n0xFF000000, // scrollbar = new Color(224,224,224);\r\n0xFFE0E0E0, // info = new Color(224,224,0);\r\n0xFFE0E000, // infoText = Color.black;\r\n0xFF000000 }","id":3130},{"comment":"/**\r\n * The color rendered for the background of the desktop.\r\n */\r\npublic final static SystemColor desktop = new SystemColor((byte) DESKTOP);","field_name":"desktop","field_type":"java.awt.SystemColor","full_declaration":"public final static java.awt.SystemColor desktop = new SystemColor((byte) DESKTOP)","id":3131},{"comment":"/**\r\n * The color rendered for the window-title background of the currently active window.\r\n */\r\npublic final static SystemColor activeCaption = new SystemColor((byte) ACTIVE_CAPTION);","field_name":"activeCaption","field_type":"java.awt.SystemColor","full_declaration":"public final static java.awt.SystemColor activeCaption = new SystemColor((byte) ACTIVE_CAPTION)","id":3132},{"comment":"/**\r\n * The color rendered for the window-title text of the currently active window.\r\n */\r\npublic final static SystemColor activeCaptionText = new SystemColor((byte) ACTIVE_CAPTION_TEXT);","field_name":"activeCaptionText","field_type":"java.awt.SystemColor","full_declaration":"public final static java.awt.SystemColor activeCaptionText = new SystemColor((byte) ACTIVE_CAPTION_TEXT)","id":3133},{"comment":"/**\r\n * The color rendered for the border around the currently active window.\r\n */\r\npublic final static SystemColor activeCaptionBorder = new SystemColor((byte) ACTIVE_CAPTION_BORDER);","field_name":"activeCaptionBorder","field_type":"java.awt.SystemColor","full_declaration":"public final static java.awt.SystemColor activeCaptionBorder = new SystemColor((byte) ACTIVE_CAPTION_BORDER)","id":3134},{"comment":"/**\r\n * The color rendered for the window-title background of inactive windows.\r\n */\r\npublic final static SystemColor inactiveCaption = new SystemColor((byte) INACTIVE_CAPTION);","field_name":"inactiveCaption","field_type":"java.awt.SystemColor","full_declaration":"public final static java.awt.SystemColor inactiveCaption = new SystemColor((byte) INACTIVE_CAPTION)","id":3135},{"comment":"/**\r\n * The color rendered for the window-title text of inactive windows.\r\n */\r\npublic final static SystemColor inactiveCaptionText = new SystemColor((byte) INACTIVE_CAPTION_TEXT);","field_name":"inactiveCaptionText","field_type":"java.awt.SystemColor","full_declaration":"public final static java.awt.SystemColor inactiveCaptionText = new SystemColor((byte) INACTIVE_CAPTION_TEXT)","id":3136},{"comment":"/**\r\n * The color rendered for the border around inactive windows.\r\n */\r\npublic final static SystemColor inactiveCaptionBorder = new SystemColor((byte) INACTIVE_CAPTION_BORDER);","field_name":"inactiveCaptionBorder","field_type":"java.awt.SystemColor","full_declaration":"public final static java.awt.SystemColor inactiveCaptionBorder = new SystemColor((byte) INACTIVE_CAPTION_BORDER)","id":3137},{"comment":"/**\r\n * The color rendered for the background of interior regions inside windows.\r\n */\r\npublic final static SystemColor window = new SystemColor((byte) WINDOW);","field_name":"window","field_type":"java.awt.SystemColor","full_declaration":"public final static java.awt.SystemColor window = new SystemColor((byte) WINDOW)","id":3138},{"comment":"/**\r\n * The color rendered for the border around interior regions inside windows.\r\n */\r\npublic final static SystemColor windowBorder = new SystemColor((byte) WINDOW_BORDER);","field_name":"windowBorder","field_type":"java.awt.SystemColor","full_declaration":"public final static java.awt.SystemColor windowBorder = new SystemColor((byte) WINDOW_BORDER)","id":3139},{"comment":"/**\r\n * The color rendered for text of interior regions inside windows.\r\n */\r\npublic final static SystemColor windowText = new SystemColor((byte) WINDOW_TEXT);","field_name":"windowText","field_type":"java.awt.SystemColor","full_declaration":"public final static java.awt.SystemColor windowText = new SystemColor((byte) WINDOW_TEXT)","id":3140},{"comment":"/**\r\n * The color rendered for the background of menus.\r\n */\r\npublic final static SystemColor menu = new SystemColor((byte) MENU);","field_name":"menu","field_type":"java.awt.SystemColor","full_declaration":"public final static java.awt.SystemColor menu = new SystemColor((byte) MENU)","id":3141},{"comment":"/**\r\n * The color rendered for the text of menus.\r\n */\r\npublic final static SystemColor menuText = new SystemColor((byte) MENU_TEXT);","field_name":"menuText","field_type":"java.awt.SystemColor","full_declaration":"public final static java.awt.SystemColor menuText = new SystemColor((byte) MENU_TEXT)","id":3142},{"comment":"/**\r\n * The color rendered for the background of text control objects, such as\r\n * textfields and comboboxes.\r\n */\r\npublic final static SystemColor text = new SystemColor((byte) TEXT);","field_name":"text","field_type":"java.awt.SystemColor","full_declaration":"public final static java.awt.SystemColor text = new SystemColor((byte) TEXT)","id":3143},{"comment":"/**\r\n * The color rendered for the text of text control objects, such as textfields\r\n * and comboboxes.\r\n */\r\npublic final static SystemColor textText = new SystemColor((byte) TEXT_TEXT);","field_name":"textText","field_type":"java.awt.SystemColor","full_declaration":"public final static java.awt.SystemColor textText = new SystemColor((byte) TEXT_TEXT)","id":3144},{"comment":"/**\r\n * The color rendered for the background of selected items, such as in menus,\r\n * comboboxes, and text.\r\n */\r\npublic final static SystemColor textHighlight = new SystemColor((byte) TEXT_HIGHLIGHT);","field_name":"textHighlight","field_type":"java.awt.SystemColor","full_declaration":"public final static java.awt.SystemColor textHighlight = new SystemColor((byte) TEXT_HIGHLIGHT)","id":3145},{"comment":"/**\r\n * The color rendered for the text of selected items, such as in menus, comboboxes,\r\n * and text.\r\n */\r\npublic final static SystemColor textHighlightText = new SystemColor((byte) TEXT_HIGHLIGHT_TEXT);","field_name":"textHighlightText","field_type":"java.awt.SystemColor","full_declaration":"public final static java.awt.SystemColor textHighlightText = new SystemColor((byte) TEXT_HIGHLIGHT_TEXT)","id":3146},{"comment":"/**\r\n * The color rendered for the text of inactive items, such as in menus.\r\n */\r\npublic final static SystemColor textInactiveText = new SystemColor((byte) TEXT_INACTIVE_TEXT);","field_name":"textInactiveText","field_type":"java.awt.SystemColor","full_declaration":"public final static java.awt.SystemColor textInactiveText = new SystemColor((byte) TEXT_INACTIVE_TEXT)","id":3147},{"comment":"/**\r\n * The color rendered for the background of control panels and control objects,\r\n * such as pushbuttons.\r\n */\r\npublic final static SystemColor control = new SystemColor((byte) CONTROL);","field_name":"control","field_type":"java.awt.SystemColor","full_declaration":"public final static java.awt.SystemColor control = new SystemColor((byte) CONTROL)","id":3148},{"comment":"/**\r\n * The color rendered for the text of control panels and control objects,\r\n * such as pushbuttons.\r\n */\r\npublic final static SystemColor controlText = new SystemColor((byte) CONTROL_TEXT);","field_name":"controlText","field_type":"java.awt.SystemColor","full_declaration":"public final static java.awt.SystemColor controlText = new SystemColor((byte) CONTROL_TEXT)","id":3149},{"comment":"/**\r\n * The color rendered for light areas of 3D control objects, such as pushbuttons.\r\n * This color is typically derived from the <code>control</code> background color\r\n * to provide a 3D effect.\r\n */\r\npublic final static SystemColor controlHighlight = new SystemColor((byte) CONTROL_HIGHLIGHT);","field_name":"controlHighlight","field_type":"java.awt.SystemColor","full_declaration":"public final static java.awt.SystemColor controlHighlight = new SystemColor((byte) CONTROL_HIGHLIGHT)","id":3150},{"comment":"/**\r\n * The color rendered for highlight areas of 3D control objects, such as pushbuttons.\r\n * This color is typically derived from the <code>control</code> background color\r\n * to provide a 3D effect.\r\n */\r\npublic final static SystemColor controlLtHighlight = new SystemColor((byte) CONTROL_LT_HIGHLIGHT);","field_name":"controlLtHighlight","field_type":"java.awt.SystemColor","full_declaration":"public final static java.awt.SystemColor controlLtHighlight = new SystemColor((byte) CONTROL_LT_HIGHLIGHT)","id":3151},{"comment":"/**\r\n * The color rendered for shadow areas of 3D control objects, such as pushbuttons.\r\n * This color is typically derived from the <code>control</code> background color\r\n * to provide a 3D effect.\r\n */\r\npublic final static SystemColor controlShadow = new SystemColor((byte) CONTROL_SHADOW);","field_name":"controlShadow","field_type":"java.awt.SystemColor","full_declaration":"public final static java.awt.SystemColor controlShadow = new SystemColor((byte) CONTROL_SHADOW)","id":3152},{"comment":"/**\r\n * The color rendered for dark shadow areas on 3D control objects, such as pushbuttons.\r\n * This color is typically derived from the <code>control</code> background color\r\n * to provide a 3D effect.\r\n */\r\npublic final static SystemColor controlDkShadow = new SystemColor((byte) CONTROL_DK_SHADOW);","field_name":"controlDkShadow","field_type":"java.awt.SystemColor","full_declaration":"public final static java.awt.SystemColor controlDkShadow = new SystemColor((byte) CONTROL_DK_SHADOW)","id":3153},{"comment":"/**\r\n * The color rendered for the background of scrollbars.\r\n */\r\npublic final static SystemColor scrollbar = new SystemColor((byte) SCROLLBAR);","field_name":"scrollbar","field_type":"java.awt.SystemColor","full_declaration":"public final static java.awt.SystemColor scrollbar = new SystemColor((byte) SCROLLBAR)","id":3154},{"comment":"/**\r\n * The color rendered for the background of tooltips or spot help.\r\n */\r\npublic final static SystemColor info = new SystemColor((byte) INFO);","field_name":"info","field_type":"java.awt.SystemColor","full_declaration":"public final static java.awt.SystemColor info = new SystemColor((byte) INFO)","id":3155},{"comment":"/**\r\n * The color rendered for the text of tooltips or spot help.\r\n */\r\npublic final static SystemColor infoText = new SystemColor((byte) INFO_TEXT);","field_name":"infoText","field_type":"java.awt.SystemColor","full_declaration":"public final static java.awt.SystemColor infoText = new SystemColor((byte) INFO_TEXT)","id":3156},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID.\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 4503142729533789064L","id":3157},{"comment":"/*\r\n     * An index into either array of SystemColor objects or values.\r\n     */\r\n","field_name":"index","field_type":"int","full_declaration":"private transient int index","id":3158},{"comment":"","field_name":"systemColorObjects","field_type":"SystemColor[]","full_declaration":"private static SystemColor[] systemColorObjects = { SystemColor.desktop, SystemColor.activeCaption, SystemColor.activeCaptionText, SystemColor.activeCaptionBorder, SystemColor.inactiveCaption, SystemColor.inactiveCaptionText, SystemColor.inactiveCaptionBorder, SystemColor.window, SystemColor.windowBorder, SystemColor.windowText, SystemColor.menu, SystemColor.menuText, SystemColor.text, SystemColor.textText, SystemColor.textHighlight, SystemColor.textHighlightText, SystemColor.textInactiveText, SystemColor.control, SystemColor.controlText, SystemColor.controlHighlight, SystemColor.controlLtHighlight, SystemColor.controlShadow, SystemColor.controlDkShadow, SystemColor.scrollbar, SystemColor.info, SystemColor.infoText }","id":3159},{"comment":"private static SystemTray systemTray;","field_name":"systemTray","field_type":"java.awt.SystemTray","full_declaration":"private static java.awt.SystemTray systemTray","id":3160},{"comment":"// each TrayIcon added gets a unique ID\r\n","field_name":"currentIconID","field_type":"int","full_declaration":"private int currentIconID = 0","id":3161},{"comment":"transient private SystemTrayPeer peer;","field_name":"peer","field_type":"java.awt.peer.SystemTrayPeer","full_declaration":"transient private java.awt.peer.SystemTrayPeer peer","id":3162},{"comment":"","field_name":"EMPTY_TRAY_ARRAY","field_type":"TrayIcon[]","full_declaration":"private static final TrayIcon[] EMPTY_TRAY_ARRAY = new TrayIcon[0]","id":3163},{"comment":"/**\r\n * The number of rows in the <code>TextArea</code>.\r\n * This parameter will determine the text area's height.\r\n * Guaranteed to be non-negative.\r\n *\r\n * @serial\r\n * @see #getRows()\r\n * @see #setRows(int)\r\n */\r\n","field_name":"rows","field_type":"int","full_declaration":"int rows","id":3164},{"comment":"/**\r\n * The number of columns in the <code>TextArea</code>.\r\n * A column is an approximate average character\r\n * width that is platform-dependent.\r\n * This parameter will determine the text area's width.\r\n * Guaranteed to be non-negative.\r\n *\r\n * @serial\r\n * @see  #setColumns(int)\r\n * @see  #getColumns()\r\n */\r\n","field_name":"columns","field_type":"int","full_declaration":"int columns","id":3165},{"comment":"private static final String base = \"text\";","field_name":"base","field_type":"java.lang.String","full_declaration":"private static final java.lang.String base = \"text\"","id":3166},{"comment":"","field_name":"nameCounter","field_type":"int","full_declaration":"private static int nameCounter = 0","id":3167},{"comment":"/**\r\n * Create and display both vertical and horizontal scrollbars.\r\n * @since JDK1.1\r\n */\r\n","field_name":"SCROLLBARS_BOTH","field_type":"int","full_declaration":"public static final int SCROLLBARS_BOTH = 0","id":3168},{"comment":"/**\r\n * Create and display vertical scrollbar only.\r\n * @since JDK1.1\r\n */\r\n","field_name":"SCROLLBARS_VERTICAL_ONLY","field_type":"int","full_declaration":"public static final int SCROLLBARS_VERTICAL_ONLY = 1","id":3169},{"comment":"/**\r\n * Create and display horizontal scrollbar only.\r\n * @since JDK1.1\r\n */\r\n","field_name":"SCROLLBARS_HORIZONTAL_ONLY","field_type":"int","full_declaration":"public static final int SCROLLBARS_HORIZONTAL_ONLY = 2","id":3170},{"comment":"/**\r\n * Do not create or display any scrollbars for the text area.\r\n * @since JDK1.1\r\n */\r\n","field_name":"SCROLLBARS_NONE","field_type":"int","full_declaration":"public static final int SCROLLBARS_NONE = 3","id":3171},{"comment":"/**\r\n * Determines which scrollbars are created for the\r\n * text area. It can be one of four values :\r\n * <code>SCROLLBARS_BOTH</code> = both scrollbars.<BR>\r\n * <code>SCROLLBARS_HORIZONTAL_ONLY</code> = Horizontal bar only.<BR>\r\n * <code>SCROLLBARS_VERTICAL_ONLY</code> = Vertical bar only.<BR>\r\n * <code>SCROLLBARS_NONE</code> = No scrollbars.<BR>\r\n *\r\n * @serial\r\n * @see #getScrollbarVisibility()\r\n */\r\n","field_name":"scrollbarVisibility","field_type":"int","full_declaration":"private int scrollbarVisibility","id":3172},{"comment":"/**\r\n * Cache the Sets of forward and backward traversal keys so we need not\r\n * look them up each time.\r\n */\r\nprivate static Set<AWTKeyStroke> forwardTraversalKeys, backwardTraversalKeys;","field_name":"forwardTraversalKeys","field_type":"java.util.Set","full_declaration":"private static java.util.Set forwardTraversalKeys","id":3173},{"comment":"/**\r\n * Cache the Sets of forward and backward traversal keys so we need not\r\n * look them up each time.\r\n */\r\nprivate static Set<AWTKeyStroke> forwardTraversalKeys, backwardTraversalKeys;","field_name":"backwardTraversalKeys","field_type":"java.util.Set","full_declaration":"private static java.util.Set forwardTraversalKeysjava.util.Set backwardTraversalKeys","id":3174},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 3692302836626095722L","id":3175},{"comment":"/*\r\n     * Serialization support.\r\n     */\r\n/**\r\n * The textArea Serialized Data Version.\r\n *\r\n * @serial\r\n */\r\n","field_name":"textAreaSerializedDataVersion","field_type":"int","full_declaration":"private int textAreaSerializedDataVersion = 2","id":3176},{"comment":"/*\r\n         * JDK 1.3 serialVersionUID\r\n         */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 3472827823632144419L","id":3177},{"comment":"/**\r\n * The value of the text.\r\n * A <code>null</code> value is the same as \"\".\r\n *\r\n * @serial\r\n * @see #setText(String)\r\n * @see #getText()\r\n */\r\nString text;","field_name":"text","field_type":"java.lang.String","full_declaration":"java.lang.String text","id":3178},{"comment":"/**\r\n * A boolean indicating whether or not this\r\n * <code>TextComponent</code> is editable.\r\n * It will be <code>true</code> if the text component\r\n * is editable and <code>false</code> if not.\r\n *\r\n * @serial\r\n * @see #isEditable()\r\n */\r\n","field_name":"editable","field_type":"boolean","full_declaration":"boolean editable = true","id":3179},{"comment":"/**\r\n * The selection refers to the selected text, and the\r\n * <code>selectionStart</code> is the start position\r\n * of the selected text.\r\n *\r\n * @serial\r\n * @see #getSelectionStart()\r\n * @see #setSelectionStart(int)\r\n */\r\n","field_name":"selectionStart","field_type":"int","full_declaration":"int selectionStart","id":3180},{"comment":"/**\r\n * The selection refers to the selected text, and the\r\n * <code>selectionEnd</code>\r\n * is the end position of the selected text.\r\n *\r\n * @serial\r\n * @see #getSelectionEnd()\r\n * @see #setSelectionEnd(int)\r\n */\r\n","field_name":"selectionEnd","field_type":"int","full_declaration":"int selectionEnd","id":3181},{"comment":"// A flag used to tell whether the background has been set by\r\n// developer code (as opposed to AWT code).  Used to determine\r\n// the background color of non-editable TextComponents.\r\n","field_name":"backgroundSetByClientCode","field_type":"boolean","full_declaration":"boolean backgroundSetByClientCode = false","id":3182},{"comment":"transient protected TextListener textListener;","field_name":"textListener","field_type":"java.awt.event.TextListener","full_declaration":"transient protected java.awt.event.TextListener textListener","id":3183},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -2214773872412987419L","id":3184},{"comment":"/*\r\n     * Serialization support.\r\n     */\r\n/**\r\n * The textComponent SerializedDataVersion.\r\n *\r\n * @serial\r\n */\r\n","field_name":"textComponentSerializedDataVersion","field_type":"int","full_declaration":"private int textComponentSerializedDataVersion = 1","id":3185},{"comment":"// end of AccessibleAWTTextComponent\r\n","field_name":"checkForEnableIM","field_type":"boolean","full_declaration":"private boolean checkForEnableIM = true","id":3186},{"comment":"/*\r\n         * JDK 1.3 serialVersionUID\r\n         */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 3631432373506317811L","id":3187},{"comment":"","field_name":"NEXT","field_type":"boolean","full_declaration":"private static final boolean NEXT = true","id":3188},{"comment":"","field_name":"PREVIOUS","field_type":"boolean","full_declaration":"private static final boolean PREVIOUS = false","id":3189},{"comment":"/**\r\n * The number of columns in the text field.\r\n * A column is an approximate average character\r\n * width that is platform-dependent.\r\n * Guaranteed to be non-negative.\r\n *\r\n * @serial\r\n * @see #setColumns(int)\r\n * @see #getColumns()\r\n */\r\n","field_name":"columns","field_type":"int","full_declaration":"int columns","id":3190},{"comment":"/**\r\n * The echo character, which is used when\r\n * the user wishes to disguise the characters\r\n * typed into the text field.\r\n * The disguises are removed if echoChar = <code>0</code>.\r\n *\r\n * @serial\r\n * @see #getEchoChar()\r\n * @see #setEchoChar(char)\r\n * @see #echoCharIsSet()\r\n */\r\n","field_name":"echoChar","field_type":"char","full_declaration":"char echoChar","id":3191},{"comment":"transient ActionListener actionListener;","field_name":"actionListener","field_type":"java.awt.event.ActionListener","full_declaration":"transient java.awt.event.ActionListener actionListener","id":3192},{"comment":"private static final String base = \"textfield\";","field_name":"base","field_type":"java.lang.String","full_declaration":"private static final java.lang.String base = \"textfield\"","id":3193},{"comment":"","field_name":"nameCounter","field_type":"int","full_declaration":"private static int nameCounter = 0","id":3194},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -2966288784432217853L","id":3195},{"comment":"/*\r\n     * Serialization support.\r\n     */\r\n/**\r\n * The textField Serialized Data Version.\r\n *\r\n * @serial\r\n */\r\n","field_name":"textFieldSerializedDataVersion","field_type":"int","full_declaration":"private int textFieldSerializedDataVersion = 1","id":3196},{"comment":"/*\r\n         * JDK 1.3 serialVersionUID\r\n         */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 6219164359235943158L","id":3197},{"comment":"BufferedImage bufImg;","field_name":"bufImg","field_type":"java.awt.image.BufferedImage","full_declaration":"java.awt.image.BufferedImage bufImg","id":3198},{"comment":"","field_name":"tx","field_type":"double","full_declaration":"double tx","id":3199},{"comment":"","field_name":"ty","field_type":"double","full_declaration":"double ty","id":3200},{"comment":"","field_name":"sx","field_type":"double","full_declaration":"double sx","id":3201},{"comment":"","field_name":"sy","field_type":"double","full_declaration":"double sy","id":3202},{"comment":"public static ColorModel xrgbmodel = new DirectColorModel(24, 0xff0000, 0xff00, 0xff);","field_name":"xrgbmodel","field_type":"java.awt.image.ColorModel","full_declaration":"public static java.awt.image.ColorModel xrgbmodel = new DirectColorModel(24, 0xff0000, 0xff00, 0xff)","id":3203},{"comment":"public static ColorModel argbmodel = ColorModel.getRGBdefault();","field_name":"argbmodel","field_type":"java.awt.image.ColorModel","full_declaration":"public static java.awt.image.ColorModel argbmodel = ColorModel.getRGBdefault()","id":3204},{"comment":"ColorModel colorModel;","field_name":"colorModel","field_type":"java.awt.image.ColorModel","full_declaration":"java.awt.image.ColorModel colorModel","id":3205},{"comment":"","field_name":"bWidth","field_type":"int","full_declaration":"int bWidth","id":3206},{"comment":"","field_name":"bHeight","field_type":"int","full_declaration":"int bHeight","id":3207},{"comment":"","field_name":"maxWidth","field_type":"int","full_declaration":"int maxWidth","id":3208},{"comment":"WritableRaster outRas;","field_name":"outRas","field_type":"java.awt.image.WritableRaster","full_declaration":"java.awt.image.WritableRaster outRas","id":3209},{"comment":"","field_name":"xOrg","field_type":"double","full_declaration":"double xOrg","id":3210},{"comment":"","field_name":"yOrg","field_type":"double","full_declaration":"double yOrg","id":3211},{"comment":"","field_name":"incXAcross","field_type":"double","full_declaration":"double incXAcross","id":3212},{"comment":"","field_name":"incYAcross","field_type":"double","full_declaration":"double incYAcross","id":3213},{"comment":"","field_name":"incXDown","field_type":"double","full_declaration":"double incXDown","id":3214},{"comment":"","field_name":"incYDown","field_type":"double","full_declaration":"double incYDown","id":3215},{"comment":"","field_name":"colincx","field_type":"int","full_declaration":"int colincx","id":3216},{"comment":"","field_name":"colincy","field_type":"int","full_declaration":"int colincy","id":3217},{"comment":"","field_name":"colincxerr","field_type":"int","full_declaration":"int colincxerr","id":3218},{"comment":"","field_name":"colincyerr","field_type":"int","full_declaration":"int colincyerr","id":3219},{"comment":"","field_name":"rowincx","field_type":"int","full_declaration":"int rowincx","id":3220},{"comment":"","field_name":"rowincy","field_type":"int","full_declaration":"int rowincy","id":3221},{"comment":"","field_name":"rowincxerr","field_type":"int","full_declaration":"int rowincxerr","id":3222},{"comment":"","field_name":"rowincyerr","field_type":"int","full_declaration":"int rowincyerr","id":3223},{"comment":"private static WeakReference<Raster> xrgbRasRef;","field_name":"xrgbRasRef","field_type":"java.lang.ref.WeakReference","full_declaration":"private static java.lang.ref.WeakReference xrgbRasRef","id":3224},{"comment":"private static WeakReference<Raster> argbRasRef;","field_name":"argbRasRef","field_type":"java.lang.ref.WeakReference","full_declaration":"private static java.lang.ref.WeakReference argbRasRef","id":3225},{"comment":"private static WeakReference<Raster> byteRasRef;","field_name":"byteRasRef","field_type":"java.lang.ref.WeakReference","full_declaration":"private static java.lang.ref.WeakReference byteRasRef","id":3226},{"comment":"IntegerInterleavedRaster srcRas;","field_name":"srcRas","field_type":"sun.awt.image.IntegerInterleavedRaster","full_declaration":"sun.awt.image.IntegerInterleavedRaster srcRas","id":3227},{"comment":"","field_name":"inData","field_type":"int[]","full_declaration":"int[] inData","id":3228},{"comment":"","field_name":"inOff","field_type":"int","full_declaration":"int inOff","id":3229},{"comment":"","field_name":"inSpan","field_type":"int","full_declaration":"int inSpan","id":3230},{"comment":"","field_name":"outData","field_type":"int[]","full_declaration":"int[] outData","id":3231},{"comment":"","field_name":"outOff","field_type":"int","full_declaration":"int outOff","id":3232},{"comment":"","field_name":"outSpan","field_type":"int","full_declaration":"int outSpan","id":3233},{"comment":"","field_name":"filter","field_type":"boolean","full_declaration":"boolean filter","id":3234},{"comment":"ByteInterleavedRaster srcRas;","field_name":"srcRas","field_type":"sun.awt.image.ByteInterleavedRaster","full_declaration":"sun.awt.image.ByteInterleavedRaster srcRas","id":3235},{"comment":"","field_name":"inData","field_type":"byte[]","full_declaration":"byte[] inData","id":3236},{"comment":"","field_name":"inOff","field_type":"int","full_declaration":"int inOff","id":3237},{"comment":"","field_name":"inSpan","field_type":"int","full_declaration":"int inSpan","id":3238},{"comment":"","field_name":"outData","field_type":"byte[]","full_declaration":"byte[] outData","id":3239},{"comment":"","field_name":"outOff","field_type":"int","full_declaration":"int outOff","id":3240},{"comment":"","field_name":"outSpan","field_type":"int","full_declaration":"int outSpan","id":3241},{"comment":"ByteInterleavedRaster srcRas;","field_name":"srcRas","field_type":"sun.awt.image.ByteInterleavedRaster","full_declaration":"sun.awt.image.ByteInterleavedRaster srcRas","id":3242},{"comment":"","field_name":"inPalette","field_type":"int[]","full_declaration":"int[] inPalette","id":3243},{"comment":"","field_name":"inData","field_type":"byte[]","full_declaration":"byte[] inData","id":3244},{"comment":"","field_name":"inOff","field_type":"int","full_declaration":"int inOff","id":3245},{"comment":"","field_name":"inSpan","field_type":"int","full_declaration":"int inSpan","id":3246},{"comment":"","field_name":"outData","field_type":"int[]","full_declaration":"int[] outData","id":3247},{"comment":"","field_name":"outOff","field_type":"int","full_declaration":"int outOff","id":3248},{"comment":"","field_name":"outSpan","field_type":"int","full_declaration":"int outSpan","id":3249},{"comment":"WritableRaster srcRas;","field_name":"srcRas","field_type":"java.awt.image.WritableRaster","full_declaration":"java.awt.image.WritableRaster srcRas","id":3250},{"comment":"","field_name":"filter","field_type":"boolean","full_declaration":"boolean filter","id":3251},{"comment":"private static LightweightPeer lightweightMarker;","field_name":"lightweightMarker","field_type":"java.awt.peer.LightweightPeer","full_declaration":"private static java.awt.peer.LightweightPeer lightweightMarker","id":3252},{"comment":"/**\r\n * The default toolkit.\r\n */\r\nprivate static Toolkit toolkit;","field_name":"toolkit","field_type":"java.awt.Toolkit","full_declaration":"private static java.awt.Toolkit toolkit","id":3253},{"comment":"/**\r\n * Used internally by the assistive technologies functions; set at\r\n * init time and used at load time\r\n */\r\nprivate static String atNames;","field_name":"atNames","field_type":"java.lang.String","full_declaration":"private static java.lang.String atNames","id":3254},{"comment":"/**\r\n * Support for I18N: any visible strings should be stored in\r\n * sun.awt.resources.awt.properties.  The ResourceBundle is stored\r\n * here, so that only one copy is maintained.\r\n */\r\nprivate static ResourceBundle resources;","field_name":"resources","field_type":"java.util.ResourceBundle","full_declaration":"private static java.util.ResourceBundle resources","id":3255},{"comment":"private static ResourceBundle platformResources;","field_name":"platformResources","field_type":"java.util.ResourceBundle","full_declaration":"private static java.util.ResourceBundle platformResources","id":3256},{"comment":"/**\r\n * WARNING: This is a temporary workaround for a problem in the\r\n * way the AWT loads native libraries. A number of classes in the\r\n * AWT package have a native method, initIDs(), which initializes\r\n * the JNI field and method ids used in the native portion of\r\n * their implementation.\r\n *\r\n * Since the use and storage of these ids is done by the\r\n * implementation libraries, the implementation of these method is\r\n * provided by the particular AWT implementations (for example,\r\n * \"Toolkit\"s/Peer), such as Motif, Microsoft Windows, or Tiny. The\r\n * problem is that this means that the native libraries must be\r\n * loaded by the java.* classes, which do not necessarily know the\r\n * names of the libraries to load. A better way of doing this\r\n * would be to provide a separate library which defines java.awt.*\r\n * initIDs, and exports the relevant symbols out to the\r\n * implementation libraries.\r\n *\r\n * For now, we know it's done by the implementation, and we assume\r\n * that the name of the library is \"awt\".  -br.\r\n *\r\n * If you change loadLibraries(), please add the change to\r\n * java.awt.image.ColorModel.loadLibraries(). Unfortunately,\r\n * classes can be loaded in java.awt.image that depend on\r\n * libawt and there is no way to call Toolkit.loadLibraries()\r\n * directly.  -hung\r\n */\r\n","field_name":"loaded","field_type":"boolean","full_declaration":"private static boolean loaded = false","id":3257},{"comment":"protected final Map<String, Object> desktopProperties = new HashMap<String, Object>();","field_name":"desktopProperties","field_type":"java.util.Map","full_declaration":"protected final java.util.Map desktopProperties = new HashMap<String, Object>()","id":3258},{"comment":"protected final PropertyChangeSupport desktopPropsSupport = Toolkit.createPropertyChangeSupport(this);","field_name":"desktopPropsSupport","field_type":"java.beans.PropertyChangeSupport","full_declaration":"protected final java.beans.PropertyChangeSupport desktopPropsSupport = Toolkit.createPropertyChangeSupport(this)","id":3259},{"comment":"// 8014718: logging has been removed from SunToolkit\r\n","field_name":"LONG_BITS","field_type":"int","full_declaration":"private static final int LONG_BITS = 64","id":3260},{"comment":"","field_name":"calls","field_type":"int[]","full_declaration":"private int[] calls = new int[LONG_BITS]","id":3261},{"comment":"","field_name":"enabledOnToolkitMask","field_type":"long","full_declaration":"private static volatile long enabledOnToolkitMask","id":3262},{"comment":"private AWTEventListener eventListener = null;","field_name":"eventListener","field_type":"java.awt.event.AWTEventListener","full_declaration":"private java.awt.event.AWTEventListener eventListener = null","id":3263},{"comment":"private WeakHashMap<AWTEventListener, SelectiveAWTEventListener> listener2SelectiveListener = new WeakHashMap<>();","field_name":"listener2SelectiveListener","field_type":"java.util.WeakHashMap","full_declaration":"private java.util.WeakHashMap listener2SelectiveListener = new WeakHashMap<>()","id":3264},{"comment":"AWTEventListener listener;","field_name":"listener","field_type":"java.awt.event.AWTEventListener","full_declaration":"java.awt.event.AWTEventListener listener","id":3265},{"comment":"","field_name":"eventMask","field_type":"long","full_declaration":"private long eventMask","id":3266},{"comment":"// This array contains the number of times to call the eventlistener\r\n// for each event type.\r\n","field_name":"calls","field_type":"int[]","full_declaration":"int[] calls = new int[Toolkit.LONG_BITS]","id":3267},{"comment":"private static final StringBuilder PROP_CHANGE_SUPPORT_KEY = new StringBuilder(\"desktop property change support key\");","field_name":"PROP_CHANGE_SUPPORT_KEY","field_type":"java.lang.StringBuilder","full_declaration":"private static final java.lang.StringBuilder PROP_CHANGE_SUPPORT_KEY = new StringBuilder(\"desktop property change support key\")","id":3268},{"comment":"private final Object source;","field_name":"source","field_type":"java.lang.Object","full_declaration":"private final java.lang.Object source","id":3269},{"comment":"/**\r\n * Represents image data that is guaranteed to be completely opaque,\r\n * meaning that all pixels have an alpha value of 1.0.\r\n */\r\n@Native\r\n","field_name":"OPAQUE","field_type":"int","full_declaration":"public final static int OPAQUE = 1","id":3270},{"comment":"/**\r\n * Represents image data that is guaranteed to be either completely\r\n * opaque, with an alpha value of 1.0, or completely transparent,\r\n * with an alpha value of 0.0.\r\n */\r\n@Native\r\n","field_name":"BITMASK","field_type":"int","full_declaration":"public final static int BITMASK = 2","id":3271},{"comment":"/**\r\n * Represents image data that contains or might contain arbitrary\r\n * alpha values between and including 0.0 and 1.0.\r\n */\r\n@Native\r\n","field_name":"TRANSLUCENT","field_type":"int","full_declaration":"public final static int TRANSLUCENT = 3","id":3272},{"comment":"private Image image;","field_name":"image","field_type":"java.awt.Image","full_declaration":"private java.awt.Image image","id":3273},{"comment":"private String tooltip;","field_name":"tooltip","field_type":"java.lang.String","full_declaration":"private java.lang.String tooltip","id":3274},{"comment":"private PopupMenu popup;","field_name":"popup","field_type":"java.awt.PopupMenu","full_declaration":"private java.awt.PopupMenu popup","id":3275},{"comment":"","field_name":"autosize","field_type":"boolean","full_declaration":"private boolean autosize","id":3276},{"comment":"","field_name":"id","field_type":"int","full_declaration":"private int id","id":3277},{"comment":"private String actionCommand;","field_name":"actionCommand","field_type":"java.lang.String","full_declaration":"private java.lang.String actionCommand","id":3278},{"comment":"transient private TrayIconPeer peer;","field_name":"peer","field_type":"java.awt.peer.TrayIconPeer","full_declaration":"transient private java.awt.peer.TrayIconPeer peer","id":3279},{"comment":"transient MouseListener mouseListener;","field_name":"mouseListener","field_type":"java.awt.event.MouseListener","full_declaration":"transient java.awt.event.MouseListener mouseListener","id":3280},{"comment":"transient MouseMotionListener mouseMotionListener;","field_name":"mouseMotionListener","field_type":"java.awt.event.MouseMotionListener","full_declaration":"transient java.awt.event.MouseMotionListener mouseMotionListener","id":3281},{"comment":"transient ActionListener actionListener;","field_name":"actionListener","field_type":"java.awt.event.ActionListener","full_declaration":"transient java.awt.event.ActionListener actionListener","id":3282},{"comment":"/*\r\n     * The tray icon's AccessControlContext.\r\n     *\r\n     * Unlike the acc in Component, this field is made final\r\n     * because TrayIcon is not serializable.\r\n     */\r\nprivate final AccessControlContext acc = AccessController.getContext();","field_name":"acc","field_type":"java.security.AccessControlContext","full_declaration":"private final java.security.AccessControlContext acc = AccessController.getContext()","id":3283},{"comment":"private final static PlatformLogger log = PlatformLogger.getLogger(\"java.awt.event.WaitDispatchSupport\");","field_name":"log","field_type":"sun.util.logging.PlatformLogger","full_declaration":"private final static sun.util.logging.PlatformLogger log = PlatformLogger.getLogger(\"java.awt.event.WaitDispatchSupport\")","id":3284},{"comment":"private EventDispatchThread dispatchThread;","field_name":"dispatchThread","field_type":"java.awt.EventDispatchThread","full_declaration":"private java.awt.EventDispatchThread dispatchThread","id":3285},{"comment":"private EventFilter filter;","field_name":"filter","field_type":"java.awt.EventFilter","full_declaration":"private java.awt.EventFilter filter","id":3286},{"comment":"private volatile Conditional extCondition;","field_name":"extCondition","field_type":"java.awt.Conditional","full_declaration":"private volatile java.awt.Conditional extCondition","id":3287},{"comment":"private volatile Conditional condition;","field_name":"condition","field_type":"java.awt.Conditional","full_declaration":"private volatile java.awt.Conditional condition","id":3288},{"comment":"","field_name":"interval","field_type":"long","full_declaration":"private long interval","id":3289},{"comment":"// Use a shared daemon timer to serve all the WaitDispatchSupports\r\nprivate static Timer timer;","field_name":"timer","field_type":"java.util.Timer","full_declaration":"private static java.util.Timer timer","id":3290},{"comment":"// When this WDS expires, we cancel the timer task leaving the\r\n// shared timer up and running\r\nprivate TimerTask timerTask;","field_name":"timerTask","field_type":"java.util.TimerTask","full_declaration":"private java.util.TimerTask timerTask","id":3291},{"comment":"private AtomicBoolean keepBlockingEDT = new AtomicBoolean(false);","field_name":"keepBlockingEDT","field_type":"java.util.concurrent.atomic.AtomicBoolean","full_declaration":"private java.util.concurrent.atomic.AtomicBoolean keepBlockingEDT = new AtomicBoolean(false)","id":3292},{"comment":"private AtomicBoolean keepBlockingCT = new AtomicBoolean(false);","field_name":"keepBlockingCT","field_type":"java.util.concurrent.atomic.AtomicBoolean","full_declaration":"private java.util.concurrent.atomic.AtomicBoolean keepBlockingCT = new AtomicBoolean(false)","id":3293},{"comment":"private AtomicBoolean afterExit = new AtomicBoolean(false);","field_name":"afterExit","field_type":"java.util.concurrent.atomic.AtomicBoolean","full_declaration":"private java.util.concurrent.atomic.AtomicBoolean afterExit = new AtomicBoolean(false)","id":3294},{"comment":"private final Runnable wakingRunnable = new Runnable() {\r\n\r\n    public void run() {\r\n        log.fine(\"Wake up EDT\");\r\n        synchronized (getTreeLock()) {\r\n            keepBlockingCT.set(false);\r\n            getTreeLock().notifyAll();\r\n        }\r\n        log.fine(\"Wake up EDT done\");\r\n    }\r\n};","field_name":"wakingRunnable","field_type":"java.lang.Runnable","full_declaration":"private final java.lang.Runnable wakingRunnable = new Runnable() {\r\n\r\n    public void run() {\r\n        log.fine(\"Wake up EDT\");\r\n        synchronized (getTreeLock()) {\r\n            keepBlockingCT.set(false);\r\n            getTreeLock().notifyAll();\r\n        }\r\n        log.fine(\"Wake up EDT done\");\r\n    }\r\n}","id":3295},{"comment":"/**\r\n * This represents the warning message that is\r\n * to be displayed in a non secure window. ie :\r\n * a window that has a security manager installed that denies\r\n * {@code AWTPermission(\"showWindowWithoutWarningBanner\")}.\r\n * This message can be displayed anywhere in the window.\r\n *\r\n * @serial\r\n * @see #getWarningString\r\n */\r\nString warningString;","field_name":"warningString","field_type":"java.lang.String","full_declaration":"java.lang.String warningString","id":3296},{"comment":"/**\r\n * {@code icons} is the graphical way we can\r\n * represent the frames and dialogs.\r\n * {@code Window} can't display icon but it's\r\n * being inherited by owned {@code Dialog}s.\r\n *\r\n * @serial\r\n * @see #getIconImages\r\n * @see #setIconImages\r\n */\r\ntransient java.util.List<Image> icons;","field_name":"icons","field_type":"java.util.List","full_declaration":"transient java.util.List icons","id":3297},{"comment":"/**\r\n * Holds the reference to the component which last had focus in this window\r\n * before it lost focus.\r\n */\r\nprivate transient Component temporaryLostComponent;","field_name":"temporaryLostComponent","field_type":"java.awt.Component","full_declaration":"private transient java.awt.Component temporaryLostComponent","id":3298},{"comment":"","field_name":"systemSyncLWRequests","field_type":"boolean","full_declaration":"static boolean systemSyncLWRequests = false","id":3299},{"comment":"","field_name":"syncLWRequests","field_type":"boolean","full_declaration":"boolean syncLWRequests = false","id":3300},{"comment":"","field_name":"beforeFirstShow","field_type":"boolean","full_declaration":"transient boolean beforeFirstShow = true","id":3301},{"comment":"","field_name":"disposing","field_type":"boolean","full_declaration":"private transient boolean disposing = false","id":3302},{"comment":"transient WindowDisposerRecord disposerRecord = null;","field_name":"disposerRecord","field_type":"java.awt.Window.WindowDisposerRecord","full_declaration":"transient java.awt.Window.WindowDisposerRecord disposerRecord = null","id":3303},{"comment":"","field_name":"OPENED","field_type":"int","full_declaration":"static final int OPENED = 0x01","id":3304},{"comment":"/**\r\n * An Integer value representing the Window State.\r\n *\r\n * @serial\r\n * @since 1.2\r\n * @see #show\r\n */\r\n","field_name":"state","field_type":"int","full_declaration":"int state","id":3305},{"comment":"/**\r\n * A boolean value representing Window always-on-top state\r\n * @since 1.5\r\n * @serial\r\n * @see #setAlwaysOnTop\r\n * @see #isAlwaysOnTop\r\n */\r\n","field_name":"alwaysOnTop","field_type":"boolean","full_declaration":"private boolean alwaysOnTop","id":3306},{"comment":"/**\r\n * Contains all the windows that have a peer object associated,\r\n * i. e. between addNotify() and removeNotify() calls. The list\r\n * of all Window instances can be obtained from AppContext object.\r\n *\r\n * @since 1.6\r\n */\r\nprivate static final IdentityArrayList<Window> allWindows = new IdentityArrayList<Window>();","field_name":"allWindows","field_type":"sun.awt.util.IdentityArrayList","full_declaration":"private static final sun.awt.util.IdentityArrayList allWindows = new IdentityArrayList<Window>()","id":3307},{"comment":"/**\r\n * A vector containing all the windows this\r\n * window currently owns.\r\n * @since 1.2\r\n * @see #getOwnedWindows\r\n */\r\ntransient Vector<WeakReference<Window>> ownedWindowList = new Vector<WeakReference<Window>>();","field_name":"ownedWindowList","field_type":"java.util.Vector","full_declaration":"transient java.util.Vector ownedWindowList = new Vector<WeakReference<Window>>()","id":3308},{"comment":"/*\r\n     * We insert a weak reference into the Vector of all Windows in AppContext\r\n     * instead of 'this' so that garbage collection can still take place\r\n     * correctly.\r\n     */\r\nprivate transient WeakReference<Window> weakThis;","field_name":"weakThis","field_type":"java.lang.ref.WeakReference","full_declaration":"private transient java.lang.ref.WeakReference weakThis","id":3309},{"comment":"","field_name":"showWithParent","field_type":"boolean","full_declaration":"transient boolean showWithParent","id":3310},{"comment":"/**\r\n * Contains the modal dialog that blocks this window, or null\r\n * if the window is unblocked.\r\n *\r\n * @since 1.6\r\n */\r\ntransient Dialog modalBlocker;","field_name":"modalBlocker","field_type":"java.awt.Dialog","full_declaration":"transient java.awt.Dialog modalBlocker","id":3311},{"comment":"/**\r\n * @serial\r\n *\r\n * @see java.awt.Dialog.ModalExclusionType\r\n * @see #getModalExclusionType\r\n * @see #setModalExclusionType\r\n *\r\n * @since 1.6\r\n */\r\nDialog.ModalExclusionType modalExclusionType;","field_name":"modalExclusionType","field_type":"java.awt.Dialog.ModalExclusionType","full_declaration":"java.awt.Dialog.ModalExclusionType modalExclusionType","id":3312},{"comment":"transient WindowListener windowListener;","field_name":"windowListener","field_type":"java.awt.event.WindowListener","full_declaration":"transient java.awt.event.WindowListener windowListener","id":3313},{"comment":"transient WindowStateListener windowStateListener;","field_name":"windowStateListener","field_type":"java.awt.event.WindowStateListener","full_declaration":"transient java.awt.event.WindowStateListener windowStateListener","id":3314},{"comment":"transient WindowFocusListener windowFocusListener;","field_name":"windowFocusListener","field_type":"java.awt.event.WindowFocusListener","full_declaration":"transient java.awt.event.WindowFocusListener windowFocusListener","id":3315},{"comment":"transient InputContext inputContext;","field_name":"inputContext","field_type":"java.awt.im.InputContext","full_declaration":"transient java.awt.im.InputContext inputContext","id":3316},{"comment":"private transient Object inputContextLock = new Object();","field_name":"inputContextLock","field_type":"java.lang.Object","full_declaration":"private transient java.lang.Object inputContextLock = new Object()","id":3317},{"comment":"/**\r\n * Unused. Maintained for serialization backward-compatibility.\r\n *\r\n * @serial\r\n * @since 1.2\r\n */\r\nprivate FocusManager focusMgr;","field_name":"focusMgr","field_type":"java.awt.FocusManager","full_declaration":"private java.awt.FocusManager focusMgr","id":3318},{"comment":"/**\r\n * Indicates whether this Window can become the focused Window.\r\n *\r\n * @serial\r\n * @see #getFocusableWindowState\r\n * @see #setFocusableWindowState\r\n * @since 1.4\r\n */\r\n","field_name":"focusableWindowState","field_type":"boolean","full_declaration":"private boolean focusableWindowState = true","id":3319},{"comment":"/**\r\n * Indicates whether this window should receive focus on\r\n * subsequently being shown (with a call to {@code setVisible(true)}), or\r\n * being moved to the front (with a call to {@code toFront()}).\r\n *\r\n * @serial\r\n * @see #setAutoRequestFocus\r\n * @see #isAutoRequestFocus\r\n * @since 1.7\r\n */\r\n","field_name":"autoRequestFocus","field_type":"boolean","full_declaration":"private volatile boolean autoRequestFocus = true","id":3320},{"comment":"/*\r\n     * Indicates that this window is being shown. This flag is set to true at\r\n     * the beginning of show() and to false at the end of show().\r\n     *\r\n     * @see #show()\r\n     * @see Dialog#shouldBlock\r\n     */\r\n","field_name":"isInShow","field_type":"boolean","full_declaration":"transient boolean isInShow = false","id":3321},{"comment":"/**\r\n * The opacity level of the window\r\n *\r\n * @serial\r\n * @see #setOpacity(float)\r\n * @see #getOpacity()\r\n * @since 1.7\r\n */\r\n","field_name":"opacity","field_type":"float","full_declaration":"private volatile float opacity = 1.0f","id":3322},{"comment":"/**\r\n * The shape assigned to this window. This field is set to {@code null} if\r\n * no shape is set (rectangular window).\r\n *\r\n * @serial\r\n * @see #getShape()\r\n * @see #setShape(Shape)\r\n * @since 1.7\r\n */\r\nprivate Shape shape = null;","field_name":"shape","field_type":"java.awt.Shape","full_declaration":"private java.awt.Shape shape = null","id":3323},{"comment":"private static final String base = \"win\";","field_name":"base","field_type":"java.lang.String","full_declaration":"private static final java.lang.String base = \"win\"","id":3324},{"comment":"","field_name":"nameCounter","field_type":"int","full_declaration":"private static int nameCounter = 0","id":3325},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 4497834738069338734L","id":3326},{"comment":"private static final PlatformLogger log = PlatformLogger.getLogger(\"java.awt.Window\");","field_name":"log","field_type":"sun.util.logging.PlatformLogger","full_declaration":"private static final sun.util.logging.PlatformLogger log = PlatformLogger.getLogger(\"java.awt.Window\")","id":3327},{"comment":"","field_name":"locationByPlatformProp","field_type":"boolean","full_declaration":"private static final boolean locationByPlatformProp","id":3328},{"comment":"","field_name":"isTrayIconWindow","field_type":"boolean","full_declaration":"transient boolean isTrayIconWindow = false","id":3329},{"comment":"/**\r\n * These fields are initialized in the native peer code\r\n * or via AWTAccessor's WindowAccessor.\r\n */\r\n","field_name":"securityWarningWidth","field_type":"int","full_declaration":"private transient volatile int securityWarningWidth = 0","id":3330},{"comment":"","field_name":"securityWarningHeight","field_type":"int","full_declaration":"private transient volatile int securityWarningHeight = 0","id":3331},{"comment":"/**\r\n * These fields represent the desired location for the security\r\n * warning if this window is untrusted.\r\n * See com.sun.awt.SecurityWarning for more details.\r\n */\r\n","field_name":"securityWarningPointX","field_type":"double","full_declaration":"private transient double securityWarningPointX = 2.0","id":3332},{"comment":"","field_name":"securityWarningPointY","field_type":"double","full_declaration":"private transient double securityWarningPointY = 0.0","id":3333},{"comment":"","field_name":"securityWarningAlignmentX","field_type":"float","full_declaration":"private transient float securityWarningAlignmentX = RIGHT_ALIGNMENT","id":3334},{"comment":"","field_name":"securityWarningAlignmentY","field_type":"float","full_declaration":"private transient float securityWarningAlignmentY = TOP_ALIGNMENT","id":3335},{"comment":"transient Object anchor = new Object();","field_name":"anchor","field_type":"java.lang.Object","full_declaration":"transient java.lang.Object anchor = new Object()","id":3336},{"comment":"static private final AtomicBoolean beforeFirstWindowShown = new AtomicBoolean(true);","field_name":"beforeFirstWindowShown","field_type":"java.util.concurrent.atomic.AtomicBoolean","full_declaration":"static private final java.util.concurrent.atomic.AtomicBoolean beforeFirstWindowShown = new AtomicBoolean(true)","id":3337},{"comment":"/**\r\n * Window type.\r\n *\r\n * Synchronization: ObjectLock\r\n */\r\nprivate Type type = Type.NORMAL;","field_name":"type","field_type":"java.awt.Window.Type","full_declaration":"private java.awt.Window.Type type = Type.NORMAL","id":3338},{"comment":"/**\r\n * The window serialized data version.\r\n *\r\n * @serial\r\n */\r\n","field_name":"windowSerializedDataVersion","field_type":"int","full_declaration":"private int windowSerializedDataVersion = 2","id":3339},{"comment":"","field_name":"locationByPlatform","field_type":"boolean","full_declaration":"private volatile boolean locationByPlatform = locationByPlatformProp","id":3340},{"comment":"WeakReference<Window> owner;","field_name":"owner","field_type":"java.lang.ref.WeakReference","full_declaration":"java.lang.ref.WeakReference owner","id":3341},{"comment":"final WeakReference<Window> weakThis;","field_name":"weakThis","field_type":"java.lang.ref.WeakReference","full_declaration":"final java.lang.ref.WeakReference weakThis","id":3342},{"comment":"final WeakReference<AppContext> context;","field_name":"context","field_type":"java.lang.ref.WeakReference","full_declaration":"final java.lang.ref.WeakReference context","id":3343},{"comment":"/*\r\n         * JDK 1.3 serialVersionUID\r\n         */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 4215068635060671780L","id":3344},{"comment":"Container focusRoot;","field_name":"focusRoot","field_type":"java.awt.Container","full_declaration":"java.awt.Container focusRoot","id":3345},{"comment":"Component focusOwner;","field_name":"focusOwner","field_type":"java.awt.Component","full_declaration":"java.awt.Component focusOwner","id":3346},{"comment":"/*\r\n     * JDK 1.1 serialVersionUID\r\n     */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"static final long serialVersionUID = 2491878825643557906L","id":3347},{"comment":"/**\r\n * This global lock is used by both <code>BeanContext</code>\r\n * and <code>BeanContextServices</code> implementors\r\n * to serialize changes in a <code>BeanContext</code>\r\n * hierarchy and any service requests etc.\r\n */\r\npublic static final Object globalHierarchyLock = new Object();","field_name":"globalHierarchyLock","field_type":"java.lang.Object","full_declaration":"public static final java.lang.Object globalHierarchyLock = new Object()","id":3348},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"static final long serialVersionUID = 6328947014421475877L","id":3349},{"comment":"/*\r\n     * fields\r\n     */\r\n/**\r\n * The <code>BeanContext</code> in which\r\n * this <code>BeanContextChild</code> is nested.\r\n */\r\npublic BeanContextChild beanContextChildPeer;","field_name":"beanContextChildPeer","field_type":"java.beans.beancontext.BeanContextChild","full_declaration":"public java.beans.beancontext.BeanContextChild beanContextChildPeer","id":3350},{"comment":"/**\r\n * The <tt>PropertyChangeSupport</tt> associated with this\r\n * <tt>BeanContextChildSupport</tt>.\r\n */\r\nprotected PropertyChangeSupport pcSupport;","field_name":"pcSupport","field_type":"java.beans.PropertyChangeSupport","full_declaration":"protected java.beans.PropertyChangeSupport pcSupport","id":3351},{"comment":"/**\r\n * The <tt>VetoableChangeSupport</tt> associated with this\r\n * <tt>BeanContextChildSupport</tt>.\r\n */\r\nprotected VetoableChangeSupport vcSupport;","field_name":"vcSupport","field_type":"java.beans.VetoableChangeSupport","full_declaration":"protected java.beans.VetoableChangeSupport vcSupport","id":3352},{"comment":"/**\r\n * The bean context.\r\n */\r\nprotected transient BeanContext beanContext;","field_name":"beanContext","field_type":"java.beans.beancontext.BeanContext","full_declaration":"protected transient java.beans.beancontext.BeanContext beanContext","id":3353},{"comment":"/**\r\n * A flag indicating that there has been\r\n * at least one <code>PropertyChangeVetoException</code>\r\n * thrown for the attempted setBeanContext operation.\r\n */\r\n","field_name":"rejectedSetBCOnce","field_type":"boolean","full_declaration":"protected transient boolean rejectedSetBCOnce","id":3354},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 7267998073569045052L","id":3355},{"comment":"/*\r\n     * fields\r\n     */\r\n/**\r\n * The <code>BeanContext</code> from which this event was propagated\r\n */\r\nprotected BeanContext propagatedFrom;","field_name":"propagatedFrom","field_type":"java.beans.beancontext.BeanContext","full_declaration":"protected java.beans.beancontext.BeanContext propagatedFrom","id":3356},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 3499346510334590959L","id":3357},{"comment":"/*\r\n     * fields\r\n     */\r\n/**\r\n * The list of children affected by this\r\n * event notification.\r\n */\r\n@SuppressWarnings(\"rawtypes\")\r\nprotected Collection children;","field_name":"children","field_type":"java.util.Collection","full_declaration":"protected java.util.Collection children","id":3358},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -5333985775656400778L","id":3359},{"comment":"/*\r\n     * fields\r\n     */\r\n/**\r\n * A <code>Class</code> reference to the newly available service\r\n */\r\nprotected Class serviceClass;","field_name":"serviceClass","field_type":"java.lang.Class","full_declaration":"protected java.lang.Class serviceClass","id":3360},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -1295543154724961754L","id":3361},{"comment":"/**\r\n * fields\r\n */\r\n/**\r\n * A <code>Class</code> reference to the service that is being revoked.\r\n */\r\nprotected Class serviceClass;","field_name":"serviceClass","field_type":"java.lang.Class","full_declaration":"protected java.lang.Class serviceClass","id":3362},{"comment":"","field_name":"invalidateRefs","field_type":"boolean","full_declaration":"private boolean invalidateRefs","id":3363},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -8494482757288719206L","id":3364},{"comment":"/*\r\n     * fields\r\n     */\r\n/**\r\n * all accesses to the <code> protected transient HashMap services </code>\r\n * field should be synchronized on that object\r\n */\r\nprotected transient HashMap services;","field_name":"services","field_type":"java.util.HashMap","full_declaration":"protected transient java.util.HashMap services","id":3365},{"comment":"/**\r\n * The number of instances of a serializable <tt>BeanContextServceProvider</tt>.\r\n */\r\n","field_name":"serializable","field_type":"int","full_declaration":"protected transient int serializable = 0","id":3366},{"comment":"/**\r\n * Delegate for the <tt>BeanContextServiceProvider</tt>.\r\n */\r\nprotected transient BCSSProxyServiceProvider proxy;","field_name":"proxy","field_type":"java.beans.beancontext.BeanContextServicesSupport.BCSSProxyServiceProvider","full_declaration":"protected transient java.beans.beancontext.BeanContextServicesSupport.BCSSProxyServiceProvider proxy","id":3367},{"comment":"/**\r\n * List of <tt>BeanContextServicesListener</tt> objects.\r\n */\r\nprotected transient ArrayList bcsListeners;","field_name":"bcsListeners","field_type":"java.util.ArrayList","full_declaration":"protected transient java.util.ArrayList bcsListeners","id":3368},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -3263851306889194873L","id":3369},{"comment":"/*\r\n         * fields\r\n         */\r\nprivate transient HashMap serviceClasses;","field_name":"serviceClasses","field_type":"java.util.HashMap","full_declaration":"private transient java.util.HashMap serviceClasses","id":3370},{"comment":"private transient HashMap serviceRequestors;","field_name":"serviceRequestors","field_type":"java.util.HashMap","full_declaration":"private transient java.util.HashMap serviceRequestors","id":3371},{"comment":"/*\r\n             * fields\r\n             */\r\nClass serviceClass;","field_name":"serviceClass","field_type":"java.lang.Class","full_declaration":"java.lang.Class serviceClass","id":3372},{"comment":"BeanContextServiceProvider serviceProvider;","field_name":"serviceProvider","field_type":"java.beans.beancontext.BeanContextServiceProvider","full_declaration":"java.beans.beancontext.BeanContextServiceProvider serviceProvider","id":3373},{"comment":"","field_name":"serviceRefs","field_type":"int","full_declaration":"int serviceRefs","id":3374},{"comment":"// proxy\r\nBeanContextServiceProvider delegateProvider;","field_name":"delegateProvider","field_type":"java.beans.beancontext.BeanContextServiceProvider","full_declaration":"java.beans.beancontext.BeanContextServiceProvider delegateProvider","id":3375},{"comment":"","field_name":"delegateRefs","field_type":"int","full_declaration":"int delegateRefs","id":3376},{"comment":"HashMap requestors = new HashMap(1);","field_name":"requestors","field_type":"java.util.HashMap","full_declaration":"java.util.HashMap requestors = new HashMap(1)","id":3377},{"comment":"/*\r\n             * fields\r\n             */\r\nBCSSCServiceClassRef serviceClassRef;","field_name":"serviceClassRef","field_type":"java.beans.beancontext.BeanContextServicesSupport.BCSSChild.BCSSCServiceClassRef","full_declaration":"java.beans.beancontext.BeanContextServicesSupport.BCSSChild.BCSSCServiceClassRef serviceClassRef","id":3378},{"comment":"","field_name":"refCnt","field_type":"int","full_declaration":"int refCnt = 1","id":3379},{"comment":"","field_name":"delegated","field_type":"boolean","full_declaration":"boolean delegated = false","id":3380},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 861278251667444782L","id":3381},{"comment":"/**\r\n * The service provider.\r\n */\r\nprotected BeanContextServiceProvider serviceProvider;","field_name":"serviceProvider","field_type":"java.beans.beancontext.BeanContextServiceProvider","full_declaration":"protected java.beans.beancontext.BeanContextServiceProvider serviceProvider","id":3382},{"comment":"/*\r\n         * fields\r\n         */\r\nprivate BeanContextServices nestingCtxt;","field_name":"nestingCtxt","field_type":"java.beans.beancontext.BeanContextServices","full_declaration":"private java.beans.beancontext.BeanContextServices nestingCtxt","id":3383},{"comment":"// Fix for bug 4282900 to pass JCK regression test\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"static final long serialVersionUID = -4879613978649577204L","id":3384},{"comment":"/*\r\n     * fields\r\n     */\r\n/**\r\n * all accesses to the <code> protected HashMap children </code> field\r\n * shall be synchronized on that object.\r\n */\r\nprotected transient HashMap children;","field_name":"children","field_type":"java.util.HashMap","full_declaration":"protected transient java.util.HashMap children","id":3385},{"comment":"// children serializable\r\n","field_name":"serializable","field_type":"int","full_declaration":"private int serializable = 0","id":3386},{"comment":"/**\r\n * all accesses to the <code> protected ArrayList bcmListeners </code> field\r\n * shall be synchronized on that object.\r\n */\r\nprotected transient ArrayList bcmListeners;","field_name":"bcmListeners","field_type":"java.util.ArrayList","full_declaration":"protected transient java.util.ArrayList bcmListeners","id":3387},{"comment":"// \r\n/**\r\n * The current locale of this BeanContext.\r\n */\r\nprotected Locale locale;","field_name":"locale","field_type":"java.util.Locale","full_declaration":"protected java.util.Locale locale","id":3388},{"comment":"/**\r\n * A <tt>boolean</tt> indicating if this\r\n * instance may now render a GUI.\r\n */\r\n","field_name":"okToUseGui","field_type":"boolean","full_declaration":"protected boolean okToUseGui","id":3389},{"comment":"/**\r\n * A <tt>boolean</tt> indicating whether or not\r\n * this object is currently in design time mode.\r\n */\r\n","field_name":"designTime","field_type":"boolean","full_declaration":"protected boolean designTime","id":3390},{"comment":"/*\r\n     * transient\r\n     */\r\nprivate transient PropertyChangeListener childPCL;","field_name":"childPCL","field_type":"java.beans.PropertyChangeListener","full_declaration":"private transient java.beans.PropertyChangeListener childPCL","id":3391},{"comment":"private transient VetoableChangeListener childVCL;","field_name":"childVCL","field_type":"java.beans.VetoableChangeListener","full_declaration":"private transient java.beans.VetoableChangeListener childVCL","id":3392},{"comment":"","field_name":"serializing","field_type":"boolean","full_declaration":"private transient boolean serializing","id":3393},{"comment":"private Iterator src;","field_name":"src","field_type":"java.util.Iterator","full_declaration":"private java.util.Iterator src","id":3394},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -5815286101609939109L","id":3395},{"comment":"/*\r\n         * fields\r\n         */\r\nprivate Object child;","field_name":"child","field_type":"java.lang.Object","full_declaration":"private java.lang.Object child","id":3396},{"comment":"private Object proxyPeer;","field_name":"proxyPeer","field_type":"java.lang.Object","full_declaration":"private java.lang.Object proxyPeer","id":3397},{"comment":"","field_name":"removePending","field_type":"boolean","full_declaration":"private transient boolean removePending","id":3398},{"comment":"private Reference<? extends Class<?>> beanClassRef;","field_name":"beanClassRef","field_type":"java.lang.ref.Reference","full_declaration":"private java.lang.ref.Reference beanClassRef","id":3399},{"comment":"private Reference<? extends Class<?>> customizerClassRef;","field_name":"customizerClassRef","field_type":"java.lang.ref.Reference","full_declaration":"private java.lang.ref.Reference customizerClassRef","id":3400},{"comment":"/**\r\n * Constant to indicate a 16 x 16 color icon.\r\n */\r\n","field_name":"ICON_COLOR_16x16","field_type":"int","full_declaration":"final static int ICON_COLOR_16x16 = 1","id":3401},{"comment":"/**\r\n * Constant to indicate a 32 x 32 color icon.\r\n */\r\n","field_name":"ICON_COLOR_32x32","field_type":"int","full_declaration":"final static int ICON_COLOR_32x32 = 2","id":3402},{"comment":"/**\r\n * Constant to indicate a 16 x 16 monochrome icon.\r\n */\r\n","field_name":"ICON_MONO_16x16","field_type":"int","full_declaration":"final static int ICON_MONO_16x16 = 3","id":3403},{"comment":"/**\r\n * Constant to indicate a 32 x 32 monochrome icon.\r\n */\r\n","field_name":"ICON_MONO_32x32","field_type":"int","full_declaration":"final static int ICON_MONO_32x32 = 4","id":3404},{"comment":"private ClassLoader loader;","field_name":"loader","field_type":"java.lang.ClassLoader","full_declaration":"private java.lang.ClassLoader loader","id":3405},{"comment":"Applet target;","field_name":"target","field_type":"java.applet.Applet","full_declaration":"java.applet.Applet target","id":3406},{"comment":"Hashtable<URL, Object> imageCache = new Hashtable<>();","field_name":"imageCache","field_type":"java.util.Hashtable","full_declaration":"java.util.Hashtable imageCache = new Hashtable<>()","id":3407},{"comment":"","field_name":"active","field_type":"boolean","full_declaration":"transient boolean active","id":3408},{"comment":"transient Applet target;","field_name":"target","field_type":"java.applet.Applet","full_declaration":"transient java.applet.Applet target","id":3409},{"comment":"transient AppletContext context;","field_name":"context","field_type":"java.applet.AppletContext","full_declaration":"transient java.applet.AppletContext context","id":3410},{"comment":"transient URL codeBase;","field_name":"codeBase","field_type":"java.net.URL","full_declaration":"transient java.net.URL codeBase","id":3411},{"comment":"transient URL docBase;","field_name":"docBase","field_type":"java.net.URL","full_declaration":"transient java.net.URL docBase","id":3412},{"comment":"private Map<String, L[]> map;","field_name":"map","field_type":"java.util.Map","full_declaration":"private java.util.Map map","id":3413},{"comment":"","field_name":"EMPTY","field_type":"String[]","full_declaration":"private static final String[] EMPTY = {}","id":3414},{"comment":"","field_name":"constructor","field_type":"String[]","full_declaration":"private final String[] constructor","id":3415},{"comment":"private Boolean definesEquals;","field_name":"definesEquals","field_type":"java.lang.Boolean","full_declaration":"private java.lang.Boolean definesEquals","id":3416},{"comment":"/**\r\n * The standard value of the propertyName as fired from a BeanContext or\r\n * other source of PropertyChangeEvents.\r\n */\r\nstatic String PROPERTYNAME = \"designTime\";","field_name":"PROPERTYNAME","field_type":"java.lang.String","full_declaration":"static java.lang.String PROPERTYNAME = \"designTime\"","id":3417},{"comment":"private final PersistenceDelegateFinder finder = new PersistenceDelegateFinder();","field_name":"finder","field_type":"com.sun.beans.finder.PersistenceDelegateFinder","full_declaration":"private final com.sun.beans.finder.PersistenceDelegateFinder finder = new PersistenceDelegateFinder()","id":3418},{"comment":"private Map<Object, Expression> bindings = new IdentityHashMap<>();","field_name":"bindings","field_type":"java.util.Map","full_declaration":"private java.util.Map bindings = new IdentityHashMap<>()","id":3419},{"comment":"private ExceptionListener exceptionListener;","field_name":"exceptionListener","field_type":"java.beans.ExceptionListener","full_declaration":"private java.beans.ExceptionListener exceptionListener","id":3420},{"comment":"","field_name":"executeStatements","field_type":"boolean","full_declaration":"boolean executeStatements = true","id":3421},{"comment":"private Map<Object, Object> attributes;","field_name":"attributes","field_type":"java.util.Map","full_declaration":"private java.util.Map attributes","id":3422},{"comment":"private Object target;","field_name":"target","field_type":"java.lang.Object","full_declaration":"private java.lang.Object target","id":3423},{"comment":"private String action;","field_name":"action","field_type":"java.lang.String","full_declaration":"private java.lang.String action","id":3424},{"comment":"private final String eventPropertyName;","field_name":"eventPropertyName","field_type":"java.lang.String","full_declaration":"private final java.lang.String eventPropertyName","id":3425},{"comment":"private final String listenerMethodName;","field_name":"listenerMethodName","field_type":"java.lang.String","full_declaration":"private final java.lang.String listenerMethodName","id":3426},{"comment":"private final AccessControlContext acc = AccessController.getContext();","field_name":"acc","field_type":"java.security.AccessControlContext","full_declaration":"private final java.security.AccessControlContext acc = AccessController.getContext()","id":3427},{"comment":"","field_name":"listenerMethodDescriptors","field_type":"MethodDescriptor[]","full_declaration":"private MethodDescriptor[] listenerMethodDescriptors","id":3428},{"comment":"private MethodDescriptor addMethodDescriptor;","field_name":"addMethodDescriptor","field_type":"java.beans.MethodDescriptor","full_declaration":"private java.beans.MethodDescriptor addMethodDescriptor","id":3429},{"comment":"private MethodDescriptor removeMethodDescriptor;","field_name":"removeMethodDescriptor","field_type":"java.beans.MethodDescriptor","full_declaration":"private java.beans.MethodDescriptor removeMethodDescriptor","id":3430},{"comment":"private MethodDescriptor getMethodDescriptor;","field_name":"getMethodDescriptor","field_type":"java.beans.MethodDescriptor","full_declaration":"private java.beans.MethodDescriptor getMethodDescriptor","id":3431},{"comment":"private Reference<Method[]> listenerMethodsRef;","field_name":"listenerMethodsRef","field_type":"java.lang.ref.Reference","full_declaration":"private java.lang.ref.Reference listenerMethodsRef","id":3432},{"comment":"private Reference<? extends Class<?>> listenerTypeRef;","field_name":"listenerTypeRef","field_type":"java.lang.ref.Reference","full_declaration":"private java.lang.ref.Reference listenerTypeRef","id":3433},{"comment":"","field_name":"unicast","field_type":"boolean","full_declaration":"private boolean unicast","id":3434},{"comment":"","field_name":"inDefaultEventSet","field_type":"boolean","full_declaration":"private boolean inDefaultEventSet = true","id":3435},{"comment":"private static Object unbound = new Object();","field_name":"unbound","field_type":"java.lang.Object","full_declaration":"private static java.lang.Object unbound = new Object()","id":3436},{"comment":"private Object value = unbound;","field_name":"value","field_type":"java.lang.Object","full_declaration":"private java.lang.Object value = unbound","id":3437},{"comment":"private static final String TRANSIENT = \"transient\";","field_name":"TRANSIENT","field_type":"java.lang.String","full_declaration":"private static final java.lang.String TRANSIENT = \"transient\"","id":3438},{"comment":"private Reference<? extends Class<?>> classRef;","field_name":"classRef","field_type":"java.lang.ref.Reference","full_declaration":"private java.lang.ref.Reference classRef","id":3439},{"comment":"","field_name":"expert","field_type":"boolean","full_declaration":"private boolean expert","id":3440},{"comment":"","field_name":"hidden","field_type":"boolean","full_declaration":"private boolean hidden","id":3441},{"comment":"","field_name":"preferred","field_type":"boolean","full_declaration":"private boolean preferred","id":3442},{"comment":"private String shortDescription;","field_name":"shortDescription","field_type":"java.lang.String","full_declaration":"private java.lang.String shortDescription","id":3443},{"comment":"private String name;","field_name":"name","field_type":"java.lang.String","full_declaration":"private java.lang.String name","id":3444},{"comment":"private String displayName;","field_name":"displayName","field_type":"java.lang.String","full_declaration":"private java.lang.String displayName","id":3445},{"comment":"private Hashtable<String, Object> table;","field_name":"table","field_type":"java.util.Hashtable","full_declaration":"private java.util.Hashtable table","id":3446},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -320227448495806870L","id":3447},{"comment":"","field_name":"index","field_type":"int","full_declaration":"private int index","id":3448},{"comment":"private Reference<? extends Class<?>> indexedPropertyTypeRef;","field_name":"indexedPropertyTypeRef","field_type":"java.lang.ref.Reference","full_declaration":"private java.lang.ref.Reference indexedPropertyTypeRef","id":3449},{"comment":"private final MethodRef indexedReadMethodRef = new MethodRef();","field_name":"indexedReadMethodRef","field_type":"java.beans.MethodRef","full_declaration":"private final java.beans.MethodRef indexedReadMethodRef = new MethodRef()","id":3450},{"comment":"private final MethodRef indexedWriteMethodRef = new MethodRef();","field_name":"indexedWriteMethodRef","field_type":"java.beans.MethodRef","full_declaration":"private final java.beans.MethodRef indexedWriteMethodRef = new MethodRef()","id":3451},{"comment":"private String indexedReadMethodName;","field_name":"indexedReadMethodName","field_type":"java.lang.String","full_declaration":"private java.lang.String indexedReadMethodName","id":3452},{"comment":"private String indexedWriteMethodName;","field_name":"indexedWriteMethodName","field_type":"java.lang.String","full_declaration":"private java.lang.String indexedWriteMethodName","id":3453},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -3728150539969542619L","id":3454},{"comment":"// Flags that can be used to control getBeanInfo:\r\n/**\r\n * Flag to indicate to use of all beaninfo.\r\n */\r\n","field_name":"USE_ALL_BEANINFO","field_type":"int","full_declaration":"public final static int USE_ALL_BEANINFO = 1","id":3455},{"comment":"/**\r\n * Flag to indicate to ignore immediate beaninfo.\r\n */\r\n","field_name":"IGNORE_IMMEDIATE_BEANINFO","field_type":"int","full_declaration":"public final static int IGNORE_IMMEDIATE_BEANINFO = 2","id":3456},{"comment":"/**\r\n * Flag to indicate to ignore all beaninfo.\r\n */\r\n","field_name":"IGNORE_ALL_BEANINFO","field_type":"int","full_declaration":"public final static int IGNORE_ALL_BEANINFO = 3","id":3457},{"comment":"// Static Caches to speed up introspection.\r\nprivate static final WeakCache<Class<?>, Method[]> declaredMethodCache = new WeakCache<>();","field_name":"declaredMethodCache","field_type":"com.sun.beans.WeakCache","full_declaration":"private static final com.sun.beans.WeakCache declaredMethodCache = new WeakCache<>()","id":3458},{"comment":"private Class<?> beanClass;","field_name":"beanClass","field_type":"java.lang.Class","full_declaration":"private java.lang.Class beanClass","id":3459},{"comment":"private BeanInfo explicitBeanInfo;","field_name":"explicitBeanInfo","field_type":"java.beans.BeanInfo","full_declaration":"private java.beans.BeanInfo explicitBeanInfo","id":3460},{"comment":"private BeanInfo superBeanInfo;","field_name":"superBeanInfo","field_type":"java.beans.BeanInfo","full_declaration":"private java.beans.BeanInfo superBeanInfo","id":3461},{"comment":"","field_name":"additionalBeanInfo","field_type":"BeanInfo[]","full_declaration":"private BeanInfo[] additionalBeanInfo","id":3462},{"comment":"","field_name":"propertyChangeSource","field_type":"boolean","full_declaration":"private boolean propertyChangeSource = false","id":3463},{"comment":"private static Class<EventListener> eventListenerType = EventListener.class;","field_name":"eventListenerType","field_type":"java.lang.Class","full_declaration":"private static java.lang.Class eventListenerType = EventListener.class","id":3464},{"comment":"// These should be removed.\r\nprivate String defaultEventName;","field_name":"defaultEventName","field_type":"java.lang.String","full_declaration":"private java.lang.String defaultEventName","id":3465},{"comment":"private String defaultPropertyName;","field_name":"defaultPropertyName","field_type":"java.lang.String","full_declaration":"private java.lang.String defaultPropertyName","id":3466},{"comment":"","field_name":"defaultEventIndex","field_type":"int","full_declaration":"private int defaultEventIndex = -1","id":3467},{"comment":"","field_name":"defaultPropertyIndex","field_type":"int","full_declaration":"private int defaultPropertyIndex = -1","id":3468},{"comment":"// Methods maps from Method names to MethodDescriptors\r\nprivate Map<String, MethodDescriptor> methods;","field_name":"methods","field_type":"java.util.Map","full_declaration":"private java.util.Map methods","id":3469},{"comment":"// properties maps from String names to PropertyDescriptors\r\nprivate Map<String, PropertyDescriptor> properties;","field_name":"properties","field_type":"java.util.Map","full_declaration":"private java.util.Map properties","id":3470},{"comment":"// events maps from String names to EventSetDescriptors\r\nprivate Map<String, EventSetDescriptor> events;","field_name":"events","field_type":"java.util.Map","full_declaration":"private java.util.Map events","id":3471},{"comment":"","field_name":"EMPTY_EVENTSETDESCRIPTORS","field_type":"EventSetDescriptor[]","full_declaration":"private final static EventSetDescriptor[] EMPTY_EVENTSETDESCRIPTORS = new EventSetDescriptor[0]","id":3472},{"comment":"static final String ADD_PREFIX = \"add\";","field_name":"ADD_PREFIX","field_type":"java.lang.String","full_declaration":"static final java.lang.String ADD_PREFIX = \"add\"","id":3473},{"comment":"static final String REMOVE_PREFIX = \"remove\";","field_name":"REMOVE_PREFIX","field_type":"java.lang.String","full_declaration":"static final java.lang.String REMOVE_PREFIX = \"remove\"","id":3474},{"comment":"static final String GET_PREFIX = \"get\";","field_name":"GET_PREFIX","field_type":"java.lang.String","full_declaration":"static final java.lang.String GET_PREFIX = \"get\"","id":3475},{"comment":"static final String SET_PREFIX = \"set\";","field_name":"SET_PREFIX","field_type":"java.lang.String","full_declaration":"static final java.lang.String SET_PREFIX = \"set\"","id":3476},{"comment":"static final String IS_PREFIX = \"is\";","field_name":"IS_PREFIX","field_type":"java.lang.String","full_declaration":"static final java.lang.String IS_PREFIX = \"is\"","id":3477},{"comment":"private HashMap<String, List<PropertyDescriptor>> pdStore = new HashMap<>();","field_name":"pdStore","field_type":"java.util.HashMap","full_declaration":"private java.util.HashMap pdStore = new HashMap<>()","id":3478},{"comment":"private BeanDescriptor beanDescriptor;","field_name":"beanDescriptor","field_type":"java.beans.BeanDescriptor","full_declaration":"private java.beans.BeanDescriptor beanDescriptor","id":3479},{"comment":"","field_name":"events","field_type":"EventSetDescriptor[]","full_declaration":"private EventSetDescriptor[] events","id":3480},{"comment":"","field_name":"defaultEvent","field_type":"int","full_declaration":"private int defaultEvent","id":3481},{"comment":"","field_name":"properties","field_type":"PropertyDescriptor[]","full_declaration":"private PropertyDescriptor[] properties","id":3482},{"comment":"","field_name":"defaultProperty","field_type":"int","full_declaration":"private int defaultProperty","id":3483},{"comment":"","field_name":"methods","field_type":"MethodDescriptor[]","full_declaration":"private MethodDescriptor[] methods","id":3484},{"comment":"private Reference<BeanInfo> targetBeanInfoRef;","field_name":"targetBeanInfoRef","field_type":"java.lang.ref.Reference","full_declaration":"private java.lang.ref.Reference targetBeanInfoRef","id":3485},{"comment":"private static final Map<String, Field> fields = Collections.synchronizedMap(new WeakHashMap<String, Field>());","field_name":"fields","field_type":"java.util.Map","full_declaration":"private static final java.util.Map fields = Collections.synchronizedMap(new WeakHashMap<String, Field>())","id":3486},{"comment":"private static Hashtable<String, PersistenceDelegate> internalPersistenceDelegates = new Hashtable<>();","field_name":"internalPersistenceDelegates","field_type":"java.util.Hashtable","full_declaration":"private static java.util.Hashtable internalPersistenceDelegates = new Hashtable<>()","id":3487},{"comment":"private static PersistenceDelegate nullPersistenceDelegate = new NullPersistenceDelegate();","field_name":"nullPersistenceDelegate","field_type":"java.beans.PersistenceDelegate","full_declaration":"private static java.beans.PersistenceDelegate nullPersistenceDelegate = new NullPersistenceDelegate()","id":3488},{"comment":"private static PersistenceDelegate enumPersistenceDelegate = new EnumPersistenceDelegate();","field_name":"enumPersistenceDelegate","field_type":"java.beans.PersistenceDelegate","full_declaration":"private static java.beans.PersistenceDelegate enumPersistenceDelegate = new EnumPersistenceDelegate()","id":3489},{"comment":"private static PersistenceDelegate primitivePersistenceDelegate = new PrimitivePersistenceDelegate();","field_name":"primitivePersistenceDelegate","field_type":"java.beans.PersistenceDelegate","full_declaration":"private static java.beans.PersistenceDelegate primitivePersistenceDelegate = new PrimitivePersistenceDelegate()","id":3490},{"comment":"private static PersistenceDelegate defaultPersistenceDelegate = new DefaultPersistenceDelegate();","field_name":"defaultPersistenceDelegate","field_type":"java.beans.PersistenceDelegate","full_declaration":"private static java.beans.PersistenceDelegate defaultPersistenceDelegate = new DefaultPersistenceDelegate()","id":3491},{"comment":"private static PersistenceDelegate arrayPersistenceDelegate;","field_name":"arrayPersistenceDelegate","field_type":"java.beans.PersistenceDelegate","full_declaration":"private static java.beans.PersistenceDelegate arrayPersistenceDelegate","id":3492},{"comment":"private static PersistenceDelegate proxyPersistenceDelegate;","field_name":"proxyPersistenceDelegate","field_type":"java.beans.PersistenceDelegate","full_declaration":"private static java.beans.PersistenceDelegate proxyPersistenceDelegate","id":3493},{"comment":"private static final Method getNanosMethod = getNanosMethod();","field_name":"getNanosMethod","field_type":"java.lang.reflect.Method","full_declaration":"private static final java.lang.reflect.Method getNanosMethod = getNanosMethod()","id":3494},{"comment":"","field_name":"CONSTRAINTS","field_type":"String[]","full_declaration":"private static final String[] CONSTRAINTS = { BorderLayout.NORTH, BorderLayout.SOUTH, BorderLayout.EAST, BorderLayout.WEST, BorderLayout.CENTER, BorderLayout.PAGE_START, BorderLayout.PAGE_END, BorderLayout.LINE_START, BorderLayout.LINE_END }","id":3495},{"comment":"private final MethodRef methodRef = new MethodRef();","field_name":"methodRef","field_type":"java.beans.MethodRef","full_declaration":"private final java.beans.MethodRef methodRef = new MethodRef()","id":3496},{"comment":"","field_name":"paramNames","field_type":"String[]","full_declaration":"private String[] paramNames","id":3497},{"comment":"private List<WeakReference<Class<?>>> params;","field_name":"params","field_type":"java.util.List","full_declaration":"private java.util.List params","id":3498},{"comment":"","field_name":"parameterDescriptors","field_type":"ParameterDescriptor[]","full_declaration":"private ParameterDescriptor[] parameterDescriptors","id":3499},{"comment":"private String signature;","field_name":"signature","field_type":"java.lang.String","full_declaration":"private java.lang.String signature","id":3500},{"comment":"private SoftReference<Method> methodRef;","field_name":"methodRef","field_type":"java.lang.ref.SoftReference","full_declaration":"private java.lang.ref.SoftReference methodRef","id":3501},{"comment":"private WeakReference<Class<?>> typeRef;","field_name":"typeRef","field_type":"java.lang.ref.WeakReference","full_declaration":"private java.lang.ref.WeakReference typeRef","id":3502},{"comment":"private Map<Object, String> valueToName;","field_name":"valueToName","field_type":"java.util.Map","full_declaration":"private java.util.Map valueToName","id":3503},{"comment":"private Map<String, Integer> nameToCount;","field_name":"nameToCount","field_type":"java.util.Map","full_declaration":"private java.util.Map nameToCount","id":3504},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 7042693688939648123L","id":3505},{"comment":"/**\r\n * name of the property that changed.  May be null, if not known.\r\n * @serial\r\n */\r\nprivate String propertyName;","field_name":"propertyName","field_type":"java.lang.String","full_declaration":"private java.lang.String propertyName","id":3506},{"comment":"/**\r\n * New value for property.  May be null if not known.\r\n * @serial\r\n */\r\nprivate Object newValue;","field_name":"newValue","field_type":"java.lang.Object","full_declaration":"private java.lang.Object newValue","id":3507},{"comment":"/**\r\n * Previous value for property.  May be null if not known.\r\n * @serial\r\n */\r\nprivate Object oldValue;","field_name":"oldValue","field_type":"java.lang.Object","full_declaration":"private java.lang.Object oldValue","id":3508},{"comment":"/**\r\n * Propagation ID.  May be null.\r\n * @serial\r\n * @see #getPropagationId\r\n */\r\nprivate Object propagationId;","field_name":"propagationId","field_type":"java.lang.Object","full_declaration":"private java.lang.Object propagationId","id":3509},{"comment":"private final String propertyName;","field_name":"propertyName","field_type":"java.lang.String","full_declaration":"private final java.lang.String propertyName","id":3510},{"comment":"private PropertyChangeListenerMap map = new PropertyChangeListenerMap();","field_name":"map","field_type":"java.beans.PropertyChangeSupport.PropertyChangeListenerMap","full_declaration":"private java.beans.PropertyChangeSupport.PropertyChangeListenerMap map = new PropertyChangeListenerMap()","id":3511},{"comment":"/**\r\n * The object to be provided as the \"source\" for any generated events.\r\n */\r\nprivate Object source;","field_name":"source","field_type":"java.lang.Object","full_declaration":"private java.lang.Object source","id":3512},{"comment":"/**\r\n * @serialField children                                   Hashtable\r\n * @serialField source                                     Object\r\n * @serialField propertyChangeSupportSerializedDataVersion int\r\n */\r\n","field_name":"serialPersistentFields","field_type":"ObjectStreamField[]","full_declaration":"private static final ObjectStreamField[] serialPersistentFields = { new ObjectStreamField(\"children\", Hashtable.class), new ObjectStreamField(\"source\", Object.class), new ObjectStreamField(\"propertyChangeSupportSerializedDataVersion\", Integer.TYPE) }","id":3513},{"comment":"/**\r\n * Serialization version ID, so we're compatible with JDK 1.1\r\n */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"static final long serialVersionUID = 6401253773779951803L","id":3514},{"comment":"","field_name":"EMPTY","field_type":"PropertyChangeListener[]","full_declaration":"private static final PropertyChangeListener[] EMPTY = {}","id":3515},{"comment":"private Reference<? extends Class<?>> propertyTypeRef;","field_name":"propertyTypeRef","field_type":"java.lang.ref.Reference","full_declaration":"private java.lang.ref.Reference propertyTypeRef","id":3516},{"comment":"private final MethodRef readMethodRef = new MethodRef();","field_name":"readMethodRef","field_type":"java.beans.MethodRef","full_declaration":"private final java.beans.MethodRef readMethodRef = new MethodRef()","id":3517},{"comment":"private final MethodRef writeMethodRef = new MethodRef();","field_name":"writeMethodRef","field_type":"java.beans.MethodRef","full_declaration":"private final java.beans.MethodRef writeMethodRef = new MethodRef()","id":3518},{"comment":"private Reference<? extends Class<?>> propertyEditorClassRef;","field_name":"propertyEditorClassRef","field_type":"java.lang.ref.Reference","full_declaration":"private java.lang.ref.Reference propertyEditorClassRef","id":3519},{"comment":"","field_name":"bound","field_type":"boolean","full_declaration":"private boolean bound","id":3520},{"comment":"","field_name":"constrained","field_type":"boolean","full_declaration":"private boolean constrained","id":3521},{"comment":"// The base name of the method name which will be prefixed with the\r\n// read and write method. If name == \"foo\" then the baseName is \"Foo\"\r\nprivate String baseName;","field_name":"baseName","field_type":"java.lang.String","full_declaration":"private java.lang.String baseName","id":3522},{"comment":"private String writeMethodName;","field_name":"writeMethodName","field_type":"java.lang.String","full_declaration":"private java.lang.String writeMethodName","id":3523},{"comment":"private String readMethodName;","field_name":"readMethodName","field_type":"java.lang.String","full_declaration":"private java.lang.String readMethodName","id":3524},{"comment":"// ----------------------------------------------------------------------\r\nprivate Object value;","field_name":"value","field_type":"java.lang.Object","full_declaration":"private java.lang.Object value","id":3525},{"comment":"private Object source;","field_name":"source","field_type":"java.lang.Object","full_declaration":"private java.lang.Object source","id":3526},{"comment":"private java.util.Vector<PropertyChangeListener> listeners;","field_name":"listeners","field_type":"java.util.Vector","full_declaration":"private java.util.Vector listeners","id":3527},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 129596057694162164L","id":3528},{"comment":"/**\r\n * A PropertyChangeEvent describing the vetoed change.\r\n * @serial\r\n */\r\nprivate PropertyChangeEvent evt;","field_name":"evt","field_type":"java.beans.PropertyChangeEvent","full_declaration":"private java.beans.PropertyChangeEvent evt","id":3529},{"comment":"","field_name":"emptyArray","field_type":"Object[]","full_declaration":"private static Object[] emptyArray = new Object[] {}","id":3530},{"comment":"static ExceptionListener defaultExceptionListener = new ExceptionListener() {\r\n\r\n    public void exceptionThrown(Exception e) {\r\n        System.err.println(e);\r\n        // e.printStackTrace();\r\n        System.err.println(\"Continuing ...\");\r\n    }\r\n};","field_name":"defaultExceptionListener","field_type":"java.beans.ExceptionListener","full_declaration":"static java.beans.ExceptionListener defaultExceptionListener = new ExceptionListener() {\r\n\r\n    public void exceptionThrown(Exception e) {\r\n        System.err.println(e);\r\n        // e.printStackTrace();\r\n        System.err.println(\"Continuing ...\");\r\n    }\r\n}","id":3531},{"comment":"private final AccessControlContext acc = AccessController.getContext();","field_name":"acc","field_type":"java.security.AccessControlContext","full_declaration":"private final java.security.AccessControlContext acc = AccessController.getContext()","id":3532},{"comment":"private final Object target;","field_name":"target","field_type":"java.lang.Object","full_declaration":"private final java.lang.Object target","id":3533},{"comment":"private final String methodName;","field_name":"methodName","field_type":"java.lang.String","full_declaration":"private final java.lang.String methodName","id":3534},{"comment":"","field_name":"arguments","field_type":"Object[]","full_declaration":"private final Object[] arguments","id":3535},{"comment":"ClassLoader loader;","field_name":"loader","field_type":"java.lang.ClassLoader","full_declaration":"java.lang.ClassLoader loader","id":3536},{"comment":"private static final WeakIdentityMap<ThreadGroupContext> contexts = new WeakIdentityMap<ThreadGroupContext>() {\r\n\r\n    protected ThreadGroupContext create(Object key) {\r\n        return new ThreadGroupContext();\r\n    }\r\n};","field_name":"contexts","field_type":"java.beans.WeakIdentityMap","full_declaration":"private static final java.beans.WeakIdentityMap contexts = new WeakIdentityMap<ThreadGroupContext>() {\r\n\r\n    protected ThreadGroupContext create(Object key) {\r\n        return new ThreadGroupContext();\r\n    }\r\n}","id":3537},{"comment":"","field_name":"isDesignTime","field_type":"boolean","full_declaration":"private volatile boolean isDesignTime","id":3538},{"comment":"private volatile Boolean isGuiAvailable;","field_name":"isGuiAvailable","field_type":"java.lang.Boolean","full_declaration":"private volatile java.lang.Boolean isGuiAvailable","id":3539},{"comment":"private Map<Class<?>, BeanInfo> beanInfoCache;","field_name":"beanInfoCache","field_type":"java.util.Map","full_declaration":"private java.util.Map beanInfoCache","id":3540},{"comment":"private BeanInfoFinder beanInfoFinder;","field_name":"beanInfoFinder","field_type":"com.sun.beans.finder.BeanInfoFinder","full_declaration":"private com.sun.beans.finder.BeanInfoFinder beanInfoFinder","id":3541},{"comment":"private PropertyEditorFinder propertyEditorFinder;","field_name":"propertyEditorFinder","field_type":"com.sun.beans.finder.PropertyEditorFinder","full_declaration":"private com.sun.beans.finder.PropertyEditorFinder propertyEditorFinder","id":3542},{"comment":"private final String propertyName;","field_name":"propertyName","field_type":"java.lang.String","full_declaration":"private final java.lang.String propertyName","id":3543},{"comment":"private VetoableChangeListenerMap map = new VetoableChangeListenerMap();","field_name":"map","field_type":"java.beans.VetoableChangeSupport.VetoableChangeListenerMap","full_declaration":"private java.beans.VetoableChangeSupport.VetoableChangeListenerMap map = new VetoableChangeListenerMap()","id":3544},{"comment":"/**\r\n * The object to be provided as the \"source\" for any generated events.\r\n */\r\nprivate Object source;","field_name":"source","field_type":"java.lang.Object","full_declaration":"private java.lang.Object source","id":3545},{"comment":"/**\r\n * @serialField children                                   Hashtable\r\n * @serialField source                                     Object\r\n * @serialField vetoableChangeSupportSerializedDataVersion int\r\n */\r\n","field_name":"serialPersistentFields","field_type":"ObjectStreamField[]","full_declaration":"private static final ObjectStreamField[] serialPersistentFields = { new ObjectStreamField(\"children\", Hashtable.class), new ObjectStreamField(\"source\", Object.class), new ObjectStreamField(\"vetoableChangeSupportSerializedDataVersion\", Integer.TYPE) }","id":3546},{"comment":"/**\r\n * Serialization version ID, so we're compatible with JDK 1.1\r\n */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"static final long serialVersionUID = -5090210921595982017L","id":3547},{"comment":"","field_name":"EMPTY","field_type":"VetoableChangeListener[]","full_declaration":"private static final VetoableChangeListener[] EMPTY = {}","id":3548},{"comment":"// it MUST be a power of two\r\n","field_name":"MAXIMUM_CAPACITY","field_type":"int","full_declaration":"private static final int MAXIMUM_CAPACITY = 1 << 30","id":3549},{"comment":"// special object for null key\r\nprivate static final Object NULL = new Object();","field_name":"NULL","field_type":"java.lang.Object","full_declaration":"private static final java.lang.Object NULL = new Object()","id":3550},{"comment":"private final ReferenceQueue<Object> queue = new ReferenceQueue<Object>();","field_name":"queue","field_type":"java.lang.ref.ReferenceQueue","full_declaration":"private final java.lang.ref.ReferenceQueue queue = new ReferenceQueue<Object>()","id":3551},{"comment":"// table's length MUST be a power of two\r\n","field_name":"table","field_type":"Entry<T>[]","full_declaration":"private volatile Entry<T>[] table = newTable(1 << 3)","id":3552},{"comment":"// the next size value at which to resize\r\n","field_name":"threshold","field_type":"int","full_declaration":"private int threshold = 6","id":3553},{"comment":"// the number of key-value mappings\r\n","field_name":"size","field_type":"int","full_declaration":"private int size = 0","id":3554},{"comment":"","field_name":"hash","field_type":"int","full_declaration":"private final int hash","id":3555},{"comment":"","field_name":"value","field_type":"T","full_declaration":"private volatile T value","id":3556},{"comment":"private volatile Entry<T> next;","field_name":"next","field_type":"java.beans.WeakIdentityMap.Entry","full_declaration":"private volatile java.beans.WeakIdentityMap.Entry next","id":3557},{"comment":"private final AccessControlContext acc = AccessController.getContext();","field_name":"acc","field_type":"java.security.AccessControlContext","full_declaration":"private final java.security.AccessControlContext acc = AccessController.getContext()","id":3558},{"comment":"private final DocumentHandler handler = new DocumentHandler();","field_name":"handler","field_type":"com.sun.beans.decoder.DocumentHandler","full_declaration":"private final com.sun.beans.decoder.DocumentHandler handler = new DocumentHandler()","id":3559},{"comment":"private final InputSource input;","field_name":"input","field_type":"org.xml.sax.InputSource","full_declaration":"private final org.xml.sax.InputSource input","id":3560},{"comment":"private Object owner;","field_name":"owner","field_type":"java.lang.Object","full_declaration":"private java.lang.Object owner","id":3561},{"comment":"","field_name":"array","field_type":"Object[]","full_declaration":"private Object[] array","id":3562},{"comment":"","field_name":"index","field_type":"int","full_declaration":"private int index","id":3563},{"comment":"private final CharsetEncoder encoder;","field_name":"encoder","field_type":"java.nio.charset.CharsetEncoder","full_declaration":"private final java.nio.charset.CharsetEncoder encoder","id":3564},{"comment":"private final String charset;","field_name":"charset","field_type":"java.lang.String","full_declaration":"private final java.lang.String charset","id":3565},{"comment":"","field_name":"declaration","field_type":"boolean","full_declaration":"private final boolean declaration","id":3566},{"comment":"private OutputStreamWriter out;","field_name":"out","field_type":"java.io.OutputStreamWriter","full_declaration":"private java.io.OutputStreamWriter out","id":3567},{"comment":"private Object owner;","field_name":"owner","field_type":"java.lang.Object","full_declaration":"private java.lang.Object owner","id":3568},{"comment":"","field_name":"indentation","field_type":"int","full_declaration":"private int indentation = 0","id":3569},{"comment":"","field_name":"internal","field_type":"boolean","full_declaration":"private boolean internal = false","id":3570},{"comment":"private Map<Object, ValueData> valueToExpression;","field_name":"valueToExpression","field_type":"java.util.Map","full_declaration":"private java.util.Map valueToExpression","id":3571},{"comment":"private Map<Object, List<Statement>> targetToStatementList;","field_name":"targetToStatementList","field_type":"java.util.Map","full_declaration":"private java.util.Map targetToStatementList","id":3572},{"comment":"","field_name":"preambleWritten","field_type":"boolean","full_declaration":"private boolean preambleWritten = false","id":3573},{"comment":"private NameGenerator nameGenerator;","field_name":"nameGenerator","field_type":"java.beans.NameGenerator","full_declaration":"private java.beans.NameGenerator nameGenerator","id":3574},{"comment":"","field_name":"refs","field_type":"int","full_declaration":"public int refs = 0","id":3575},{"comment":"// Marked -> refs > 0 unless ref was a target.\r\n","field_name":"marked","field_type":"boolean","full_declaration":"public boolean marked = false","id":3576},{"comment":"public String name = null;","field_name":"name","field_type":"java.lang.String","full_declaration":"public java.lang.String name = null","id":3577},{"comment":"public Expression exp = null;","field_name":"exp","field_type":"java.beans.Expression","full_declaration":"public java.beans.Expression exp = null","id":3578},{"comment":"","field_name":"DEFAULT_BUFFER_SIZE","field_type":"int","full_declaration":"private static int DEFAULT_BUFFER_SIZE = 8192","id":3579},{"comment":"/**\r\n * The maximum size of array to allocate.\r\n * Some VMs reserve some header words in an array.\r\n * Attempts to allocate larger arrays may result in\r\n * OutOfMemoryError: Requested array size exceeds VM limit\r\n */\r\n","field_name":"MAX_BUFFER_SIZE","field_type":"int","full_declaration":"private static int MAX_BUFFER_SIZE = Integer.MAX_VALUE - 8","id":3580},{"comment":"/**\r\n * The internal buffer array where the data is stored. When necessary,\r\n * it may be replaced by another array of\r\n * a different size.\r\n */\r\n","field_name":"buf","field_type":"byte[]","full_declaration":"protected volatile byte[] buf","id":3581},{"comment":"/**\r\n * Atomic updater to provide compareAndSet for buf. This is\r\n * necessary because closes can be asynchronous. We use nullness\r\n * of buf[] as primary indicator that this stream is closed. (The\r\n * \"in\" field is also nulled out on close.)\r\n */\r\nprivate static final AtomicReferenceFieldUpdater<BufferedInputStream, byte[]> bufUpdater = AtomicReferenceFieldUpdater.newUpdater(BufferedInputStream.class, byte[].class, \"buf\");","field_name":"bufUpdater","field_type":"java.util.concurrent.atomic.AtomicReferenceFieldUpdater","full_declaration":"private static final java.util.concurrent.atomic.AtomicReferenceFieldUpdater bufUpdater = AtomicReferenceFieldUpdater.newUpdater(BufferedInputStream.class, byte[].class, \"buf\")","id":3582},{"comment":"/**\r\n * The index one greater than the index of the last valid byte in\r\n * the buffer.\r\n * This value is always\r\n * in the range <code>0</code> through <code>buf.length</code>;\r\n * elements <code>buf[0]</code>  through <code>buf[count-1]\r\n * </code>contain buffered input data obtained\r\n * from the underlying  input stream.\r\n */\r\n","field_name":"count","field_type":"int","full_declaration":"protected int count","id":3583},{"comment":"/**\r\n * The current position in the buffer. This is the index of the next\r\n * character to be read from the <code>buf</code> array.\r\n * <p>\r\n * This value is always in the range <code>0</code>\r\n * through <code>count</code>. If it is less\r\n * than <code>count</code>, then  <code>buf[pos]</code>\r\n * is the next byte to be supplied as input;\r\n * if it is equal to <code>count</code>, then\r\n * the  next <code>read</code> or <code>skip</code>\r\n * operation will require more bytes to be\r\n * read from the contained  input stream.\r\n *\r\n * @see     java.io.BufferedInputStream#buf\r\n */\r\n","field_name":"pos","field_type":"int","full_declaration":"protected int pos","id":3584},{"comment":"/**\r\n * The value of the <code>pos</code> field at the time the last\r\n * <code>mark</code> method was called.\r\n * <p>\r\n * This value is always\r\n * in the range <code>-1</code> through <code>pos</code>.\r\n * If there is no marked position in  the input\r\n * stream, this field is <code>-1</code>. If\r\n * there is a marked position in the input\r\n * stream,  then <code>buf[markpos]</code>\r\n * is the first byte to be supplied as input\r\n * after a <code>reset</code> operation. If\r\n * <code>markpos</code> is not <code>-1</code>,\r\n * then all bytes from positions <code>buf[markpos]</code>\r\n * through  <code>buf[pos-1]</code> must remain\r\n * in the buffer array (though they may be\r\n * moved to  another place in the buffer array,\r\n * with suitable adjustments to the values\r\n * of <code>count</code>,  <code>pos</code>,\r\n * and <code>markpos</code>); they may not\r\n * be discarded unless and until the difference\r\n * between <code>pos</code> and <code>markpos</code>\r\n * exceeds <code>marklimit</code>.\r\n *\r\n * @see     java.io.BufferedInputStream#mark(int)\r\n * @see     java.io.BufferedInputStream#pos\r\n */\r\n","field_name":"markpos","field_type":"int","full_declaration":"protected int markpos = -1","id":3585},{"comment":"/**\r\n * The maximum read ahead allowed after a call to the\r\n * <code>mark</code> method before subsequent calls to the\r\n * <code>reset</code> method fail.\r\n * Whenever the difference between <code>pos</code>\r\n * and <code>markpos</code> exceeds <code>marklimit</code>,\r\n * then the  mark may be dropped by setting\r\n * <code>markpos</code> to <code>-1</code>.\r\n *\r\n * @see     java.io.BufferedInputStream#mark(int)\r\n * @see     java.io.BufferedInputStream#reset()\r\n */\r\n","field_name":"marklimit","field_type":"int","full_declaration":"protected int marklimit","id":3586},{"comment":"/**\r\n * The internal buffer where data is stored.\r\n */\r\n","field_name":"buf","field_type":"byte[]","full_declaration":"protected byte[] buf","id":3587},{"comment":"/**\r\n * The number of valid bytes in the buffer. This value is always\r\n * in the range <tt>0</tt> through <tt>buf.length</tt>; elements\r\n * <tt>buf[0]</tt> through <tt>buf[count-1]</tt> contain valid\r\n * byte data.\r\n */\r\n","field_name":"count","field_type":"int","full_declaration":"protected int count","id":3588},{"comment":"private Reader in;","field_name":"in","field_type":"java.io.Reader","full_declaration":"private java.io.Reader in","id":3589},{"comment":"","field_name":"cb","field_type":"char[]","full_declaration":"private char[] cb","id":3590},{"comment":"private int nChars, nextChar;","field_name":"nChars","field_type":"int","full_declaration":"private int nChars","id":3591},{"comment":"private int nChars, nextChar;","field_name":"nextChar","field_type":"int","full_declaration":"private int nCharsint nextChar","id":3592},{"comment":"","field_name":"INVALIDATED","field_type":"int","full_declaration":"private static final int INVALIDATED = -2","id":3593},{"comment":"","field_name":"UNMARKED","field_type":"int","full_declaration":"private static final int UNMARKED = -1","id":3594},{"comment":"","field_name":"markedChar","field_type":"int","full_declaration":"private int markedChar = UNMARKED","id":3595},{"comment":"","field_name":"readAheadLimit","field_type":"int","full_declaration":"private int readAheadLimit = 0","id":3596},{"comment":"/* Valid only when markedChar > 0 */\r\n/**\r\n * If the next character is a line feed, skip it\r\n */\r\n","field_name":"skipLF","field_type":"boolean","full_declaration":"private boolean skipLF = false","id":3597},{"comment":"/**\r\n * The skipLF flag when the mark was set\r\n */\r\n","field_name":"markedSkipLF","field_type":"boolean","full_declaration":"private boolean markedSkipLF = false","id":3598},{"comment":"","field_name":"defaultCharBufferSize","field_type":"int","full_declaration":"private static int defaultCharBufferSize = 8192","id":3599},{"comment":"","field_name":"defaultExpectedLineLength","field_type":"int","full_declaration":"private static int defaultExpectedLineLength = 80","id":3600},{"comment":"private Writer out;","field_name":"out","field_type":"java.io.Writer","full_declaration":"private java.io.Writer out","id":3601},{"comment":"","field_name":"cb","field_type":"char[]","full_declaration":"private char[] cb","id":3602},{"comment":"private int nChars, nextChar;","field_name":"nChars","field_type":"int","full_declaration":"private int nChars","id":3603},{"comment":"private int nChars, nextChar;","field_name":"nextChar","field_type":"int","full_declaration":"private int nCharsint nextChar","id":3604},{"comment":"","field_name":"defaultCharBufferSize","field_type":"int","full_declaration":"private static int defaultCharBufferSize = 8192","id":3605},{"comment":"/**\r\n * Line separator string.  This is the value of the line.separator\r\n * property at the moment that the stream was created.\r\n */\r\nprivate String lineSeparator;","field_name":"lineSeparator","field_type":"java.lang.String","full_declaration":"private java.lang.String lineSeparator","id":3606},{"comment":"/**\r\n * An array of bytes that was provided\r\n * by the creator of the stream. Elements <code>buf[0]</code>\r\n * through <code>buf[count-1]</code> are the\r\n * only bytes that can ever be read from the\r\n * stream;  element <code>buf[pos]</code> is\r\n * the next byte to be read.\r\n */\r\n","field_name":"buf","field_type":"byte[]","full_declaration":"protected byte[] buf","id":3607},{"comment":"/**\r\n * The index of the next character to read from the input stream buffer.\r\n * This value should always be nonnegative\r\n * and not larger than the value of <code>count</code>.\r\n * The next byte to be read from the input stream buffer\r\n * will be <code>buf[pos]</code>.\r\n */\r\n","field_name":"pos","field_type":"int","full_declaration":"protected int pos","id":3608},{"comment":"/**\r\n * The currently marked position in the stream.\r\n * ByteArrayInputStream objects are marked at position zero by\r\n * default when constructed.  They may be marked at another\r\n * position within the buffer by the <code>mark()</code> method.\r\n * The current buffer position is set to this point by the\r\n * <code>reset()</code> method.\r\n * <p>\r\n * If no mark has been set, then the value of mark is the offset\r\n * passed to the constructor (or 0 if the offset was not supplied).\r\n *\r\n * @since   JDK1.1\r\n */\r\n","field_name":"mark","field_type":"int","full_declaration":"protected int mark = 0","id":3609},{"comment":"/**\r\n * The index one greater than the last valid character in the input\r\n * stream buffer.\r\n * This value should always be nonnegative\r\n * and not larger than the length of <code>buf</code>.\r\n * It  is one greater than the position of\r\n * the last byte within <code>buf</code> that\r\n * can ever be read  from the input stream buffer.\r\n */\r\n","field_name":"count","field_type":"int","full_declaration":"protected int count","id":3610},{"comment":"/**\r\n * The buffer where data is stored.\r\n */\r\n","field_name":"buf","field_type":"byte[]","full_declaration":"protected byte[] buf","id":3611},{"comment":"/**\r\n * The number of valid bytes in the buffer.\r\n */\r\n","field_name":"count","field_type":"int","full_declaration":"protected int count","id":3612},{"comment":"/**\r\n * The maximum size of array to allocate.\r\n * Some VMs reserve some header words in an array.\r\n * Attempts to allocate larger arrays may result in\r\n * OutOfMemoryError: Requested array size exceeds VM limit\r\n */\r\n","field_name":"MAX_ARRAY_SIZE","field_type":"int","full_declaration":"private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8","id":3613},{"comment":"/**\r\n * The character buffer.\r\n */\r\n","field_name":"buf","field_type":"char[]","full_declaration":"protected char[] buf","id":3614},{"comment":"/**\r\n * The current buffer position.\r\n */\r\n","field_name":"pos","field_type":"int","full_declaration":"protected int pos","id":3615},{"comment":"/**\r\n * The position of mark in buffer.\r\n */\r\n","field_name":"markedPos","field_type":"int","full_declaration":"protected int markedPos = 0","id":3616},{"comment":"/**\r\n *  The index of the end of this buffer.  There is not valid\r\n *  data at or beyond this index.\r\n */\r\n","field_name":"count","field_type":"int","full_declaration":"protected int count","id":3617},{"comment":"/**\r\n * The buffer where data is stored.\r\n */\r\n","field_name":"buf","field_type":"char[]","full_declaration":"protected char[] buf","id":3618},{"comment":"/**\r\n * The number of chars in the buffer.\r\n */\r\n","field_name":"count","field_type":"int","full_declaration":"protected int count","id":3619},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -8680016352018427031L","id":3620},{"comment":"private Object readLock;","field_name":"readLock","field_type":"java.lang.Object","full_declaration":"private java.lang.Object readLock","id":3621},{"comment":"private Object writeLock;","field_name":"writeLock","field_type":"java.lang.Object","full_declaration":"private java.lang.Object writeLock","id":3622},{"comment":"private Reader reader;","field_name":"reader","field_type":"java.io.Reader","full_declaration":"private java.io.Reader reader","id":3623},{"comment":"private Writer out;","field_name":"out","field_type":"java.io.Writer","full_declaration":"private java.io.Writer out","id":3624},{"comment":"private PrintWriter pw;","field_name":"pw","field_type":"java.io.PrintWriter","full_declaration":"private java.io.PrintWriter pw","id":3625},{"comment":"private Formatter formatter;","field_name":"formatter","field_type":"java.util.Formatter","full_declaration":"private java.util.Formatter formatter","id":3626},{"comment":"private Charset cs;","field_name":"cs","field_type":"java.nio.charset.Charset","full_declaration":"private java.nio.charset.Charset cs","id":3627},{"comment":"","field_name":"rcb","field_type":"char[]","full_declaration":"private char[] rcb","id":3628},{"comment":"","field_name":"echoOff","field_type":"boolean","full_declaration":"private static boolean echoOff","id":3629},{"comment":"private static Console cons;","field_name":"cons","field_type":"java.io.Console","full_declaration":"private static java.io.Console cons","id":3630},{"comment":"private Reader in;","field_name":"in","field_type":"java.io.Reader","full_declaration":"private java.io.Reader in","id":3631},{"comment":"","field_name":"cb","field_type":"char[]","full_declaration":"private char[] cb","id":3632},{"comment":"private int nChars, nextChar;","field_name":"nChars","field_type":"int","full_declaration":"private int nChars","id":3633},{"comment":"private int nChars, nextChar;","field_name":"nextChar","field_type":"int","full_declaration":"private int nCharsint nextChar","id":3634},{"comment":"","field_name":"leftoverLF","field_type":"boolean","full_declaration":"boolean leftoverLF","id":3635},{"comment":"/**\r\n * working arrays initialized on demand by readUTF\r\n */\r\n","field_name":"bytearr","field_type":"byte[]","full_declaration":"private byte[] bytearr = new byte[80]","id":3636},{"comment":"","field_name":"chararr","field_type":"char[]","full_declaration":"private char[] chararr = new char[80]","id":3637},{"comment":"","field_name":"readBuffer","field_type":"byte[]","full_declaration":"private byte[] readBuffer = new byte[8]","id":3638},{"comment":"","field_name":"lineBuffer","field_type":"char[]","full_declaration":"private char[] lineBuffer","id":3639},{"comment":"/**\r\n * The number of bytes written to the data output stream so far.\r\n * If this counter overflows, it will be wrapped to Integer.MAX_VALUE.\r\n */\r\n","field_name":"written","field_type":"int","full_declaration":"protected int written","id":3640},{"comment":"/**\r\n * bytearr is initialized on demand by writeUTF\r\n */\r\n","field_name":"bytearr","field_type":"byte[]","full_declaration":"private byte[] bytearr = null","id":3641},{"comment":"","field_name":"writeBuffer","field_type":"byte[]","full_declaration":"private byte[] writeBuffer = new byte[8]","id":3642},{"comment":"private static LinkedHashSet<String> files = new LinkedHashSet<>();","field_name":"files","field_type":"java.util.LinkedHashSet","full_declaration":"private static java.util.LinkedHashSet files = new LinkedHashSet<>()","id":3643},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 6433858223774886977L","id":3644},{"comment":"","field_name":"millisUntilExpiration","field_type":"long","full_declaration":"private long millisUntilExpiration","id":3645},{"comment":"private Map<String, Entry> map;","field_name":"map","field_type":"java.util.Map","full_declaration":"private java.util.Map map","id":3646},{"comment":"// Clear out old entries every few queries\r\n","field_name":"queryCount","field_type":"int","full_declaration":"private int queryCount","id":3647},{"comment":"","field_name":"queryOverflow","field_type":"int","full_declaration":"private int queryOverflow = 300","id":3648},{"comment":"","field_name":"MAX_ENTRIES","field_type":"int","full_declaration":"private int MAX_ENTRIES = 200","id":3649},{"comment":"","field_name":"timestamp","field_type":"long","full_declaration":"private long timestamp","id":3650},{"comment":"private String val;","field_name":"val","field_type":"java.lang.String","full_declaration":"private java.lang.String val","id":3651},{"comment":"/**\r\n * The FileSystem object representing the platform's local file system.\r\n */\r\nprivate static final FileSystem fs = DefaultFileSystem.getFileSystem();","field_name":"fs","field_type":"java.io.FileSystem","full_declaration":"private static final java.io.FileSystem fs = DefaultFileSystem.getFileSystem()","id":3652},{"comment":"/**\r\n * This abstract pathname's normalized pathname string. A normalized\r\n * pathname string uses the default name-separator character and does not\r\n * contain any duplicate or redundant separators.\r\n *\r\n * @serial\r\n */\r\nprivate final String path;","field_name":"path","field_type":"java.lang.String","full_declaration":"private final java.lang.String path","id":3653},{"comment":"/**\r\n * The flag indicating whether the file path is invalid.\r\n */\r\nprivate transient PathStatus status = null;","field_name":"status","field_type":"java.io.File.PathStatus","full_declaration":"private transient java.io.File.PathStatus status = null","id":3654},{"comment":"/**\r\n * The length of this abstract pathname's prefix, or zero if it has no\r\n * prefix.\r\n */\r\n","field_name":"prefixLength","field_type":"int","full_declaration":"private final transient int prefixLength","id":3655},{"comment":"/**\r\n * The system-dependent default name-separator character.  This field is\r\n * initialized to contain the first character of the value of the system\r\n * property <code>file.separator</code>.  On UNIX systems the value of this\r\n * field is <code>'/'</code>; on Microsoft Windows systems it is <code>'\\\\'</code>.\r\n *\r\n * @see     java.lang.System#getProperty(java.lang.String)\r\n */\r\n","field_name":"separatorChar","field_type":"char","full_declaration":"public static final char separatorChar = fs.getSeparator()","id":3656},{"comment":"/**\r\n * The system-dependent default name-separator character, represented as a\r\n * string for convenience.  This string contains a single character, namely\r\n * <code>{@link #separatorChar}</code>.\r\n */\r\npublic static final String separator = \"\" + separatorChar;","field_name":"separator","field_type":"java.lang.String","full_declaration":"public static final java.lang.String separator = \"\" + separatorChar","id":3657},{"comment":"/**\r\n * The system-dependent path-separator character.  This field is\r\n * initialized to contain the first character of the value of the system\r\n * property <code>path.separator</code>.  This character is used to\r\n * separate filenames in a sequence of files given as a <em>path list</em>.\r\n * On UNIX systems, this character is <code>':'</code>; on Microsoft Windows systems it\r\n * is <code>';'</code>.\r\n *\r\n * @see     java.lang.System#getProperty(java.lang.String)\r\n */\r\n","field_name":"pathSeparatorChar","field_type":"char","full_declaration":"public static final char pathSeparatorChar = fs.getPathSeparator()","id":3658},{"comment":"/**\r\n * The system-dependent path-separator character, represented as a string\r\n * for convenience.  This string contains a single character, namely\r\n * <code>{@link #pathSeparatorChar}</code>.\r\n */\r\npublic static final String pathSeparator = \"\" + pathSeparatorChar;","field_name":"pathSeparator","field_type":"java.lang.String","full_declaration":"public static final java.lang.String pathSeparator = \"\" + pathSeparatorChar","id":3659},{"comment":"","field_name":"PATH_OFFSET","field_type":"long","full_declaration":"private static final long PATH_OFFSET","id":3660},{"comment":"","field_name":"PREFIX_LENGTH_OFFSET","field_type":"long","full_declaration":"private static final long PREFIX_LENGTH_OFFSET","id":3661},{"comment":"","field_name":"UNSAFE","field_type":"sun.misc.Unsafe","full_declaration":"private static final sun.misc.Unsafe UNSAFE","id":3662},{"comment":"/**\r\n * use serialVersionUID from JDK 1.0.2 for interoperability\r\n */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 301077366599181567L","id":3663},{"comment":"// -- Integration with java.nio.file --\r\nprivate volatile transient Path filePath;","field_name":"filePath","field_type":"java.nio.file.Path","full_declaration":"private volatile transient java.nio.file.Path filePath","id":3664},{"comment":"// temporary directory location\r\nprivate static final File tmpdir = new File(AccessController.doPrivileged(new GetPropertyAction(\"java.io.tmpdir\")));","field_name":"tmpdir","field_type":"java.io.File","full_declaration":"private static final java.io.File tmpdir = new File(AccessController.doPrivileged(new GetPropertyAction(\"java.io.tmpdir\")))","id":3665},{"comment":"// file name generation\r\nprivate static final SecureRandom random = new SecureRandom();","field_name":"random","field_type":"java.security.SecureRandom","full_declaration":"private static final java.security.SecureRandom random = new SecureRandom()","id":3666},{"comment":"","field_name":"fd","field_type":"int","full_declaration":"private int fd","id":3667},{"comment":"","field_name":"handle","field_type":"long","full_declaration":"private long handle","id":3668},{"comment":"private Closeable parent;","field_name":"parent","field_type":"java.io.Closeable","full_declaration":"private java.io.Closeable parent","id":3669},{"comment":"private List<Closeable> otherParents;","field_name":"otherParents","field_type":"java.util.List","full_declaration":"private java.util.List otherParents","id":3670},{"comment":"","field_name":"closed","field_type":"boolean","full_declaration":"private boolean closed","id":3671},{"comment":"/**\r\n * A handle to the standard input stream. Usually, this file\r\n * descriptor is not used directly, but rather via the input stream\r\n * known as {@code System.in}.\r\n *\r\n * @see     java.lang.System#in\r\n */\r\npublic static final FileDescriptor in = standardStream(0);","field_name":"in","field_type":"java.io.FileDescriptor","full_declaration":"public static final java.io.FileDescriptor in = standardStream(0)","id":3672},{"comment":"/**\r\n * A handle to the standard output stream. Usually, this file\r\n * descriptor is not used directly, but rather via the output stream\r\n * known as {@code System.out}.\r\n * @see     java.lang.System#out\r\n */\r\npublic static final FileDescriptor out = standardStream(1);","field_name":"out","field_type":"java.io.FileDescriptor","full_declaration":"public static final java.io.FileDescriptor out = standardStream(1)","id":3673},{"comment":"/**\r\n * A handle to the standard error stream. Usually, this file\r\n * descriptor is not used directly, but rather via the output stream\r\n * known as {@code System.err}.\r\n *\r\n * @see     java.lang.System#err\r\n */\r\npublic static final FileDescriptor err = standardStream(2);","field_name":"err","field_type":"java.io.FileDescriptor","full_declaration":"public static final java.io.FileDescriptor err = standardStream(2)","id":3674},{"comment":"/* File Descriptor - handle to the open file */\r\nprivate final FileDescriptor fd;","field_name":"fd","field_type":"java.io.FileDescriptor","full_declaration":"private final java.io.FileDescriptor fd","id":3675},{"comment":"/**\r\n * The path of the referenced file\r\n * (null if the stream is created with a file descriptor)\r\n */\r\nprivate final String path;","field_name":"path","field_type":"java.lang.String","full_declaration":"private final java.lang.String path","id":3676},{"comment":"private FileChannel channel = null;","field_name":"channel","field_type":"java.nio.channels.FileChannel","full_declaration":"private java.nio.channels.FileChannel channel = null","id":3677},{"comment":"private final Object closeLock = new Object();","field_name":"closeLock","field_type":"java.lang.Object","full_declaration":"private final java.lang.Object closeLock = new Object()","id":3678},{"comment":"","field_name":"closed","field_type":"boolean","full_declaration":"private volatile boolean closed = false","id":3679},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -897856973823710492L","id":3680},{"comment":"/**\r\n * The system dependent file descriptor.\r\n */\r\nprivate final FileDescriptor fd;","field_name":"fd","field_type":"java.io.FileDescriptor","full_declaration":"private final java.io.FileDescriptor fd","id":3681},{"comment":"/**\r\n * True if the file is opened for append.\r\n */\r\n","field_name":"append","field_type":"boolean","full_declaration":"private final boolean append","id":3682},{"comment":"/**\r\n * The associated channel, initialized lazily.\r\n */\r\nprivate FileChannel channel;","field_name":"channel","field_type":"java.nio.channels.FileChannel","full_declaration":"private java.nio.channels.FileChannel channel","id":3683},{"comment":"/**\r\n * The path of the referenced file\r\n * (null if the stream is created with a file descriptor)\r\n */\r\nprivate final String path;","field_name":"path","field_type":"java.lang.String","full_declaration":"private final java.lang.String path","id":3684},{"comment":"private final Object closeLock = new Object();","field_name":"closeLock","field_type":"java.lang.Object","full_declaration":"private final java.lang.Object closeLock = new Object()","id":3685},{"comment":"","field_name":"closed","field_type":"boolean","full_declaration":"private volatile boolean closed = false","id":3686},{"comment":"/**\r\n * Execute action.\r\n */\r\n","field_name":"EXECUTE","field_type":"int","full_declaration":"private final static int EXECUTE = 0x1","id":3687},{"comment":"/**\r\n * Write action.\r\n */\r\n","field_name":"WRITE","field_type":"int","full_declaration":"private final static int WRITE = 0x2","id":3688},{"comment":"/**\r\n * Read action.\r\n */\r\n","field_name":"READ","field_type":"int","full_declaration":"private final static int READ = 0x4","id":3689},{"comment":"/**\r\n * Delete action.\r\n */\r\n","field_name":"DELETE","field_type":"int","full_declaration":"private final static int DELETE = 0x8","id":3690},{"comment":"/**\r\n * Read link action.\r\n */\r\n","field_name":"READLINK","field_type":"int","full_declaration":"private final static int READLINK = 0x10","id":3691},{"comment":"/**\r\n * All actions (read,write,execute,delete,readlink)\r\n */\r\n","field_name":"ALL","field_type":"int","full_declaration":"private final static int ALL = READ | WRITE | EXECUTE | DELETE | READLINK","id":3692},{"comment":"/**\r\n * No actions.\r\n */\r\n","field_name":"NONE","field_type":"int","full_declaration":"private final static int NONE = 0x0","id":3693},{"comment":"// the actions mask\r\n","field_name":"mask","field_type":"int","full_declaration":"private transient int mask","id":3694},{"comment":"// does path indicate a directory? (wildcard or recursive)\r\n","field_name":"directory","field_type":"boolean","full_declaration":"private transient boolean directory","id":3695},{"comment":"// is it a recursive directory specification?\r\n","field_name":"recursive","field_type":"boolean","full_declaration":"private transient boolean recursive","id":3696},{"comment":"/**\r\n * the actions string.\r\n *\r\n * @serial\r\n */\r\n// Left null as long as possible, then\r\nprivate String actions;","field_name":"actions","field_type":"java.lang.String","full_declaration":"private java.lang.String actions","id":3697},{"comment":"// created and re-used in the getAction function.\r\n// canonicalized dir path. In the case of\r\n// directories, it is the name \"/blah/*\" or \"/blah/-\" without\r\n// the last character (the \"*\" or \"-\").\r\nprivate transient String cpath;","field_name":"cpath","field_type":"java.lang.String","full_declaration":"private transient java.lang.String cpath","id":3698},{"comment":"// static Strings used by init(int mask)\r\n","field_name":"RECURSIVE_CHAR","field_type":"char","full_declaration":"private static final char RECURSIVE_CHAR = '-'","id":3699},{"comment":"","field_name":"WILD_CHAR","field_type":"char","full_declaration":"private static final char WILD_CHAR = '*'","id":3700},{"comment":"/*\r\n    public String toString()\r\n    {\r\n        StringBuffer sb = new StringBuffer();\r\n        sb.append(\"***\\n\");\r\n        sb.append(\"cpath = \"+cpath+\"\\n\");\r\n        sb.append(\"mask = \"+mask+\"\\n\");\r\n        sb.append(\"actions = \"+getActions()+\"\\n\");\r\n        sb.append(\"directory = \"+directory+\"\\n\");\r\n        sb.append(\"recursive = \"+recursive+\"\\n\");\r\n        sb.append(\"***\\n\");\r\n        return sb.toString();\r\n    }\r\n*/\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 7930732926638008763L","id":3701},{"comment":"// Not serialized; see serialization section at end of class\r\nprivate transient List<Permission> perms;","field_name":"perms","field_type":"java.util.List","full_declaration":"private transient java.util.List perms","id":3702},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 2202956749081564585L","id":3703},{"comment":"// Need to maintain serialization interoperability with earlier releases,\r\n// which had the serializable field:\r\n// private Vector permissions;\r\n/**\r\n * @serialField permissions java.util.Vector\r\n *     A list of FilePermission objects.\r\n */\r\n","field_name":"serialPersistentFields","field_type":"ObjectStreamField[]","full_declaration":"private static final ObjectStreamField[] serialPersistentFields = { new ObjectStreamField(\"permissions\", Vector.class) }","id":3704},{"comment":"/* -- Attribute accessors -- */\r\n/* Constants for simple boolean attributes */\r\n@Native\r\n","field_name":"BA_EXISTS","field_type":"int","full_declaration":"public static final int BA_EXISTS = 0x01","id":3705},{"comment":"@Native\r\n","field_name":"BA_REGULAR","field_type":"int","full_declaration":"public static final int BA_REGULAR = 0x02","id":3706},{"comment":"@Native\r\n","field_name":"BA_DIRECTORY","field_type":"int","full_declaration":"public static final int BA_DIRECTORY = 0x04","id":3707},{"comment":"@Native\r\n","field_name":"BA_HIDDEN","field_type":"int","full_declaration":"public static final int BA_HIDDEN = 0x08","id":3708},{"comment":"@Native\r\n","field_name":"ACCESS_READ","field_type":"int","full_declaration":"public static final int ACCESS_READ = 0x04","id":3709},{"comment":"@Native\r\n","field_name":"ACCESS_WRITE","field_type":"int","full_declaration":"public static final int ACCESS_WRITE = 0x02","id":3710},{"comment":"@Native\r\n","field_name":"ACCESS_EXECUTE","field_type":"int","full_declaration":"public static final int ACCESS_EXECUTE = 0x01","id":3711},{"comment":"/* -- Disk usage -- */\r\n@Native\r\n","field_name":"SPACE_TOTAL","field_type":"int","full_declaration":"public static final int SPACE_TOTAL = 0","id":3712},{"comment":"@Native\r\n","field_name":"SPACE_FREE","field_type":"int","full_declaration":"public static final int SPACE_FREE = 1","id":3713},{"comment":"@Native\r\n","field_name":"SPACE_USABLE","field_type":"int","full_declaration":"public static final int SPACE_USABLE = 2","id":3714},{"comment":"// Flags for enabling/disabling performance optimizations for file\r\n// name canonicalization\r\n","field_name":"useCanonCaches","field_type":"boolean","full_declaration":"static boolean useCanonCaches = true","id":3715},{"comment":"","field_name":"useCanonPrefixCache","field_type":"boolean","full_declaration":"static boolean useCanonPrefixCache = true","id":3716},{"comment":"/**\r\n * The input stream to be filtered.\r\n */\r\nprotected volatile InputStream in;","field_name":"in","field_type":"java.io.InputStream","full_declaration":"protected volatile java.io.InputStream in","id":3717},{"comment":"/**\r\n * The underlying output stream to be filtered.\r\n */\r\nprotected OutputStream out;","field_name":"out","field_type":"java.io.OutputStream","full_declaration":"protected java.io.OutputStream out","id":3718},{"comment":"/**\r\n * The underlying character-input stream.\r\n */\r\nprotected Reader in;","field_name":"in","field_type":"java.io.Reader","full_declaration":"protected java.io.Reader in","id":3719},{"comment":"/**\r\n * The underlying character-output stream.\r\n */\r\nprotected Writer out;","field_name":"out","field_type":"java.io.Writer","full_declaration":"protected java.io.Writer out","id":3720},{"comment":"// MAX_SKIP_BUFFER_SIZE is used to determine the maximum buffer size to\r\n// use when skipping.\r\n","field_name":"MAX_SKIP_BUFFER_SIZE","field_type":"int","full_declaration":"private static final int MAX_SKIP_BUFFER_SIZE = 2048","id":3721},{"comment":"private final StreamDecoder sd;","field_name":"sd","field_type":"sun.nio.cs.StreamDecoder","full_declaration":"private final sun.nio.cs.StreamDecoder sd","id":3722},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 4020568460727500567L","id":3723},{"comment":"/**\r\n * Reports how many bytes had been transferred as part of the I/O\r\n * operation before it was interrupted.\r\n *\r\n * @serial\r\n */\r\n","field_name":"bytesTransferred","field_type":"int","full_declaration":"public int bytesTransferred = 0","id":3724},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -4333316296251054416L","id":3725},{"comment":"/**\r\n * Name of the invalid class.\r\n *\r\n * @serial Name of the invalid class.\r\n */\r\npublic String classname;","field_name":"classname","field_type":"java.lang.String","full_declaration":"public java.lang.String classname","id":3726},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 3233174318281839583L","id":3727},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 67100927991680413L","id":3728},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"static final long serialVersionUID = 7818375828146090155L","id":3729},{"comment":"","field_name":"pushBack","field_type":"int","full_declaration":"int pushBack = -1","id":3730},{"comment":"","field_name":"lineNumber","field_type":"int","full_declaration":"int lineNumber","id":3731},{"comment":"","field_name":"markLineNumber","field_type":"int","full_declaration":"int markLineNumber","id":3732},{"comment":"","field_name":"markPushBack","field_type":"int","full_declaration":"int markPushBack = -1","id":3733},{"comment":"/**\r\n * The current line number\r\n */\r\n","field_name":"lineNumber","field_type":"int","full_declaration":"private int lineNumber = 0","id":3734},{"comment":"/**\r\n * The line number of the mark, if any\r\n */\r\n// Defaults to 0\r\n","field_name":"markedLineNumber","field_type":"int","full_declaration":"private int markedLineNumber","id":3735},{"comment":"/**\r\n * If the next character is a line feed, skip it\r\n */\r\n","field_name":"skipLF","field_type":"boolean","full_declaration":"private boolean skipLF","id":3736},{"comment":"/**\r\n * The skipLF flag when the mark was set\r\n */\r\n","field_name":"markedSkipLF","field_type":"boolean","full_declaration":"private boolean markedSkipLF","id":3737},{"comment":"/**\r\n * Maximum skip-buffer size\r\n */\r\n","field_name":"maxSkipBufferSize","field_type":"int","full_declaration":"private static final int maxSkipBufferSize = 8192","id":3738},{"comment":"/**\r\n * Skip buffer, null until allocated\r\n */\r\n","field_name":"skipBuffer","field_type":"char[]","full_declaration":"private char[] skipBuffer = null","id":3739},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -3893467273049808895L","id":3740},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 2906642554793891381L","id":3741},{"comment":"/**\r\n * handle value representing null\r\n */\r\n","field_name":"NULL_HANDLE","field_type":"int","full_declaration":"private static final int NULL_HANDLE = -1","id":3742},{"comment":"/**\r\n * marker for unshared objects in internal handle table\r\n */\r\nprivate static final Object unsharedMarker = new Object();","field_name":"unsharedMarker","field_type":"java.lang.Object","full_declaration":"private static final java.lang.Object unsharedMarker = new Object()","id":3743},{"comment":"/**\r\n * table mapping primitive type names to corresponding class objects\r\n */\r\nprivate static final HashMap<String, Class<?>> primClasses = new HashMap<>(8, 1.0F);","field_name":"primClasses","field_type":"java.util.HashMap","full_declaration":"private static final java.util.HashMap primClasses = new HashMap<>(8, 1.0F)","id":3744},{"comment":"/**\r\n * filter stream for handling block data conversion\r\n */\r\nprivate final BlockDataInputStream bin;","field_name":"bin","field_type":"java.io.ObjectInputStream.BlockDataInputStream","full_declaration":"private final java.io.ObjectInputStream.BlockDataInputStream bin","id":3745},{"comment":"/**\r\n * validation callback list\r\n */\r\nprivate final ValidationList vlist;","field_name":"vlist","field_type":"java.io.ObjectInputStream.ValidationList","full_declaration":"private final java.io.ObjectInputStream.ValidationList vlist","id":3746},{"comment":"/**\r\n * recursion depth\r\n */\r\n","field_name":"depth","field_type":"long","full_declaration":"private long depth","id":3747},{"comment":"/**\r\n * Total number of references to any type of object, class, enum, proxy, etc.\r\n */\r\n","field_name":"totalObjectRefs","field_type":"long","full_declaration":"private long totalObjectRefs","id":3748},{"comment":"/**\r\n * whether stream is closed\r\n */\r\n","field_name":"closed","field_type":"boolean","full_declaration":"private boolean closed","id":3749},{"comment":"/**\r\n * wire handle -> obj/exception map\r\n */\r\nprivate final HandleTable handles;","field_name":"handles","field_type":"java.io.ObjectInputStream.HandleTable","full_declaration":"private final java.io.ObjectInputStream.HandleTable handles","id":3750},{"comment":"/**\r\n * scratch field for passing handle values up/down call stack\r\n */\r\n","field_name":"passHandle","field_type":"int","full_declaration":"private int passHandle = NULL_HANDLE","id":3751},{"comment":"/**\r\n * flag set when at end of field value block with no TC_ENDBLOCKDATA\r\n */\r\n","field_name":"defaultDataEnd","field_type":"boolean","full_declaration":"private boolean defaultDataEnd = false","id":3752},{"comment":"/**\r\n * buffer for reading primitive field values\r\n */\r\n","field_name":"primVals","field_type":"byte[]","full_declaration":"private byte[] primVals","id":3753},{"comment":"/**\r\n * if true, invoke readObjectOverride() instead of readObject()\r\n */\r\n","field_name":"enableOverride","field_type":"boolean","full_declaration":"private final boolean enableOverride","id":3754},{"comment":"/**\r\n * if true, invoke resolveObject()\r\n */\r\n","field_name":"enableResolve","field_type":"boolean","full_declaration":"private boolean enableResolve","id":3755},{"comment":"/**\r\n * Context during upcalls to class-defined readObject methods; holds\r\n * object currently being deserialized and descriptor for current class.\r\n * Null when not during readObject upcall.\r\n */\r\nprivate SerialCallbackContext curContext;","field_name":"curContext","field_type":"java.io.SerialCallbackContext","full_declaration":"private java.io.SerialCallbackContext curContext","id":3756},{"comment":"/**\r\n * Filter of class descriptors and classes read from the stream;\r\n * may be null.\r\n */\r\nprivate ObjectInputFilter serialFilter;","field_name":"serialFilter","field_type":"sun.misc.ObjectInputFilter","full_declaration":"private sun.misc.ObjectInputFilter serialFilter","id":3757},{"comment":"// controlled access to ObjectStreamClassValidator\r\nprivate volatile ObjectStreamClassValidator validator;","field_name":"validator","field_type":"sun.misc.ObjectStreamClassValidator","full_declaration":"private volatile sun.misc.ObjectStreamClassValidator validator","id":3758},{"comment":"/**\r\n * cache of subclass security audit results\r\n */\r\nstatic final ConcurrentMap<WeakClassKey, Boolean> subclassAudits = new ConcurrentHashMap<>();","field_name":"subclassAudits","field_type":"java.util.concurrent.ConcurrentMap","full_declaration":"static final java.util.concurrent.ConcurrentMap subclassAudits = new ConcurrentHashMap<>()","id":3759},{"comment":"/**\r\n * queue for WeakReferences to audited subclasses\r\n */\r\nstatic final ReferenceQueue<Class<?>> subclassAuditsQueue = new ReferenceQueue<>();","field_name":"subclassAuditsQueue","field_type":"java.lang.ref.ReferenceQueue","full_declaration":"static final java.lang.ref.ReferenceQueue subclassAuditsQueue = new ReferenceQueue<>()","id":3760},{"comment":"/*\r\n         * Logger for ObjectInputFilter results.\r\n         * Setup the filter logger if it is set to INFO or WARNING.\r\n         * (Assuming it will not change).\r\n         */\r\nprivate static final PlatformLogger traceLogger;","field_name":"traceLogger","field_type":"sun.util.logging.PlatformLogger","full_declaration":"private static final sun.util.logging.PlatformLogger traceLogger","id":3761},{"comment":"private static final PlatformLogger infoLogger;","field_name":"infoLogger","field_type":"sun.util.logging.PlatformLogger","full_declaration":"private static final sun.util.logging.PlatformLogger infoLogger","id":3762},{"comment":"/**\r\n * class descriptor describing serializable fields\r\n */\r\nprivate final ObjectStreamClass desc;","field_name":"desc","field_type":"java.io.ObjectStreamClass","full_declaration":"private final java.io.ObjectStreamClass desc","id":3763},{"comment":"/**\r\n * primitive field values\r\n */\r\n","field_name":"primVals","field_type":"byte[]","full_declaration":"private final byte[] primVals","id":3764},{"comment":"/**\r\n * object field values\r\n */\r\n","field_name":"objVals","field_type":"Object[]","full_declaration":"private final Object[] objVals","id":3765},{"comment":"/**\r\n * object field value handles\r\n */\r\n","field_name":"objHandles","field_type":"int[]","full_declaration":"private final int[] objHandles","id":3766},{"comment":"/**\r\n * linked list of callbacks\r\n */\r\nprivate Callback list;","field_name":"list","field_type":"java.io.ObjectInputStream.ValidationList.Callback","full_declaration":"private java.io.ObjectInputStream.ValidationList.Callback list","id":3767},{"comment":"final ObjectInputValidation obj;","field_name":"obj","field_type":"java.io.ObjectInputValidation","full_declaration":"final java.io.ObjectInputValidation obj","id":3768},{"comment":"","field_name":"priority","field_type":"int","full_declaration":"final int priority","id":3769},{"comment":"Callback next;","field_name":"next","field_type":"java.io.ObjectInputStream.ValidationList.Callback","full_declaration":"java.io.ObjectInputStream.ValidationList.Callback next","id":3770},{"comment":"final AccessControlContext acc;","field_name":"acc","field_type":"java.security.AccessControlContext","full_declaration":"final java.security.AccessControlContext acc","id":3771},{"comment":"final Class<?> clazz;","field_name":"clazz","field_type":"java.lang.Class","full_declaration":"final java.lang.Class clazz","id":3772},{"comment":"","field_name":"arrayLength","field_type":"long","full_declaration":"final long arrayLength","id":3773},{"comment":"","field_name":"totalObjectRefs","field_type":"long","full_declaration":"final long totalObjectRefs","id":3774},{"comment":"","field_name":"depth","field_type":"long","full_declaration":"final long depth","id":3775},{"comment":"","field_name":"streamBytes","field_type":"long","full_declaration":"final long streamBytes","id":3776},{"comment":"/**\r\n * underlying stream\r\n */\r\nprivate final InputStream in;","field_name":"in","field_type":"java.io.InputStream","full_declaration":"private final java.io.InputStream in","id":3777},{"comment":"/**\r\n * peeked byte\r\n */\r\n","field_name":"peekb","field_type":"int","full_declaration":"private int peekb = -1","id":3778},{"comment":"/**\r\n * total bytes read from the stream\r\n */\r\n","field_name":"totalBytesRead","field_type":"long","full_declaration":"private long totalBytesRead = 0","id":3779},{"comment":"/**\r\n * maximum data block length\r\n */\r\n","field_name":"MAX_BLOCK_SIZE","field_type":"int","full_declaration":"private static final int MAX_BLOCK_SIZE = 1024","id":3780},{"comment":"/**\r\n * maximum data block header length\r\n */\r\n","field_name":"MAX_HEADER_SIZE","field_type":"int","full_declaration":"private static final int MAX_HEADER_SIZE = 5","id":3781},{"comment":"/**\r\n * (tunable) length of char buffer (for reading strings)\r\n */\r\n","field_name":"CHAR_BUF_SIZE","field_type":"int","full_declaration":"private static final int CHAR_BUF_SIZE = 256","id":3782},{"comment":"/**\r\n * readBlockHeader() return value indicating header read may block\r\n */\r\n","field_name":"HEADER_BLOCKED","field_type":"int","full_declaration":"private static final int HEADER_BLOCKED = -2","id":3783},{"comment":"/**\r\n * buffer for reading general/block data\r\n */\r\n","field_name":"buf","field_type":"byte[]","full_declaration":"private final byte[] buf = new byte[MAX_BLOCK_SIZE]","id":3784},{"comment":"/**\r\n * buffer for reading block data headers\r\n */\r\n","field_name":"hbuf","field_type":"byte[]","full_declaration":"private final byte[] hbuf = new byte[MAX_HEADER_SIZE]","id":3785},{"comment":"/**\r\n * char buffer for fast string reads\r\n */\r\n","field_name":"cbuf","field_type":"char[]","full_declaration":"private final char[] cbuf = new char[CHAR_BUF_SIZE]","id":3786},{"comment":"/**\r\n * block data mode\r\n */\r\n","field_name":"blkmode","field_type":"boolean","full_declaration":"private boolean blkmode = false","id":3787},{"comment":"// block data state fields; values meaningful only when blkmode true\r\n/**\r\n * current offset into buf\r\n */\r\n","field_name":"pos","field_type":"int","full_declaration":"private int pos = 0","id":3788},{"comment":"/**\r\n * end offset of valid data in buf, or -1 if no more block data\r\n */\r\n","field_name":"end","field_type":"int","full_declaration":"private int end = -1","id":3789},{"comment":"/**\r\n * number of bytes in current block yet to be read from stream\r\n */\r\n","field_name":"unread","field_type":"int","full_declaration":"private int unread = 0","id":3790},{"comment":"/**\r\n * underlying stream (wrapped in peekable filter stream)\r\n */\r\nprivate final PeekInputStream in;","field_name":"in","field_type":"java.io.ObjectInputStream.PeekInputStream","full_declaration":"private final java.io.ObjectInputStream.PeekInputStream in","id":3791},{"comment":"/**\r\n * loopback stream (for data reads that span data blocks)\r\n */\r\nprivate final DataInputStream din;","field_name":"din","field_type":"java.io.DataInputStream","full_declaration":"private final java.io.DataInputStream din","id":3792},{"comment":"/* status codes indicating whether object has associated exception */\r\n","field_name":"STATUS_OK","field_type":"byte","full_declaration":"private static final byte STATUS_OK = 1","id":3793},{"comment":"","field_name":"STATUS_UNKNOWN","field_type":"byte","full_declaration":"private static final byte STATUS_UNKNOWN = 2","id":3794},{"comment":"","field_name":"STATUS_EXCEPTION","field_type":"byte","full_declaration":"private static final byte STATUS_EXCEPTION = 3","id":3795},{"comment":"/**\r\n * array mapping handle -> object status\r\n */\r\n","field_name":"status","field_type":"byte[]","full_declaration":"byte[] status","id":3796},{"comment":"/**\r\n * array mapping handle -> object/exception (depending on status)\r\n */\r\n","field_name":"entries","field_type":"Object[]","full_declaration":"Object[] entries","id":3797},{"comment":"/**\r\n * array mapping handle -> list of dependent handles (if any)\r\n */\r\n","field_name":"deps","field_type":"HandleList[]","full_declaration":"HandleList[] deps","id":3798},{"comment":"/**\r\n * lowest unresolved dependency\r\n */\r\n","field_name":"lowDep","field_type":"int","full_declaration":"int lowDep = -1","id":3799},{"comment":"/**\r\n * number of handles in table\r\n */\r\n","field_name":"size","field_type":"int","full_declaration":"int size = 0","id":3800},{"comment":"","field_name":"list","field_type":"int[]","full_declaration":"private int[] list = new int[4]","id":3801},{"comment":"","field_name":"size","field_type":"int","full_declaration":"private int size = 0","id":3802},{"comment":"/**\r\n * filter stream for handling block data conversion\r\n */\r\nprivate final BlockDataOutputStream bout;","field_name":"bout","field_type":"java.io.ObjectOutputStream.BlockDataOutputStream","full_declaration":"private final java.io.ObjectOutputStream.BlockDataOutputStream bout","id":3803},{"comment":"/**\r\n * obj -> wire handle map\r\n */\r\nprivate final HandleTable handles;","field_name":"handles","field_type":"java.io.ObjectOutputStream.HandleTable","full_declaration":"private final java.io.ObjectOutputStream.HandleTable handles","id":3804},{"comment":"/**\r\n * obj -> replacement obj map\r\n */\r\nprivate final ReplaceTable subs;","field_name":"subs","field_type":"java.io.ObjectOutputStream.ReplaceTable","full_declaration":"private final java.io.ObjectOutputStream.ReplaceTable subs","id":3805},{"comment":"/**\r\n * stream protocol version\r\n */\r\n","field_name":"protocol","field_type":"int","full_declaration":"private int protocol = PROTOCOL_VERSION_2","id":3806},{"comment":"/**\r\n * recursion depth\r\n */\r\n","field_name":"depth","field_type":"int","full_declaration":"private int depth","id":3807},{"comment":"/**\r\n * buffer for writing primitive field values\r\n */\r\n","field_name":"primVals","field_type":"byte[]","full_declaration":"private byte[] primVals","id":3808},{"comment":"/**\r\n * if true, invoke writeObjectOverride() instead of writeObject()\r\n */\r\n","field_name":"enableOverride","field_type":"boolean","full_declaration":"private final boolean enableOverride","id":3809},{"comment":"/**\r\n * if true, invoke replaceObject()\r\n */\r\n","field_name":"enableReplace","field_type":"boolean","full_declaration":"private boolean enableReplace","id":3810},{"comment":"// values below valid only during upcalls to writeObject()/writeExternal()\r\n/**\r\n * Context during upcalls to class-defined writeObject methods; holds\r\n * object currently being serialized and descriptor for current class.\r\n * Null when not during writeObject upcall.\r\n */\r\nprivate SerialCallbackContext curContext;","field_name":"curContext","field_type":"java.io.SerialCallbackContext","full_declaration":"private java.io.SerialCallbackContext curContext","id":3811},{"comment":"/**\r\n * current PutField object\r\n */\r\nprivate PutFieldImpl curPut;","field_name":"curPut","field_type":"java.io.ObjectOutputStream.PutFieldImpl","full_declaration":"private java.io.ObjectOutputStream.PutFieldImpl curPut","id":3812},{"comment":"/**\r\n * custom storage for debug trace info\r\n */\r\nprivate final DebugTraceInfoStack debugInfoStack;","field_name":"debugInfoStack","field_type":"java.io.ObjectOutputStream.DebugTraceInfoStack","full_declaration":"private final java.io.ObjectOutputStream.DebugTraceInfoStack debugInfoStack","id":3813},{"comment":"/**\r\n * value of \"sun.io.serialization.extendedDebugInfo\" property,\r\n * as true or false for extended information about exception's place\r\n */\r\n","field_name":"extendedDebugInfo","field_type":"boolean","full_declaration":"private static final boolean extendedDebugInfo = java.security.AccessController.doPrivileged(new sun.security.action.GetBooleanAction(\"sun.io.serialization.extendedDebugInfo\")).booleanValue()","id":3814},{"comment":"/**\r\n * cache of subclass security audit results\r\n */\r\nstatic final ConcurrentMap<WeakClassKey, Boolean> subclassAudits = new ConcurrentHashMap<>();","field_name":"subclassAudits","field_type":"java.util.concurrent.ConcurrentMap","full_declaration":"static final java.util.concurrent.ConcurrentMap subclassAudits = new ConcurrentHashMap<>()","id":3815},{"comment":"/**\r\n * queue for WeakReferences to audited subclasses\r\n */\r\nstatic final ReferenceQueue<Class<?>> subclassAuditsQueue = new ReferenceQueue<>();","field_name":"subclassAuditsQueue","field_type":"java.lang.ref.ReferenceQueue","full_declaration":"static final java.lang.ref.ReferenceQueue subclassAuditsQueue = new ReferenceQueue<>()","id":3816},{"comment":"/**\r\n * class descriptor describing serializable fields\r\n */\r\nprivate final ObjectStreamClass desc;","field_name":"desc","field_type":"java.io.ObjectStreamClass","full_declaration":"private final java.io.ObjectStreamClass desc","id":3817},{"comment":"/**\r\n * primitive field values\r\n */\r\n","field_name":"primVals","field_type":"byte[]","full_declaration":"private final byte[] primVals","id":3818},{"comment":"/**\r\n * object field values\r\n */\r\n","field_name":"objVals","field_type":"Object[]","full_declaration":"private final Object[] objVals","id":3819},{"comment":"/**\r\n * maximum data block length\r\n */\r\n","field_name":"MAX_BLOCK_SIZE","field_type":"int","full_declaration":"private static final int MAX_BLOCK_SIZE = 1024","id":3820},{"comment":"/**\r\n * maximum data block header length\r\n */\r\n","field_name":"MAX_HEADER_SIZE","field_type":"int","full_declaration":"private static final int MAX_HEADER_SIZE = 5","id":3821},{"comment":"/**\r\n * (tunable) length of char buffer (for writing strings)\r\n */\r\n","field_name":"CHAR_BUF_SIZE","field_type":"int","full_declaration":"private static final int CHAR_BUF_SIZE = 256","id":3822},{"comment":"/**\r\n * buffer for writing general/block data\r\n */\r\n","field_name":"buf","field_type":"byte[]","full_declaration":"private final byte[] buf = new byte[MAX_BLOCK_SIZE]","id":3823},{"comment":"/**\r\n * buffer for writing block data headers\r\n */\r\n","field_name":"hbuf","field_type":"byte[]","full_declaration":"private final byte[] hbuf = new byte[MAX_HEADER_SIZE]","id":3824},{"comment":"/**\r\n * char buffer for fast string writes\r\n */\r\n","field_name":"cbuf","field_type":"char[]","full_declaration":"private final char[] cbuf = new char[CHAR_BUF_SIZE]","id":3825},{"comment":"/**\r\n * block data mode\r\n */\r\n","field_name":"blkmode","field_type":"boolean","full_declaration":"private boolean blkmode = false","id":3826},{"comment":"/**\r\n * current offset into buf\r\n */\r\n","field_name":"pos","field_type":"int","full_declaration":"private int pos = 0","id":3827},{"comment":"/**\r\n * underlying output stream\r\n */\r\nprivate final OutputStream out;","field_name":"out","field_type":"java.io.OutputStream","full_declaration":"private final java.io.OutputStream out","id":3828},{"comment":"/**\r\n * loopback stream (for data writes that span data blocks)\r\n */\r\nprivate final DataOutputStream dout;","field_name":"dout","field_type":"java.io.DataOutputStream","full_declaration":"private final java.io.DataOutputStream dout","id":3829},{"comment":"/* number of mappings in table/next available handle */\r\n","field_name":"size","field_type":"int","full_declaration":"private int size","id":3830},{"comment":"/* size threshold determining when to expand hash spine */\r\n","field_name":"threshold","field_type":"int","full_declaration":"private int threshold","id":3831},{"comment":"/* factor for computing size threshold */\r\n","field_name":"loadFactor","field_type":"float","full_declaration":"private final float loadFactor","id":3832},{"comment":"/* maps hash value -> candidate handle value */\r\n","field_name":"spine","field_type":"int[]","full_declaration":"private int[] spine","id":3833},{"comment":"/* maps handle value -> next candidate handle value */\r\n","field_name":"next","field_type":"int[]","full_declaration":"private int[] next","id":3834},{"comment":"/* maps handle value -> associated object */\r\n","field_name":"objs","field_type":"Object[]","full_declaration":"private Object[] objs","id":3835},{"comment":"/* maps object -> index */\r\nprivate final HandleTable htab;","field_name":"htab","field_type":"java.io.ObjectOutputStream.HandleTable","full_declaration":"private final java.io.ObjectOutputStream.HandleTable htab","id":3836},{"comment":"/* maps index -> replacement object */\r\n","field_name":"reps","field_type":"Object[]","full_declaration":"private Object[] reps","id":3837},{"comment":"private final List<String> stack;","field_name":"stack","field_type":"java.util.List","full_declaration":"private final java.util.List stack","id":3838},{"comment":"/**\r\n * serialPersistentFields value indicating no serializable fields\r\n */\r\n","field_name":"NO_FIELDS","field_type":"ObjectStreamField[]","full_declaration":"public static final ObjectStreamField[] NO_FIELDS = new ObjectStreamField[0]","id":3839},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -6120832682080437368L","id":3840},{"comment":"","field_name":"serialPersistentFields","field_type":"ObjectStreamField[]","full_declaration":"private static final ObjectStreamField[] serialPersistentFields = NO_FIELDS","id":3841},{"comment":"/**\r\n * true if deserialization constructor checking is disabled\r\n */\r\n","field_name":"disableSerialConstructorChecks","field_type":"boolean","full_declaration":"private static boolean disableSerialConstructorChecks = AccessController.doPrivileged(new PrivilegedAction<Boolean>() {\r\n\r\n    public Boolean run() {\r\n        String prop = \"jdk.disableSerialConstructorChecks\";\r\n        return \"true\".equals(System.getProperty(prop)) ? Boolean.TRUE : Boolean.FALSE;\r\n    }\r\n}).booleanValue()","id":3842},{"comment":"/**\r\n * reflection factory for obtaining serialization constructors\r\n */\r\nprivate static final ReflectionFactory reflFactory = AccessController.doPrivileged(new ReflectionFactory.GetReflectionFactoryAction());","field_name":"reflFactory","field_type":"sun.reflect.ReflectionFactory","full_declaration":"private static final sun.reflect.ReflectionFactory reflFactory = AccessController.doPrivileged(new ReflectionFactory.GetReflectionFactoryAction())","id":3843},{"comment":"/**\r\n * class associated with this descriptor (if any)\r\n */\r\nprivate Class<?> cl;","field_name":"cl","field_type":"java.lang.Class","full_declaration":"private java.lang.Class cl","id":3844},{"comment":"/**\r\n * name of class represented by this descriptor\r\n */\r\nprivate String name;","field_name":"name","field_type":"java.lang.String","full_declaration":"private java.lang.String name","id":3845},{"comment":"/**\r\n * serialVersionUID of represented class (null if not computed yet)\r\n */\r\nprivate volatile Long suid;","field_name":"suid","field_type":"java.lang.Long","full_declaration":"private volatile java.lang.Long suid","id":3846},{"comment":"/**\r\n * true if represents dynamic proxy class\r\n */\r\n","field_name":"isProxy","field_type":"boolean","full_declaration":"private boolean isProxy","id":3847},{"comment":"/**\r\n * true if represents enum type\r\n */\r\n","field_name":"isEnum","field_type":"boolean","full_declaration":"private boolean isEnum","id":3848},{"comment":"/**\r\n * true if represented class implements Serializable\r\n */\r\n","field_name":"serializable","field_type":"boolean","full_declaration":"private boolean serializable","id":3849},{"comment":"/**\r\n * true if represented class implements Externalizable\r\n */\r\n","field_name":"externalizable","field_type":"boolean","full_declaration":"private boolean externalizable","id":3850},{"comment":"/**\r\n * true if desc has data written by class-defined writeObject method\r\n */\r\n","field_name":"hasWriteObjectData","field_type":"boolean","full_declaration":"private boolean hasWriteObjectData","id":3851},{"comment":"/**\r\n * true if desc has externalizable data written in block data format; this\r\n * must be true by default to accommodate ObjectInputStream subclasses which\r\n * override readClassDescriptor() to return class descriptors obtained from\r\n * ObjectStreamClass.lookup() (see 4461737)\r\n */\r\n","field_name":"hasBlockExternalData","field_type":"boolean","full_declaration":"private boolean hasBlockExternalData = true","id":3852},{"comment":"/**\r\n * exception (if any) thrown while attempting to resolve class\r\n */\r\nprivate ClassNotFoundException resolveEx;","field_name":"resolveEx","field_type":"java.lang.ClassNotFoundException","full_declaration":"private java.lang.ClassNotFoundException resolveEx","id":3853},{"comment":"/**\r\n * exception (if any) to throw if non-enum deserialization attempted\r\n */\r\nprivate ExceptionInfo deserializeEx;","field_name":"deserializeEx","field_type":"java.io.ObjectStreamClass.ExceptionInfo","full_declaration":"private java.io.ObjectStreamClass.ExceptionInfo deserializeEx","id":3854},{"comment":"/**\r\n * exception (if any) to throw if non-enum serialization attempted\r\n */\r\nprivate ExceptionInfo serializeEx;","field_name":"serializeEx","field_type":"java.io.ObjectStreamClass.ExceptionInfo","full_declaration":"private java.io.ObjectStreamClass.ExceptionInfo serializeEx","id":3855},{"comment":"/**\r\n * exception (if any) to throw if default serialization attempted\r\n */\r\nprivate ExceptionInfo defaultSerializeEx;","field_name":"defaultSerializeEx","field_type":"java.io.ObjectStreamClass.ExceptionInfo","full_declaration":"private java.io.ObjectStreamClass.ExceptionInfo defaultSerializeEx","id":3856},{"comment":"/**\r\n * serializable fields\r\n */\r\n","field_name":"fields","field_type":"ObjectStreamField[]","full_declaration":"private ObjectStreamField[] fields","id":3857},{"comment":"/**\r\n * aggregate marshalled size of primitive fields\r\n */\r\n","field_name":"primDataSize","field_type":"int","full_declaration":"private int primDataSize","id":3858},{"comment":"/**\r\n * number of non-primitive fields\r\n */\r\n","field_name":"numObjFields","field_type":"int","full_declaration":"private int numObjFields","id":3859},{"comment":"/**\r\n * reflector for setting/getting serializable field values\r\n */\r\nprivate FieldReflector fieldRefl;","field_name":"fieldRefl","field_type":"java.io.ObjectStreamClass.FieldReflector","full_declaration":"private java.io.ObjectStreamClass.FieldReflector fieldRefl","id":3860},{"comment":"/**\r\n * data layout of serialized objects described by this class desc\r\n */\r\n","field_name":"dataLayout","field_type":"ClassDataSlot[]","full_declaration":"private volatile ClassDataSlot[] dataLayout","id":3861},{"comment":"/**\r\n * serialization-appropriate constructor, or null if none\r\n */\r\nprivate Constructor<?> cons;","field_name":"cons","field_type":"java.lang.reflect.Constructor","full_declaration":"private java.lang.reflect.Constructor cons","id":3862},{"comment":"/**\r\n * protection domains that need to be checked when calling the constructor\r\n */\r\n","field_name":"domains","field_type":"ProtectionDomain[]","full_declaration":"private ProtectionDomain[] domains","id":3863},{"comment":"/**\r\n * class-defined writeObject method, or null if none\r\n */\r\nprivate Method writeObjectMethod;","field_name":"writeObjectMethod","field_type":"java.lang.reflect.Method","full_declaration":"private java.lang.reflect.Method writeObjectMethod","id":3864},{"comment":"/**\r\n * class-defined readObject method, or null if none\r\n */\r\nprivate Method readObjectMethod;","field_name":"readObjectMethod","field_type":"java.lang.reflect.Method","full_declaration":"private java.lang.reflect.Method readObjectMethod","id":3865},{"comment":"/**\r\n * class-defined readObjectNoData method, or null if none\r\n */\r\nprivate Method readObjectNoDataMethod;","field_name":"readObjectNoDataMethod","field_type":"java.lang.reflect.Method","full_declaration":"private java.lang.reflect.Method readObjectNoDataMethod","id":3866},{"comment":"/**\r\n * class-defined writeReplace method, or null if none\r\n */\r\nprivate Method writeReplaceMethod;","field_name":"writeReplaceMethod","field_type":"java.lang.reflect.Method","full_declaration":"private java.lang.reflect.Method writeReplaceMethod","id":3867},{"comment":"/**\r\n * class-defined readResolve method, or null if none\r\n */\r\nprivate Method readResolveMethod;","field_name":"readResolveMethod","field_type":"java.lang.reflect.Method","full_declaration":"private java.lang.reflect.Method readResolveMethod","id":3868},{"comment":"/**\r\n * local class descriptor for represented class (may point to self)\r\n */\r\nprivate ObjectStreamClass localDesc;","field_name":"localDesc","field_type":"java.io.ObjectStreamClass","full_declaration":"private java.io.ObjectStreamClass localDesc","id":3869},{"comment":"/**\r\n * superclass descriptor appearing in stream\r\n */\r\nprivate ObjectStreamClass superDesc;","field_name":"superDesc","field_type":"java.io.ObjectStreamClass","full_declaration":"private java.io.ObjectStreamClass superDesc","id":3870},{"comment":"/**\r\n * true if, and only if, the object has been correctly initialized\r\n */\r\n","field_name":"initialized","field_type":"boolean","full_declaration":"private boolean initialized","id":3871},{"comment":"/**\r\n * cache mapping local classes -> descriptors\r\n */\r\nstatic final ConcurrentMap<WeakClassKey, Reference<?>> localDescs = new ConcurrentHashMap<>();","field_name":"localDescs","field_type":"java.util.concurrent.ConcurrentMap","full_declaration":"static final java.util.concurrent.ConcurrentMap localDescs = new ConcurrentHashMap<>()","id":3872},{"comment":"/**\r\n * cache mapping field group/local desc pairs -> field reflectors\r\n */\r\nstatic final ConcurrentMap<FieldReflectorKey, Reference<?>> reflectors = new ConcurrentHashMap<>();","field_name":"reflectors","field_type":"java.util.concurrent.ConcurrentMap","full_declaration":"static final java.util.concurrent.ConcurrentMap reflectors = new ConcurrentHashMap<>()","id":3873},{"comment":"/**\r\n * queue for WeakReferences to local classes\r\n */\r\nprivate static final ReferenceQueue<Class<?>> localDescsQueue = new ReferenceQueue<>();","field_name":"localDescsQueue","field_type":"java.lang.ref.ReferenceQueue","full_declaration":"private static final java.lang.ref.ReferenceQueue localDescsQueue = new ReferenceQueue<>()","id":3874},{"comment":"/**\r\n * queue for WeakReferences to field reflectors keys\r\n */\r\nprivate static final ReferenceQueue<Class<?>> reflectorsQueue = new ReferenceQueue<>();","field_name":"reflectorsQueue","field_type":"java.lang.ref.ReferenceQueue","full_declaration":"private static final java.lang.ref.ReferenceQueue reflectorsQueue = new ReferenceQueue<>()","id":3875},{"comment":"private final String className;","field_name":"className","field_type":"java.lang.String","full_declaration":"private final java.lang.String className","id":3876},{"comment":"private final String message;","field_name":"message","field_type":"java.lang.String","full_declaration":"private final java.lang.String message","id":3877},{"comment":"private static final Object unset = new Object();","field_name":"unset","field_type":"java.lang.Object","full_declaration":"private static final java.lang.Object unset = new Object()","id":3878},{"comment":"private final Thread owner = Thread.currentThread();","field_name":"owner","field_type":"java.lang.Thread","full_declaration":"private final java.lang.Thread owner = Thread.currentThread()","id":3879},{"comment":"private Object entry = unset;","field_name":"entry","field_type":"java.lang.Object","full_declaration":"private java.lang.Object entry = unset","id":3880},{"comment":"/**\r\n * class descriptor \"occupying\" this slot\r\n */\r\nfinal ObjectStreamClass desc;","field_name":"desc","field_type":"java.io.ObjectStreamClass","full_declaration":"final java.io.ObjectStreamClass desc","id":3881},{"comment":"/**\r\n * true if serialized form includes data for this slot's descriptor\r\n */\r\n","field_name":"hasData","field_type":"boolean","full_declaration":"final boolean hasData","id":3882},{"comment":"public final Member member;","field_name":"member","field_type":"java.lang.reflect.Member","full_declaration":"public final java.lang.reflect.Member member","id":3883},{"comment":"public final String name;","field_name":"name","field_type":"java.lang.String","full_declaration":"public final java.lang.String name","id":3884},{"comment":"public final String signature;","field_name":"signature","field_type":"java.lang.String","full_declaration":"public final java.lang.String signature","id":3885},{"comment":"/**\r\n * handle for performing unsafe operations\r\n */\r\nprivate static final Unsafe unsafe = Unsafe.getUnsafe();","field_name":"unsafe","field_type":"sun.misc.Unsafe","full_declaration":"private static final sun.misc.Unsafe unsafe = Unsafe.getUnsafe()","id":3886},{"comment":"/**\r\n * fields to operate on\r\n */\r\n","field_name":"fields","field_type":"ObjectStreamField[]","full_declaration":"private final ObjectStreamField[] fields","id":3887},{"comment":"/**\r\n * number of primitive fields\r\n */\r\n","field_name":"numPrimFields","field_type":"int","full_declaration":"private final int numPrimFields","id":3888},{"comment":"/**\r\n * unsafe field keys for reading fields - may contain dupes\r\n */\r\n","field_name":"readKeys","field_type":"long[]","full_declaration":"private final long[] readKeys","id":3889},{"comment":"/**\r\n * unsafe fields keys for writing fields - no dupes\r\n */\r\n","field_name":"writeKeys","field_type":"long[]","full_declaration":"private final long[] writeKeys","id":3890},{"comment":"/**\r\n * field data offsets\r\n */\r\n","field_name":"offsets","field_type":"int[]","full_declaration":"private final int[] offsets","id":3891},{"comment":"/**\r\n * field type codes\r\n */\r\n","field_name":"typeCodes","field_type":"char[]","full_declaration":"private final char[] typeCodes","id":3892},{"comment":"/**\r\n * field types\r\n */\r\n","field_name":"types","field_type":"Class<?>[]","full_declaration":"private final Class<?>[] types","id":3893},{"comment":"private final String sigs;","field_name":"sigs","field_type":"java.lang.String","full_declaration":"private final java.lang.String sigs","id":3894},{"comment":"","field_name":"hash","field_type":"int","full_declaration":"private final int hash","id":3895},{"comment":"","field_name":"nullClass","field_type":"boolean","full_declaration":"private final boolean nullClass","id":3896},{"comment":"/**\r\n * saved value of the referent's identity hash code, to maintain\r\n * a consistent hash code after the referent has been cleared\r\n */\r\n","field_name":"hash","field_type":"int","full_declaration":"private final int hash","id":3897},{"comment":"/**\r\n * Magic number that is written to the stream header.\r\n */\r\n","field_name":"STREAM_MAGIC","field_type":"short","full_declaration":"final static short STREAM_MAGIC = (short) 0xaced","id":3898},{"comment":"/**\r\n * Version number that is written to the stream header.\r\n */\r\n","field_name":"STREAM_VERSION","field_type":"short","full_declaration":"final static short STREAM_VERSION = 5","id":3899},{"comment":"/* Each item in the stream is preceded by a tag\r\n     */\r\n/**\r\n * First tag value.\r\n */\r\n","field_name":"TC_BASE","field_type":"byte","full_declaration":"final static byte TC_BASE = 0x70","id":3900},{"comment":"/**\r\n * Null object reference.\r\n */\r\n","field_name":"TC_NULL","field_type":"byte","full_declaration":"final static byte TC_NULL = (byte) 0x70","id":3901},{"comment":"/**\r\n * Reference to an object already written into the stream.\r\n */\r\n","field_name":"TC_REFERENCE","field_type":"byte","full_declaration":"final static byte TC_REFERENCE = (byte) 0x71","id":3902},{"comment":"/**\r\n * new Class Descriptor.\r\n */\r\n","field_name":"TC_CLASSDESC","field_type":"byte","full_declaration":"final static byte TC_CLASSDESC = (byte) 0x72","id":3903},{"comment":"/**\r\n * new Object.\r\n */\r\n","field_name":"TC_OBJECT","field_type":"byte","full_declaration":"final static byte TC_OBJECT = (byte) 0x73","id":3904},{"comment":"/**\r\n * new String.\r\n */\r\n","field_name":"TC_STRING","field_type":"byte","full_declaration":"final static byte TC_STRING = (byte) 0x74","id":3905},{"comment":"/**\r\n * new Array.\r\n */\r\n","field_name":"TC_ARRAY","field_type":"byte","full_declaration":"final static byte TC_ARRAY = (byte) 0x75","id":3906},{"comment":"/**\r\n * Reference to Class.\r\n */\r\n","field_name":"TC_CLASS","field_type":"byte","full_declaration":"final static byte TC_CLASS = (byte) 0x76","id":3907},{"comment":"/**\r\n * Block of optional data. Byte following tag indicates number\r\n * of bytes in this block data.\r\n */\r\n","field_name":"TC_BLOCKDATA","field_type":"byte","full_declaration":"final static byte TC_BLOCKDATA = (byte) 0x77","id":3908},{"comment":"/**\r\n * End of optional block data blocks for an object.\r\n */\r\n","field_name":"TC_ENDBLOCKDATA","field_type":"byte","full_declaration":"final static byte TC_ENDBLOCKDATA = (byte) 0x78","id":3909},{"comment":"/**\r\n * Reset stream context. All handles written into stream are reset.\r\n */\r\n","field_name":"TC_RESET","field_type":"byte","full_declaration":"final static byte TC_RESET = (byte) 0x79","id":3910},{"comment":"/**\r\n * long Block data. The long following the tag indicates the\r\n * number of bytes in this block data.\r\n */\r\n","field_name":"TC_BLOCKDATALONG","field_type":"byte","full_declaration":"final static byte TC_BLOCKDATALONG = (byte) 0x7A","id":3911},{"comment":"/**\r\n * Exception during write.\r\n */\r\n","field_name":"TC_EXCEPTION","field_type":"byte","full_declaration":"final static byte TC_EXCEPTION = (byte) 0x7B","id":3912},{"comment":"/**\r\n * Long string.\r\n */\r\n","field_name":"TC_LONGSTRING","field_type":"byte","full_declaration":"final static byte TC_LONGSTRING = (byte) 0x7C","id":3913},{"comment":"/**\r\n * new Proxy Class Descriptor.\r\n */\r\n","field_name":"TC_PROXYCLASSDESC","field_type":"byte","full_declaration":"final static byte TC_PROXYCLASSDESC = (byte) 0x7D","id":3914},{"comment":"/**\r\n * new Enum constant.\r\n * @since 1.5\r\n */\r\n","field_name":"TC_ENUM","field_type":"byte","full_declaration":"final static byte TC_ENUM = (byte) 0x7E","id":3915},{"comment":"/**\r\n * Last tag value.\r\n */\r\n","field_name":"TC_MAX","field_type":"byte","full_declaration":"final static byte TC_MAX = (byte) 0x7E","id":3916},{"comment":"/**\r\n * First wire handle to be assigned.\r\n */\r\n","field_name":"baseWireHandle","field_type":"int","full_declaration":"final static int baseWireHandle = 0x7e0000","id":3917},{"comment":"/**\r\n * **************************************************\r\n */\r\n/* Bit masks for ObjectStreamClass flag.*/\r\n/**\r\n * Bit mask for ObjectStreamClass flag. Indicates a Serializable class\r\n * defines its own writeObject method.\r\n */\r\n","field_name":"SC_WRITE_METHOD","field_type":"byte","full_declaration":"final static byte SC_WRITE_METHOD = 0x01","id":3918},{"comment":"/**\r\n * Bit mask for ObjectStreamClass flag. Indicates Externalizable data\r\n * written in Block Data mode.\r\n * Added for PROTOCOL_VERSION_2.\r\n *\r\n * @see #PROTOCOL_VERSION_2\r\n * @since 1.2\r\n */\r\n","field_name":"SC_BLOCK_DATA","field_type":"byte","full_declaration":"final static byte SC_BLOCK_DATA = 0x08","id":3919},{"comment":"/**\r\n * Bit mask for ObjectStreamClass flag. Indicates class is Serializable.\r\n */\r\n","field_name":"SC_SERIALIZABLE","field_type":"byte","full_declaration":"final static byte SC_SERIALIZABLE = 0x02","id":3920},{"comment":"/**\r\n * Bit mask for ObjectStreamClass flag. Indicates class is Externalizable.\r\n */\r\n","field_name":"SC_EXTERNALIZABLE","field_type":"byte","full_declaration":"final static byte SC_EXTERNALIZABLE = 0x04","id":3921},{"comment":"/**\r\n * Bit mask for ObjectStreamClass flag. Indicates class is an enum type.\r\n * @since 1.5\r\n */\r\n","field_name":"SC_ENUM","field_type":"byte","full_declaration":"final static byte SC_ENUM = 0x10","id":3922},{"comment":"/* *******************************************************************/\r\n/* Security permissions */\r\n/**\r\n * Enable substitution of one object for another during\r\n * serialization/deserialization.\r\n *\r\n * @see java.io.ObjectOutputStream#enableReplaceObject(boolean)\r\n * @see java.io.ObjectInputStream#enableResolveObject(boolean)\r\n * @since 1.2\r\n */\r\nfinal static SerializablePermission SUBSTITUTION_PERMISSION = new SerializablePermission(\"enableSubstitution\");","field_name":"SUBSTITUTION_PERMISSION","field_type":"java.io.SerializablePermission","full_declaration":"final static java.io.SerializablePermission SUBSTITUTION_PERMISSION = new SerializablePermission(\"enableSubstitution\")","id":3923},{"comment":"/**\r\n * Enable overriding of readObject and writeObject.\r\n *\r\n * @see java.io.ObjectOutputStream#writeObjectOverride(Object)\r\n * @see java.io.ObjectInputStream#readObjectOverride()\r\n * @since 1.2\r\n */\r\nfinal static SerializablePermission SUBCLASS_IMPLEMENTATION_PERMISSION = new SerializablePermission(\"enableSubclassImplementation\");","field_name":"SUBCLASS_IMPLEMENTATION_PERMISSION","field_type":"java.io.SerializablePermission","full_declaration":"final static java.io.SerializablePermission SUBCLASS_IMPLEMENTATION_PERMISSION = new SerializablePermission(\"enableSubclassImplementation\")","id":3924},{"comment":"/**\r\n * A Stream Protocol Version. <p>\r\n *\r\n * All externalizable data is written in JDK 1.1 external data\r\n * format after calling this method. This version is needed to write\r\n * streams containing Externalizable data that can be read by\r\n * pre-JDK 1.1.6 JVMs.\r\n *\r\n * @see java.io.ObjectOutputStream#useProtocolVersion(int)\r\n * @since 1.2\r\n */\r\n","field_name":"PROTOCOL_VERSION_1","field_type":"int","full_declaration":"public final static int PROTOCOL_VERSION_1 = 1","id":3925},{"comment":"/**\r\n * A Stream Protocol Version. <p>\r\n *\r\n * This protocol is written by JVM 1.2.\r\n *\r\n * Externalizable data is written in block data mode and is\r\n * terminated with TC_ENDBLOCKDATA. Externalizable class descriptor\r\n * flags has SC_BLOCK_DATA enabled. JVM 1.1.6 and greater can\r\n * read this format change.\r\n *\r\n * Enables writing a nonSerializable class descriptor into the\r\n * stream. The serialVersionUID of a nonSerializable class is\r\n * set to 0L.\r\n *\r\n * @see java.io.ObjectOutputStream#useProtocolVersion(int)\r\n * @see #SC_BLOCK_DATA\r\n * @since 1.2\r\n */\r\n","field_name":"PROTOCOL_VERSION_2","field_type":"int","full_declaration":"public final static int PROTOCOL_VERSION_2 = 2","id":3926},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 7260898174833392607L","id":3927},{"comment":"/**\r\n * field name\r\n */\r\nprivate final String name;","field_name":"name","field_type":"java.lang.String","full_declaration":"private final java.lang.String name","id":3928},{"comment":"/**\r\n * canonical JVM signature of field type\r\n */\r\nprivate final String signature;","field_name":"signature","field_type":"java.lang.String","full_declaration":"private final java.lang.String signature","id":3929},{"comment":"/**\r\n * field type (Object.class if unknown non-primitive type)\r\n */\r\nprivate final Class<?> type;","field_name":"type","field_type":"java.lang.Class","full_declaration":"private final java.lang.Class type","id":3930},{"comment":"/**\r\n * whether or not to (de)serialize field values as unshared\r\n */\r\n","field_name":"unshared","field_type":"boolean","full_declaration":"private final boolean unshared","id":3931},{"comment":"/**\r\n * corresponding reflective field object, if any\r\n */\r\nprivate final Field field;","field_name":"field","field_type":"java.lang.reflect.Field","full_declaration":"private final java.lang.reflect.Field field","id":3932},{"comment":"/**\r\n * offset of field value in enclosing field group\r\n */\r\n","field_name":"offset","field_type":"int","full_declaration":"private int offset = 0","id":3933},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -8011121865681257820L","id":3934},{"comment":"/**\r\n * The number of bytes of primitive data available to be read\r\n * in the current buffer.\r\n *\r\n * @serial\r\n */\r\n","field_name":"length","field_type":"int","full_declaration":"public int length","id":3935},{"comment":"/**\r\n * True if there is no more data in the buffered part of the stream.\r\n *\r\n * @serial\r\n */\r\n","field_name":"eof","field_type":"boolean","full_declaration":"public boolean eof","id":3936},{"comment":"private final StreamEncoder se;","field_name":"se","field_type":"sun.nio.cs.StreamEncoder","full_declaration":"private final sun.nio.cs.StreamEncoder se","id":3937},{"comment":"","field_name":"closedByWriter","field_type":"boolean","full_declaration":"boolean closedByWriter = false","id":3938},{"comment":"","field_name":"closedByReader","field_type":"boolean","full_declaration":"volatile boolean closedByReader = false","id":3939},{"comment":"","field_name":"connected","field_type":"boolean","full_declaration":"boolean connected = false","id":3940},{"comment":"/* REMIND: identification of the read and write sides needs to be\r\n           more sophisticated.  Either using thread groups (but what about\r\n           pipes within a thread?) or using finalization (but it may be a\r\n           long time until the next GC). */\r\nThread readSide;","field_name":"readSide","field_type":"java.lang.Thread","full_declaration":"java.lang.Thread readSide","id":3941},{"comment":"Thread writeSide;","field_name":"writeSide","field_type":"java.lang.Thread","full_declaration":"java.lang.Thread writeSide","id":3942},{"comment":"","field_name":"DEFAULT_PIPE_SIZE","field_type":"int","full_declaration":"private static final int DEFAULT_PIPE_SIZE = 1024","id":3943},{"comment":"/**\r\n * The default size of the pipe's circular input buffer.\r\n * @since   JDK1.1\r\n */\r\n// This used to be a constant before the pipe size was allowed\r\n// to change. This field will continue to be maintained\r\n// for backward compatibility.\r\n","field_name":"PIPE_SIZE","field_type":"int","full_declaration":"protected static final int PIPE_SIZE = DEFAULT_PIPE_SIZE","id":3944},{"comment":"/**\r\n * The circular buffer into which incoming data is placed.\r\n * @since   JDK1.1\r\n */\r\n","field_name":"buffer","field_type":"byte[]","full_declaration":"protected byte[] buffer","id":3945},{"comment":"/**\r\n * The index of the position in the circular buffer at which the\r\n * next byte of data will be stored when received from the connected\r\n * piped output stream. <code>in&lt;0</code> implies the buffer is empty,\r\n * <code>in==out</code> implies the buffer is full\r\n * @since   JDK1.1\r\n */\r\n","field_name":"in","field_type":"int","full_declaration":"protected int in = -1","id":3946},{"comment":"/**\r\n * The index of the position in the circular buffer at which the next\r\n * byte of data will be read by this piped input stream.\r\n * @since   JDK1.1\r\n */\r\n","field_name":"out","field_type":"int","full_declaration":"protected int out = 0","id":3947},{"comment":"/* REMIND: identification of the read and write sides needs to be\r\n           more sophisticated.  Either using thread groups (but what about\r\n           pipes within a thread?) or using finalization (but it may be a\r\n           long time until the next GC). */\r\nprivate PipedInputStream sink;","field_name":"sink","field_type":"java.io.PipedInputStream","full_declaration":"private java.io.PipedInputStream sink","id":3948},{"comment":"","field_name":"closedByWriter","field_type":"boolean","full_declaration":"boolean closedByWriter = false","id":3949},{"comment":"","field_name":"closedByReader","field_type":"boolean","full_declaration":"boolean closedByReader = false","id":3950},{"comment":"","field_name":"connected","field_type":"boolean","full_declaration":"boolean connected = false","id":3951},{"comment":"/* REMIND: identification of the read and write sides needs to be\r\n       more sophisticated.  Either using thread groups (but what about\r\n       pipes within a thread?) or using finalization (but it may be a\r\n       long time until the next GC). */\r\nThread readSide;","field_name":"readSide","field_type":"java.lang.Thread","full_declaration":"java.lang.Thread readSide","id":3952},{"comment":"Thread writeSide;","field_name":"writeSide","field_type":"java.lang.Thread","full_declaration":"java.lang.Thread writeSide","id":3953},{"comment":"/**\r\n * The size of the pipe's circular input buffer.\r\n */\r\n","field_name":"DEFAULT_PIPE_SIZE","field_type":"int","full_declaration":"private static final int DEFAULT_PIPE_SIZE = 1024","id":3954},{"comment":"/**\r\n * The circular buffer into which incoming data is placed.\r\n */\r\n","field_name":"buffer","field_type":"char[]","full_declaration":"char[] buffer","id":3955},{"comment":"/**\r\n * The index of the position in the circular buffer at which the\r\n * next character of data will be stored when received from the connected\r\n * piped writer. <code>in&lt;0</code> implies the buffer is empty,\r\n * <code>in==out</code> implies the buffer is full\r\n */\r\n","field_name":"in","field_type":"int","full_declaration":"int in = -1","id":3956},{"comment":"/**\r\n * The index of the position in the circular buffer at which the next\r\n * character of data will be read by this piped reader.\r\n */\r\n","field_name":"out","field_type":"int","full_declaration":"int out = 0","id":3957},{"comment":"/* REMIND: identification of the read and write sides needs to be\r\n       more sophisticated.  Either using thread groups (but what about\r\n       pipes within a thread?) or using finalization (but it may be a\r\n       long time until the next GC). */\r\nprivate PipedReader sink;","field_name":"sink","field_type":"java.io.PipedReader","full_declaration":"private java.io.PipedReader sink","id":3958},{"comment":"/* This flag records the open status of this particular writer. It\r\n     * is independent of the status flags defined in PipedReader. It is\r\n     * used to do a sanity check on connect.\r\n     */\r\n","field_name":"closed","field_type":"boolean","full_declaration":"private boolean closed = false","id":3959},{"comment":"","field_name":"autoFlush","field_type":"boolean","full_declaration":"private final boolean autoFlush","id":3960},{"comment":"","field_name":"trouble","field_type":"boolean","full_declaration":"private boolean trouble = false","id":3961},{"comment":"private Formatter formatter;","field_name":"formatter","field_type":"java.util.Formatter","full_declaration":"private java.util.Formatter formatter","id":3962},{"comment":"/**\r\n * Track both the text- and character-output streams, so that their buffers\r\n * can be flushed without flushing the entire stream.\r\n */\r\nprivate BufferedWriter textOut;","field_name":"textOut","field_type":"java.io.BufferedWriter","full_declaration":"private java.io.BufferedWriter textOut","id":3963},{"comment":"private OutputStreamWriter charOut;","field_name":"charOut","field_type":"java.io.OutputStreamWriter","full_declaration":"private java.io.OutputStreamWriter charOut","id":3964},{"comment":"","field_name":"closing","field_type":"boolean","full_declaration":"private boolean closing = false","id":3965},{"comment":"/**\r\n * The underlying character-output stream of this\r\n * <code>PrintWriter</code>.\r\n *\r\n * @since 1.2\r\n */\r\nprotected Writer out;","field_name":"out","field_type":"java.io.Writer","full_declaration":"protected java.io.Writer out","id":3966},{"comment":"","field_name":"autoFlush","field_type":"boolean","full_declaration":"private final boolean autoFlush","id":3967},{"comment":"","field_name":"trouble","field_type":"boolean","full_declaration":"private boolean trouble = false","id":3968},{"comment":"private Formatter formatter;","field_name":"formatter","field_type":"java.util.Formatter","full_declaration":"private java.util.Formatter formatter","id":3969},{"comment":"private PrintStream psOut = null;","field_name":"psOut","field_type":"java.io.PrintStream","full_declaration":"private java.io.PrintStream psOut = null","id":3970},{"comment":"/**\r\n * Line separator string.  This is the value of the line.separator\r\n * property at the moment that the stream was created.\r\n */\r\nprivate final String lineSeparator;","field_name":"lineSeparator","field_type":"java.lang.String","full_declaration":"private final java.lang.String lineSeparator","id":3971},{"comment":"/**\r\n * The pushback buffer.\r\n * @since   JDK1.1\r\n */\r\n","field_name":"buf","field_type":"byte[]","full_declaration":"protected byte[] buf","id":3972},{"comment":"/**\r\n * The position within the pushback buffer from which the next byte will\r\n * be read.  When the buffer is empty, <code>pos</code> is equal to\r\n * <code>buf.length</code>; when the buffer is full, <code>pos</code> is\r\n * equal to zero.\r\n *\r\n * @since   JDK1.1\r\n */\r\n","field_name":"pos","field_type":"int","full_declaration":"protected int pos","id":3973},{"comment":"/**\r\n * Pushback buffer\r\n */\r\n","field_name":"buf","field_type":"char[]","full_declaration":"private char[] buf","id":3974},{"comment":"/**\r\n * Current position in buffer\r\n */\r\n","field_name":"pos","field_type":"int","full_declaration":"private int pos","id":3975},{"comment":"private FileDescriptor fd;","field_name":"fd","field_type":"java.io.FileDescriptor","full_declaration":"private java.io.FileDescriptor fd","id":3976},{"comment":"private FileChannel channel = null;","field_name":"channel","field_type":"java.nio.channels.FileChannel","full_declaration":"private java.nio.channels.FileChannel channel = null","id":3977},{"comment":"","field_name":"rw","field_type":"boolean","full_declaration":"private boolean rw","id":3978},{"comment":"/**\r\n * The path of the referenced file\r\n * (null if the stream is created with a file descriptor)\r\n */\r\nprivate final String path;","field_name":"path","field_type":"java.lang.String","full_declaration":"private final java.lang.String path","id":3979},{"comment":"private Object closeLock = new Object();","field_name":"closeLock","field_type":"java.lang.Object","full_declaration":"private java.lang.Object closeLock = new Object()","id":3980},{"comment":"","field_name":"closed","field_type":"boolean","full_declaration":"private volatile boolean closed = false","id":3981},{"comment":"","field_name":"O_RDONLY","field_type":"int","full_declaration":"private static final int O_RDONLY = 1","id":3982},{"comment":"","field_name":"O_RDWR","field_type":"int","full_declaration":"private static final int O_RDWR = 2","id":3983},{"comment":"","field_name":"O_SYNC","field_type":"int","full_declaration":"private static final int O_SYNC = 4","id":3984},{"comment":"","field_name":"O_DSYNC","field_type":"int","full_declaration":"private static final int O_DSYNC = 8","id":3985},{"comment":"/**\r\n * The object used to synchronize operations on this stream.  For\r\n * efficiency, a character-stream object may use an object other than\r\n * itself to protect critical sections.  A subclass should therefore use\r\n * the object in this field rather than <tt>this</tt> or a synchronized\r\n * method.\r\n */\r\nprotected Object lock;","field_name":"lock","field_type":"java.lang.Object","full_declaration":"protected java.lang.Object lock","id":3986},{"comment":"/**\r\n * Maximum skip-buffer size\r\n */\r\n","field_name":"maxSkipBufferSize","field_type":"int","full_declaration":"private static final int maxSkipBufferSize = 8192","id":3987},{"comment":"/**\r\n * Skip buffer, null until allocated\r\n */\r\n","field_name":"skipBuffer","field_type":"char[]","full_declaration":"private char[] skipBuffer = null","id":3988},{"comment":"Enumeration<? extends InputStream> e;","field_name":"e","field_type":"java.util.Enumeration","full_declaration":"java.util.Enumeration e","id":3989},{"comment":"InputStream in;","field_name":"in","field_type":"java.io.InputStream","full_declaration":"java.io.InputStream in","id":3990},{"comment":"private final Object obj;","field_name":"obj","field_type":"java.lang.Object","full_declaration":"private final java.lang.Object obj","id":3991},{"comment":"private final ObjectStreamClass desc;","field_name":"desc","field_type":"java.io.ObjectStreamClass","full_declaration":"private final java.io.ObjectStreamClass desc","id":3992},{"comment":"/**\r\n * Thread this context is in use by.\r\n * As this only works in one thread, we do not need to worry about thread-safety.\r\n */\r\nprivate Thread thread;","field_name":"thread","field_type":"java.lang.Thread","full_declaration":"private java.lang.Thread thread","id":3993},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 8537212141160296410L","id":3994},{"comment":"/**\r\n * @serial\r\n */\r\nprivate String actions;","field_name":"actions","field_type":"java.lang.String","full_declaration":"private java.lang.String actions","id":3995},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 8983558202217591746L","id":3996},{"comment":"/* Only one of these will be non-null */\r\nprivate Reader reader = null;","field_name":"reader","field_type":"java.io.Reader","full_declaration":"private java.io.Reader reader = null","id":3997},{"comment":"private InputStream input = null;","field_name":"input","field_type":"java.io.InputStream","full_declaration":"private java.io.InputStream input = null","id":3998},{"comment":"","field_name":"buf","field_type":"char[]","full_declaration":"private char[] buf = new char[20]","id":3999},{"comment":"/**\r\n * The next character to be considered by the nextToken method.  May also\r\n * be NEED_CHAR to indicate that a new character should be read, or SKIP_LF\r\n * to indicate that a new character should be read and, if it is a '\\n'\r\n * character, it should be discarded and a second new character should be\r\n * read.\r\n */\r\n","field_name":"peekc","field_type":"int","full_declaration":"private int peekc = NEED_CHAR","id":4000},{"comment":"","field_name":"NEED_CHAR","field_type":"int","full_declaration":"private static final int NEED_CHAR = Integer.MAX_VALUE","id":4001},{"comment":"","field_name":"SKIP_LF","field_type":"int","full_declaration":"private static final int SKIP_LF = Integer.MAX_VALUE - 1","id":4002},{"comment":"","field_name":"pushedBack","field_type":"boolean","full_declaration":"private boolean pushedBack","id":4003},{"comment":"","field_name":"forceLower","field_type":"boolean","full_declaration":"private boolean forceLower","id":4004},{"comment":"/**\r\n * The line number of the last token read\r\n */\r\n","field_name":"LINENO","field_type":"int","full_declaration":"private int LINENO = 1","id":4005},{"comment":"","field_name":"eolIsSignificantP","field_type":"boolean","full_declaration":"private boolean eolIsSignificantP = false","id":4006},{"comment":"","field_name":"slashSlashCommentsP","field_type":"boolean","full_declaration":"private boolean slashSlashCommentsP = false","id":4007},{"comment":"","field_name":"slashStarCommentsP","field_type":"boolean","full_declaration":"private boolean slashStarCommentsP = false","id":4008},{"comment":"","field_name":"ctype","field_type":"byte[]","full_declaration":"private byte[] ctype = new byte[256]","id":4009},{"comment":"","field_name":"CT_WHITESPACE","field_type":"byte","full_declaration":"private static final byte CT_WHITESPACE = 1","id":4010},{"comment":"","field_name":"CT_DIGIT","field_type":"byte","full_declaration":"private static final byte CT_DIGIT = 2","id":4011},{"comment":"","field_name":"CT_ALPHA","field_type":"byte","full_declaration":"private static final byte CT_ALPHA = 4","id":4012},{"comment":"","field_name":"CT_QUOTE","field_type":"byte","full_declaration":"private static final byte CT_QUOTE = 8","id":4013},{"comment":"","field_name":"CT_COMMENT","field_type":"byte","full_declaration":"private static final byte CT_COMMENT = 16","id":4014},{"comment":"/**\r\n * After a call to the {@code nextToken} method, this field\r\n * contains the type of the token just read. For a single character\r\n * token, its value is the single character, converted to an integer.\r\n * For a quoted string token, its value is the quote character.\r\n * Otherwise, its value is one of the following:\r\n * <ul>\r\n * <li>{@code TT_WORD} indicates that the token is a word.\r\n * <li>{@code TT_NUMBER} indicates that the token is a number.\r\n * <li>{@code TT_EOL} indicates that the end of line has been read.\r\n *     The field can only have this value if the\r\n *     {@code eolIsSignificant} method has been called with the\r\n *     argument {@code true}.\r\n * <li>{@code TT_EOF} indicates that the end of the input stream\r\n *     has been reached.\r\n * </ul>\r\n * <p>\r\n * The initial value of this field is -4.\r\n *\r\n * @see     java.io.StreamTokenizer#eolIsSignificant(boolean)\r\n * @see     java.io.StreamTokenizer#nextToken()\r\n * @see     java.io.StreamTokenizer#quoteChar(int)\r\n * @see     java.io.StreamTokenizer#TT_EOF\r\n * @see     java.io.StreamTokenizer#TT_EOL\r\n * @see     java.io.StreamTokenizer#TT_NUMBER\r\n * @see     java.io.StreamTokenizer#TT_WORD\r\n */\r\n","field_name":"ttype","field_type":"int","full_declaration":"public int ttype = TT_NOTHING","id":4015},{"comment":"/**\r\n * A constant indicating that the end of the stream has been read.\r\n */\r\n","field_name":"TT_EOF","field_type":"int","full_declaration":"public static final int TT_EOF = -1","id":4016},{"comment":"/**\r\n * A constant indicating that the end of the line has been read.\r\n */\r\n","field_name":"TT_EOL","field_type":"int","full_declaration":"public static final int TT_EOL = '\\n'","id":4017},{"comment":"/**\r\n * A constant indicating that a number token has been read.\r\n */\r\n","field_name":"TT_NUMBER","field_type":"int","full_declaration":"public static final int TT_NUMBER = -2","id":4018},{"comment":"/**\r\n * A constant indicating that a word token has been read.\r\n */\r\n","field_name":"TT_WORD","field_type":"int","full_declaration":"public static final int TT_WORD = -3","id":4019},{"comment":"/* A constant indicating that no token has been read, used for\r\n     * initializing ttype.  FIXME This could be made public and\r\n     * made available as the part of the API in a future release.\r\n     */\r\n","field_name":"TT_NOTHING","field_type":"int","full_declaration":"private static final int TT_NOTHING = -4","id":4020},{"comment":"/**\r\n * If the current token is a word token, this field contains a\r\n * string giving the characters of the word token. When the current\r\n * token is a quoted string token, this field contains the body of\r\n * the string.\r\n * <p>\r\n * The current token is a word when the value of the\r\n * {@code ttype} field is {@code TT_WORD}. The current token is\r\n * a quoted string token when the value of the {@code ttype} field is\r\n * a quote character.\r\n * <p>\r\n * The initial value of this field is null.\r\n *\r\n * @see     java.io.StreamTokenizer#quoteChar(int)\r\n * @see     java.io.StreamTokenizer#TT_WORD\r\n * @see     java.io.StreamTokenizer#ttype\r\n */\r\npublic String sval;","field_name":"sval","field_type":"java.lang.String","full_declaration":"public java.lang.String sval","id":4021},{"comment":"/**\r\n * If the current token is a number, this field contains the value\r\n * of that number. The current token is a number when the value of\r\n * the {@code ttype} field is {@code TT_NUMBER}.\r\n * <p>\r\n * The initial value of this field is 0.0.\r\n *\r\n * @see     java.io.StreamTokenizer#TT_NUMBER\r\n * @see     java.io.StreamTokenizer#ttype\r\n */\r\n","field_name":"nval","field_type":"double","full_declaration":"public double nval","id":4022},{"comment":"/**\r\n * The string from which bytes are read.\r\n */\r\nprotected String buffer;","field_name":"buffer","field_type":"java.lang.String","full_declaration":"protected java.lang.String buffer","id":4023},{"comment":"/**\r\n * The index of the next character to read from the input stream buffer.\r\n *\r\n * @see        java.io.StringBufferInputStream#buffer\r\n */\r\n","field_name":"pos","field_type":"int","full_declaration":"protected int pos","id":4024},{"comment":"/**\r\n * The number of valid characters in the input stream buffer.\r\n *\r\n * @see        java.io.StringBufferInputStream#buffer\r\n */\r\n","field_name":"count","field_type":"int","full_declaration":"protected int count","id":4025},{"comment":"private String str;","field_name":"str","field_type":"java.lang.String","full_declaration":"private java.lang.String str","id":4026},{"comment":"","field_name":"length","field_type":"int","full_declaration":"private int length","id":4027},{"comment":"","field_name":"next","field_type":"int","full_declaration":"private int next = 0","id":4028},{"comment":"","field_name":"mark","field_type":"int","full_declaration":"private int mark = 0","id":4029},{"comment":"private StringBuffer buf;","field_name":"buf","field_type":"java.lang.StringBuffer","full_declaration":"private java.lang.StringBuffer buf","id":4030},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -2353342684412443330L","id":4031},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -8134305061645241065L","id":4032},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -4274276298326136670L","id":4033},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 420743449228280612L","id":4034},{"comment":"","field_name":"slash","field_type":"char","full_declaration":"private final char slash","id":4035},{"comment":"","field_name":"altSlash","field_type":"char","full_declaration":"private final char altSlash","id":4036},{"comment":"","field_name":"semicolon","field_type":"char","full_declaration":"private final char semicolon","id":4037},{"comment":"","field_name":"driveDirCache","field_type":"String[]","full_declaration":"private static String[] driveDirCache = new String[26]","id":4038},{"comment":"// Caches for canonicalization results to improve startup performance.\r\n// The first cache handles repeated canonicalizations of the same path\r\n// name. The prefix cache handles repeated canonicalizations within the\r\n// same directory, and must not create results differing from the true\r\n// canonicalization algorithm in canonicalize_md.c. For this reason the\r\n// prefix cache is conservative and is not used for complex path names.\r\nprivate ExpiringCache cache = new ExpiringCache();","field_name":"cache","field_type":"java.io.ExpiringCache","full_declaration":"private java.io.ExpiringCache cache = new ExpiringCache()","id":4039},{"comment":"private ExpiringCache prefixCache = new ExpiringCache();","field_name":"prefixCache","field_type":"java.io.ExpiringCache","full_declaration":"private java.io.ExpiringCache prefixCache = new ExpiringCache()","id":4040},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -3326426625597282442L","id":4041},{"comment":"/**\r\n * Exception that was caught while writing the ObjectStream.\r\n *\r\n * <p>This field predates the general-purpose exception chaining facility.\r\n * The {@link Throwable#getCause()} method is now the preferred means of\r\n * obtaining this information.\r\n *\r\n * @serial\r\n */\r\npublic Exception detail;","field_name":"detail","field_type":"java.lang.Exception","full_declaration":"public java.lang.Exception detail","id":4042},{"comment":"/**\r\n * Temporary buffer used to hold writes of strings and single characters\r\n */\r\n","field_name":"writeBuffer","field_type":"char[]","full_declaration":"private char[] writeBuffer","id":4043},{"comment":"/**\r\n * Size of writeBuffer, must be >= 1\r\n */\r\n","field_name":"WRITE_BUFFER_SIZE","field_type":"int","full_declaration":"private static final int WRITE_BUFFER_SIZE = 1024","id":4044},{"comment":"/**\r\n * The object used to synchronize operations on this stream.  For\r\n * efficiency, a character-stream object may use an object other than\r\n * itself to protect critical sections.  A subclass should therefore use\r\n * the object in this field rather than <tt>this</tt> or a synchronized\r\n * method.\r\n */\r\nprotected Object lock;","field_name":"lock","field_type":"java.lang.Object","full_declaration":"protected java.lang.Object lock","id":4045},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -1654391082989018462L","id":4046},{"comment":"/**\r\n * The value is used for character storage.\r\n */\r\n","field_name":"value","field_type":"char[]","full_declaration":"char[] value","id":4047},{"comment":"/**\r\n * The count is the number of characters used.\r\n */\r\n","field_name":"count","field_type":"int","full_declaration":"int count","id":4048},{"comment":"/**\r\n * The maximum size of array to allocate (unless necessary).\r\n * Some VMs reserve some header words in an array.\r\n * Attempts to allocate larger arrays may result in\r\n * OutOfMemoryError: Requested array size exceeds VM limit\r\n */\r\n","field_name":"MAX_ARRAY_SIZE","field_type":"int","full_declaration":"private static final int MAX_ARRAY_SIZE = Integer.MAX_VALUE - 8","id":4049},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -4256701562333669892L","id":4050},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 8125925355765570191L","id":4051},{"comment":"/**\r\n * The <tt>Method</tt> object for the annotation element.\r\n */\r\nprivate final Method element;","field_name":"element","field_type":"java.lang.reflect.Method","full_declaration":"private final java.lang.reflect.Method element","id":4052},{"comment":"/**\r\n * The (erroneous) type of data found in the annotation.  This string\r\n * may, but is not required to, contain the value as well.  The exact\r\n * format of the string is unspecified.\r\n */\r\nprivate final String foundType;","field_name":"foundType","field_type":"java.lang.String","full_declaration":"private final java.lang.String foundType","id":4053},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 8445097402741811912L","id":4054},{"comment":"private Class<? extends Annotation> annotationType;","field_name":"annotationType","field_type":"java.lang.Class","full_declaration":"private java.lang.Class annotationType","id":4055},{"comment":"private String elementName;","field_name":"elementName","field_type":"java.lang.String","full_declaration":"private java.lang.String elementName","id":4056},{"comment":"/* The set of registered hooks */\r\nprivate static IdentityHashMap<Thread, Thread> hooks;","field_name":"hooks","field_type":"java.util.IdentityHashMap","full_declaration":"private static java.util.IdentityHashMap hooks","id":4057},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 2256477558314496007L","id":4058},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -5116101128118950844L","id":4059},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -4522193890499838241L","id":4060},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -5013299493970297370L","id":4061},{"comment":"/**\r\n * The classes for which assertions are to be enabled or disabled.\r\n * The strings in this array are fully qualified class names (for\r\n * example,\"com.xyz.foo.Bar\").\r\n */\r\n","field_name":"classes","field_type":"String[]","full_declaration":"String[] classes","id":4062},{"comment":"/**\r\n * A parallel array to <tt>classes</tt>, indicating whether each class\r\n * is to have assertions enabled or disabled.  A value of <tt>true</tt>\r\n * for <tt>classEnabled[i]</tt> indicates that the class named by\r\n * <tt>classes[i]</tt> should have assertions enabled; a value of\r\n * <tt>false</tt> indicates that it should have classes disabled.\r\n * This array must have the same number of elements as <tt>classes</tt>.\r\n *\r\n * <p>In the case of conflicting directives for the same class, the\r\n * last directive for a given class wins.  In other words, if a string\r\n * <tt>s</tt> appears multiple times in the <tt>classes</tt> array\r\n * and <tt>i</tt> is the highest integer for which\r\n * <tt>classes[i].equals(s)</tt>, then <tt>classEnabled[i]</tt>\r\n * indicates whether assertions are to be enabled in class <tt>s</tt>.\r\n */\r\n","field_name":"classEnabled","field_type":"boolean[]","full_declaration":"boolean[] classEnabled","id":4063},{"comment":"/**\r\n * The package-trees for which assertions are to be enabled or disabled.\r\n * The strings in this array are compete or partial package names\r\n * (for example, \"com.xyz\" or \"com.xyz.foo\").\r\n */\r\n","field_name":"packages","field_type":"String[]","full_declaration":"String[] packages","id":4064},{"comment":"/**\r\n * A parallel array to <tt>packages</tt>, indicating whether each\r\n * package-tree is to have assertions enabled or disabled.  A value of\r\n * <tt>true</tt> for <tt>packageEnabled[i]</tt> indicates that the\r\n * package-tree named by <tt>packages[i]</tt> should have assertions\r\n * enabled; a value of <tt>false</tt> indicates that it should have\r\n * assertions disabled.  This array must have the same number of\r\n * elements as <tt>packages</tt>.\r\n *\r\n * In the case of conflicting directives for the same package-tree, the\r\n * last directive for a given package-tree wins.  In other words, if a\r\n * string <tt>s</tt> appears multiple times in the <tt>packages</tt> array\r\n * and <tt>i</tt> is the highest integer for which\r\n * <tt>packages[i].equals(s)</tt>, then <tt>packageEnabled[i]</tt>\r\n * indicates whether assertions are to be enabled in package-tree\r\n * <tt>s</tt>.\r\n */\r\n","field_name":"packageEnabled","field_type":"boolean[]","full_declaration":"boolean[] packageEnabled","id":4065},{"comment":"/**\r\n * Whether or not assertions in non-system classes are to be enabled\r\n * by default.\r\n */\r\n","field_name":"deflt","field_type":"boolean","full_declaration":"boolean deflt","id":4066},{"comment":"/**\r\n * The {@code Boolean} object corresponding to the primitive\r\n * value {@code true}.\r\n */\r\npublic static final Boolean TRUE = new Boolean(true);","field_name":"TRUE","field_type":"java.lang.Boolean","full_declaration":"public static final java.lang.Boolean TRUE = new Boolean(true)","id":4067},{"comment":"/**\r\n * The {@code Boolean} object corresponding to the primitive\r\n * value {@code false}.\r\n */\r\npublic static final Boolean FALSE = new Boolean(false);","field_name":"FALSE","field_type":"java.lang.Boolean","full_declaration":"public static final java.lang.Boolean FALSE = new Boolean(false)","id":4068},{"comment":"/**\r\n * The Class object representing the primitive type boolean.\r\n *\r\n * @since   JDK1.1\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\npublic static final Class<Boolean> TYPE = (Class<Boolean>) Class.getPrimitiveClass(\"boolean\");","field_name":"TYPE","field_type":"java.lang.Class","full_declaration":"public static final java.lang.Class TYPE = (Class<Boolean>) Class.getPrimitiveClass(\"boolean\")","id":4069},{"comment":"/**\r\n * The value of the Boolean.\r\n *\r\n * @serial\r\n */\r\n","field_name":"value","field_type":"boolean","full_declaration":"private final boolean value","id":4070},{"comment":"/**\r\n * use serialVersionUID from JDK 1.0.2 for interoperability\r\n */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -3665804199014368530L","id":4071},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 292L","id":4072},{"comment":"/**\r\n * A constant holding the minimum value a {@code byte} can\r\n * have, -2<sup>7</sup>.\r\n */\r\n","field_name":"MIN_VALUE","field_type":"byte","full_declaration":"public static final byte MIN_VALUE = -128","id":4073},{"comment":"/**\r\n * A constant holding the maximum value a {@code byte} can\r\n * have, 2<sup>7</sup>-1.\r\n */\r\n","field_name":"MAX_VALUE","field_type":"byte","full_declaration":"public static final byte MAX_VALUE = 127","id":4074},{"comment":"/**\r\n * The {@code Class} instance representing the primitive type\r\n * {@code byte}.\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\npublic static final Class<Byte> TYPE = (Class<Byte>) Class.getPrimitiveClass(\"byte\");","field_name":"TYPE","field_type":"java.lang.Class","full_declaration":"public static final java.lang.Class TYPE = (Class<Byte>) Class.getPrimitiveClass(\"byte\")","id":4075},{"comment":"/**\r\n * The value of the {@code Byte}.\r\n *\r\n * @serial\r\n */\r\n","field_name":"value","field_type":"byte","full_declaration":"private final byte value","id":4076},{"comment":"/**\r\n * The number of bits used to represent a {@code byte} value in two's\r\n * complement binary form.\r\n *\r\n * @since 1.5\r\n */\r\n","field_name":"SIZE","field_type":"int","full_declaration":"public static final int SIZE = 8","id":4077},{"comment":"/**\r\n * The number of bytes used to represent a {@code byte} value in two's\r\n * complement binary form.\r\n *\r\n * @since 1.8\r\n */\r\n","field_name":"BYTES","field_type":"int","full_declaration":"public static final int BYTES = SIZE / Byte.SIZE","id":4078},{"comment":"/**\r\n * use serialVersionUID from JDK 1.1. for interoperability\r\n */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -7183698231559129828L","id":4079},{"comment":"","field_name":"cache","field_type":"Byte[]","full_declaration":"static final Byte[] cache = new Byte[-(-128) + 127 + 1]","id":4080},{"comment":"/**\r\n * The minimum radix available for conversion to and from strings.\r\n * The constant value of this field is the smallest value permitted\r\n * for the radix argument in radix-conversion methods such as the\r\n * {@code digit} method, the {@code forDigit} method, and the\r\n * {@code toString} method of class {@code Integer}.\r\n *\r\n * @see     Character#digit(char, int)\r\n * @see     Character#forDigit(int, int)\r\n * @see     Integer#toString(int, int)\r\n * @see     Integer#valueOf(String)\r\n */\r\n","field_name":"MIN_RADIX","field_type":"int","full_declaration":"public static final int MIN_RADIX = 2","id":4081},{"comment":"/**\r\n * The maximum radix available for conversion to and from strings.\r\n * The constant value of this field is the largest value permitted\r\n * for the radix argument in radix-conversion methods such as the\r\n * {@code digit} method, the {@code forDigit} method, and the\r\n * {@code toString} method of class {@code Integer}.\r\n *\r\n * @see     Character#digit(char, int)\r\n * @see     Character#forDigit(int, int)\r\n * @see     Integer#toString(int, int)\r\n * @see     Integer#valueOf(String)\r\n */\r\n","field_name":"MAX_RADIX","field_type":"int","full_declaration":"public static final int MAX_RADIX = 36","id":4082},{"comment":"/**\r\n * The constant value of this field is the smallest value of type\r\n * {@code char}, {@code '\\u005Cu0000'}.\r\n *\r\n * @since   1.0.2\r\n */\r\n","field_name":"MIN_VALUE","field_type":"char","full_declaration":"public static final char MIN_VALUE = '\\u0000'","id":4083},{"comment":"/**\r\n * The constant value of this field is the largest value of type\r\n * {@code char}, {@code '\\u005CuFFFF'}.\r\n *\r\n * @since   1.0.2\r\n */\r\n","field_name":"MAX_VALUE","field_type":"char","full_declaration":"public static final char MAX_VALUE = '\\uFFFF'","id":4084},{"comment":"/**\r\n * The {@code Class} instance representing the primitive type\r\n * {@code char}.\r\n *\r\n * @since   1.1\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\npublic static final Class<Character> TYPE = (Class<Character>) Class.getPrimitiveClass(\"char\");","field_name":"TYPE","field_type":"java.lang.Class","full_declaration":"public static final java.lang.Class TYPE = (Class<Character>) Class.getPrimitiveClass(\"char\")","id":4085},{"comment":"/*\r\n     * Normative general types\r\n     */\r\n/*\r\n     * General character types\r\n     */\r\n/**\r\n * General category \"Cn\" in the Unicode specification.\r\n * @since   1.1\r\n */\r\n","field_name":"UNASSIGNED","field_type":"byte","full_declaration":"public static final byte UNASSIGNED = 0","id":4086},{"comment":"/**\r\n * General category \"Lu\" in the Unicode specification.\r\n * @since   1.1\r\n */\r\n","field_name":"UPPERCASE_LETTER","field_type":"byte","full_declaration":"public static final byte UPPERCASE_LETTER = 1","id":4087},{"comment":"/**\r\n * General category \"Ll\" in the Unicode specification.\r\n * @since   1.1\r\n */\r\n","field_name":"LOWERCASE_LETTER","field_type":"byte","full_declaration":"public static final byte LOWERCASE_LETTER = 2","id":4088},{"comment":"/**\r\n * General category \"Lt\" in the Unicode specification.\r\n * @since   1.1\r\n */\r\n","field_name":"TITLECASE_LETTER","field_type":"byte","full_declaration":"public static final byte TITLECASE_LETTER = 3","id":4089},{"comment":"/**\r\n * General category \"Lm\" in the Unicode specification.\r\n * @since   1.1\r\n */\r\n","field_name":"MODIFIER_LETTER","field_type":"byte","full_declaration":"public static final byte MODIFIER_LETTER = 4","id":4090},{"comment":"/**\r\n * General category \"Lo\" in the Unicode specification.\r\n * @since   1.1\r\n */\r\n","field_name":"OTHER_LETTER","field_type":"byte","full_declaration":"public static final byte OTHER_LETTER = 5","id":4091},{"comment":"/**\r\n * General category \"Mn\" in the Unicode specification.\r\n * @since   1.1\r\n */\r\n","field_name":"NON_SPACING_MARK","field_type":"byte","full_declaration":"public static final byte NON_SPACING_MARK = 6","id":4092},{"comment":"/**\r\n * General category \"Me\" in the Unicode specification.\r\n * @since   1.1\r\n */\r\n","field_name":"ENCLOSING_MARK","field_type":"byte","full_declaration":"public static final byte ENCLOSING_MARK = 7","id":4093},{"comment":"/**\r\n * General category \"Mc\" in the Unicode specification.\r\n * @since   1.1\r\n */\r\n","field_name":"COMBINING_SPACING_MARK","field_type":"byte","full_declaration":"public static final byte COMBINING_SPACING_MARK = 8","id":4094},{"comment":"/**\r\n * General category \"Nd\" in the Unicode specification.\r\n * @since   1.1\r\n */\r\n","field_name":"DECIMAL_DIGIT_NUMBER","field_type":"byte","full_declaration":"public static final byte DECIMAL_DIGIT_NUMBER = 9","id":4095},{"comment":"/**\r\n * General category \"Nl\" in the Unicode specification.\r\n * @since   1.1\r\n */\r\n","field_name":"LETTER_NUMBER","field_type":"byte","full_declaration":"public static final byte LETTER_NUMBER = 10","id":4096},{"comment":"/**\r\n * General category \"No\" in the Unicode specification.\r\n * @since   1.1\r\n */\r\n","field_name":"OTHER_NUMBER","field_type":"byte","full_declaration":"public static final byte OTHER_NUMBER = 11","id":4097},{"comment":"/**\r\n * General category \"Zs\" in the Unicode specification.\r\n * @since   1.1\r\n */\r\n","field_name":"SPACE_SEPARATOR","field_type":"byte","full_declaration":"public static final byte SPACE_SEPARATOR = 12","id":4098},{"comment":"/**\r\n * General category \"Zl\" in the Unicode specification.\r\n * @since   1.1\r\n */\r\n","field_name":"LINE_SEPARATOR","field_type":"byte","full_declaration":"public static final byte LINE_SEPARATOR = 13","id":4099},{"comment":"/**\r\n * General category \"Zp\" in the Unicode specification.\r\n * @since   1.1\r\n */\r\n","field_name":"PARAGRAPH_SEPARATOR","field_type":"byte","full_declaration":"public static final byte PARAGRAPH_SEPARATOR = 14","id":4100},{"comment":"/**\r\n * General category \"Cc\" in the Unicode specification.\r\n * @since   1.1\r\n */\r\n","field_name":"CONTROL","field_type":"byte","full_declaration":"public static final byte CONTROL = 15","id":4101},{"comment":"/**\r\n * General category \"Cf\" in the Unicode specification.\r\n * @since   1.1\r\n */\r\n","field_name":"FORMAT","field_type":"byte","full_declaration":"public static final byte FORMAT = 16","id":4102},{"comment":"/**\r\n * General category \"Co\" in the Unicode specification.\r\n * @since   1.1\r\n */\r\n","field_name":"PRIVATE_USE","field_type":"byte","full_declaration":"public static final byte PRIVATE_USE = 18","id":4103},{"comment":"/**\r\n * General category \"Cs\" in the Unicode specification.\r\n * @since   1.1\r\n */\r\n","field_name":"SURROGATE","field_type":"byte","full_declaration":"public static final byte SURROGATE = 19","id":4104},{"comment":"/**\r\n * General category \"Pd\" in the Unicode specification.\r\n * @since   1.1\r\n */\r\n","field_name":"DASH_PUNCTUATION","field_type":"byte","full_declaration":"public static final byte DASH_PUNCTUATION = 20","id":4105},{"comment":"/**\r\n * General category \"Ps\" in the Unicode specification.\r\n * @since   1.1\r\n */\r\n","field_name":"START_PUNCTUATION","field_type":"byte","full_declaration":"public static final byte START_PUNCTUATION = 21","id":4106},{"comment":"/**\r\n * General category \"Pe\" in the Unicode specification.\r\n * @since   1.1\r\n */\r\n","field_name":"END_PUNCTUATION","field_type":"byte","full_declaration":"public static final byte END_PUNCTUATION = 22","id":4107},{"comment":"/**\r\n * General category \"Pc\" in the Unicode specification.\r\n * @since   1.1\r\n */\r\n","field_name":"CONNECTOR_PUNCTUATION","field_type":"byte","full_declaration":"public static final byte CONNECTOR_PUNCTUATION = 23","id":4108},{"comment":"/**\r\n * General category \"Po\" in the Unicode specification.\r\n * @since   1.1\r\n */\r\n","field_name":"OTHER_PUNCTUATION","field_type":"byte","full_declaration":"public static final byte OTHER_PUNCTUATION = 24","id":4109},{"comment":"/**\r\n * General category \"Sm\" in the Unicode specification.\r\n * @since   1.1\r\n */\r\n","field_name":"MATH_SYMBOL","field_type":"byte","full_declaration":"public static final byte MATH_SYMBOL = 25","id":4110},{"comment":"/**\r\n * General category \"Sc\" in the Unicode specification.\r\n * @since   1.1\r\n */\r\n","field_name":"CURRENCY_SYMBOL","field_type":"byte","full_declaration":"public static final byte CURRENCY_SYMBOL = 26","id":4111},{"comment":"/**\r\n * General category \"Sk\" in the Unicode specification.\r\n * @since   1.1\r\n */\r\n","field_name":"MODIFIER_SYMBOL","field_type":"byte","full_declaration":"public static final byte MODIFIER_SYMBOL = 27","id":4112},{"comment":"/**\r\n * General category \"So\" in the Unicode specification.\r\n * @since   1.1\r\n */\r\n","field_name":"OTHER_SYMBOL","field_type":"byte","full_declaration":"public static final byte OTHER_SYMBOL = 28","id":4113},{"comment":"/**\r\n * General category \"Pi\" in the Unicode specification.\r\n * @since   1.4\r\n */\r\n","field_name":"INITIAL_QUOTE_PUNCTUATION","field_type":"byte","full_declaration":"public static final byte INITIAL_QUOTE_PUNCTUATION = 29","id":4114},{"comment":"/**\r\n * General category \"Pf\" in the Unicode specification.\r\n * @since   1.4\r\n */\r\n","field_name":"FINAL_QUOTE_PUNCTUATION","field_type":"byte","full_declaration":"public static final byte FINAL_QUOTE_PUNCTUATION = 30","id":4115},{"comment":"/**\r\n * Error flag. Use int (code point) to avoid confusion with U+FFFF.\r\n */\r\n","field_name":"ERROR","field_type":"int","full_declaration":"static final int ERROR = 0xFFFFFFFF","id":4116},{"comment":"/**\r\n * Undefined bidirectional character type. Undefined {@code char}\r\n * values have undefined directionality in the Unicode specification.\r\n * @since 1.4\r\n */\r\n","field_name":"DIRECTIONALITY_UNDEFINED","field_type":"byte","full_declaration":"public static final byte DIRECTIONALITY_UNDEFINED = -1","id":4117},{"comment":"/**\r\n * Strong bidirectional character type \"L\" in the Unicode specification.\r\n * @since 1.4\r\n */\r\n","field_name":"DIRECTIONALITY_LEFT_TO_RIGHT","field_type":"byte","full_declaration":"public static final byte DIRECTIONALITY_LEFT_TO_RIGHT = 0","id":4118},{"comment":"/**\r\n * Strong bidirectional character type \"R\" in the Unicode specification.\r\n * @since 1.4\r\n */\r\n","field_name":"DIRECTIONALITY_RIGHT_TO_LEFT","field_type":"byte","full_declaration":"public static final byte DIRECTIONALITY_RIGHT_TO_LEFT = 1","id":4119},{"comment":"/**\r\n * Strong bidirectional character type \"AL\" in the Unicode specification.\r\n * @since 1.4\r\n */\r\n","field_name":"DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC","field_type":"byte","full_declaration":"public static final byte DIRECTIONALITY_RIGHT_TO_LEFT_ARABIC = 2","id":4120},{"comment":"/**\r\n * Weak bidirectional character type \"EN\" in the Unicode specification.\r\n * @since 1.4\r\n */\r\n","field_name":"DIRECTIONALITY_EUROPEAN_NUMBER","field_type":"byte","full_declaration":"public static final byte DIRECTIONALITY_EUROPEAN_NUMBER = 3","id":4121},{"comment":"/**\r\n * Weak bidirectional character type \"ES\" in the Unicode specification.\r\n * @since 1.4\r\n */\r\n","field_name":"DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR","field_type":"byte","full_declaration":"public static final byte DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR = 4","id":4122},{"comment":"/**\r\n * Weak bidirectional character type \"ET\" in the Unicode specification.\r\n * @since 1.4\r\n */\r\n","field_name":"DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR","field_type":"byte","full_declaration":"public static final byte DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR = 5","id":4123},{"comment":"/**\r\n * Weak bidirectional character type \"AN\" in the Unicode specification.\r\n * @since 1.4\r\n */\r\n","field_name":"DIRECTIONALITY_ARABIC_NUMBER","field_type":"byte","full_declaration":"public static final byte DIRECTIONALITY_ARABIC_NUMBER = 6","id":4124},{"comment":"/**\r\n * Weak bidirectional character type \"CS\" in the Unicode specification.\r\n * @since 1.4\r\n */\r\n","field_name":"DIRECTIONALITY_COMMON_NUMBER_SEPARATOR","field_type":"byte","full_declaration":"public static final byte DIRECTIONALITY_COMMON_NUMBER_SEPARATOR = 7","id":4125},{"comment":"/**\r\n * Weak bidirectional character type \"NSM\" in the Unicode specification.\r\n * @since 1.4\r\n */\r\n","field_name":"DIRECTIONALITY_NONSPACING_MARK","field_type":"byte","full_declaration":"public static final byte DIRECTIONALITY_NONSPACING_MARK = 8","id":4126},{"comment":"/**\r\n * Weak bidirectional character type \"BN\" in the Unicode specification.\r\n * @since 1.4\r\n */\r\n","field_name":"DIRECTIONALITY_BOUNDARY_NEUTRAL","field_type":"byte","full_declaration":"public static final byte DIRECTIONALITY_BOUNDARY_NEUTRAL = 9","id":4127},{"comment":"/**\r\n * Neutral bidirectional character type \"B\" in the Unicode specification.\r\n * @since 1.4\r\n */\r\n","field_name":"DIRECTIONALITY_PARAGRAPH_SEPARATOR","field_type":"byte","full_declaration":"public static final byte DIRECTIONALITY_PARAGRAPH_SEPARATOR = 10","id":4128},{"comment":"/**\r\n * Neutral bidirectional character type \"S\" in the Unicode specification.\r\n * @since 1.4\r\n */\r\n","field_name":"DIRECTIONALITY_SEGMENT_SEPARATOR","field_type":"byte","full_declaration":"public static final byte DIRECTIONALITY_SEGMENT_SEPARATOR = 11","id":4129},{"comment":"/**\r\n * Neutral bidirectional character type \"WS\" in the Unicode specification.\r\n * @since 1.4\r\n */\r\n","field_name":"DIRECTIONALITY_WHITESPACE","field_type":"byte","full_declaration":"public static final byte DIRECTIONALITY_WHITESPACE = 12","id":4130},{"comment":"/**\r\n * Neutral bidirectional character type \"ON\" in the Unicode specification.\r\n * @since 1.4\r\n */\r\n","field_name":"DIRECTIONALITY_OTHER_NEUTRALS","field_type":"byte","full_declaration":"public static final byte DIRECTIONALITY_OTHER_NEUTRALS = 13","id":4131},{"comment":"/**\r\n * Strong bidirectional character type \"LRE\" in the Unicode specification.\r\n * @since 1.4\r\n */\r\n","field_name":"DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING","field_type":"byte","full_declaration":"public static final byte DIRECTIONALITY_LEFT_TO_RIGHT_EMBEDDING = 14","id":4132},{"comment":"/**\r\n * Strong bidirectional character type \"LRO\" in the Unicode specification.\r\n * @since 1.4\r\n */\r\n","field_name":"DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE","field_type":"byte","full_declaration":"public static final byte DIRECTIONALITY_LEFT_TO_RIGHT_OVERRIDE = 15","id":4133},{"comment":"/**\r\n * Strong bidirectional character type \"RLE\" in the Unicode specification.\r\n * @since 1.4\r\n */\r\n","field_name":"DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING","field_type":"byte","full_declaration":"public static final byte DIRECTIONALITY_RIGHT_TO_LEFT_EMBEDDING = 16","id":4134},{"comment":"/**\r\n * Strong bidirectional character type \"RLO\" in the Unicode specification.\r\n * @since 1.4\r\n */\r\n","field_name":"DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE","field_type":"byte","full_declaration":"public static final byte DIRECTIONALITY_RIGHT_TO_LEFT_OVERRIDE = 17","id":4135},{"comment":"/**\r\n * Weak bidirectional character type \"PDF\" in the Unicode specification.\r\n * @since 1.4\r\n */\r\n","field_name":"DIRECTIONALITY_POP_DIRECTIONAL_FORMAT","field_type":"byte","full_declaration":"public static final byte DIRECTIONALITY_POP_DIRECTIONAL_FORMAT = 18","id":4136},{"comment":"/**\r\n * The minimum value of a\r\n * <a href=\"http://www.unicode.org/glossary/#high_surrogate_code_unit\">\r\n * Unicode high-surrogate code unit</a>\r\n * in the UTF-16 encoding, constant {@code '\\u005CuD800'}.\r\n * A high-surrogate is also known as a <i>leading-surrogate</i>.\r\n *\r\n * @since 1.5\r\n */\r\n","field_name":"MIN_HIGH_SURROGATE","field_type":"char","full_declaration":"public static final char MIN_HIGH_SURROGATE = '\\uD800'","id":4137},{"comment":"/**\r\n * The maximum value of a\r\n * <a href=\"http://www.unicode.org/glossary/#high_surrogate_code_unit\">\r\n * Unicode high-surrogate code unit</a>\r\n * in the UTF-16 encoding, constant {@code '\\u005CuDBFF'}.\r\n * A high-surrogate is also known as a <i>leading-surrogate</i>.\r\n *\r\n * @since 1.5\r\n */\r\n","field_name":"MAX_HIGH_SURROGATE","field_type":"char","full_declaration":"public static final char MAX_HIGH_SURROGATE = '\\uDBFF'","id":4138},{"comment":"/**\r\n * The minimum value of a\r\n * <a href=\"http://www.unicode.org/glossary/#low_surrogate_code_unit\">\r\n * Unicode low-surrogate code unit</a>\r\n * in the UTF-16 encoding, constant {@code '\\u005CuDC00'}.\r\n * A low-surrogate is also known as a <i>trailing-surrogate</i>.\r\n *\r\n * @since 1.5\r\n */\r\n","field_name":"MIN_LOW_SURROGATE","field_type":"char","full_declaration":"public static final char MIN_LOW_SURROGATE = '\\uDC00'","id":4139},{"comment":"/**\r\n * The maximum value of a\r\n * <a href=\"http://www.unicode.org/glossary/#low_surrogate_code_unit\">\r\n * Unicode low-surrogate code unit</a>\r\n * in the UTF-16 encoding, constant {@code '\\u005CuDFFF'}.\r\n * A low-surrogate is also known as a <i>trailing-surrogate</i>.\r\n *\r\n * @since 1.5\r\n */\r\n","field_name":"MAX_LOW_SURROGATE","field_type":"char","full_declaration":"public static final char MAX_LOW_SURROGATE = '\\uDFFF'","id":4140},{"comment":"/**\r\n * The minimum value of a Unicode surrogate code unit in the\r\n * UTF-16 encoding, constant {@code '\\u005CuD800'}.\r\n *\r\n * @since 1.5\r\n */\r\n","field_name":"MIN_SURROGATE","field_type":"char","full_declaration":"public static final char MIN_SURROGATE = MIN_HIGH_SURROGATE","id":4141},{"comment":"/**\r\n * The maximum value of a Unicode surrogate code unit in the\r\n * UTF-16 encoding, constant {@code '\\u005CuDFFF'}.\r\n *\r\n * @since 1.5\r\n */\r\n","field_name":"MAX_SURROGATE","field_type":"char","full_declaration":"public static final char MAX_SURROGATE = MAX_LOW_SURROGATE","id":4142},{"comment":"/**\r\n * The minimum value of a\r\n * <a href=\"http://www.unicode.org/glossary/#supplementary_code_point\">\r\n * Unicode supplementary code point</a>, constant {@code U+10000}.\r\n *\r\n * @since 1.5\r\n */\r\n","field_name":"MIN_SUPPLEMENTARY_CODE_POINT","field_type":"int","full_declaration":"public static final int MIN_SUPPLEMENTARY_CODE_POINT = 0x010000","id":4143},{"comment":"/**\r\n * The minimum value of a\r\n * <a href=\"http://www.unicode.org/glossary/#code_point\">\r\n * Unicode code point</a>, constant {@code U+0000}.\r\n *\r\n * @since 1.5\r\n */\r\n","field_name":"MIN_CODE_POINT","field_type":"int","full_declaration":"public static final int MIN_CODE_POINT = 0x000000","id":4144},{"comment":"/**\r\n * The maximum value of a\r\n * <a href=\"http://www.unicode.org/glossary/#code_point\">\r\n * Unicode code point</a>, constant {@code U+10FFFF}.\r\n *\r\n * @since 1.5\r\n */\r\n","field_name":"MAX_CODE_POINT","field_type":"int","full_declaration":"public static final int MAX_CODE_POINT = 0X10FFFF","id":4145},{"comment":"/**\r\n * The value of the {@code Character}.\r\n *\r\n * @serial\r\n */\r\n","field_name":"value","field_type":"char","full_declaration":"private final char value","id":4146},{"comment":"/**\r\n * use serialVersionUID from JDK 1.0.2 for interoperability\r\n */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 3786198910865385080L","id":4147},{"comment":"/**\r\n * The number of bits used to represent a <tt>char</tt> value in unsigned\r\n * binary form, constant {@code 16}.\r\n *\r\n * @since 1.5\r\n */\r\n","field_name":"SIZE","field_type":"int","full_declaration":"public static final int SIZE = 16","id":4148},{"comment":"/**\r\n * The number of bytes used to represent a {@code char} value in unsigned\r\n * binary form.\r\n *\r\n * @since 1.8\r\n */\r\n","field_name":"BYTES","field_type":"int","full_declaration":"public static final int BYTES = SIZE / Byte.SIZE","id":4149},{"comment":"private String name;","field_name":"name","field_type":"java.lang.String","full_declaration":"private java.lang.String name","id":4150},{"comment":"private static Map<String, UnicodeBlock> map = new HashMap<>(256);","field_name":"map","field_type":"java.util.Map","full_declaration":"private static java.util.Map map = new HashMap<>(256)","id":4151},{"comment":"/**\r\n * Constant for the \"Basic Latin\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock BASIC_LATIN = new UnicodeBlock(\"BASIC_LATIN\", \"BASIC LATIN\", \"BASICLATIN\");","field_name":"BASIC_LATIN","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock BASIC_LATIN = new UnicodeBlock(\"BASIC_LATIN\", \"BASIC LATIN\", \"BASICLATIN\")","id":4152},{"comment":"/**\r\n * Constant for the \"Latin-1 Supplement\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock LATIN_1_SUPPLEMENT = new UnicodeBlock(\"LATIN_1_SUPPLEMENT\", \"LATIN-1 SUPPLEMENT\", \"LATIN-1SUPPLEMENT\");","field_name":"LATIN_1_SUPPLEMENT","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock LATIN_1_SUPPLEMENT = new UnicodeBlock(\"LATIN_1_SUPPLEMENT\", \"LATIN-1 SUPPLEMENT\", \"LATIN-1SUPPLEMENT\")","id":4153},{"comment":"/**\r\n * Constant for the \"Latin Extended-A\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock LATIN_EXTENDED_A = new UnicodeBlock(\"LATIN_EXTENDED_A\", \"LATIN EXTENDED-A\", \"LATINEXTENDED-A\");","field_name":"LATIN_EXTENDED_A","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock LATIN_EXTENDED_A = new UnicodeBlock(\"LATIN_EXTENDED_A\", \"LATIN EXTENDED-A\", \"LATINEXTENDED-A\")","id":4154},{"comment":"/**\r\n * Constant for the \"Latin Extended-B\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock LATIN_EXTENDED_B = new UnicodeBlock(\"LATIN_EXTENDED_B\", \"LATIN EXTENDED-B\", \"LATINEXTENDED-B\");","field_name":"LATIN_EXTENDED_B","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock LATIN_EXTENDED_B = new UnicodeBlock(\"LATIN_EXTENDED_B\", \"LATIN EXTENDED-B\", \"LATINEXTENDED-B\")","id":4155},{"comment":"/**\r\n * Constant for the \"IPA Extensions\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock IPA_EXTENSIONS = new UnicodeBlock(\"IPA_EXTENSIONS\", \"IPA EXTENSIONS\", \"IPAEXTENSIONS\");","field_name":"IPA_EXTENSIONS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock IPA_EXTENSIONS = new UnicodeBlock(\"IPA_EXTENSIONS\", \"IPA EXTENSIONS\", \"IPAEXTENSIONS\")","id":4156},{"comment":"/**\r\n * Constant for the \"Spacing Modifier Letters\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock SPACING_MODIFIER_LETTERS = new UnicodeBlock(\"SPACING_MODIFIER_LETTERS\", \"SPACING MODIFIER LETTERS\", \"SPACINGMODIFIERLETTERS\");","field_name":"SPACING_MODIFIER_LETTERS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock SPACING_MODIFIER_LETTERS = new UnicodeBlock(\"SPACING_MODIFIER_LETTERS\", \"SPACING MODIFIER LETTERS\", \"SPACINGMODIFIERLETTERS\")","id":4157},{"comment":"/**\r\n * Constant for the \"Combining Diacritical Marks\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock COMBINING_DIACRITICAL_MARKS = new UnicodeBlock(\"COMBINING_DIACRITICAL_MARKS\", \"COMBINING DIACRITICAL MARKS\", \"COMBININGDIACRITICALMARKS\");","field_name":"COMBINING_DIACRITICAL_MARKS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock COMBINING_DIACRITICAL_MARKS = new UnicodeBlock(\"COMBINING_DIACRITICAL_MARKS\", \"COMBINING DIACRITICAL MARKS\", \"COMBININGDIACRITICALMARKS\")","id":4158},{"comment":"/**\r\n * Constant for the \"Greek and Coptic\" Unicode character block.\r\n * <p>\r\n * This block was previously known as the \"Greek\" block.\r\n *\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock GREEK = new UnicodeBlock(\"GREEK\", \"GREEK AND COPTIC\", \"GREEKANDCOPTIC\");","field_name":"GREEK","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock GREEK = new UnicodeBlock(\"GREEK\", \"GREEK AND COPTIC\", \"GREEKANDCOPTIC\")","id":4159},{"comment":"/**\r\n * Constant for the \"Cyrillic\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock CYRILLIC = new UnicodeBlock(\"CYRILLIC\");","field_name":"CYRILLIC","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock CYRILLIC = new UnicodeBlock(\"CYRILLIC\")","id":4160},{"comment":"/**\r\n * Constant for the \"Armenian\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock ARMENIAN = new UnicodeBlock(\"ARMENIAN\");","field_name":"ARMENIAN","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock ARMENIAN = new UnicodeBlock(\"ARMENIAN\")","id":4161},{"comment":"/**\r\n * Constant for the \"Hebrew\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock HEBREW = new UnicodeBlock(\"HEBREW\");","field_name":"HEBREW","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock HEBREW = new UnicodeBlock(\"HEBREW\")","id":4162},{"comment":"/**\r\n * Constant for the \"Arabic\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock ARABIC = new UnicodeBlock(\"ARABIC\");","field_name":"ARABIC","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock ARABIC = new UnicodeBlock(\"ARABIC\")","id":4163},{"comment":"/**\r\n * Constant for the \"Devanagari\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock DEVANAGARI = new UnicodeBlock(\"DEVANAGARI\");","field_name":"DEVANAGARI","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock DEVANAGARI = new UnicodeBlock(\"DEVANAGARI\")","id":4164},{"comment":"/**\r\n * Constant for the \"Bengali\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock BENGALI = new UnicodeBlock(\"BENGALI\");","field_name":"BENGALI","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock BENGALI = new UnicodeBlock(\"BENGALI\")","id":4165},{"comment":"/**\r\n * Constant for the \"Gurmukhi\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock GURMUKHI = new UnicodeBlock(\"GURMUKHI\");","field_name":"GURMUKHI","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock GURMUKHI = new UnicodeBlock(\"GURMUKHI\")","id":4166},{"comment":"/**\r\n * Constant for the \"Gujarati\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock GUJARATI = new UnicodeBlock(\"GUJARATI\");","field_name":"GUJARATI","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock GUJARATI = new UnicodeBlock(\"GUJARATI\")","id":4167},{"comment":"/**\r\n * Constant for the \"Oriya\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock ORIYA = new UnicodeBlock(\"ORIYA\");","field_name":"ORIYA","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock ORIYA = new UnicodeBlock(\"ORIYA\")","id":4168},{"comment":"/**\r\n * Constant for the \"Tamil\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock TAMIL = new UnicodeBlock(\"TAMIL\");","field_name":"TAMIL","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock TAMIL = new UnicodeBlock(\"TAMIL\")","id":4169},{"comment":"/**\r\n * Constant for the \"Telugu\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock TELUGU = new UnicodeBlock(\"TELUGU\");","field_name":"TELUGU","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock TELUGU = new UnicodeBlock(\"TELUGU\")","id":4170},{"comment":"/**\r\n * Constant for the \"Kannada\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock KANNADA = new UnicodeBlock(\"KANNADA\");","field_name":"KANNADA","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock KANNADA = new UnicodeBlock(\"KANNADA\")","id":4171},{"comment":"/**\r\n * Constant for the \"Malayalam\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock MALAYALAM = new UnicodeBlock(\"MALAYALAM\");","field_name":"MALAYALAM","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock MALAYALAM = new UnicodeBlock(\"MALAYALAM\")","id":4172},{"comment":"/**\r\n * Constant for the \"Thai\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock THAI = new UnicodeBlock(\"THAI\");","field_name":"THAI","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock THAI = new UnicodeBlock(\"THAI\")","id":4173},{"comment":"/**\r\n * Constant for the \"Lao\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock LAO = new UnicodeBlock(\"LAO\");","field_name":"LAO","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock LAO = new UnicodeBlock(\"LAO\")","id":4174},{"comment":"/**\r\n * Constant for the \"Tibetan\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock TIBETAN = new UnicodeBlock(\"TIBETAN\");","field_name":"TIBETAN","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock TIBETAN = new UnicodeBlock(\"TIBETAN\")","id":4175},{"comment":"/**\r\n * Constant for the \"Georgian\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock GEORGIAN = new UnicodeBlock(\"GEORGIAN\");","field_name":"GEORGIAN","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock GEORGIAN = new UnicodeBlock(\"GEORGIAN\")","id":4176},{"comment":"/**\r\n * Constant for the \"Hangul Jamo\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock HANGUL_JAMO = new UnicodeBlock(\"HANGUL_JAMO\", \"HANGUL JAMO\", \"HANGULJAMO\");","field_name":"HANGUL_JAMO","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock HANGUL_JAMO = new UnicodeBlock(\"HANGUL_JAMO\", \"HANGUL JAMO\", \"HANGULJAMO\")","id":4177},{"comment":"/**\r\n * Constant for the \"Latin Extended Additional\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock LATIN_EXTENDED_ADDITIONAL = new UnicodeBlock(\"LATIN_EXTENDED_ADDITIONAL\", \"LATIN EXTENDED ADDITIONAL\", \"LATINEXTENDEDADDITIONAL\");","field_name":"LATIN_EXTENDED_ADDITIONAL","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock LATIN_EXTENDED_ADDITIONAL = new UnicodeBlock(\"LATIN_EXTENDED_ADDITIONAL\", \"LATIN EXTENDED ADDITIONAL\", \"LATINEXTENDEDADDITIONAL\")","id":4178},{"comment":"/**\r\n * Constant for the \"Greek Extended\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock GREEK_EXTENDED = new UnicodeBlock(\"GREEK_EXTENDED\", \"GREEK EXTENDED\", \"GREEKEXTENDED\");","field_name":"GREEK_EXTENDED","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock GREEK_EXTENDED = new UnicodeBlock(\"GREEK_EXTENDED\", \"GREEK EXTENDED\", \"GREEKEXTENDED\")","id":4179},{"comment":"/**\r\n * Constant for the \"General Punctuation\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock GENERAL_PUNCTUATION = new UnicodeBlock(\"GENERAL_PUNCTUATION\", \"GENERAL PUNCTUATION\", \"GENERALPUNCTUATION\");","field_name":"GENERAL_PUNCTUATION","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock GENERAL_PUNCTUATION = new UnicodeBlock(\"GENERAL_PUNCTUATION\", \"GENERAL PUNCTUATION\", \"GENERALPUNCTUATION\")","id":4180},{"comment":"/**\r\n * Constant for the \"Superscripts and Subscripts\" Unicode character\r\n * block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock SUPERSCRIPTS_AND_SUBSCRIPTS = new UnicodeBlock(\"SUPERSCRIPTS_AND_SUBSCRIPTS\", \"SUPERSCRIPTS AND SUBSCRIPTS\", \"SUPERSCRIPTSANDSUBSCRIPTS\");","field_name":"SUPERSCRIPTS_AND_SUBSCRIPTS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock SUPERSCRIPTS_AND_SUBSCRIPTS = new UnicodeBlock(\"SUPERSCRIPTS_AND_SUBSCRIPTS\", \"SUPERSCRIPTS AND SUBSCRIPTS\", \"SUPERSCRIPTSANDSUBSCRIPTS\")","id":4181},{"comment":"/**\r\n * Constant for the \"Currency Symbols\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock CURRENCY_SYMBOLS = new UnicodeBlock(\"CURRENCY_SYMBOLS\", \"CURRENCY SYMBOLS\", \"CURRENCYSYMBOLS\");","field_name":"CURRENCY_SYMBOLS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock CURRENCY_SYMBOLS = new UnicodeBlock(\"CURRENCY_SYMBOLS\", \"CURRENCY SYMBOLS\", \"CURRENCYSYMBOLS\")","id":4182},{"comment":"/**\r\n * Constant for the \"Combining Diacritical Marks for Symbols\" Unicode\r\n * character block.\r\n * <p>\r\n * This block was previously known as \"Combining Marks for Symbols\".\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock COMBINING_MARKS_FOR_SYMBOLS = new UnicodeBlock(\"COMBINING_MARKS_FOR_SYMBOLS\", \"COMBINING DIACRITICAL MARKS FOR SYMBOLS\", \"COMBININGDIACRITICALMARKSFORSYMBOLS\", \"COMBINING MARKS FOR SYMBOLS\", \"COMBININGMARKSFORSYMBOLS\");","field_name":"COMBINING_MARKS_FOR_SYMBOLS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock COMBINING_MARKS_FOR_SYMBOLS = new UnicodeBlock(\"COMBINING_MARKS_FOR_SYMBOLS\", \"COMBINING DIACRITICAL MARKS FOR SYMBOLS\", \"COMBININGDIACRITICALMARKSFORSYMBOLS\", \"COMBINING MARKS FOR SYMBOLS\", \"COMBININGMARKSFORSYMBOLS\")","id":4183},{"comment":"/**\r\n * Constant for the \"Letterlike Symbols\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock LETTERLIKE_SYMBOLS = new UnicodeBlock(\"LETTERLIKE_SYMBOLS\", \"LETTERLIKE SYMBOLS\", \"LETTERLIKESYMBOLS\");","field_name":"LETTERLIKE_SYMBOLS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock LETTERLIKE_SYMBOLS = new UnicodeBlock(\"LETTERLIKE_SYMBOLS\", \"LETTERLIKE SYMBOLS\", \"LETTERLIKESYMBOLS\")","id":4184},{"comment":"/**\r\n * Constant for the \"Number Forms\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock NUMBER_FORMS = new UnicodeBlock(\"NUMBER_FORMS\", \"NUMBER FORMS\", \"NUMBERFORMS\");","field_name":"NUMBER_FORMS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock NUMBER_FORMS = new UnicodeBlock(\"NUMBER_FORMS\", \"NUMBER FORMS\", \"NUMBERFORMS\")","id":4185},{"comment":"/**\r\n * Constant for the \"Arrows\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock ARROWS = new UnicodeBlock(\"ARROWS\");","field_name":"ARROWS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock ARROWS = new UnicodeBlock(\"ARROWS\")","id":4186},{"comment":"/**\r\n * Constant for the \"Mathematical Operators\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock MATHEMATICAL_OPERATORS = new UnicodeBlock(\"MATHEMATICAL_OPERATORS\", \"MATHEMATICAL OPERATORS\", \"MATHEMATICALOPERATORS\");","field_name":"MATHEMATICAL_OPERATORS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock MATHEMATICAL_OPERATORS = new UnicodeBlock(\"MATHEMATICAL_OPERATORS\", \"MATHEMATICAL OPERATORS\", \"MATHEMATICALOPERATORS\")","id":4187},{"comment":"/**\r\n * Constant for the \"Miscellaneous Technical\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock MISCELLANEOUS_TECHNICAL = new UnicodeBlock(\"MISCELLANEOUS_TECHNICAL\", \"MISCELLANEOUS TECHNICAL\", \"MISCELLANEOUSTECHNICAL\");","field_name":"MISCELLANEOUS_TECHNICAL","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock MISCELLANEOUS_TECHNICAL = new UnicodeBlock(\"MISCELLANEOUS_TECHNICAL\", \"MISCELLANEOUS TECHNICAL\", \"MISCELLANEOUSTECHNICAL\")","id":4188},{"comment":"/**\r\n * Constant for the \"Control Pictures\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock CONTROL_PICTURES = new UnicodeBlock(\"CONTROL_PICTURES\", \"CONTROL PICTURES\", \"CONTROLPICTURES\");","field_name":"CONTROL_PICTURES","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock CONTROL_PICTURES = new UnicodeBlock(\"CONTROL_PICTURES\", \"CONTROL PICTURES\", \"CONTROLPICTURES\")","id":4189},{"comment":"/**\r\n * Constant for the \"Optical Character Recognition\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock OPTICAL_CHARACTER_RECOGNITION = new UnicodeBlock(\"OPTICAL_CHARACTER_RECOGNITION\", \"OPTICAL CHARACTER RECOGNITION\", \"OPTICALCHARACTERRECOGNITION\");","field_name":"OPTICAL_CHARACTER_RECOGNITION","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock OPTICAL_CHARACTER_RECOGNITION = new UnicodeBlock(\"OPTICAL_CHARACTER_RECOGNITION\", \"OPTICAL CHARACTER RECOGNITION\", \"OPTICALCHARACTERRECOGNITION\")","id":4190},{"comment":"/**\r\n * Constant for the \"Enclosed Alphanumerics\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock ENCLOSED_ALPHANUMERICS = new UnicodeBlock(\"ENCLOSED_ALPHANUMERICS\", \"ENCLOSED ALPHANUMERICS\", \"ENCLOSEDALPHANUMERICS\");","field_name":"ENCLOSED_ALPHANUMERICS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock ENCLOSED_ALPHANUMERICS = new UnicodeBlock(\"ENCLOSED_ALPHANUMERICS\", \"ENCLOSED ALPHANUMERICS\", \"ENCLOSEDALPHANUMERICS\")","id":4191},{"comment":"/**\r\n * Constant for the \"Box Drawing\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock BOX_DRAWING = new UnicodeBlock(\"BOX_DRAWING\", \"BOX DRAWING\", \"BOXDRAWING\");","field_name":"BOX_DRAWING","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock BOX_DRAWING = new UnicodeBlock(\"BOX_DRAWING\", \"BOX DRAWING\", \"BOXDRAWING\")","id":4192},{"comment":"/**\r\n * Constant for the \"Block Elements\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock BLOCK_ELEMENTS = new UnicodeBlock(\"BLOCK_ELEMENTS\", \"BLOCK ELEMENTS\", \"BLOCKELEMENTS\");","field_name":"BLOCK_ELEMENTS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock BLOCK_ELEMENTS = new UnicodeBlock(\"BLOCK_ELEMENTS\", \"BLOCK ELEMENTS\", \"BLOCKELEMENTS\")","id":4193},{"comment":"/**\r\n * Constant for the \"Geometric Shapes\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock GEOMETRIC_SHAPES = new UnicodeBlock(\"GEOMETRIC_SHAPES\", \"GEOMETRIC SHAPES\", \"GEOMETRICSHAPES\");","field_name":"GEOMETRIC_SHAPES","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock GEOMETRIC_SHAPES = new UnicodeBlock(\"GEOMETRIC_SHAPES\", \"GEOMETRIC SHAPES\", \"GEOMETRICSHAPES\")","id":4194},{"comment":"/**\r\n * Constant for the \"Miscellaneous Symbols\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock MISCELLANEOUS_SYMBOLS = new UnicodeBlock(\"MISCELLANEOUS_SYMBOLS\", \"MISCELLANEOUS SYMBOLS\", \"MISCELLANEOUSSYMBOLS\");","field_name":"MISCELLANEOUS_SYMBOLS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock MISCELLANEOUS_SYMBOLS = new UnicodeBlock(\"MISCELLANEOUS_SYMBOLS\", \"MISCELLANEOUS SYMBOLS\", \"MISCELLANEOUSSYMBOLS\")","id":4195},{"comment":"/**\r\n * Constant for the \"Dingbats\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock DINGBATS = new UnicodeBlock(\"DINGBATS\");","field_name":"DINGBATS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock DINGBATS = new UnicodeBlock(\"DINGBATS\")","id":4196},{"comment":"/**\r\n * Constant for the \"CJK Symbols and Punctuation\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock CJK_SYMBOLS_AND_PUNCTUATION = new UnicodeBlock(\"CJK_SYMBOLS_AND_PUNCTUATION\", \"CJK SYMBOLS AND PUNCTUATION\", \"CJKSYMBOLSANDPUNCTUATION\");","field_name":"CJK_SYMBOLS_AND_PUNCTUATION","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock CJK_SYMBOLS_AND_PUNCTUATION = new UnicodeBlock(\"CJK_SYMBOLS_AND_PUNCTUATION\", \"CJK SYMBOLS AND PUNCTUATION\", \"CJKSYMBOLSANDPUNCTUATION\")","id":4197},{"comment":"/**\r\n * Constant for the \"Hiragana\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock HIRAGANA = new UnicodeBlock(\"HIRAGANA\");","field_name":"HIRAGANA","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock HIRAGANA = new UnicodeBlock(\"HIRAGANA\")","id":4198},{"comment":"/**\r\n * Constant for the \"Katakana\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock KATAKANA = new UnicodeBlock(\"KATAKANA\");","field_name":"KATAKANA","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock KATAKANA = new UnicodeBlock(\"KATAKANA\")","id":4199},{"comment":"/**\r\n * Constant for the \"Bopomofo\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock BOPOMOFO = new UnicodeBlock(\"BOPOMOFO\");","field_name":"BOPOMOFO","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock BOPOMOFO = new UnicodeBlock(\"BOPOMOFO\")","id":4200},{"comment":"/**\r\n * Constant for the \"Hangul Compatibility Jamo\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock HANGUL_COMPATIBILITY_JAMO = new UnicodeBlock(\"HANGUL_COMPATIBILITY_JAMO\", \"HANGUL COMPATIBILITY JAMO\", \"HANGULCOMPATIBILITYJAMO\");","field_name":"HANGUL_COMPATIBILITY_JAMO","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock HANGUL_COMPATIBILITY_JAMO = new UnicodeBlock(\"HANGUL_COMPATIBILITY_JAMO\", \"HANGUL COMPATIBILITY JAMO\", \"HANGULCOMPATIBILITYJAMO\")","id":4201},{"comment":"/**\r\n * Constant for the \"Kanbun\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock KANBUN = new UnicodeBlock(\"KANBUN\");","field_name":"KANBUN","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock KANBUN = new UnicodeBlock(\"KANBUN\")","id":4202},{"comment":"/**\r\n * Constant for the \"Enclosed CJK Letters and Months\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock ENCLOSED_CJK_LETTERS_AND_MONTHS = new UnicodeBlock(\"ENCLOSED_CJK_LETTERS_AND_MONTHS\", \"ENCLOSED CJK LETTERS AND MONTHS\", \"ENCLOSEDCJKLETTERSANDMONTHS\");","field_name":"ENCLOSED_CJK_LETTERS_AND_MONTHS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock ENCLOSED_CJK_LETTERS_AND_MONTHS = new UnicodeBlock(\"ENCLOSED_CJK_LETTERS_AND_MONTHS\", \"ENCLOSED CJK LETTERS AND MONTHS\", \"ENCLOSEDCJKLETTERSANDMONTHS\")","id":4203},{"comment":"/**\r\n * Constant for the \"CJK Compatibility\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock CJK_COMPATIBILITY = new UnicodeBlock(\"CJK_COMPATIBILITY\", \"CJK COMPATIBILITY\", \"CJKCOMPATIBILITY\");","field_name":"CJK_COMPATIBILITY","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock CJK_COMPATIBILITY = new UnicodeBlock(\"CJK_COMPATIBILITY\", \"CJK COMPATIBILITY\", \"CJKCOMPATIBILITY\")","id":4204},{"comment":"/**\r\n * Constant for the \"CJK Unified Ideographs\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock CJK_UNIFIED_IDEOGRAPHS = new UnicodeBlock(\"CJK_UNIFIED_IDEOGRAPHS\", \"CJK UNIFIED IDEOGRAPHS\", \"CJKUNIFIEDIDEOGRAPHS\");","field_name":"CJK_UNIFIED_IDEOGRAPHS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock CJK_UNIFIED_IDEOGRAPHS = new UnicodeBlock(\"CJK_UNIFIED_IDEOGRAPHS\", \"CJK UNIFIED IDEOGRAPHS\", \"CJKUNIFIEDIDEOGRAPHS\")","id":4205},{"comment":"/**\r\n * Constant for the \"Hangul Syllables\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock HANGUL_SYLLABLES = new UnicodeBlock(\"HANGUL_SYLLABLES\", \"HANGUL SYLLABLES\", \"HANGULSYLLABLES\");","field_name":"HANGUL_SYLLABLES","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock HANGUL_SYLLABLES = new UnicodeBlock(\"HANGUL_SYLLABLES\", \"HANGUL SYLLABLES\", \"HANGULSYLLABLES\")","id":4206},{"comment":"/**\r\n * Constant for the \"Private Use Area\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock PRIVATE_USE_AREA = new UnicodeBlock(\"PRIVATE_USE_AREA\", \"PRIVATE USE AREA\", \"PRIVATEUSEAREA\");","field_name":"PRIVATE_USE_AREA","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock PRIVATE_USE_AREA = new UnicodeBlock(\"PRIVATE_USE_AREA\", \"PRIVATE USE AREA\", \"PRIVATEUSEAREA\")","id":4207},{"comment":"/**\r\n * Constant for the \"CJK Compatibility Ideographs\" Unicode character\r\n * block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock CJK_COMPATIBILITY_IDEOGRAPHS = new UnicodeBlock(\"CJK_COMPATIBILITY_IDEOGRAPHS\", \"CJK COMPATIBILITY IDEOGRAPHS\", \"CJKCOMPATIBILITYIDEOGRAPHS\");","field_name":"CJK_COMPATIBILITY_IDEOGRAPHS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock CJK_COMPATIBILITY_IDEOGRAPHS = new UnicodeBlock(\"CJK_COMPATIBILITY_IDEOGRAPHS\", \"CJK COMPATIBILITY IDEOGRAPHS\", \"CJKCOMPATIBILITYIDEOGRAPHS\")","id":4208},{"comment":"/**\r\n * Constant for the \"Alphabetic Presentation Forms\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock ALPHABETIC_PRESENTATION_FORMS = new UnicodeBlock(\"ALPHABETIC_PRESENTATION_FORMS\", \"ALPHABETIC PRESENTATION FORMS\", \"ALPHABETICPRESENTATIONFORMS\");","field_name":"ALPHABETIC_PRESENTATION_FORMS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock ALPHABETIC_PRESENTATION_FORMS = new UnicodeBlock(\"ALPHABETIC_PRESENTATION_FORMS\", \"ALPHABETIC PRESENTATION FORMS\", \"ALPHABETICPRESENTATIONFORMS\")","id":4209},{"comment":"/**\r\n * Constant for the \"Arabic Presentation Forms-A\" Unicode character\r\n * block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock ARABIC_PRESENTATION_FORMS_A = new UnicodeBlock(\"ARABIC_PRESENTATION_FORMS_A\", \"ARABIC PRESENTATION FORMS-A\", \"ARABICPRESENTATIONFORMS-A\");","field_name":"ARABIC_PRESENTATION_FORMS_A","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock ARABIC_PRESENTATION_FORMS_A = new UnicodeBlock(\"ARABIC_PRESENTATION_FORMS_A\", \"ARABIC PRESENTATION FORMS-A\", \"ARABICPRESENTATIONFORMS-A\")","id":4210},{"comment":"/**\r\n * Constant for the \"Combining Half Marks\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock COMBINING_HALF_MARKS = new UnicodeBlock(\"COMBINING_HALF_MARKS\", \"COMBINING HALF MARKS\", \"COMBININGHALFMARKS\");","field_name":"COMBINING_HALF_MARKS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock COMBINING_HALF_MARKS = new UnicodeBlock(\"COMBINING_HALF_MARKS\", \"COMBINING HALF MARKS\", \"COMBININGHALFMARKS\")","id":4211},{"comment":"/**\r\n * Constant for the \"CJK Compatibility Forms\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock CJK_COMPATIBILITY_FORMS = new UnicodeBlock(\"CJK_COMPATIBILITY_FORMS\", \"CJK COMPATIBILITY FORMS\", \"CJKCOMPATIBILITYFORMS\");","field_name":"CJK_COMPATIBILITY_FORMS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock CJK_COMPATIBILITY_FORMS = new UnicodeBlock(\"CJK_COMPATIBILITY_FORMS\", \"CJK COMPATIBILITY FORMS\", \"CJKCOMPATIBILITYFORMS\")","id":4212},{"comment":"/**\r\n * Constant for the \"Small Form Variants\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock SMALL_FORM_VARIANTS = new UnicodeBlock(\"SMALL_FORM_VARIANTS\", \"SMALL FORM VARIANTS\", \"SMALLFORMVARIANTS\");","field_name":"SMALL_FORM_VARIANTS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock SMALL_FORM_VARIANTS = new UnicodeBlock(\"SMALL_FORM_VARIANTS\", \"SMALL FORM VARIANTS\", \"SMALLFORMVARIANTS\")","id":4213},{"comment":"/**\r\n * Constant for the \"Arabic Presentation Forms-B\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock ARABIC_PRESENTATION_FORMS_B = new UnicodeBlock(\"ARABIC_PRESENTATION_FORMS_B\", \"ARABIC PRESENTATION FORMS-B\", \"ARABICPRESENTATIONFORMS-B\");","field_name":"ARABIC_PRESENTATION_FORMS_B","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock ARABIC_PRESENTATION_FORMS_B = new UnicodeBlock(\"ARABIC_PRESENTATION_FORMS_B\", \"ARABIC PRESENTATION FORMS-B\", \"ARABICPRESENTATIONFORMS-B\")","id":4214},{"comment":"/**\r\n * Constant for the \"Halfwidth and Fullwidth Forms\" Unicode character\r\n * block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock HALFWIDTH_AND_FULLWIDTH_FORMS = new UnicodeBlock(\"HALFWIDTH_AND_FULLWIDTH_FORMS\", \"HALFWIDTH AND FULLWIDTH FORMS\", \"HALFWIDTHANDFULLWIDTHFORMS\");","field_name":"HALFWIDTH_AND_FULLWIDTH_FORMS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock HALFWIDTH_AND_FULLWIDTH_FORMS = new UnicodeBlock(\"HALFWIDTH_AND_FULLWIDTH_FORMS\", \"HALFWIDTH AND FULLWIDTH FORMS\", \"HALFWIDTHANDFULLWIDTHFORMS\")","id":4215},{"comment":"/**\r\n * Constant for the \"Specials\" Unicode character block.\r\n * @since 1.2\r\n */\r\npublic static final UnicodeBlock SPECIALS = new UnicodeBlock(\"SPECIALS\");","field_name":"SPECIALS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock SPECIALS = new UnicodeBlock(\"SPECIALS\")","id":4216},{"comment":"/**\r\n * @deprecated As of J2SE 5, use {@link #HIGH_SURROGATES},\r\n *             {@link #HIGH_PRIVATE_USE_SURROGATES}, and\r\n *             {@link #LOW_SURROGATES}. These new constants match\r\n *             the block definitions of the Unicode Standard.\r\n *             The {@link #of(char)} and {@link #of(int)} methods\r\n *             return the new constants, not SURROGATES_AREA.\r\n */\r\n@Deprecated\r\npublic static final UnicodeBlock SURROGATES_AREA = new UnicodeBlock(\"SURROGATES_AREA\");","field_name":"SURROGATES_AREA","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock SURROGATES_AREA = new UnicodeBlock(\"SURROGATES_AREA\")","id":4217},{"comment":"/**\r\n * Constant for the \"Syriac\" Unicode character block.\r\n * @since 1.4\r\n */\r\npublic static final UnicodeBlock SYRIAC = new UnicodeBlock(\"SYRIAC\");","field_name":"SYRIAC","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock SYRIAC = new UnicodeBlock(\"SYRIAC\")","id":4218},{"comment":"/**\r\n * Constant for the \"Thaana\" Unicode character block.\r\n * @since 1.4\r\n */\r\npublic static final UnicodeBlock THAANA = new UnicodeBlock(\"THAANA\");","field_name":"THAANA","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock THAANA = new UnicodeBlock(\"THAANA\")","id":4219},{"comment":"/**\r\n * Constant for the \"Sinhala\" Unicode character block.\r\n * @since 1.4\r\n */\r\npublic static final UnicodeBlock SINHALA = new UnicodeBlock(\"SINHALA\");","field_name":"SINHALA","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock SINHALA = new UnicodeBlock(\"SINHALA\")","id":4220},{"comment":"/**\r\n * Constant for the \"Myanmar\" Unicode character block.\r\n * @since 1.4\r\n */\r\npublic static final UnicodeBlock MYANMAR = new UnicodeBlock(\"MYANMAR\");","field_name":"MYANMAR","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock MYANMAR = new UnicodeBlock(\"MYANMAR\")","id":4221},{"comment":"/**\r\n * Constant for the \"Ethiopic\" Unicode character block.\r\n * @since 1.4\r\n */\r\npublic static final UnicodeBlock ETHIOPIC = new UnicodeBlock(\"ETHIOPIC\");","field_name":"ETHIOPIC","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock ETHIOPIC = new UnicodeBlock(\"ETHIOPIC\")","id":4222},{"comment":"/**\r\n * Constant for the \"Cherokee\" Unicode character block.\r\n * @since 1.4\r\n */\r\npublic static final UnicodeBlock CHEROKEE = new UnicodeBlock(\"CHEROKEE\");","field_name":"CHEROKEE","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock CHEROKEE = new UnicodeBlock(\"CHEROKEE\")","id":4223},{"comment":"/**\r\n * Constant for the \"Unified Canadian Aboriginal Syllabics\" Unicode character block.\r\n * @since 1.4\r\n */\r\npublic static final UnicodeBlock UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS = new UnicodeBlock(\"UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS\", \"UNIFIED CANADIAN ABORIGINAL SYLLABICS\", \"UNIFIEDCANADIANABORIGINALSYLLABICS\");","field_name":"UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS = new UnicodeBlock(\"UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS\", \"UNIFIED CANADIAN ABORIGINAL SYLLABICS\", \"UNIFIEDCANADIANABORIGINALSYLLABICS\")","id":4224},{"comment":"/**\r\n * Constant for the \"Ogham\" Unicode character block.\r\n * @since 1.4\r\n */\r\npublic static final UnicodeBlock OGHAM = new UnicodeBlock(\"OGHAM\");","field_name":"OGHAM","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock OGHAM = new UnicodeBlock(\"OGHAM\")","id":4225},{"comment":"/**\r\n * Constant for the \"Runic\" Unicode character block.\r\n * @since 1.4\r\n */\r\npublic static final UnicodeBlock RUNIC = new UnicodeBlock(\"RUNIC\");","field_name":"RUNIC","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock RUNIC = new UnicodeBlock(\"RUNIC\")","id":4226},{"comment":"/**\r\n * Constant for the \"Khmer\" Unicode character block.\r\n * @since 1.4\r\n */\r\npublic static final UnicodeBlock KHMER = new UnicodeBlock(\"KHMER\");","field_name":"KHMER","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock KHMER = new UnicodeBlock(\"KHMER\")","id":4227},{"comment":"/**\r\n * Constant for the \"Mongolian\" Unicode character block.\r\n * @since 1.4\r\n */\r\npublic static final UnicodeBlock MONGOLIAN = new UnicodeBlock(\"MONGOLIAN\");","field_name":"MONGOLIAN","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock MONGOLIAN = new UnicodeBlock(\"MONGOLIAN\")","id":4228},{"comment":"/**\r\n * Constant for the \"Braille Patterns\" Unicode character block.\r\n * @since 1.4\r\n */\r\npublic static final UnicodeBlock BRAILLE_PATTERNS = new UnicodeBlock(\"BRAILLE_PATTERNS\", \"BRAILLE PATTERNS\", \"BRAILLEPATTERNS\");","field_name":"BRAILLE_PATTERNS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock BRAILLE_PATTERNS = new UnicodeBlock(\"BRAILLE_PATTERNS\", \"BRAILLE PATTERNS\", \"BRAILLEPATTERNS\")","id":4229},{"comment":"/**\r\n * Constant for the \"CJK Radicals Supplement\" Unicode character block.\r\n * @since 1.4\r\n */\r\npublic static final UnicodeBlock CJK_RADICALS_SUPPLEMENT = new UnicodeBlock(\"CJK_RADICALS_SUPPLEMENT\", \"CJK RADICALS SUPPLEMENT\", \"CJKRADICALSSUPPLEMENT\");","field_name":"CJK_RADICALS_SUPPLEMENT","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock CJK_RADICALS_SUPPLEMENT = new UnicodeBlock(\"CJK_RADICALS_SUPPLEMENT\", \"CJK RADICALS SUPPLEMENT\", \"CJKRADICALSSUPPLEMENT\")","id":4230},{"comment":"/**\r\n * Constant for the \"Kangxi Radicals\" Unicode character block.\r\n * @since 1.4\r\n */\r\npublic static final UnicodeBlock KANGXI_RADICALS = new UnicodeBlock(\"KANGXI_RADICALS\", \"KANGXI RADICALS\", \"KANGXIRADICALS\");","field_name":"KANGXI_RADICALS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock KANGXI_RADICALS = new UnicodeBlock(\"KANGXI_RADICALS\", \"KANGXI RADICALS\", \"KANGXIRADICALS\")","id":4231},{"comment":"/**\r\n * Constant for the \"Ideographic Description Characters\" Unicode character block.\r\n * @since 1.4\r\n */\r\npublic static final UnicodeBlock IDEOGRAPHIC_DESCRIPTION_CHARACTERS = new UnicodeBlock(\"IDEOGRAPHIC_DESCRIPTION_CHARACTERS\", \"IDEOGRAPHIC DESCRIPTION CHARACTERS\", \"IDEOGRAPHICDESCRIPTIONCHARACTERS\");","field_name":"IDEOGRAPHIC_DESCRIPTION_CHARACTERS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock IDEOGRAPHIC_DESCRIPTION_CHARACTERS = new UnicodeBlock(\"IDEOGRAPHIC_DESCRIPTION_CHARACTERS\", \"IDEOGRAPHIC DESCRIPTION CHARACTERS\", \"IDEOGRAPHICDESCRIPTIONCHARACTERS\")","id":4232},{"comment":"/**\r\n * Constant for the \"Bopomofo Extended\" Unicode character block.\r\n * @since 1.4\r\n */\r\npublic static final UnicodeBlock BOPOMOFO_EXTENDED = new UnicodeBlock(\"BOPOMOFO_EXTENDED\", \"BOPOMOFO EXTENDED\", \"BOPOMOFOEXTENDED\");","field_name":"BOPOMOFO_EXTENDED","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock BOPOMOFO_EXTENDED = new UnicodeBlock(\"BOPOMOFO_EXTENDED\", \"BOPOMOFO EXTENDED\", \"BOPOMOFOEXTENDED\")","id":4233},{"comment":"/**\r\n * Constant for the \"CJK Unified Ideographs Extension A\" Unicode character block.\r\n * @since 1.4\r\n */\r\npublic static final UnicodeBlock CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A = new UnicodeBlock(\"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A\", \"CJK UNIFIED IDEOGRAPHS EXTENSION A\", \"CJKUNIFIEDIDEOGRAPHSEXTENSIONA\");","field_name":"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A = new UnicodeBlock(\"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A\", \"CJK UNIFIED IDEOGRAPHS EXTENSION A\", \"CJKUNIFIEDIDEOGRAPHSEXTENSIONA\")","id":4234},{"comment":"/**\r\n * Constant for the \"Yi Syllables\" Unicode character block.\r\n * @since 1.4\r\n */\r\npublic static final UnicodeBlock YI_SYLLABLES = new UnicodeBlock(\"YI_SYLLABLES\", \"YI SYLLABLES\", \"YISYLLABLES\");","field_name":"YI_SYLLABLES","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock YI_SYLLABLES = new UnicodeBlock(\"YI_SYLLABLES\", \"YI SYLLABLES\", \"YISYLLABLES\")","id":4235},{"comment":"/**\r\n * Constant for the \"Yi Radicals\" Unicode character block.\r\n * @since 1.4\r\n */\r\npublic static final UnicodeBlock YI_RADICALS = new UnicodeBlock(\"YI_RADICALS\", \"YI RADICALS\", \"YIRADICALS\");","field_name":"YI_RADICALS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock YI_RADICALS = new UnicodeBlock(\"YI_RADICALS\", \"YI RADICALS\", \"YIRADICALS\")","id":4236},{"comment":"/**\r\n * Constant for the \"Cyrillic Supplementary\" Unicode character block.\r\n * @since 1.5\r\n */\r\npublic static final UnicodeBlock CYRILLIC_SUPPLEMENTARY = new UnicodeBlock(\"CYRILLIC_SUPPLEMENTARY\", \"CYRILLIC SUPPLEMENTARY\", \"CYRILLICSUPPLEMENTARY\", \"CYRILLIC SUPPLEMENT\", \"CYRILLICSUPPLEMENT\");","field_name":"CYRILLIC_SUPPLEMENTARY","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock CYRILLIC_SUPPLEMENTARY = new UnicodeBlock(\"CYRILLIC_SUPPLEMENTARY\", \"CYRILLIC SUPPLEMENTARY\", \"CYRILLICSUPPLEMENTARY\", \"CYRILLIC SUPPLEMENT\", \"CYRILLICSUPPLEMENT\")","id":4237},{"comment":"/**\r\n * Constant for the \"Tagalog\" Unicode character block.\r\n * @since 1.5\r\n */\r\npublic static final UnicodeBlock TAGALOG = new UnicodeBlock(\"TAGALOG\");","field_name":"TAGALOG","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock TAGALOG = new UnicodeBlock(\"TAGALOG\")","id":4238},{"comment":"/**\r\n * Constant for the \"Hanunoo\" Unicode character block.\r\n * @since 1.5\r\n */\r\npublic static final UnicodeBlock HANUNOO = new UnicodeBlock(\"HANUNOO\");","field_name":"HANUNOO","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock HANUNOO = new UnicodeBlock(\"HANUNOO\")","id":4239},{"comment":"/**\r\n * Constant for the \"Buhid\" Unicode character block.\r\n * @since 1.5\r\n */\r\npublic static final UnicodeBlock BUHID = new UnicodeBlock(\"BUHID\");","field_name":"BUHID","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock BUHID = new UnicodeBlock(\"BUHID\")","id":4240},{"comment":"/**\r\n * Constant for the \"Tagbanwa\" Unicode character block.\r\n * @since 1.5\r\n */\r\npublic static final UnicodeBlock TAGBANWA = new UnicodeBlock(\"TAGBANWA\");","field_name":"TAGBANWA","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock TAGBANWA = new UnicodeBlock(\"TAGBANWA\")","id":4241},{"comment":"/**\r\n * Constant for the \"Limbu\" Unicode character block.\r\n * @since 1.5\r\n */\r\npublic static final UnicodeBlock LIMBU = new UnicodeBlock(\"LIMBU\");","field_name":"LIMBU","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock LIMBU = new UnicodeBlock(\"LIMBU\")","id":4242},{"comment":"/**\r\n * Constant for the \"Tai Le\" Unicode character block.\r\n * @since 1.5\r\n */\r\npublic static final UnicodeBlock TAI_LE = new UnicodeBlock(\"TAI_LE\", \"TAI LE\", \"TAILE\");","field_name":"TAI_LE","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock TAI_LE = new UnicodeBlock(\"TAI_LE\", \"TAI LE\", \"TAILE\")","id":4243},{"comment":"/**\r\n * Constant for the \"Khmer Symbols\" Unicode character block.\r\n * @since 1.5\r\n */\r\npublic static final UnicodeBlock KHMER_SYMBOLS = new UnicodeBlock(\"KHMER_SYMBOLS\", \"KHMER SYMBOLS\", \"KHMERSYMBOLS\");","field_name":"KHMER_SYMBOLS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock KHMER_SYMBOLS = new UnicodeBlock(\"KHMER_SYMBOLS\", \"KHMER SYMBOLS\", \"KHMERSYMBOLS\")","id":4244},{"comment":"/**\r\n * Constant for the \"Phonetic Extensions\" Unicode character block.\r\n * @since 1.5\r\n */\r\npublic static final UnicodeBlock PHONETIC_EXTENSIONS = new UnicodeBlock(\"PHONETIC_EXTENSIONS\", \"PHONETIC EXTENSIONS\", \"PHONETICEXTENSIONS\");","field_name":"PHONETIC_EXTENSIONS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock PHONETIC_EXTENSIONS = new UnicodeBlock(\"PHONETIC_EXTENSIONS\", \"PHONETIC EXTENSIONS\", \"PHONETICEXTENSIONS\")","id":4245},{"comment":"/**\r\n * Constant for the \"Miscellaneous Mathematical Symbols-A\" Unicode character block.\r\n * @since 1.5\r\n */\r\npublic static final UnicodeBlock MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A = new UnicodeBlock(\"MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A\", \"MISCELLANEOUS MATHEMATICAL SYMBOLS-A\", \"MISCELLANEOUSMATHEMATICALSYMBOLS-A\");","field_name":"MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A = new UnicodeBlock(\"MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A\", \"MISCELLANEOUS MATHEMATICAL SYMBOLS-A\", \"MISCELLANEOUSMATHEMATICALSYMBOLS-A\")","id":4246},{"comment":"/**\r\n * Constant for the \"Supplemental Arrows-A\" Unicode character block.\r\n * @since 1.5\r\n */\r\npublic static final UnicodeBlock SUPPLEMENTAL_ARROWS_A = new UnicodeBlock(\"SUPPLEMENTAL_ARROWS_A\", \"SUPPLEMENTAL ARROWS-A\", \"SUPPLEMENTALARROWS-A\");","field_name":"SUPPLEMENTAL_ARROWS_A","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock SUPPLEMENTAL_ARROWS_A = new UnicodeBlock(\"SUPPLEMENTAL_ARROWS_A\", \"SUPPLEMENTAL ARROWS-A\", \"SUPPLEMENTALARROWS-A\")","id":4247},{"comment":"/**\r\n * Constant for the \"Supplemental Arrows-B\" Unicode character block.\r\n * @since 1.5\r\n */\r\npublic static final UnicodeBlock SUPPLEMENTAL_ARROWS_B = new UnicodeBlock(\"SUPPLEMENTAL_ARROWS_B\", \"SUPPLEMENTAL ARROWS-B\", \"SUPPLEMENTALARROWS-B\");","field_name":"SUPPLEMENTAL_ARROWS_B","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock SUPPLEMENTAL_ARROWS_B = new UnicodeBlock(\"SUPPLEMENTAL_ARROWS_B\", \"SUPPLEMENTAL ARROWS-B\", \"SUPPLEMENTALARROWS-B\")","id":4248},{"comment":"/**\r\n * Constant for the \"Miscellaneous Mathematical Symbols-B\" Unicode\r\n * character block.\r\n * @since 1.5\r\n */\r\npublic static final UnicodeBlock MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B = new UnicodeBlock(\"MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B\", \"MISCELLANEOUS MATHEMATICAL SYMBOLS-B\", \"MISCELLANEOUSMATHEMATICALSYMBOLS-B\");","field_name":"MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B = new UnicodeBlock(\"MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B\", \"MISCELLANEOUS MATHEMATICAL SYMBOLS-B\", \"MISCELLANEOUSMATHEMATICALSYMBOLS-B\")","id":4249},{"comment":"/**\r\n * Constant for the \"Supplemental Mathematical Operators\" Unicode\r\n * character block.\r\n * @since 1.5\r\n */\r\npublic static final UnicodeBlock SUPPLEMENTAL_MATHEMATICAL_OPERATORS = new UnicodeBlock(\"SUPPLEMENTAL_MATHEMATICAL_OPERATORS\", \"SUPPLEMENTAL MATHEMATICAL OPERATORS\", \"SUPPLEMENTALMATHEMATICALOPERATORS\");","field_name":"SUPPLEMENTAL_MATHEMATICAL_OPERATORS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock SUPPLEMENTAL_MATHEMATICAL_OPERATORS = new UnicodeBlock(\"SUPPLEMENTAL_MATHEMATICAL_OPERATORS\", \"SUPPLEMENTAL MATHEMATICAL OPERATORS\", \"SUPPLEMENTALMATHEMATICALOPERATORS\")","id":4250},{"comment":"/**\r\n * Constant for the \"Miscellaneous Symbols and Arrows\" Unicode character\r\n * block.\r\n * @since 1.5\r\n */\r\npublic static final UnicodeBlock MISCELLANEOUS_SYMBOLS_AND_ARROWS = new UnicodeBlock(\"MISCELLANEOUS_SYMBOLS_AND_ARROWS\", \"MISCELLANEOUS SYMBOLS AND ARROWS\", \"MISCELLANEOUSSYMBOLSANDARROWS\");","field_name":"MISCELLANEOUS_SYMBOLS_AND_ARROWS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock MISCELLANEOUS_SYMBOLS_AND_ARROWS = new UnicodeBlock(\"MISCELLANEOUS_SYMBOLS_AND_ARROWS\", \"MISCELLANEOUS SYMBOLS AND ARROWS\", \"MISCELLANEOUSSYMBOLSANDARROWS\")","id":4251},{"comment":"/**\r\n * Constant for the \"Katakana Phonetic Extensions\" Unicode character\r\n * block.\r\n * @since 1.5\r\n */\r\npublic static final UnicodeBlock KATAKANA_PHONETIC_EXTENSIONS = new UnicodeBlock(\"KATAKANA_PHONETIC_EXTENSIONS\", \"KATAKANA PHONETIC EXTENSIONS\", \"KATAKANAPHONETICEXTENSIONS\");","field_name":"KATAKANA_PHONETIC_EXTENSIONS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock KATAKANA_PHONETIC_EXTENSIONS = new UnicodeBlock(\"KATAKANA_PHONETIC_EXTENSIONS\", \"KATAKANA PHONETIC EXTENSIONS\", \"KATAKANAPHONETICEXTENSIONS\")","id":4252},{"comment":"/**\r\n * Constant for the \"Yijing Hexagram Symbols\" Unicode character block.\r\n * @since 1.5\r\n */\r\npublic static final UnicodeBlock YIJING_HEXAGRAM_SYMBOLS = new UnicodeBlock(\"YIJING_HEXAGRAM_SYMBOLS\", \"YIJING HEXAGRAM SYMBOLS\", \"YIJINGHEXAGRAMSYMBOLS\");","field_name":"YIJING_HEXAGRAM_SYMBOLS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock YIJING_HEXAGRAM_SYMBOLS = new UnicodeBlock(\"YIJING_HEXAGRAM_SYMBOLS\", \"YIJING HEXAGRAM SYMBOLS\", \"YIJINGHEXAGRAMSYMBOLS\")","id":4253},{"comment":"/**\r\n * Constant for the \"Variation Selectors\" Unicode character block.\r\n * @since 1.5\r\n */\r\npublic static final UnicodeBlock VARIATION_SELECTORS = new UnicodeBlock(\"VARIATION_SELECTORS\", \"VARIATION SELECTORS\", \"VARIATIONSELECTORS\");","field_name":"VARIATION_SELECTORS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock VARIATION_SELECTORS = new UnicodeBlock(\"VARIATION_SELECTORS\", \"VARIATION SELECTORS\", \"VARIATIONSELECTORS\")","id":4254},{"comment":"/**\r\n * Constant for the \"Linear B Syllabary\" Unicode character block.\r\n * @since 1.5\r\n */\r\npublic static final UnicodeBlock LINEAR_B_SYLLABARY = new UnicodeBlock(\"LINEAR_B_SYLLABARY\", \"LINEAR B SYLLABARY\", \"LINEARBSYLLABARY\");","field_name":"LINEAR_B_SYLLABARY","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock LINEAR_B_SYLLABARY = new UnicodeBlock(\"LINEAR_B_SYLLABARY\", \"LINEAR B SYLLABARY\", \"LINEARBSYLLABARY\")","id":4255},{"comment":"/**\r\n * Constant for the \"Linear B Ideograms\" Unicode character block.\r\n * @since 1.5\r\n */\r\npublic static final UnicodeBlock LINEAR_B_IDEOGRAMS = new UnicodeBlock(\"LINEAR_B_IDEOGRAMS\", \"LINEAR B IDEOGRAMS\", \"LINEARBIDEOGRAMS\");","field_name":"LINEAR_B_IDEOGRAMS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock LINEAR_B_IDEOGRAMS = new UnicodeBlock(\"LINEAR_B_IDEOGRAMS\", \"LINEAR B IDEOGRAMS\", \"LINEARBIDEOGRAMS\")","id":4256},{"comment":"/**\r\n * Constant for the \"Aegean Numbers\" Unicode character block.\r\n * @since 1.5\r\n */\r\npublic static final UnicodeBlock AEGEAN_NUMBERS = new UnicodeBlock(\"AEGEAN_NUMBERS\", \"AEGEAN NUMBERS\", \"AEGEANNUMBERS\");","field_name":"AEGEAN_NUMBERS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock AEGEAN_NUMBERS = new UnicodeBlock(\"AEGEAN_NUMBERS\", \"AEGEAN NUMBERS\", \"AEGEANNUMBERS\")","id":4257},{"comment":"/**\r\n * Constant for the \"Old Italic\" Unicode character block.\r\n * @since 1.5\r\n */\r\npublic static final UnicodeBlock OLD_ITALIC = new UnicodeBlock(\"OLD_ITALIC\", \"OLD ITALIC\", \"OLDITALIC\");","field_name":"OLD_ITALIC","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock OLD_ITALIC = new UnicodeBlock(\"OLD_ITALIC\", \"OLD ITALIC\", \"OLDITALIC\")","id":4258},{"comment":"/**\r\n * Constant for the \"Gothic\" Unicode character block.\r\n * @since 1.5\r\n */\r\npublic static final UnicodeBlock GOTHIC = new UnicodeBlock(\"GOTHIC\");","field_name":"GOTHIC","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock GOTHIC = new UnicodeBlock(\"GOTHIC\")","id":4259},{"comment":"/**\r\n * Constant for the \"Ugaritic\" Unicode character block.\r\n * @since 1.5\r\n */\r\npublic static final UnicodeBlock UGARITIC = new UnicodeBlock(\"UGARITIC\");","field_name":"UGARITIC","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock UGARITIC = new UnicodeBlock(\"UGARITIC\")","id":4260},{"comment":"/**\r\n * Constant for the \"Deseret\" Unicode character block.\r\n * @since 1.5\r\n */\r\npublic static final UnicodeBlock DESERET = new UnicodeBlock(\"DESERET\");","field_name":"DESERET","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock DESERET = new UnicodeBlock(\"DESERET\")","id":4261},{"comment":"/**\r\n * Constant for the \"Shavian\" Unicode character block.\r\n * @since 1.5\r\n */\r\npublic static final UnicodeBlock SHAVIAN = new UnicodeBlock(\"SHAVIAN\");","field_name":"SHAVIAN","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock SHAVIAN = new UnicodeBlock(\"SHAVIAN\")","id":4262},{"comment":"/**\r\n * Constant for the \"Osmanya\" Unicode character block.\r\n * @since 1.5\r\n */\r\npublic static final UnicodeBlock OSMANYA = new UnicodeBlock(\"OSMANYA\");","field_name":"OSMANYA","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock OSMANYA = new UnicodeBlock(\"OSMANYA\")","id":4263},{"comment":"/**\r\n * Constant for the \"Cypriot Syllabary\" Unicode character block.\r\n * @since 1.5\r\n */\r\npublic static final UnicodeBlock CYPRIOT_SYLLABARY = new UnicodeBlock(\"CYPRIOT_SYLLABARY\", \"CYPRIOT SYLLABARY\", \"CYPRIOTSYLLABARY\");","field_name":"CYPRIOT_SYLLABARY","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock CYPRIOT_SYLLABARY = new UnicodeBlock(\"CYPRIOT_SYLLABARY\", \"CYPRIOT SYLLABARY\", \"CYPRIOTSYLLABARY\")","id":4264},{"comment":"/**\r\n * Constant for the \"Byzantine Musical Symbols\" Unicode character block.\r\n * @since 1.5\r\n */\r\npublic static final UnicodeBlock BYZANTINE_MUSICAL_SYMBOLS = new UnicodeBlock(\"BYZANTINE_MUSICAL_SYMBOLS\", \"BYZANTINE MUSICAL SYMBOLS\", \"BYZANTINEMUSICALSYMBOLS\");","field_name":"BYZANTINE_MUSICAL_SYMBOLS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock BYZANTINE_MUSICAL_SYMBOLS = new UnicodeBlock(\"BYZANTINE_MUSICAL_SYMBOLS\", \"BYZANTINE MUSICAL SYMBOLS\", \"BYZANTINEMUSICALSYMBOLS\")","id":4265},{"comment":"/**\r\n * Constant for the \"Musical Symbols\" Unicode character block.\r\n * @since 1.5\r\n */\r\npublic static final UnicodeBlock MUSICAL_SYMBOLS = new UnicodeBlock(\"MUSICAL_SYMBOLS\", \"MUSICAL SYMBOLS\", \"MUSICALSYMBOLS\");","field_name":"MUSICAL_SYMBOLS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock MUSICAL_SYMBOLS = new UnicodeBlock(\"MUSICAL_SYMBOLS\", \"MUSICAL SYMBOLS\", \"MUSICALSYMBOLS\")","id":4266},{"comment":"/**\r\n * Constant for the \"Tai Xuan Jing Symbols\" Unicode character block.\r\n * @since 1.5\r\n */\r\npublic static final UnicodeBlock TAI_XUAN_JING_SYMBOLS = new UnicodeBlock(\"TAI_XUAN_JING_SYMBOLS\", \"TAI XUAN JING SYMBOLS\", \"TAIXUANJINGSYMBOLS\");","field_name":"TAI_XUAN_JING_SYMBOLS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock TAI_XUAN_JING_SYMBOLS = new UnicodeBlock(\"TAI_XUAN_JING_SYMBOLS\", \"TAI XUAN JING SYMBOLS\", \"TAIXUANJINGSYMBOLS\")","id":4267},{"comment":"/**\r\n * Constant for the \"Mathematical Alphanumeric Symbols\" Unicode\r\n * character block.\r\n * @since 1.5\r\n */\r\npublic static final UnicodeBlock MATHEMATICAL_ALPHANUMERIC_SYMBOLS = new UnicodeBlock(\"MATHEMATICAL_ALPHANUMERIC_SYMBOLS\", \"MATHEMATICAL ALPHANUMERIC SYMBOLS\", \"MATHEMATICALALPHANUMERICSYMBOLS\");","field_name":"MATHEMATICAL_ALPHANUMERIC_SYMBOLS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock MATHEMATICAL_ALPHANUMERIC_SYMBOLS = new UnicodeBlock(\"MATHEMATICAL_ALPHANUMERIC_SYMBOLS\", \"MATHEMATICAL ALPHANUMERIC SYMBOLS\", \"MATHEMATICALALPHANUMERICSYMBOLS\")","id":4268},{"comment":"/**\r\n * Constant for the \"CJK Unified Ideographs Extension B\" Unicode\r\n * character block.\r\n * @since 1.5\r\n */\r\npublic static final UnicodeBlock CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B = new UnicodeBlock(\"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B\", \"CJK UNIFIED IDEOGRAPHS EXTENSION B\", \"CJKUNIFIEDIDEOGRAPHSEXTENSIONB\");","field_name":"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B = new UnicodeBlock(\"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B\", \"CJK UNIFIED IDEOGRAPHS EXTENSION B\", \"CJKUNIFIEDIDEOGRAPHSEXTENSIONB\")","id":4269},{"comment":"/**\r\n * Constant for the \"CJK Compatibility Ideographs Supplement\" Unicode character block.\r\n * @since 1.5\r\n */\r\npublic static final UnicodeBlock CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT = new UnicodeBlock(\"CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT\", \"CJK COMPATIBILITY IDEOGRAPHS SUPPLEMENT\", \"CJKCOMPATIBILITYIDEOGRAPHSSUPPLEMENT\");","field_name":"CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT = new UnicodeBlock(\"CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT\", \"CJK COMPATIBILITY IDEOGRAPHS SUPPLEMENT\", \"CJKCOMPATIBILITYIDEOGRAPHSSUPPLEMENT\")","id":4270},{"comment":"/**\r\n * Constant for the \"Tags\" Unicode character block.\r\n * @since 1.5\r\n */\r\npublic static final UnicodeBlock TAGS = new UnicodeBlock(\"TAGS\");","field_name":"TAGS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock TAGS = new UnicodeBlock(\"TAGS\")","id":4271},{"comment":"/**\r\n * Constant for the \"Variation Selectors Supplement\" Unicode character\r\n * block.\r\n * @since 1.5\r\n */\r\npublic static final UnicodeBlock VARIATION_SELECTORS_SUPPLEMENT = new UnicodeBlock(\"VARIATION_SELECTORS_SUPPLEMENT\", \"VARIATION SELECTORS SUPPLEMENT\", \"VARIATIONSELECTORSSUPPLEMENT\");","field_name":"VARIATION_SELECTORS_SUPPLEMENT","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock VARIATION_SELECTORS_SUPPLEMENT = new UnicodeBlock(\"VARIATION_SELECTORS_SUPPLEMENT\", \"VARIATION SELECTORS SUPPLEMENT\", \"VARIATIONSELECTORSSUPPLEMENT\")","id":4272},{"comment":"/**\r\n * Constant for the \"Supplementary Private Use Area-A\" Unicode character\r\n * block.\r\n * @since 1.5\r\n */\r\npublic static final UnicodeBlock SUPPLEMENTARY_PRIVATE_USE_AREA_A = new UnicodeBlock(\"SUPPLEMENTARY_PRIVATE_USE_AREA_A\", \"SUPPLEMENTARY PRIVATE USE AREA-A\", \"SUPPLEMENTARYPRIVATEUSEAREA-A\");","field_name":"SUPPLEMENTARY_PRIVATE_USE_AREA_A","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock SUPPLEMENTARY_PRIVATE_USE_AREA_A = new UnicodeBlock(\"SUPPLEMENTARY_PRIVATE_USE_AREA_A\", \"SUPPLEMENTARY PRIVATE USE AREA-A\", \"SUPPLEMENTARYPRIVATEUSEAREA-A\")","id":4273},{"comment":"/**\r\n * Constant for the \"Supplementary Private Use Area-B\" Unicode character\r\n * block.\r\n * @since 1.5\r\n */\r\npublic static final UnicodeBlock SUPPLEMENTARY_PRIVATE_USE_AREA_B = new UnicodeBlock(\"SUPPLEMENTARY_PRIVATE_USE_AREA_B\", \"SUPPLEMENTARY PRIVATE USE AREA-B\", \"SUPPLEMENTARYPRIVATEUSEAREA-B\");","field_name":"SUPPLEMENTARY_PRIVATE_USE_AREA_B","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock SUPPLEMENTARY_PRIVATE_USE_AREA_B = new UnicodeBlock(\"SUPPLEMENTARY_PRIVATE_USE_AREA_B\", \"SUPPLEMENTARY PRIVATE USE AREA-B\", \"SUPPLEMENTARYPRIVATEUSEAREA-B\")","id":4274},{"comment":"/**\r\n * Constant for the \"High Surrogates\" Unicode character block.\r\n * This block represents codepoint values in the high surrogate\r\n * range: U+D800 through U+DB7F\r\n *\r\n * @since 1.5\r\n */\r\npublic static final UnicodeBlock HIGH_SURROGATES = new UnicodeBlock(\"HIGH_SURROGATES\", \"HIGH SURROGATES\", \"HIGHSURROGATES\");","field_name":"HIGH_SURROGATES","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock HIGH_SURROGATES = new UnicodeBlock(\"HIGH_SURROGATES\", \"HIGH SURROGATES\", \"HIGHSURROGATES\")","id":4275},{"comment":"/**\r\n * Constant for the \"High Private Use Surrogates\" Unicode character\r\n * block.\r\n * This block represents codepoint values in the private use high\r\n * surrogate range: U+DB80 through U+DBFF\r\n *\r\n * @since 1.5\r\n */\r\npublic static final UnicodeBlock HIGH_PRIVATE_USE_SURROGATES = new UnicodeBlock(\"HIGH_PRIVATE_USE_SURROGATES\", \"HIGH PRIVATE USE SURROGATES\", \"HIGHPRIVATEUSESURROGATES\");","field_name":"HIGH_PRIVATE_USE_SURROGATES","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock HIGH_PRIVATE_USE_SURROGATES = new UnicodeBlock(\"HIGH_PRIVATE_USE_SURROGATES\", \"HIGH PRIVATE USE SURROGATES\", \"HIGHPRIVATEUSESURROGATES\")","id":4276},{"comment":"/**\r\n * Constant for the \"Low Surrogates\" Unicode character block.\r\n * This block represents codepoint values in the low surrogate\r\n * range: U+DC00 through U+DFFF\r\n *\r\n * @since 1.5\r\n */\r\npublic static final UnicodeBlock LOW_SURROGATES = new UnicodeBlock(\"LOW_SURROGATES\", \"LOW SURROGATES\", \"LOWSURROGATES\");","field_name":"LOW_SURROGATES","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock LOW_SURROGATES = new UnicodeBlock(\"LOW_SURROGATES\", \"LOW SURROGATES\", \"LOWSURROGATES\")","id":4277},{"comment":"/**\r\n * Constant for the \"Arabic Supplement\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock ARABIC_SUPPLEMENT = new UnicodeBlock(\"ARABIC_SUPPLEMENT\", \"ARABIC SUPPLEMENT\", \"ARABICSUPPLEMENT\");","field_name":"ARABIC_SUPPLEMENT","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock ARABIC_SUPPLEMENT = new UnicodeBlock(\"ARABIC_SUPPLEMENT\", \"ARABIC SUPPLEMENT\", \"ARABICSUPPLEMENT\")","id":4278},{"comment":"/**\r\n * Constant for the \"NKo\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock NKO = new UnicodeBlock(\"NKO\");","field_name":"NKO","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock NKO = new UnicodeBlock(\"NKO\")","id":4279},{"comment":"/**\r\n * Constant for the \"Samaritan\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock SAMARITAN = new UnicodeBlock(\"SAMARITAN\");","field_name":"SAMARITAN","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock SAMARITAN = new UnicodeBlock(\"SAMARITAN\")","id":4280},{"comment":"/**\r\n * Constant for the \"Mandaic\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock MANDAIC = new UnicodeBlock(\"MANDAIC\");","field_name":"MANDAIC","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock MANDAIC = new UnicodeBlock(\"MANDAIC\")","id":4281},{"comment":"/**\r\n * Constant for the \"Ethiopic Supplement\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock ETHIOPIC_SUPPLEMENT = new UnicodeBlock(\"ETHIOPIC_SUPPLEMENT\", \"ETHIOPIC SUPPLEMENT\", \"ETHIOPICSUPPLEMENT\");","field_name":"ETHIOPIC_SUPPLEMENT","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock ETHIOPIC_SUPPLEMENT = new UnicodeBlock(\"ETHIOPIC_SUPPLEMENT\", \"ETHIOPIC SUPPLEMENT\", \"ETHIOPICSUPPLEMENT\")","id":4282},{"comment":"/**\r\n * Constant for the \"Unified Canadian Aboriginal Syllabics Extended\"\r\n * Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED = new UnicodeBlock(\"UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED\", \"UNIFIED CANADIAN ABORIGINAL SYLLABICS EXTENDED\", \"UNIFIEDCANADIANABORIGINALSYLLABICSEXTENDED\");","field_name":"UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED = new UnicodeBlock(\"UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED\", \"UNIFIED CANADIAN ABORIGINAL SYLLABICS EXTENDED\", \"UNIFIEDCANADIANABORIGINALSYLLABICSEXTENDED\")","id":4283},{"comment":"/**\r\n * Constant for the \"New Tai Lue\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock NEW_TAI_LUE = new UnicodeBlock(\"NEW_TAI_LUE\", \"NEW TAI LUE\", \"NEWTAILUE\");","field_name":"NEW_TAI_LUE","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock NEW_TAI_LUE = new UnicodeBlock(\"NEW_TAI_LUE\", \"NEW TAI LUE\", \"NEWTAILUE\")","id":4284},{"comment":"/**\r\n * Constant for the \"Buginese\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock BUGINESE = new UnicodeBlock(\"BUGINESE\");","field_name":"BUGINESE","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock BUGINESE = new UnicodeBlock(\"BUGINESE\")","id":4285},{"comment":"/**\r\n * Constant for the \"Tai Tham\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock TAI_THAM = new UnicodeBlock(\"TAI_THAM\", \"TAI THAM\", \"TAITHAM\");","field_name":"TAI_THAM","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock TAI_THAM = new UnicodeBlock(\"TAI_THAM\", \"TAI THAM\", \"TAITHAM\")","id":4286},{"comment":"/**\r\n * Constant for the \"Balinese\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock BALINESE = new UnicodeBlock(\"BALINESE\");","field_name":"BALINESE","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock BALINESE = new UnicodeBlock(\"BALINESE\")","id":4287},{"comment":"/**\r\n * Constant for the \"Sundanese\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock SUNDANESE = new UnicodeBlock(\"SUNDANESE\");","field_name":"SUNDANESE","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock SUNDANESE = new UnicodeBlock(\"SUNDANESE\")","id":4288},{"comment":"/**\r\n * Constant for the \"Batak\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock BATAK = new UnicodeBlock(\"BATAK\");","field_name":"BATAK","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock BATAK = new UnicodeBlock(\"BATAK\")","id":4289},{"comment":"/**\r\n * Constant for the \"Lepcha\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock LEPCHA = new UnicodeBlock(\"LEPCHA\");","field_name":"LEPCHA","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock LEPCHA = new UnicodeBlock(\"LEPCHA\")","id":4290},{"comment":"/**\r\n * Constant for the \"Ol Chiki\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock OL_CHIKI = new UnicodeBlock(\"OL_CHIKI\", \"OL CHIKI\", \"OLCHIKI\");","field_name":"OL_CHIKI","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock OL_CHIKI = new UnicodeBlock(\"OL_CHIKI\", \"OL CHIKI\", \"OLCHIKI\")","id":4291},{"comment":"/**\r\n * Constant for the \"Vedic Extensions\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock VEDIC_EXTENSIONS = new UnicodeBlock(\"VEDIC_EXTENSIONS\", \"VEDIC EXTENSIONS\", \"VEDICEXTENSIONS\");","field_name":"VEDIC_EXTENSIONS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock VEDIC_EXTENSIONS = new UnicodeBlock(\"VEDIC_EXTENSIONS\", \"VEDIC EXTENSIONS\", \"VEDICEXTENSIONS\")","id":4292},{"comment":"/**\r\n * Constant for the \"Phonetic Extensions Supplement\" Unicode character\r\n * block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock PHONETIC_EXTENSIONS_SUPPLEMENT = new UnicodeBlock(\"PHONETIC_EXTENSIONS_SUPPLEMENT\", \"PHONETIC EXTENSIONS SUPPLEMENT\", \"PHONETICEXTENSIONSSUPPLEMENT\");","field_name":"PHONETIC_EXTENSIONS_SUPPLEMENT","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock PHONETIC_EXTENSIONS_SUPPLEMENT = new UnicodeBlock(\"PHONETIC_EXTENSIONS_SUPPLEMENT\", \"PHONETIC EXTENSIONS SUPPLEMENT\", \"PHONETICEXTENSIONSSUPPLEMENT\")","id":4293},{"comment":"/**\r\n * Constant for the \"Combining Diacritical Marks Supplement\" Unicode\r\n * character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock COMBINING_DIACRITICAL_MARKS_SUPPLEMENT = new UnicodeBlock(\"COMBINING_DIACRITICAL_MARKS_SUPPLEMENT\", \"COMBINING DIACRITICAL MARKS SUPPLEMENT\", \"COMBININGDIACRITICALMARKSSUPPLEMENT\");","field_name":"COMBINING_DIACRITICAL_MARKS_SUPPLEMENT","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock COMBINING_DIACRITICAL_MARKS_SUPPLEMENT = new UnicodeBlock(\"COMBINING_DIACRITICAL_MARKS_SUPPLEMENT\", \"COMBINING DIACRITICAL MARKS SUPPLEMENT\", \"COMBININGDIACRITICALMARKSSUPPLEMENT\")","id":4294},{"comment":"/**\r\n * Constant for the \"Glagolitic\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock GLAGOLITIC = new UnicodeBlock(\"GLAGOLITIC\");","field_name":"GLAGOLITIC","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock GLAGOLITIC = new UnicodeBlock(\"GLAGOLITIC\")","id":4295},{"comment":"/**\r\n * Constant for the \"Latin Extended-C\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock LATIN_EXTENDED_C = new UnicodeBlock(\"LATIN_EXTENDED_C\", \"LATIN EXTENDED-C\", \"LATINEXTENDED-C\");","field_name":"LATIN_EXTENDED_C","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock LATIN_EXTENDED_C = new UnicodeBlock(\"LATIN_EXTENDED_C\", \"LATIN EXTENDED-C\", \"LATINEXTENDED-C\")","id":4296},{"comment":"/**\r\n * Constant for the \"Coptic\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock COPTIC = new UnicodeBlock(\"COPTIC\");","field_name":"COPTIC","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock COPTIC = new UnicodeBlock(\"COPTIC\")","id":4297},{"comment":"/**\r\n * Constant for the \"Georgian Supplement\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock GEORGIAN_SUPPLEMENT = new UnicodeBlock(\"GEORGIAN_SUPPLEMENT\", \"GEORGIAN SUPPLEMENT\", \"GEORGIANSUPPLEMENT\");","field_name":"GEORGIAN_SUPPLEMENT","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock GEORGIAN_SUPPLEMENT = new UnicodeBlock(\"GEORGIAN_SUPPLEMENT\", \"GEORGIAN SUPPLEMENT\", \"GEORGIANSUPPLEMENT\")","id":4298},{"comment":"/**\r\n * Constant for the \"Tifinagh\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock TIFINAGH = new UnicodeBlock(\"TIFINAGH\");","field_name":"TIFINAGH","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock TIFINAGH = new UnicodeBlock(\"TIFINAGH\")","id":4299},{"comment":"/**\r\n * Constant for the \"Ethiopic Extended\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock ETHIOPIC_EXTENDED = new UnicodeBlock(\"ETHIOPIC_EXTENDED\", \"ETHIOPIC EXTENDED\", \"ETHIOPICEXTENDED\");","field_name":"ETHIOPIC_EXTENDED","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock ETHIOPIC_EXTENDED = new UnicodeBlock(\"ETHIOPIC_EXTENDED\", \"ETHIOPIC EXTENDED\", \"ETHIOPICEXTENDED\")","id":4300},{"comment":"/**\r\n * Constant for the \"Cyrillic Extended-A\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock CYRILLIC_EXTENDED_A = new UnicodeBlock(\"CYRILLIC_EXTENDED_A\", \"CYRILLIC EXTENDED-A\", \"CYRILLICEXTENDED-A\");","field_name":"CYRILLIC_EXTENDED_A","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock CYRILLIC_EXTENDED_A = new UnicodeBlock(\"CYRILLIC_EXTENDED_A\", \"CYRILLIC EXTENDED-A\", \"CYRILLICEXTENDED-A\")","id":4301},{"comment":"/**\r\n * Constant for the \"Supplemental Punctuation\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock SUPPLEMENTAL_PUNCTUATION = new UnicodeBlock(\"SUPPLEMENTAL_PUNCTUATION\", \"SUPPLEMENTAL PUNCTUATION\", \"SUPPLEMENTALPUNCTUATION\");","field_name":"SUPPLEMENTAL_PUNCTUATION","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock SUPPLEMENTAL_PUNCTUATION = new UnicodeBlock(\"SUPPLEMENTAL_PUNCTUATION\", \"SUPPLEMENTAL PUNCTUATION\", \"SUPPLEMENTALPUNCTUATION\")","id":4302},{"comment":"/**\r\n * Constant for the \"CJK Strokes\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock CJK_STROKES = new UnicodeBlock(\"CJK_STROKES\", \"CJK STROKES\", \"CJKSTROKES\");","field_name":"CJK_STROKES","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock CJK_STROKES = new UnicodeBlock(\"CJK_STROKES\", \"CJK STROKES\", \"CJKSTROKES\")","id":4303},{"comment":"/**\r\n * Constant for the \"Lisu\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock LISU = new UnicodeBlock(\"LISU\");","field_name":"LISU","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock LISU = new UnicodeBlock(\"LISU\")","id":4304},{"comment":"/**\r\n * Constant for the \"Vai\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock VAI = new UnicodeBlock(\"VAI\");","field_name":"VAI","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock VAI = new UnicodeBlock(\"VAI\")","id":4305},{"comment":"/**\r\n * Constant for the \"Cyrillic Extended-B\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock CYRILLIC_EXTENDED_B = new UnicodeBlock(\"CYRILLIC_EXTENDED_B\", \"CYRILLIC EXTENDED-B\", \"CYRILLICEXTENDED-B\");","field_name":"CYRILLIC_EXTENDED_B","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock CYRILLIC_EXTENDED_B = new UnicodeBlock(\"CYRILLIC_EXTENDED_B\", \"CYRILLIC EXTENDED-B\", \"CYRILLICEXTENDED-B\")","id":4306},{"comment":"/**\r\n * Constant for the \"Bamum\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock BAMUM = new UnicodeBlock(\"BAMUM\");","field_name":"BAMUM","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock BAMUM = new UnicodeBlock(\"BAMUM\")","id":4307},{"comment":"/**\r\n * Constant for the \"Modifier Tone Letters\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock MODIFIER_TONE_LETTERS = new UnicodeBlock(\"MODIFIER_TONE_LETTERS\", \"MODIFIER TONE LETTERS\", \"MODIFIERTONELETTERS\");","field_name":"MODIFIER_TONE_LETTERS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock MODIFIER_TONE_LETTERS = new UnicodeBlock(\"MODIFIER_TONE_LETTERS\", \"MODIFIER TONE LETTERS\", \"MODIFIERTONELETTERS\")","id":4308},{"comment":"/**\r\n * Constant for the \"Latin Extended-D\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock LATIN_EXTENDED_D = new UnicodeBlock(\"LATIN_EXTENDED_D\", \"LATIN EXTENDED-D\", \"LATINEXTENDED-D\");","field_name":"LATIN_EXTENDED_D","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock LATIN_EXTENDED_D = new UnicodeBlock(\"LATIN_EXTENDED_D\", \"LATIN EXTENDED-D\", \"LATINEXTENDED-D\")","id":4309},{"comment":"/**\r\n * Constant for the \"Syloti Nagri\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock SYLOTI_NAGRI = new UnicodeBlock(\"SYLOTI_NAGRI\", \"SYLOTI NAGRI\", \"SYLOTINAGRI\");","field_name":"SYLOTI_NAGRI","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock SYLOTI_NAGRI = new UnicodeBlock(\"SYLOTI_NAGRI\", \"SYLOTI NAGRI\", \"SYLOTINAGRI\")","id":4310},{"comment":"/**\r\n * Constant for the \"Common Indic Number Forms\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock COMMON_INDIC_NUMBER_FORMS = new UnicodeBlock(\"COMMON_INDIC_NUMBER_FORMS\", \"COMMON INDIC NUMBER FORMS\", \"COMMONINDICNUMBERFORMS\");","field_name":"COMMON_INDIC_NUMBER_FORMS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock COMMON_INDIC_NUMBER_FORMS = new UnicodeBlock(\"COMMON_INDIC_NUMBER_FORMS\", \"COMMON INDIC NUMBER FORMS\", \"COMMONINDICNUMBERFORMS\")","id":4311},{"comment":"/**\r\n * Constant for the \"Phags-pa\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock PHAGS_PA = new UnicodeBlock(\"PHAGS_PA\", \"PHAGS-PA\");","field_name":"PHAGS_PA","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock PHAGS_PA = new UnicodeBlock(\"PHAGS_PA\", \"PHAGS-PA\")","id":4312},{"comment":"/**\r\n * Constant for the \"Saurashtra\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock SAURASHTRA = new UnicodeBlock(\"SAURASHTRA\");","field_name":"SAURASHTRA","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock SAURASHTRA = new UnicodeBlock(\"SAURASHTRA\")","id":4313},{"comment":"/**\r\n * Constant for the \"Devanagari Extended\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock DEVANAGARI_EXTENDED = new UnicodeBlock(\"DEVANAGARI_EXTENDED\", \"DEVANAGARI EXTENDED\", \"DEVANAGARIEXTENDED\");","field_name":"DEVANAGARI_EXTENDED","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock DEVANAGARI_EXTENDED = new UnicodeBlock(\"DEVANAGARI_EXTENDED\", \"DEVANAGARI EXTENDED\", \"DEVANAGARIEXTENDED\")","id":4314},{"comment":"/**\r\n * Constant for the \"Kayah Li\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock KAYAH_LI = new UnicodeBlock(\"KAYAH_LI\", \"KAYAH LI\", \"KAYAHLI\");","field_name":"KAYAH_LI","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock KAYAH_LI = new UnicodeBlock(\"KAYAH_LI\", \"KAYAH LI\", \"KAYAHLI\")","id":4315},{"comment":"/**\r\n * Constant for the \"Rejang\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock REJANG = new UnicodeBlock(\"REJANG\");","field_name":"REJANG","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock REJANG = new UnicodeBlock(\"REJANG\")","id":4316},{"comment":"/**\r\n * Constant for the \"Hangul Jamo Extended-A\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock HANGUL_JAMO_EXTENDED_A = new UnicodeBlock(\"HANGUL_JAMO_EXTENDED_A\", \"HANGUL JAMO EXTENDED-A\", \"HANGULJAMOEXTENDED-A\");","field_name":"HANGUL_JAMO_EXTENDED_A","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock HANGUL_JAMO_EXTENDED_A = new UnicodeBlock(\"HANGUL_JAMO_EXTENDED_A\", \"HANGUL JAMO EXTENDED-A\", \"HANGULJAMOEXTENDED-A\")","id":4317},{"comment":"/**\r\n * Constant for the \"Javanese\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock JAVANESE = new UnicodeBlock(\"JAVANESE\");","field_name":"JAVANESE","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock JAVANESE = new UnicodeBlock(\"JAVANESE\")","id":4318},{"comment":"/**\r\n * Constant for the \"Cham\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock CHAM = new UnicodeBlock(\"CHAM\");","field_name":"CHAM","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock CHAM = new UnicodeBlock(\"CHAM\")","id":4319},{"comment":"/**\r\n * Constant for the \"Myanmar Extended-A\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock MYANMAR_EXTENDED_A = new UnicodeBlock(\"MYANMAR_EXTENDED_A\", \"MYANMAR EXTENDED-A\", \"MYANMAREXTENDED-A\");","field_name":"MYANMAR_EXTENDED_A","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock MYANMAR_EXTENDED_A = new UnicodeBlock(\"MYANMAR_EXTENDED_A\", \"MYANMAR EXTENDED-A\", \"MYANMAREXTENDED-A\")","id":4320},{"comment":"/**\r\n * Constant for the \"Tai Viet\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock TAI_VIET = new UnicodeBlock(\"TAI_VIET\", \"TAI VIET\", \"TAIVIET\");","field_name":"TAI_VIET","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock TAI_VIET = new UnicodeBlock(\"TAI_VIET\", \"TAI VIET\", \"TAIVIET\")","id":4321},{"comment":"/**\r\n * Constant for the \"Ethiopic Extended-A\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock ETHIOPIC_EXTENDED_A = new UnicodeBlock(\"ETHIOPIC_EXTENDED_A\", \"ETHIOPIC EXTENDED-A\", \"ETHIOPICEXTENDED-A\");","field_name":"ETHIOPIC_EXTENDED_A","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock ETHIOPIC_EXTENDED_A = new UnicodeBlock(\"ETHIOPIC_EXTENDED_A\", \"ETHIOPIC EXTENDED-A\", \"ETHIOPICEXTENDED-A\")","id":4322},{"comment":"/**\r\n * Constant for the \"Meetei Mayek\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock MEETEI_MAYEK = new UnicodeBlock(\"MEETEI_MAYEK\", \"MEETEI MAYEK\", \"MEETEIMAYEK\");","field_name":"MEETEI_MAYEK","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock MEETEI_MAYEK = new UnicodeBlock(\"MEETEI_MAYEK\", \"MEETEI MAYEK\", \"MEETEIMAYEK\")","id":4323},{"comment":"/**\r\n * Constant for the \"Hangul Jamo Extended-B\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock HANGUL_JAMO_EXTENDED_B = new UnicodeBlock(\"HANGUL_JAMO_EXTENDED_B\", \"HANGUL JAMO EXTENDED-B\", \"HANGULJAMOEXTENDED-B\");","field_name":"HANGUL_JAMO_EXTENDED_B","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock HANGUL_JAMO_EXTENDED_B = new UnicodeBlock(\"HANGUL_JAMO_EXTENDED_B\", \"HANGUL JAMO EXTENDED-B\", \"HANGULJAMOEXTENDED-B\")","id":4324},{"comment":"/**\r\n * Constant for the \"Vertical Forms\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock VERTICAL_FORMS = new UnicodeBlock(\"VERTICAL_FORMS\", \"VERTICAL FORMS\", \"VERTICALFORMS\");","field_name":"VERTICAL_FORMS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock VERTICAL_FORMS = new UnicodeBlock(\"VERTICAL_FORMS\", \"VERTICAL FORMS\", \"VERTICALFORMS\")","id":4325},{"comment":"/**\r\n * Constant for the \"Ancient Greek Numbers\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock ANCIENT_GREEK_NUMBERS = new UnicodeBlock(\"ANCIENT_GREEK_NUMBERS\", \"ANCIENT GREEK NUMBERS\", \"ANCIENTGREEKNUMBERS\");","field_name":"ANCIENT_GREEK_NUMBERS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock ANCIENT_GREEK_NUMBERS = new UnicodeBlock(\"ANCIENT_GREEK_NUMBERS\", \"ANCIENT GREEK NUMBERS\", \"ANCIENTGREEKNUMBERS\")","id":4326},{"comment":"/**\r\n * Constant for the \"Ancient Symbols\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock ANCIENT_SYMBOLS = new UnicodeBlock(\"ANCIENT_SYMBOLS\", \"ANCIENT SYMBOLS\", \"ANCIENTSYMBOLS\");","field_name":"ANCIENT_SYMBOLS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock ANCIENT_SYMBOLS = new UnicodeBlock(\"ANCIENT_SYMBOLS\", \"ANCIENT SYMBOLS\", \"ANCIENTSYMBOLS\")","id":4327},{"comment":"/**\r\n * Constant for the \"Phaistos Disc\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock PHAISTOS_DISC = new UnicodeBlock(\"PHAISTOS_DISC\", \"PHAISTOS DISC\", \"PHAISTOSDISC\");","field_name":"PHAISTOS_DISC","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock PHAISTOS_DISC = new UnicodeBlock(\"PHAISTOS_DISC\", \"PHAISTOS DISC\", \"PHAISTOSDISC\")","id":4328},{"comment":"/**\r\n * Constant for the \"Lycian\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock LYCIAN = new UnicodeBlock(\"LYCIAN\");","field_name":"LYCIAN","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock LYCIAN = new UnicodeBlock(\"LYCIAN\")","id":4329},{"comment":"/**\r\n * Constant for the \"Carian\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock CARIAN = new UnicodeBlock(\"CARIAN\");","field_name":"CARIAN","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock CARIAN = new UnicodeBlock(\"CARIAN\")","id":4330},{"comment":"/**\r\n * Constant for the \"Old Persian\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock OLD_PERSIAN = new UnicodeBlock(\"OLD_PERSIAN\", \"OLD PERSIAN\", \"OLDPERSIAN\");","field_name":"OLD_PERSIAN","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock OLD_PERSIAN = new UnicodeBlock(\"OLD_PERSIAN\", \"OLD PERSIAN\", \"OLDPERSIAN\")","id":4331},{"comment":"/**\r\n * Constant for the \"Imperial Aramaic\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock IMPERIAL_ARAMAIC = new UnicodeBlock(\"IMPERIAL_ARAMAIC\", \"IMPERIAL ARAMAIC\", \"IMPERIALARAMAIC\");","field_name":"IMPERIAL_ARAMAIC","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock IMPERIAL_ARAMAIC = new UnicodeBlock(\"IMPERIAL_ARAMAIC\", \"IMPERIAL ARAMAIC\", \"IMPERIALARAMAIC\")","id":4332},{"comment":"/**\r\n * Constant for the \"Phoenician\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock PHOENICIAN = new UnicodeBlock(\"PHOENICIAN\");","field_name":"PHOENICIAN","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock PHOENICIAN = new UnicodeBlock(\"PHOENICIAN\")","id":4333},{"comment":"/**\r\n * Constant for the \"Lydian\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock LYDIAN = new UnicodeBlock(\"LYDIAN\");","field_name":"LYDIAN","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock LYDIAN = new UnicodeBlock(\"LYDIAN\")","id":4334},{"comment":"/**\r\n * Constant for the \"Kharoshthi\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock KHAROSHTHI = new UnicodeBlock(\"KHAROSHTHI\");","field_name":"KHAROSHTHI","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock KHAROSHTHI = new UnicodeBlock(\"KHAROSHTHI\")","id":4335},{"comment":"/**\r\n * Constant for the \"Old South Arabian\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock OLD_SOUTH_ARABIAN = new UnicodeBlock(\"OLD_SOUTH_ARABIAN\", \"OLD SOUTH ARABIAN\", \"OLDSOUTHARABIAN\");","field_name":"OLD_SOUTH_ARABIAN","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock OLD_SOUTH_ARABIAN = new UnicodeBlock(\"OLD_SOUTH_ARABIAN\", \"OLD SOUTH ARABIAN\", \"OLDSOUTHARABIAN\")","id":4336},{"comment":"/**\r\n * Constant for the \"Avestan\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock AVESTAN = new UnicodeBlock(\"AVESTAN\");","field_name":"AVESTAN","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock AVESTAN = new UnicodeBlock(\"AVESTAN\")","id":4337},{"comment":"/**\r\n * Constant for the \"Inscriptional Parthian\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock INSCRIPTIONAL_PARTHIAN = new UnicodeBlock(\"INSCRIPTIONAL_PARTHIAN\", \"INSCRIPTIONAL PARTHIAN\", \"INSCRIPTIONALPARTHIAN\");","field_name":"INSCRIPTIONAL_PARTHIAN","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock INSCRIPTIONAL_PARTHIAN = new UnicodeBlock(\"INSCRIPTIONAL_PARTHIAN\", \"INSCRIPTIONAL PARTHIAN\", \"INSCRIPTIONALPARTHIAN\")","id":4338},{"comment":"/**\r\n * Constant for the \"Inscriptional Pahlavi\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock INSCRIPTIONAL_PAHLAVI = new UnicodeBlock(\"INSCRIPTIONAL_PAHLAVI\", \"INSCRIPTIONAL PAHLAVI\", \"INSCRIPTIONALPAHLAVI\");","field_name":"INSCRIPTIONAL_PAHLAVI","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock INSCRIPTIONAL_PAHLAVI = new UnicodeBlock(\"INSCRIPTIONAL_PAHLAVI\", \"INSCRIPTIONAL PAHLAVI\", \"INSCRIPTIONALPAHLAVI\")","id":4339},{"comment":"/**\r\n * Constant for the \"Old Turkic\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock OLD_TURKIC = new UnicodeBlock(\"OLD_TURKIC\", \"OLD TURKIC\", \"OLDTURKIC\");","field_name":"OLD_TURKIC","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock OLD_TURKIC = new UnicodeBlock(\"OLD_TURKIC\", \"OLD TURKIC\", \"OLDTURKIC\")","id":4340},{"comment":"/**\r\n * Constant for the \"Rumi Numeral Symbols\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock RUMI_NUMERAL_SYMBOLS = new UnicodeBlock(\"RUMI_NUMERAL_SYMBOLS\", \"RUMI NUMERAL SYMBOLS\", \"RUMINUMERALSYMBOLS\");","field_name":"RUMI_NUMERAL_SYMBOLS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock RUMI_NUMERAL_SYMBOLS = new UnicodeBlock(\"RUMI_NUMERAL_SYMBOLS\", \"RUMI NUMERAL SYMBOLS\", \"RUMINUMERALSYMBOLS\")","id":4341},{"comment":"/**\r\n * Constant for the \"Brahmi\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock BRAHMI = new UnicodeBlock(\"BRAHMI\");","field_name":"BRAHMI","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock BRAHMI = new UnicodeBlock(\"BRAHMI\")","id":4342},{"comment":"/**\r\n * Constant for the \"Kaithi\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock KAITHI = new UnicodeBlock(\"KAITHI\");","field_name":"KAITHI","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock KAITHI = new UnicodeBlock(\"KAITHI\")","id":4343},{"comment":"/**\r\n * Constant for the \"Cuneiform\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock CUNEIFORM = new UnicodeBlock(\"CUNEIFORM\");","field_name":"CUNEIFORM","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock CUNEIFORM = new UnicodeBlock(\"CUNEIFORM\")","id":4344},{"comment":"/**\r\n * Constant for the \"Cuneiform Numbers and Punctuation\" Unicode\r\n * character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock CUNEIFORM_NUMBERS_AND_PUNCTUATION = new UnicodeBlock(\"CUNEIFORM_NUMBERS_AND_PUNCTUATION\", \"CUNEIFORM NUMBERS AND PUNCTUATION\", \"CUNEIFORMNUMBERSANDPUNCTUATION\");","field_name":"CUNEIFORM_NUMBERS_AND_PUNCTUATION","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock CUNEIFORM_NUMBERS_AND_PUNCTUATION = new UnicodeBlock(\"CUNEIFORM_NUMBERS_AND_PUNCTUATION\", \"CUNEIFORM NUMBERS AND PUNCTUATION\", \"CUNEIFORMNUMBERSANDPUNCTUATION\")","id":4345},{"comment":"/**\r\n * Constant for the \"Egyptian Hieroglyphs\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock EGYPTIAN_HIEROGLYPHS = new UnicodeBlock(\"EGYPTIAN_HIEROGLYPHS\", \"EGYPTIAN HIEROGLYPHS\", \"EGYPTIANHIEROGLYPHS\");","field_name":"EGYPTIAN_HIEROGLYPHS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock EGYPTIAN_HIEROGLYPHS = new UnicodeBlock(\"EGYPTIAN_HIEROGLYPHS\", \"EGYPTIAN HIEROGLYPHS\", \"EGYPTIANHIEROGLYPHS\")","id":4346},{"comment":"/**\r\n * Constant for the \"Bamum Supplement\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock BAMUM_SUPPLEMENT = new UnicodeBlock(\"BAMUM_SUPPLEMENT\", \"BAMUM SUPPLEMENT\", \"BAMUMSUPPLEMENT\");","field_name":"BAMUM_SUPPLEMENT","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock BAMUM_SUPPLEMENT = new UnicodeBlock(\"BAMUM_SUPPLEMENT\", \"BAMUM SUPPLEMENT\", \"BAMUMSUPPLEMENT\")","id":4347},{"comment":"/**\r\n * Constant for the \"Kana Supplement\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock KANA_SUPPLEMENT = new UnicodeBlock(\"KANA_SUPPLEMENT\", \"KANA SUPPLEMENT\", \"KANASUPPLEMENT\");","field_name":"KANA_SUPPLEMENT","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock KANA_SUPPLEMENT = new UnicodeBlock(\"KANA_SUPPLEMENT\", \"KANA SUPPLEMENT\", \"KANASUPPLEMENT\")","id":4348},{"comment":"/**\r\n * Constant for the \"Ancient Greek Musical Notation\" Unicode character\r\n * block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock ANCIENT_GREEK_MUSICAL_NOTATION = new UnicodeBlock(\"ANCIENT_GREEK_MUSICAL_NOTATION\", \"ANCIENT GREEK MUSICAL NOTATION\", \"ANCIENTGREEKMUSICALNOTATION\");","field_name":"ANCIENT_GREEK_MUSICAL_NOTATION","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock ANCIENT_GREEK_MUSICAL_NOTATION = new UnicodeBlock(\"ANCIENT_GREEK_MUSICAL_NOTATION\", \"ANCIENT GREEK MUSICAL NOTATION\", \"ANCIENTGREEKMUSICALNOTATION\")","id":4349},{"comment":"/**\r\n * Constant for the \"Counting Rod Numerals\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock COUNTING_ROD_NUMERALS = new UnicodeBlock(\"COUNTING_ROD_NUMERALS\", \"COUNTING ROD NUMERALS\", \"COUNTINGRODNUMERALS\");","field_name":"COUNTING_ROD_NUMERALS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock COUNTING_ROD_NUMERALS = new UnicodeBlock(\"COUNTING_ROD_NUMERALS\", \"COUNTING ROD NUMERALS\", \"COUNTINGRODNUMERALS\")","id":4350},{"comment":"/**\r\n * Constant for the \"Mahjong Tiles\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock MAHJONG_TILES = new UnicodeBlock(\"MAHJONG_TILES\", \"MAHJONG TILES\", \"MAHJONGTILES\");","field_name":"MAHJONG_TILES","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock MAHJONG_TILES = new UnicodeBlock(\"MAHJONG_TILES\", \"MAHJONG TILES\", \"MAHJONGTILES\")","id":4351},{"comment":"/**\r\n * Constant for the \"Domino Tiles\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock DOMINO_TILES = new UnicodeBlock(\"DOMINO_TILES\", \"DOMINO TILES\", \"DOMINOTILES\");","field_name":"DOMINO_TILES","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock DOMINO_TILES = new UnicodeBlock(\"DOMINO_TILES\", \"DOMINO TILES\", \"DOMINOTILES\")","id":4352},{"comment":"/**\r\n * Constant for the \"Playing Cards\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock PLAYING_CARDS = new UnicodeBlock(\"PLAYING_CARDS\", \"PLAYING CARDS\", \"PLAYINGCARDS\");","field_name":"PLAYING_CARDS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock PLAYING_CARDS = new UnicodeBlock(\"PLAYING_CARDS\", \"PLAYING CARDS\", \"PLAYINGCARDS\")","id":4353},{"comment":"/**\r\n * Constant for the \"Enclosed Alphanumeric Supplement\" Unicode character\r\n * block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock ENCLOSED_ALPHANUMERIC_SUPPLEMENT = new UnicodeBlock(\"ENCLOSED_ALPHANUMERIC_SUPPLEMENT\", \"ENCLOSED ALPHANUMERIC SUPPLEMENT\", \"ENCLOSEDALPHANUMERICSUPPLEMENT\");","field_name":"ENCLOSED_ALPHANUMERIC_SUPPLEMENT","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock ENCLOSED_ALPHANUMERIC_SUPPLEMENT = new UnicodeBlock(\"ENCLOSED_ALPHANUMERIC_SUPPLEMENT\", \"ENCLOSED ALPHANUMERIC SUPPLEMENT\", \"ENCLOSEDALPHANUMERICSUPPLEMENT\")","id":4354},{"comment":"/**\r\n * Constant for the \"Enclosed Ideographic Supplement\" Unicode character\r\n * block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock ENCLOSED_IDEOGRAPHIC_SUPPLEMENT = new UnicodeBlock(\"ENCLOSED_IDEOGRAPHIC_SUPPLEMENT\", \"ENCLOSED IDEOGRAPHIC SUPPLEMENT\", \"ENCLOSEDIDEOGRAPHICSUPPLEMENT\");","field_name":"ENCLOSED_IDEOGRAPHIC_SUPPLEMENT","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock ENCLOSED_IDEOGRAPHIC_SUPPLEMENT = new UnicodeBlock(\"ENCLOSED_IDEOGRAPHIC_SUPPLEMENT\", \"ENCLOSED IDEOGRAPHIC SUPPLEMENT\", \"ENCLOSEDIDEOGRAPHICSUPPLEMENT\")","id":4355},{"comment":"/**\r\n * Constant for the \"Miscellaneous Symbols And Pictographs\" Unicode\r\n * character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS = new UnicodeBlock(\"MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS\", \"MISCELLANEOUS SYMBOLS AND PICTOGRAPHS\", \"MISCELLANEOUSSYMBOLSANDPICTOGRAPHS\");","field_name":"MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS = new UnicodeBlock(\"MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS\", \"MISCELLANEOUS SYMBOLS AND PICTOGRAPHS\", \"MISCELLANEOUSSYMBOLSANDPICTOGRAPHS\")","id":4356},{"comment":"/**\r\n * Constant for the \"Emoticons\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock EMOTICONS = new UnicodeBlock(\"EMOTICONS\");","field_name":"EMOTICONS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock EMOTICONS = new UnicodeBlock(\"EMOTICONS\")","id":4357},{"comment":"/**\r\n * Constant for the \"Transport And Map Symbols\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock TRANSPORT_AND_MAP_SYMBOLS = new UnicodeBlock(\"TRANSPORT_AND_MAP_SYMBOLS\", \"TRANSPORT AND MAP SYMBOLS\", \"TRANSPORTANDMAPSYMBOLS\");","field_name":"TRANSPORT_AND_MAP_SYMBOLS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock TRANSPORT_AND_MAP_SYMBOLS = new UnicodeBlock(\"TRANSPORT_AND_MAP_SYMBOLS\", \"TRANSPORT AND MAP SYMBOLS\", \"TRANSPORTANDMAPSYMBOLS\")","id":4358},{"comment":"/**\r\n * Constant for the \"Alchemical Symbols\" Unicode character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock ALCHEMICAL_SYMBOLS = new UnicodeBlock(\"ALCHEMICAL_SYMBOLS\", \"ALCHEMICAL SYMBOLS\", \"ALCHEMICALSYMBOLS\");","field_name":"ALCHEMICAL_SYMBOLS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock ALCHEMICAL_SYMBOLS = new UnicodeBlock(\"ALCHEMICAL_SYMBOLS\", \"ALCHEMICAL SYMBOLS\", \"ALCHEMICALSYMBOLS\")","id":4359},{"comment":"/**\r\n * Constant for the \"CJK Unified Ideographs Extension C\" Unicode\r\n * character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C = new UnicodeBlock(\"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C\", \"CJK UNIFIED IDEOGRAPHS EXTENSION C\", \"CJKUNIFIEDIDEOGRAPHSEXTENSIONC\");","field_name":"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C = new UnicodeBlock(\"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C\", \"CJK UNIFIED IDEOGRAPHS EXTENSION C\", \"CJKUNIFIEDIDEOGRAPHSEXTENSIONC\")","id":4360},{"comment":"/**\r\n * Constant for the \"CJK Unified Ideographs Extension D\" Unicode\r\n * character block.\r\n * @since 1.7\r\n */\r\npublic static final UnicodeBlock CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D = new UnicodeBlock(\"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D\", \"CJK UNIFIED IDEOGRAPHS EXTENSION D\", \"CJKUNIFIEDIDEOGRAPHSEXTENSIOND\");","field_name":"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D = new UnicodeBlock(\"CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D\", \"CJK UNIFIED IDEOGRAPHS EXTENSION D\", \"CJKUNIFIEDIDEOGRAPHSEXTENSIOND\")","id":4361},{"comment":"/**\r\n * Constant for the \"Arabic Extended-A\" Unicode character block.\r\n * @since 1.8\r\n */\r\npublic static final UnicodeBlock ARABIC_EXTENDED_A = new UnicodeBlock(\"ARABIC_EXTENDED_A\", \"ARABIC EXTENDED-A\", \"ARABICEXTENDED-A\");","field_name":"ARABIC_EXTENDED_A","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock ARABIC_EXTENDED_A = new UnicodeBlock(\"ARABIC_EXTENDED_A\", \"ARABIC EXTENDED-A\", \"ARABICEXTENDED-A\")","id":4362},{"comment":"/**\r\n * Constant for the \"Sundanese Supplement\" Unicode character block.\r\n * @since 1.8\r\n */\r\npublic static final UnicodeBlock SUNDANESE_SUPPLEMENT = new UnicodeBlock(\"SUNDANESE_SUPPLEMENT\", \"SUNDANESE SUPPLEMENT\", \"SUNDANESESUPPLEMENT\");","field_name":"SUNDANESE_SUPPLEMENT","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock SUNDANESE_SUPPLEMENT = new UnicodeBlock(\"SUNDANESE_SUPPLEMENT\", \"SUNDANESE SUPPLEMENT\", \"SUNDANESESUPPLEMENT\")","id":4363},{"comment":"/**\r\n * Constant for the \"Meetei Mayek Extensions\" Unicode character block.\r\n * @since 1.8\r\n */\r\npublic static final UnicodeBlock MEETEI_MAYEK_EXTENSIONS = new UnicodeBlock(\"MEETEI_MAYEK_EXTENSIONS\", \"MEETEI MAYEK EXTENSIONS\", \"MEETEIMAYEKEXTENSIONS\");","field_name":"MEETEI_MAYEK_EXTENSIONS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock MEETEI_MAYEK_EXTENSIONS = new UnicodeBlock(\"MEETEI_MAYEK_EXTENSIONS\", \"MEETEI MAYEK EXTENSIONS\", \"MEETEIMAYEKEXTENSIONS\")","id":4364},{"comment":"/**\r\n * Constant for the \"Meroitic Hieroglyphs\" Unicode character block.\r\n * @since 1.8\r\n */\r\npublic static final UnicodeBlock MEROITIC_HIEROGLYPHS = new UnicodeBlock(\"MEROITIC_HIEROGLYPHS\", \"MEROITIC HIEROGLYPHS\", \"MEROITICHIEROGLYPHS\");","field_name":"MEROITIC_HIEROGLYPHS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock MEROITIC_HIEROGLYPHS = new UnicodeBlock(\"MEROITIC_HIEROGLYPHS\", \"MEROITIC HIEROGLYPHS\", \"MEROITICHIEROGLYPHS\")","id":4365},{"comment":"/**\r\n * Constant for the \"Meroitic Cursive\" Unicode character block.\r\n * @since 1.8\r\n */\r\npublic static final UnicodeBlock MEROITIC_CURSIVE = new UnicodeBlock(\"MEROITIC_CURSIVE\", \"MEROITIC CURSIVE\", \"MEROITICCURSIVE\");","field_name":"MEROITIC_CURSIVE","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock MEROITIC_CURSIVE = new UnicodeBlock(\"MEROITIC_CURSIVE\", \"MEROITIC CURSIVE\", \"MEROITICCURSIVE\")","id":4366},{"comment":"/**\r\n * Constant for the \"Sora Sompeng\" Unicode character block.\r\n * @since 1.8\r\n */\r\npublic static final UnicodeBlock SORA_SOMPENG = new UnicodeBlock(\"SORA_SOMPENG\", \"SORA SOMPENG\", \"SORASOMPENG\");","field_name":"SORA_SOMPENG","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock SORA_SOMPENG = new UnicodeBlock(\"SORA_SOMPENG\", \"SORA SOMPENG\", \"SORASOMPENG\")","id":4367},{"comment":"/**\r\n * Constant for the \"Chakma\" Unicode character block.\r\n * @since 1.8\r\n */\r\npublic static final UnicodeBlock CHAKMA = new UnicodeBlock(\"CHAKMA\");","field_name":"CHAKMA","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock CHAKMA = new UnicodeBlock(\"CHAKMA\")","id":4368},{"comment":"/**\r\n * Constant for the \"Sharada\" Unicode character block.\r\n * @since 1.8\r\n */\r\npublic static final UnicodeBlock SHARADA = new UnicodeBlock(\"SHARADA\");","field_name":"SHARADA","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock SHARADA = new UnicodeBlock(\"SHARADA\")","id":4369},{"comment":"/**\r\n * Constant for the \"Takri\" Unicode character block.\r\n * @since 1.8\r\n */\r\npublic static final UnicodeBlock TAKRI = new UnicodeBlock(\"TAKRI\");","field_name":"TAKRI","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock TAKRI = new UnicodeBlock(\"TAKRI\")","id":4370},{"comment":"/**\r\n * Constant for the \"Miao\" Unicode character block.\r\n * @since 1.8\r\n */\r\npublic static final UnicodeBlock MIAO = new UnicodeBlock(\"MIAO\");","field_name":"MIAO","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock MIAO = new UnicodeBlock(\"MIAO\")","id":4371},{"comment":"/**\r\n * Constant for the \"Arabic Mathematical Alphabetic Symbols\" Unicode\r\n * character block.\r\n * @since 1.8\r\n */\r\npublic static final UnicodeBlock ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS = new UnicodeBlock(\"ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS\", \"ARABIC MATHEMATICAL ALPHABETIC SYMBOLS\", \"ARABICMATHEMATICALALPHABETICSYMBOLS\");","field_name":"ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS","field_type":"java.lang.Character.UnicodeBlock","full_declaration":"public static final java.lang.Character.UnicodeBlock ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS = new UnicodeBlock(\"ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS\", \"ARABIC MATHEMATICAL ALPHABETIC SYMBOLS\", \"ARABICMATHEMATICALALPHABETICSYMBOLS\")","id":4372},{"comment":"","field_name":"blockStarts","field_type":"int[]","full_declaration":"private static final int[] blockStarts = { // 0000..007F; Basic Latin\r\n0x0000, // 0080..00FF; Latin-1 Supplement\r\n0x0080, // 0100..017F; Latin Extended-A\r\n0x0100, // 0180..024F; Latin Extended-B\r\n0x0180, // 0250..02AF; IPA Extensions\r\n0x0250, // 02B0..02FF; Spacing Modifier Letters\r\n0x02B0, // 0300..036F; Combining Diacritical Marks\r\n0x0300, // 0370..03FF; Greek and Coptic\r\n0x0370, // 0400..04FF; Cyrillic\r\n0x0400, // 0500..052F; Cyrillic Supplement\r\n0x0500, // 0530..058F; Armenian\r\n0x0530, // 0590..05FF; Hebrew\r\n0x0590, // 0600..06FF; Arabic\r\n0x0600, // 0700..074F; Syriac\r\n0x0700, // 0750..077F; Arabic Supplement\r\n0x0750, // 0780..07BF; Thaana\r\n0x0780, // 07C0..07FF; NKo\r\n0x07C0, // 0800..083F; Samaritan\r\n0x0800, // 0840..085F; Mandaic\r\n0x0840, // unassigned\r\n0x0860, // 08A0..08FF; Arabic Extended-A\r\n0x08A0, // 0900..097F; Devanagari\r\n0x0900, // 0980..09FF; Bengali\r\n0x0980, // 0A00..0A7F; Gurmukhi\r\n0x0A00, // 0A80..0AFF; Gujarati\r\n0x0A80, // 0B00..0B7F; Oriya\r\n0x0B00, // 0B80..0BFF; Tamil\r\n0x0B80, // 0C00..0C7F; Telugu\r\n0x0C00, // 0C80..0CFF; Kannada\r\n0x0C80, // 0D00..0D7F; Malayalam\r\n0x0D00, // 0D80..0DFF; Sinhala\r\n0x0D80, // 0E00..0E7F; Thai\r\n0x0E00, // 0E80..0EFF; Lao\r\n0x0E80, // 0F00..0FFF; Tibetan\r\n0x0F00, // 1000..109F; Myanmar\r\n0x1000, // 10A0..10FF; Georgian\r\n0x10A0, // 1100..11FF; Hangul Jamo\r\n0x1100, // 1200..137F; Ethiopic\r\n0x1200, // 1380..139F; Ethiopic Supplement\r\n0x1380, // 13A0..13FF; Cherokee\r\n0x13A0, // 1400..167F; Unified Canadian Aboriginal Syllabics\r\n0x1400, // 1680..169F; Ogham\r\n0x1680, // 16A0..16FF; Runic\r\n0x16A0, // 1700..171F; Tagalog\r\n0x1700, // 1720..173F; Hanunoo\r\n0x1720, // 1740..175F; Buhid\r\n0x1740, // 1760..177F; Tagbanwa\r\n0x1760, // 1780..17FF; Khmer\r\n0x1780, // 1800..18AF; Mongolian\r\n0x1800, // 18B0..18FF; Unified Canadian Aboriginal Syllabics Extended\r\n0x18B0, // 1900..194F; Limbu\r\n0x1900, // 1950..197F; Tai Le\r\n0x1950, // 1980..19DF; New Tai Lue\r\n0x1980, // 19E0..19FF; Khmer Symbols\r\n0x19E0, // 1A00..1A1F; Buginese\r\n0x1A00, // 1A20..1AAF; Tai Tham\r\n0x1A20, // unassigned\r\n0x1AB0, // 1B00..1B7F; Balinese\r\n0x1B00, // 1B80..1BBF; Sundanese\r\n0x1B80, // 1BC0..1BFF; Batak\r\n0x1BC0, // 1C00..1C4F; Lepcha\r\n0x1C00, // 1C50..1C7F; Ol Chiki\r\n0x1C50, // unassigned\r\n0x1C80, // 1CC0..1CCF; Sundanese Supplement\r\n0x1CC0, // 1CD0..1CFF; Vedic Extensions\r\n0x1CD0, // 1D00..1D7F; Phonetic Extensions\r\n0x1D00, // 1D80..1DBF; Phonetic Extensions Supplement\r\n0x1D80, // 1DC0..1DFF; Combining Diacritical Marks Supplement\r\n0x1DC0, // 1E00..1EFF; Latin Extended Additional\r\n0x1E00, // 1F00..1FFF; Greek Extended\r\n0x1F00, // 2000..206F; General Punctuation\r\n0x2000, // 2070..209F; Superscripts and Subscripts\r\n0x2070, // 20A0..20CF; Currency Symbols\r\n0x20A0, // 20D0..20FF; Combining Diacritical Marks for Symbols\r\n0x20D0, // 2100..214F; Letterlike Symbols\r\n0x2100, // 2150..218F; Number Forms\r\n0x2150, // 2190..21FF; Arrows\r\n0x2190, // 2200..22FF; Mathematical Operators\r\n0x2200, // 2300..23FF; Miscellaneous Technical\r\n0x2300, // 2400..243F; Control Pictures\r\n0x2400, // 2440..245F; Optical Character Recognition\r\n0x2440, // 2460..24FF; Enclosed Alphanumerics\r\n0x2460, // 2500..257F; Box Drawing\r\n0x2500, // 2580..259F; Block Elements\r\n0x2580, // 25A0..25FF; Geometric Shapes\r\n0x25A0, // 2600..26FF; Miscellaneous Symbols\r\n0x2600, // 2700..27BF; Dingbats\r\n0x2700, // 27C0..27EF; Miscellaneous Mathematical Symbols-A\r\n0x27C0, // 27F0..27FF; Supplemental Arrows-A\r\n0x27F0, // 2800..28FF; Braille Patterns\r\n0x2800, // 2900..297F; Supplemental Arrows-B\r\n0x2900, // 2980..29FF; Miscellaneous Mathematical Symbols-B\r\n0x2980, // 2A00..2AFF; Supplemental Mathematical Operators\r\n0x2A00, // 2B00..2BFF; Miscellaneous Symbols and Arrows\r\n0x2B00, // 2C00..2C5F; Glagolitic\r\n0x2C00, // 2C60..2C7F; Latin Extended-C\r\n0x2C60, // 2C80..2CFF; Coptic\r\n0x2C80, // 2D00..2D2F; Georgian Supplement\r\n0x2D00, // 2D30..2D7F; Tifinagh\r\n0x2D30, // 2D80..2DDF; Ethiopic Extended\r\n0x2D80, // 2DE0..2DFF; Cyrillic Extended-A\r\n0x2DE0, // 2E00..2E7F; Supplemental Punctuation\r\n0x2E00, // 2E80..2EFF; CJK Radicals Supplement\r\n0x2E80, // 2F00..2FDF; Kangxi Radicals\r\n0x2F00, // unassigned\r\n0x2FE0, // 2FF0..2FFF; Ideographic Description Characters\r\n0x2FF0, // 3000..303F; CJK Symbols and Punctuation\r\n0x3000, // 3040..309F; Hiragana\r\n0x3040, // 30A0..30FF; Katakana\r\n0x30A0, // 3100..312F; Bopomofo\r\n0x3100, // 3130..318F; Hangul Compatibility Jamo\r\n0x3130, // 3190..319F; Kanbun\r\n0x3190, // 31A0..31BF; Bopomofo Extended\r\n0x31A0, // 31C0..31EF; CJK Strokes\r\n0x31C0, // 31F0..31FF; Katakana Phonetic Extensions\r\n0x31F0, // 3200..32FF; Enclosed CJK Letters and Months\r\n0x3200, // 3300..33FF; CJK Compatibility\r\n0x3300, // 3400..4DBF; CJK Unified Ideographs Extension A\r\n0x3400, // 4DC0..4DFF; Yijing Hexagram Symbols\r\n0x4DC0, // 4E00..9FFF; CJK Unified Ideographs\r\n0x4E00, // A000..A48F; Yi Syllables\r\n0xA000, // A490..A4CF; Yi Radicals\r\n0xA490, // A4D0..A4FF; Lisu\r\n0xA4D0, // A500..A63F; Vai\r\n0xA500, // A640..A69F; Cyrillic Extended-B\r\n0xA640, // A6A0..A6FF; Bamum\r\n0xA6A0, // A700..A71F; Modifier Tone Letters\r\n0xA700, // A720..A7FF; Latin Extended-D\r\n0xA720, // A800..A82F; Syloti Nagri\r\n0xA800, // A830..A83F; Common Indic Number Forms\r\n0xA830, // A840..A87F; Phags-pa\r\n0xA840, // A880..A8DF; Saurashtra\r\n0xA880, // A8E0..A8FF; Devanagari Extended\r\n0xA8E0, // A900..A92F; Kayah Li\r\n0xA900, // A930..A95F; Rejang\r\n0xA930, // A960..A97F; Hangul Jamo Extended-A\r\n0xA960, // A980..A9DF; Javanese\r\n0xA980, // unassigned\r\n0xA9E0, // AA00..AA5F; Cham\r\n0xAA00, // AA60..AA7F; Myanmar Extended-A\r\n0xAA60, // AA80..AADF; Tai Viet\r\n0xAA80, // AAE0..AAFF; Meetei Mayek Extensions\r\n0xAAE0, // AB00..AB2F; Ethiopic Extended-A\r\n0xAB00, // unassigned\r\n0xAB30, // ABC0..ABFF; Meetei Mayek\r\n0xABC0, // AC00..D7AF; Hangul Syllables\r\n0xAC00, // D7B0..D7FF; Hangul Jamo Extended-B\r\n0xD7B0, // D800..DB7F; High Surrogates\r\n0xD800, // DB80..DBFF; High Private Use Surrogates\r\n0xDB80, // DC00..DFFF; Low Surrogates\r\n0xDC00, // E000..F8FF; Private Use Area\r\n0xE000, // F900..FAFF; CJK Compatibility Ideographs\r\n0xF900, // FB00..FB4F; Alphabetic Presentation Forms\r\n0xFB00, // FB50..FDFF; Arabic Presentation Forms-A\r\n0xFB50, // FE00..FE0F; Variation Selectors\r\n0xFE00, // FE10..FE1F; Vertical Forms\r\n0xFE10, // FE20..FE2F; Combining Half Marks\r\n0xFE20, // FE30..FE4F; CJK Compatibility Forms\r\n0xFE30, // FE50..FE6F; Small Form Variants\r\n0xFE50, // FE70..FEFF; Arabic Presentation Forms-B\r\n0xFE70, // FF00..FFEF; Halfwidth and Fullwidth Forms\r\n0xFF00, // FFF0..FFFF; Specials\r\n0xFFF0, // 10000..1007F; Linear B Syllabary\r\n0x10000, // 10080..100FF; Linear B Ideograms\r\n0x10080, // 10100..1013F; Aegean Numbers\r\n0x10100, // 10140..1018F; Ancient Greek Numbers\r\n0x10140, // 10190..101CF; Ancient Symbols\r\n0x10190, // 101D0..101FF; Phaistos Disc\r\n0x101D0, // unassigned\r\n0x10200, // 10280..1029F; Lycian\r\n0x10280, // 102A0..102DF; Carian\r\n0x102A0, // unassigned\r\n0x102E0, // 10300..1032F; Old Italic\r\n0x10300, // 10330..1034F; Gothic\r\n0x10330, // unassigned\r\n0x10350, // 10380..1039F; Ugaritic\r\n0x10380, // 103A0..103DF; Old Persian\r\n0x103A0, // unassigned\r\n0x103E0, // 10400..1044F; Deseret\r\n0x10400, // 10450..1047F; Shavian\r\n0x10450, // 10480..104AF; Osmanya\r\n0x10480, // unassigned\r\n0x104B0, // 10800..1083F; Cypriot Syllabary\r\n0x10800, // 10840..1085F; Imperial Aramaic\r\n0x10840, // unassigned\r\n0x10860, // 10900..1091F; Phoenician\r\n0x10900, // 10920..1093F; Lydian\r\n0x10920, // unassigned\r\n0x10940, // 10980..1099F; Meroitic Hieroglyphs\r\n0x10980, // 109A0..109FF; Meroitic Cursive\r\n0x109A0, // 10A00..10A5F; Kharoshthi\r\n0x10A00, // 10A60..10A7F; Old South Arabian\r\n0x10A60, // unassigned\r\n0x10A80, // 10B00..10B3F; Avestan\r\n0x10B00, // 10B40..10B5F; Inscriptional Parthian\r\n0x10B40, // 10B60..10B7F; Inscriptional Pahlavi\r\n0x10B60, // unassigned\r\n0x10B80, // 10C00..10C4F; Old Turkic\r\n0x10C00, // unassigned\r\n0x10C50, // 10E60..10E7F; Rumi Numeral Symbols\r\n0x10E60, // unassigned\r\n0x10E80, // 11000..1107F; Brahmi\r\n0x11000, // 11080..110CF; Kaithi\r\n0x11080, // 110D0..110FF; Sora Sompeng\r\n0x110D0, // 11100..1114F; Chakma\r\n0x11100, // unassigned\r\n0x11150, // 11180..111DF; Sharada\r\n0x11180, // unassigned\r\n0x111E0, // 11680..116CF; Takri\r\n0x11680, // unassigned\r\n0x116D0, // 12000..123FF; Cuneiform\r\n0x12000, // 12400..1247F; Cuneiform Numbers and Punctuation\r\n0x12400, // unassigned\r\n0x12480, // 13000..1342F; Egyptian Hieroglyphs\r\n0x13000, // unassigned\r\n0x13430, // 16800..16A3F; Bamum Supplement\r\n0x16800, // unassigned\r\n0x16A40, // 16F00..16F9F; Miao\r\n0x16F00, // unassigned\r\n0x16FA0, // 1B000..1B0FF; Kana Supplement\r\n0x1B000, // unassigned\r\n0x1B100, // 1D000..1D0FF; Byzantine Musical Symbols\r\n0x1D000, // 1D100..1D1FF; Musical Symbols\r\n0x1D100, // 1D200..1D24F; Ancient Greek Musical Notation\r\n0x1D200, // unassigned\r\n0x1D250, // 1D300..1D35F; Tai Xuan Jing Symbols\r\n0x1D300, // 1D360..1D37F; Counting Rod Numerals\r\n0x1D360, // unassigned\r\n0x1D380, // 1D400..1D7FF; Mathematical Alphanumeric Symbols\r\n0x1D400, // unassigned\r\n0x1D800, // 1EE00..1EEFF; Arabic Mathematical Alphabetic Symbols\r\n0x1EE00, // unassigned\r\n0x1EF00, // 1F000..1F02F; Mahjong Tiles\r\n0x1F000, // 1F030..1F09F; Domino Tiles\r\n0x1F030, // 1F0A0..1F0FF; Playing Cards\r\n0x1F0A0, // 1F100..1F1FF; Enclosed Alphanumeric Supplement\r\n0x1F100, // 1F200..1F2FF; Enclosed Ideographic Supplement\r\n0x1F200, // 1F300..1F5FF; Miscellaneous Symbols And Pictographs\r\n0x1F300, // 1F600..1F64F; Emoticons\r\n0x1F600, // unassigned\r\n0x1F650, // 1F680..1F6FF; Transport And Map Symbols\r\n0x1F680, // 1F700..1F77F; Alchemical Symbols\r\n0x1F700, // unassigned\r\n0x1F780, // 20000..2A6DF; CJK Unified Ideographs Extension B\r\n0x20000, // unassigned\r\n0x2A6E0, // 2A700..2B73F; CJK Unified Ideographs Extension C\r\n0x2A700, // 2B740..2B81F; CJK Unified Ideographs Extension D\r\n0x2B740, // unassigned\r\n0x2B820, // 2F800..2FA1F; CJK Compatibility Ideographs Supplement\r\n0x2F800, // unassigned\r\n0x2FA20, // E0000..E007F; Tags\r\n0xE0000, // unassigned\r\n0xE0080, // E0100..E01EF; Variation Selectors Supplement\r\n0xE0100, // unassigned\r\n0xE01F0, // F0000..FFFFF; Supplementary Private Use Area-A\r\n0xF0000, // 100000..10FFFF; Supplementary Private Use Area-B\r\n0x100000 }","id":4373},{"comment":"","field_name":"blocks","field_type":"UnicodeBlock[]","full_declaration":"private static final UnicodeBlock[] blocks = { BASIC_LATIN, LATIN_1_SUPPLEMENT, LATIN_EXTENDED_A, LATIN_EXTENDED_B, IPA_EXTENSIONS, SPACING_MODIFIER_LETTERS, COMBINING_DIACRITICAL_MARKS, GREEK, CYRILLIC, CYRILLIC_SUPPLEMENTARY, ARMENIAN, HEBREW, ARABIC, SYRIAC, ARABIC_SUPPLEMENT, THAANA, NKO, SAMARITAN, MANDAIC, null, ARABIC_EXTENDED_A, DEVANAGARI, BENGALI, GURMUKHI, GUJARATI, ORIYA, TAMIL, TELUGU, KANNADA, MALAYALAM, SINHALA, THAI, LAO, TIBETAN, MYANMAR, GEORGIAN, HANGUL_JAMO, ETHIOPIC, ETHIOPIC_SUPPLEMENT, CHEROKEE, UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS, OGHAM, RUNIC, TAGALOG, HANUNOO, BUHID, TAGBANWA, KHMER, MONGOLIAN, UNIFIED_CANADIAN_ABORIGINAL_SYLLABICS_EXTENDED, LIMBU, TAI_LE, NEW_TAI_LUE, KHMER_SYMBOLS, BUGINESE, TAI_THAM, null, BALINESE, SUNDANESE, BATAK, LEPCHA, OL_CHIKI, null, SUNDANESE_SUPPLEMENT, VEDIC_EXTENSIONS, PHONETIC_EXTENSIONS, PHONETIC_EXTENSIONS_SUPPLEMENT, COMBINING_DIACRITICAL_MARKS_SUPPLEMENT, LATIN_EXTENDED_ADDITIONAL, GREEK_EXTENDED, GENERAL_PUNCTUATION, SUPERSCRIPTS_AND_SUBSCRIPTS, CURRENCY_SYMBOLS, COMBINING_MARKS_FOR_SYMBOLS, LETTERLIKE_SYMBOLS, NUMBER_FORMS, ARROWS, MATHEMATICAL_OPERATORS, MISCELLANEOUS_TECHNICAL, CONTROL_PICTURES, OPTICAL_CHARACTER_RECOGNITION, ENCLOSED_ALPHANUMERICS, BOX_DRAWING, BLOCK_ELEMENTS, GEOMETRIC_SHAPES, MISCELLANEOUS_SYMBOLS, DINGBATS, MISCELLANEOUS_MATHEMATICAL_SYMBOLS_A, SUPPLEMENTAL_ARROWS_A, BRAILLE_PATTERNS, SUPPLEMENTAL_ARROWS_B, MISCELLANEOUS_MATHEMATICAL_SYMBOLS_B, SUPPLEMENTAL_MATHEMATICAL_OPERATORS, MISCELLANEOUS_SYMBOLS_AND_ARROWS, GLAGOLITIC, LATIN_EXTENDED_C, COPTIC, GEORGIAN_SUPPLEMENT, TIFINAGH, ETHIOPIC_EXTENDED, CYRILLIC_EXTENDED_A, SUPPLEMENTAL_PUNCTUATION, CJK_RADICALS_SUPPLEMENT, KANGXI_RADICALS, null, IDEOGRAPHIC_DESCRIPTION_CHARACTERS, CJK_SYMBOLS_AND_PUNCTUATION, HIRAGANA, KATAKANA, BOPOMOFO, HANGUL_COMPATIBILITY_JAMO, KANBUN, BOPOMOFO_EXTENDED, CJK_STROKES, KATAKANA_PHONETIC_EXTENSIONS, ENCLOSED_CJK_LETTERS_AND_MONTHS, CJK_COMPATIBILITY, CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A, YIJING_HEXAGRAM_SYMBOLS, CJK_UNIFIED_IDEOGRAPHS, YI_SYLLABLES, YI_RADICALS, LISU, VAI, CYRILLIC_EXTENDED_B, BAMUM, MODIFIER_TONE_LETTERS, LATIN_EXTENDED_D, SYLOTI_NAGRI, COMMON_INDIC_NUMBER_FORMS, PHAGS_PA, SAURASHTRA, DEVANAGARI_EXTENDED, KAYAH_LI, REJANG, HANGUL_JAMO_EXTENDED_A, JAVANESE, null, CHAM, MYANMAR_EXTENDED_A, TAI_VIET, MEETEI_MAYEK_EXTENSIONS, ETHIOPIC_EXTENDED_A, null, MEETEI_MAYEK, HANGUL_SYLLABLES, HANGUL_JAMO_EXTENDED_B, HIGH_SURROGATES, HIGH_PRIVATE_USE_SURROGATES, LOW_SURROGATES, PRIVATE_USE_AREA, CJK_COMPATIBILITY_IDEOGRAPHS, ALPHABETIC_PRESENTATION_FORMS, ARABIC_PRESENTATION_FORMS_A, VARIATION_SELECTORS, VERTICAL_FORMS, COMBINING_HALF_MARKS, CJK_COMPATIBILITY_FORMS, SMALL_FORM_VARIANTS, ARABIC_PRESENTATION_FORMS_B, HALFWIDTH_AND_FULLWIDTH_FORMS, SPECIALS, LINEAR_B_SYLLABARY, LINEAR_B_IDEOGRAMS, AEGEAN_NUMBERS, ANCIENT_GREEK_NUMBERS, ANCIENT_SYMBOLS, PHAISTOS_DISC, null, LYCIAN, CARIAN, null, OLD_ITALIC, GOTHIC, null, UGARITIC, OLD_PERSIAN, null, DESERET, SHAVIAN, OSMANYA, null, CYPRIOT_SYLLABARY, IMPERIAL_ARAMAIC, null, PHOENICIAN, LYDIAN, null, MEROITIC_HIEROGLYPHS, MEROITIC_CURSIVE, KHAROSHTHI, OLD_SOUTH_ARABIAN, null, AVESTAN, INSCRIPTIONAL_PARTHIAN, INSCRIPTIONAL_PAHLAVI, null, OLD_TURKIC, null, RUMI_NUMERAL_SYMBOLS, null, BRAHMI, KAITHI, SORA_SOMPENG, CHAKMA, null, SHARADA, null, TAKRI, null, CUNEIFORM, CUNEIFORM_NUMBERS_AND_PUNCTUATION, null, EGYPTIAN_HIEROGLYPHS, null, BAMUM_SUPPLEMENT, null, MIAO, null, KANA_SUPPLEMENT, null, BYZANTINE_MUSICAL_SYMBOLS, MUSICAL_SYMBOLS, ANCIENT_GREEK_MUSICAL_NOTATION, null, TAI_XUAN_JING_SYMBOLS, COUNTING_ROD_NUMERALS, null, MATHEMATICAL_ALPHANUMERIC_SYMBOLS, null, ARABIC_MATHEMATICAL_ALPHABETIC_SYMBOLS, null, MAHJONG_TILES, DOMINO_TILES, PLAYING_CARDS, ENCLOSED_ALPHANUMERIC_SUPPLEMENT, ENCLOSED_IDEOGRAPHIC_SUPPLEMENT, MISCELLANEOUS_SYMBOLS_AND_PICTOGRAPHS, EMOTICONS, null, TRANSPORT_AND_MAP_SYMBOLS, ALCHEMICAL_SYMBOLS, null, CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B, null, CJK_UNIFIED_IDEOGRAPHS_EXTENSION_C, CJK_UNIFIED_IDEOGRAPHS_EXTENSION_D, null, CJK_COMPATIBILITY_IDEOGRAPHS_SUPPLEMENT, null, TAGS, null, VARIATION_SELECTORS_SUPPLEMENT, null, SUPPLEMENTARY_PRIVATE_USE_AREA_A, SUPPLEMENTARY_PRIVATE_USE_AREA_B }","id":4374},{"comment":"","field_name":"cache","field_type":"Character[]","full_declaration":"static final Character[] cache = new Character[127 + 1]","id":4375},{"comment":"static final CharacterData00 instance = new CharacterData00();","field_name":"instance","field_type":"java.lang.CharacterData00","full_declaration":"static final java.lang.CharacterData00 instance = new CharacterData00()","id":4376},{"comment":"// The following tables and code generated using:\r\n// java GenerateCharacter -plane 0 -template c:/re/workspace/8-2-build-windows-amd64-cygwin/jdk8u211/12973/jdk/make/data/characterdata/CharacterData00.java.template -spec c:/re/workspace/8-2-build-windows-amd64-cygwin/jdk8u211/12973/jdk/make/data/unicodedata/UnicodeData.txt -specialcasing c:/re/workspace/8-2-build-windows-amd64-cygwin/jdk8u211/12973/jdk/make/data/unicodedata/SpecialCasing.txt -proplist c:/re/workspace/8-2-build-windows-amd64-cygwin/jdk8u211/12973/jdk/make/data/unicodedata/PropList.txt -o c:/re/workspace/8-2-build-windows-amd64-cygwin/jdk8u211/12973/build/windows-amd64/jdk/gensrc/java/lang/CharacterData00.java -string -usecharforbyte 11 4 1\r\n","field_name":"charMap","field_type":"char[][][]","full_declaration":"static final char[][][] charMap","id":4377},{"comment":"// The X table has 2048 entries for a total of 4096 bytes.\r\n","field_name":"X","field_type":"char[]","full_declaration":"static final char[] X = (\"\\000\\020\\040\\060\\100\\120\\140\\160\\200\\220\\240\\260\\300\\320\\340\\360\\200\\u0100\" + \"\\u0110\\u0120\\u0130\\u0140\\u0150\\u0160\\u0170\\u0170\\u0180\\u0190\\u01A0\\u01B0\\u01C0\" + \"\\u01D0\\u01E0\\u01F0\\u0200\\200\\u0210\\200\\u0220\\200\\200\\u0230\\u0240\\u0250\\u0260\" + \"\\u0270\\u0280\\u0290\\u02A0\\u02B0\\u02C0\\u02D0\\u02B0\\u02B0\\u02E0\\u02F0\\u0300\\u0310\" + \"\\u0320\\u02B0\\u02B0\\u0330\\u0340\\u0350\\u0360\\u0370\\u0380\\u0390\\u0390\\u03A0\\u0390\" + \"\\u03B0\\u03C0\\u03D0\\u03E0\\u03F0\\u0400\\u0410\\u0420\\u0430\\u0440\\u0450\\u0460\\u0470\" + \"\\u0480\\u0490\\u04A0\\u04B0\\u0400\\u04C0\\u04D0\\u04E0\\u04F0\\u0500\\u0510\\u0520\\u0530\" + \"\\u0540\\u0550\\u0560\\u0570\\u0580\\u0590\\u05A0\\u0570\\u05B0\\u05C0\\u05D0\\u05E0\\u05F0\" + \"\\u0600\\u0610\\u0620\\u0630\\u0640\\u0390\\u0650\\u0660\\u0670\\u0390\\u0680\\u0690\\u06A0\" + \"\\u06B0\\u06C0\\u06D0\\u06E0\\u0390\\u06F0\\u0700\\u0710\\u0720\\u0730\\u0740\\u0750\\u0760\" + \"\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u0770\\u06F0\\u0780\" + \"\\u0790\\u07A0\\u06F0\\u07B0\\u06F0\\u07C0\\u07D0\\u07E0\\u06F0\\u06F0\\u07F0\\u0800\\u06F0\" + \"\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\" + \"\\u06F0\\u06F0\\u06F0\\u06F0\\u0810\\u0820\\u06F0\\u06F0\\u0830\\u0840\\u0850\\u0860\\u0870\" + \"\\u06F0\\u0880\\u0890\\u08A0\\u08B0\\u06F0\\u08C0\\u08D0\\u06F0\\u08E0\\u06F0\\u08F0\\u0900\" + \"\\u0910\\u0920\\u0930\\u06F0\\u0940\\u0950\\u0960\\u0970\\u06F0\\u0980\\u0990\\u09A0\\u09B0\" + \"\\u0390\\u0390\\u09C0\\u09D0\\u09E0\\u09F0\\u0A00\\u0A10\\u06F0\\u0A20\\u06F0\\u0A30\\u0A40\" + \"\\u0A50\\u0390\\u0390\\u0A60\\u0A70\\u0A80\\u0A90\\u0AA0\\u0AB0\\u0AC0\\u0AA0\\u0170\\u0AD0\" + \"\\200\\200\\200\\200\\u0AE0\\200\\200\\200\\u0AF0\\u0B00\\u0B10\\u0B20\\u0B30\\u0B40\\u0B50\" + \"\\u0B60\\u0B70\\u0B80\\u0B90\\u0BA0\\u0BB0\\u0BC0\\u0BD0\\u0BE0\\u0BF0\\u0C00\\u0C10\\u0C20\" + \"\\u0C30\\u0C40\\u0C50\\u0C60\\u0C70\\u0C80\\u0C90\\u0CA0\\u0CB0\\u0CC0\\u0CD0\\u0CE0\\u0CF0\" + \"\\u0D00\\u0D10\\u0D20\\u0D30\\u0D40\\u0D50\\u0D60\\u0960\\u0D70\\u0D80\\u0D90\\u0DA0\\u0DB0\" + \"\\u0DC0\\u0DD0\\u0960\\u0960\\u0960\\u0960\\u0960\\u0DE0\\u0DF0\\u0E00\\u0960\\u0960\\u0960\" + \"\\u0E10\\u0960\\u0E20\\u0960\\u0960\\u0E30\\u0960\\u0960\\u0E40\\u0E50\\u0960\\u0E60\\u0E70\" + \"\\u0D10\\u0D10\\u0D10\\u0D10\\u0D10\\u0D10\\u0D10\\u0D10\\u0E80\\u0E80\\u0E80\\u0E80\\u0E90\" + \"\\u0EA0\\u0EB0\\u0EC0\\u0ED0\\u0EE0\\u0EF0\\u0F00\\u0F10\\u0F20\\u0F30\\u0F40\\u0960\\u0F50\" + \"\\u0F60\\u0390\\u0390\\u0390\\u0390\\u0390\\u0F70\\u0F80\\u0F90\\u0FA0\\200\\200\\200\\u0FB0\" + \"\\u0FC0\\u0FD0\\u06F0\\u0FE0\\u0FF0\\u1000\\u1000\\u1010\\u1020\\u1030\\u0390\\u0390\\u1040\" + \"\\u0960\\u0960\\u1050\\u0960\\u0960\\u0960\\u0960\\u0960\\u0960\\u1060\\u1070\\u1080\\u1090\" + \"\\u0620\\u06F0\\u10A0\\u0800\\u06F0\\u10B0\\u10C0\\u10D0\\u06F0\\u06F0\\u10E0\\u10F0\\u0960\" + \"\\u1100\\u1110\\u1120\\u1130\\u1140\\u1120\\u1150\\u1160\\u0D10\\u0D10\\u0D10\\u0D10\\u1170\" + \"\\u0D10\\u0D10\\u1180\\u1190\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11B0\\u0960\\u0960\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\" + \"\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11A0\\u11C0\\u0390\\u11D0\\u06F0\\u06F0\" + \"\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\" + \"\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\" + \"\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u11E0\\u0960\\u11F0\\u0A50\\u06F0\\u06F0\" + \"\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u1200\\u1210\\200\\u1220\\u1230\\u06F0\\u06F0\" + \"\\u1240\\u1250\\u1260\\200\\u1270\\u1280\\u1290\\u0390\\u12A0\\u12B0\\u12C0\\u06F0\\u12D0\" + \"\\u12E0\\u12F0\\u1300\\u1310\\u1320\\u1330\\u1340\\u0900\\u03C0\\u1350\\u1360\\u0390\\u06F0\" + \"\\u1370\\u1380\\u1390\\u06F0\\u13A0\\u13B0\\u13C0\\u13D0\\u13E0\\u0390\\u0390\\u0390\\u0390\" + \"\\u06F0\\u13F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\" + \"\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\" + \"\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\" + \"\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\" + \"\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\" + \"\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\" + \"\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\" + \"\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\" + \"\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\" + \"\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\" + \"\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\" + \"\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\" + \"\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\" + \"\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\" + \"\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\" + \"\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\" + \"\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\" + \"\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\" + \"\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\" + \"\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\" + \"\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\" + \"\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\" + \"\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\" + \"\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\" + \"\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\" + \"\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\" + \"\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\\u06F0\" + \"\\u1400\\u1410\\u1420\\u1430\\u1430\\u1430\\u1430\\u1430\\u1430\\u1430\\u1430\\u1430\\u1430\" + \"\\u1430\\u1430\\u1430\\u1430\\u1430\\u1430\\u1430\\u1430\\u1430\\u1430\\u1430\\u1430\\u1430\" + \"\\u1430\\u1430\\u1430\\u1430\\u1430\\u1430\\u1430\\u1430\\u1430\\u1430\\u1430\\u1430\\u1430\" + \"\\u1430\\u1430\\u1430\\u1430\\u1430\\u1430\\u1430\\u1430\\u1430\\u1430\\u1430\\u1430\\u1430\" + \"\\u1430\\u1430\\u1430\\u1430\\u1430\\u1430\\u1430\\u1430\\u1430\\u1430\\u1430\\u1430\\u1430\" + \"\\u1430\\u1430\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\" + \"\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\" + \"\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\" + \"\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\" + \"\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\" + \"\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\" + \"\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\" + \"\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\" + \"\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\" + \"\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\" + \"\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\" + \"\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\" + \"\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\" + \"\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\" + \"\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\" + \"\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u1440\\u11A0\\u11A0\\u11A0\\u1450\\u11A0\\u1460\" + \"\\u1470\\u1480\\u11A0\\u11A0\\u11A0\\u1490\\u11A0\\u11A0\\u14A0\\u0390\\u14B0\\u14C0\\u14D0\" + \"\\u02B0\\u02B0\\u14E0\\u14F0\\u02B0\\u02B0\\u02B0\\u02B0\\u02B0\\u02B0\\u02B0\\u02B0\\u02B0\" + \"\\u02B0\\u1500\\u1510\\u02B0\\u1520\\u02B0\\u1530\\u1540\\u1550\\u1560\\u1570\\u1580\\u02B0\" + \"\\u02B0\\u02B0\\u1590\\u15A0\\040\\u15B0\\u15C0\\u15D0\\u15E0\\u15F0\\u1600\").toCharArray()","id":4378},{"comment":"// The Y table has 5648 entries for a total of 11296 bytes.\r\n","field_name":"Y","field_type":"char[]","full_declaration":"static final char[] Y = (\"\\000\\000\\000\\000\\002\\004\\006\\000\\000\\000\\000\\000\\000\\000\\010\\004\\012\\014\\016\" + \"\\020\\022\\024\\026\\030\\032\\032\\032\\032\\032\\034\\036\\040\\042\\044\\044\\044\\044\\044\" + \"\\044\\044\\044\\044\\044\\044\\044\\046\\050\\052\\054\\056\\056\\056\\056\\056\\056\\056\\056\" + \"\\056\\056\\056\\056\\060\\062\\064\\000\\000\\066\\000\\000\\000\\000\\000\\000\\000\\000\\000\" + \"\\000\\000\\000\\000\\070\\072\\072\\074\\076\\100\\102\\104\\106\\110\\112\\020\\114\\116\\120\" + \"\\122\\124\\124\\124\\124\\124\\124\\124\\124\\124\\124\\124\\126\\124\\124\\124\\130\\132\\132\" + \"\\132\\132\\132\\132\\132\\132\\132\\132\\132\\134\\132\\132\\132\\136\\140\\140\\140\\140\\140\" + \"\\140\\140\\140\\140\\140\\140\\140\\140\\140\\140\\140\\140\\140\\140\\140\\140\\140\\140\\140\" + \"\\142\\140\\140\\140\\144\\146\\146\\146\\146\\146\\146\\146\\150\\140\\140\\140\\140\\140\\140\" + \"\\140\\140\\140\\140\\140\\140\\140\\140\\140\\140\\140\\140\\140\\140\\140\\140\\140\\152\\146\" + \"\\146\\150\\154\\140\\140\\156\\160\\162\\164\\166\\170\\160\\172\\174\\140\\176\\200\\202\\140\" + \"\\140\\140\\204\\206\\210\\140\\204\\212\\214\\146\\216\\140\\220\\140\\222\\224\\224\\226\\230\" + \"\\232\\226\\234\\146\\146\\146\\146\\146\\146\\146\\236\\140\\140\\140\\140\\140\\140\\140\\140\" + \"\\140\\240\\232\\140\\242\\140\\140\\140\\140\\244\\140\\140\\140\\140\\140\\140\\140\\140\\140\" + \"\\210\\210\\210\\246\\250\\252\\254\\256\\260\\140\\140\\140\\140\\140\\262\\264\\266\\270\\272\" + \"\\274\\210\\210\\276\\300\\302\\304\\306\\302\\210\\310\\302\\312\\314\\210\\210\\210\\302\\210\" + \"\\316\\320\\210\\210\\322\\324\\326\\210\\210\\330\\332\\210\\210\\210\\210\\210\\210\\210\\210\" + \"\\210\\210\\210\\210\\210\\334\\334\\334\\334\\336\\340\\342\\342\\334\\344\\344\\346\\346\\346\" + \"\\346\\346\\342\\344\\344\\344\\344\\344\\344\\344\\334\\334\\350\\344\\344\\344\\352\\354\\344\" + \"\\344\\344\\344\\344\\344\\344\\344\\356\\356\\356\\356\\356\\356\\356\\356\\356\\356\\356\\356\" + \"\\356\\356\\356\\356\\356\\356\\360\\356\\356\\356\\356\\356\\356\\356\\356\\356\\356\\356\\356\" + \"\\356\\356\\356\\356\\356\\356\\356\\356\\356\\140\\140\\352\\140\\362\\364\\366\\370\\362\\362\" + \"\\344\\372\\374\\376\\u0100\\u0102\\u0104\\124\\124\\124\\124\\124\\124\\124\\124\\u0106\\124\" + \"\\124\\124\\124\\u0108\\u010A\\u010C\\132\\132\\132\\132\\132\\132\\132\\132\\u010E\\132\\132\" + \"\\132\\132\\u0110\\u0112\\u0114\\u0116\\u0118\\u011A\\140\\140\\140\\140\\140\\140\\140\\140\" + \"\\140\\140\\140\\140\\u011C\\u011E\\u0120\\u0122\\u0124\\140\\u0126\\u0128\\u012A\\u012A\" + \"\\u012A\\u012A\\u012A\\u012A\\u012A\\u012A\\124\\124\\124\\124\\124\\124\\124\\124\\124\\124\" + \"\\124\\124\\124\\124\\124\\124\\132\\132\\132\\132\\132\\132\\132\\132\\132\\132\\132\\132\\132\" + \"\\132\\132\\132\\u012C\\u012C\\u012C\\u012C\\u012C\\u012C\\u012C\\u012C\\140\\u012E\\356\" + \"\\356\\u0130\\140\\140\\140\\140\\140\\140\\140\\140\\140\\140\\140\\u0132\\146\\146\\146\\146\" + \"\\146\\146\\u0134\\140\\140\\140\\140\\140\\140\\140\\140\\140\\140\\140\\140\\362\\362\\362\" + \"\\362\\u0136\\u0138\\u0138\\u0138\\u0138\\u0138\\u0138\\u0138\\u0138\\u0138\\u0138\\u0138\" + \"\\u0138\\u0138\\u0138\\u0138\\u0138\\u0138\\u0138\\u013A\\u013C\\u013E\\u013E\\u013E\\u0140\" + \"\\u0142\\u0142\\u0142\\u0142\\u0142\\u0142\\u0142\\u0142\\u0142\\u0142\\u0142\\u0142\\u0142\" + \"\\u0142\\u0142\\u0142\\u0142\\u0142\\u0144\\u0146\\u0148\\362\\u014A\\u014C\\356\\356\\356\" + \"\\356\\356\\356\\356\\356\\356\\356\\356\\356\\356\\356\\356\\u014E\\u014E\\u014E\\u014E\\u014E\" + \"\\u014E\\u014E\\u0150\\u0152\\u0154\\u014E\\u0152\\362\\362\\362\\362\\u0156\\u0156\\u0156\" + \"\\u0156\\u0156\\u0156\\u0156\\u0156\\u0156\\u0156\\u0156\\u0156\\u0156\\u0158\\362\\362\" + \"\\u0156\\u015A\\u015C\\362\\362\\362\\362\\362\\u015E\\u015E\\u0160\\u0162\\u0164\\u0166\" + \"\\u0168\\u016A\\u014E\\u014E\\u014E\\u014E\\u014E\\u016C\\362\\u016E\\u0170\\u0170\\u0170\" + \"\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\" + \"\\u0172\\u0170\\u0170\\u0170\\u0170\\u0174\\u014E\\u014E\\u014E\\u014E\\u014E\\u014E\\u0176\" + \"\\u014E\\u014E\\u014E\\u0178\\u0178\\u0178\\u0178\\u0178\\u017A\\u017C\\u0170\\u017E\\u0170\" + \"\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\" + \"\\u0170\\u0170\\u0170\\u0180\\u014E\\u014E\\u014E\\u0182\\u0184\\u0176\\u014E\\u0186\\u0188\" + \"\\u018A\\356\\u0176\\u0170\\032\\032\\032\\032\\032\\u0170\\u018C\\u018E\\u016E\\u016E\\u016E\" + \"\\u016E\\u016E\\u016E\\u016E\\u0190\\u0174\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\" + \"\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u014E\\u014E\\u014E\\u014E\\u014E\" + \"\\u014E\\u014E\\u014E\\356\\356\\356\\356\\356\\u0192\\u0194\\u0170\\u0170\\u0170\\u0170\" + \"\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u014E\\u014E\\u014E\\u014E\\u014E\" + \"\\u017E\\362\\362\\362\\362\\362\\362\\362\\u0196\\u0196\\u0196\\u0196\\u0196\\u0156\\u0156\" + \"\\u0156\\u0156\\u0156\\u0156\\u0156\\u0156\\u0156\\u0156\\u0156\\u0156\\u0156\\u0156\\u0156\" + \"\\u0156\\u0198\\356\\356\\356\\356\\u019A\\074\\020\\u019C\\362\\362\\u0156\\u0156\\u0156\" + \"\\u0156\\u0156\\u0156\\u0156\\u0156\\u0156\\u0156\\u0156\\u014E\\356\\u019E\\u014E\\u014E\" + \"\\u014E\\u014E\\u019E\\u014E\\u019E\\u014E\\u01A0\\362\\u01A2\\u01A2\\u01A2\\u01A2\\u01A2\" + \"\\u01A2\\u01A2\\u015C\\u0156\\u0156\\u0156\\u0156\\u0156\\u0156\\u0156\\u0156\\u0156\\u0156\" + \"\\u0156\\u0156\\u0198\\356\\362\\u015C\\362\\362\\362\\362\\362\\362\\362\\362\\362\\362\\362\" + \"\\362\\362\\362\\362\\362\\u01A4\\u0170\\u0170\\u0170\\u0170\\u0170\\u01A4\\362\\362\\362\" + \"\\362\\362\\362\\362\\362\\362\\362\\362\\u014E\\u014E\\u014E\\356\\356\\356\\u014E\\u014E\" + \"\\u014E\\u014E\\u014E\\u014E\\u014E\\u01A6\\u014E\\u01A8\\224\\224\\224\\224\\224\\224\\224\" + \"\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\" + \"\\224\\u01A8\\u01AA\\u01AC\\u01AE\\u014E\\u014E\\u014E\\u01A8\\u01AC\\u01B0\\u01AC\\u01B2\" + \"\\356\\u0176\\u014E\\224\\224\\224\\224\\224\\u014E\\u013E\\u01B4\\u01B4\\u01B4\\u01B4\\u01B4\" + \"\\u01B6\\224\\224\\224\\u01B8\\224\\224\\224\\u01BA\\u01AC\\u01B8\\224\\224\\224\\u01BC\\u01B8\" + \"\\u01BC\\u01B8\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\u01BC\\224\\224\\224\\u01BC\" + \"\\u01BC\\362\\224\\224\\362\\u01AA\\u01AC\\u01AE\\u014E\\u01A6\\u01BE\\u01C0\\u01BE\\u01B0\" + \"\\u01BC\\362\\362\\362\\u01BE\\362\\362\\224\\u01B8\\224\\u014E\\362\\u01B4\\u01B4\\u01B4\" + \"\\u01B4\\u01B4\\224\\072\\u01C2\\u01C2\\u01C4\\u01C6\\362\\362\\u01BA\\u01A8\\u01B8\\224\" + \"\\224\\u01BC\\362\\u01B8\\u01BC\\u01B8\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\u01BC\" + \"\\224\\224\\224\\u01BC\\224\\u01B8\\u01BC\\224\\362\\u0192\\u01AC\\u01AE\\u01A6\\362\\u01BA\" + \"\\u01A6\\u01BA\\u01A0\\362\\u01BA\\362\\362\\362\\u01B8\\224\\u01BC\\u01BC\\362\\362\\362\" + \"\\u01B4\\u01B4\\u01B4\\u01B4\\u01B4\\u014E\\224\\u01C8\\362\\362\\362\\362\\362\\u01BA\\u01A8\" + \"\\u01B8\\224\\224\\224\\224\\u01B8\\224\\u01B8\\224\\224\\224\\224\\224\\224\\224\\224\\224\" + \"\\224\\u01BC\\224\\224\\224\\u01BC\\224\\u01B8\\224\\224\\362\\u01AA\\u01AC\\u01AE\\u014E\" + \"\\u014E\\u01BA\\u01A8\\u01BE\\u01B0\\362\\u01BC\\362\\362\\362\\362\\362\\362\\362\\224\\u014E\" + \"\\362\\u01B4\\u01B4\\u01B4\\u01B4\\u01B4\\u01CA\\362\\362\\362\\362\\362\\362\\362\\224\\224\" + \"\\224\\224\\u01BC\\224\\224\\224\\u01BC\\224\\u01B8\\224\\224\\362\\u01AA\\u01AE\\u01AE\\u014E\" + \"\\u01A6\\u01BE\\u01C0\\u01BE\\u01B0\\362\\362\\362\\362\\u01A8\\362\\362\\224\\u01B8\\224\" + \"\\u014E\\362\\u01B4\\u01B4\\u01B4\\u01B4\\u01B4\\u01CC\\u01C2\\u01C2\\u01C2\\362\\362\\362\" + \"\\362\\362\\u01CE\\u01B8\\224\\224\\u01BC\\362\\224\\u01BC\\224\\224\\362\\u01B8\\u01BC\\u01BC\" + \"\\224\\362\\u01B8\\u01BC\\362\\224\\u01BC\\362\\224\\224\\224\\224\\224\\224\\362\\362\\u01AC\" + \"\\u01A8\\u01C0\\362\\u01AC\\u01C0\\u01AC\\u01B0\\362\\u01BC\\362\\362\\u01BE\\362\\362\\362\" + \"\\362\\362\\362\\362\\u01B4\\u01B4\\u01B4\\u01B4\\u01B4\\u01D0\\u01D2\\u016A\\u016A\\u01D4\" + \"\\u01D6\\362\\362\\u01BE\\u01AC\\u01B8\\224\\224\\224\\u01BC\\224\\u01BC\\224\\224\\224\\224\" + \"\\224\\224\\224\\224\\224\\224\\224\\u01BC\\224\\224\\224\\224\\224\\u01B8\\224\\224\\362\\u01B8\" + \"\\u014E\\u01A8\\u01AC\\u01C0\\u014E\\u01A6\\u014E\\u01A0\\362\\362\\362\\u01BA\\u01A6\\224\" + \"\\362\\362\\362\\224\\u014E\\362\\u01B4\\u01B4\\u01B4\\u01B4\\u01B4\\362\\362\\362\\362\\u01D8\" + \"\\u01D8\\u01DA\\u01DC\\362\\u01AC\\u01B8\\224\\224\\224\\u01BC\\224\\u01BC\\224\\224\\224\" + \"\\224\\224\\224\\224\\224\\224\\224\\224\\u01BC\\224\\224\\224\\224\\224\\u01B8\\224\\224\\362\" + \"\\u01AA\\u01DE\\u01AC\\u01AC\\u01C0\\u01E0\\u01C0\\u01AC\\u01A0\\362\\362\\362\\u01BE\\u01C0\" + \"\\362\\362\\362\\u01BC\\224\\u014E\\362\\u01B4\\u01B4\\u01B4\\u01B4\\u01B4\\u01B8\\u01BC\" + \"\\362\\362\\362\\362\\362\\362\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\" + \"\\u01BC\\u01B8\\u01AC\\u01AE\\u014E\\u01A6\\u01AC\\u01C0\\u01AC\\u01B0\\u01BC\\362\\362\" + \"\\362\\u01BE\\362\\362\\362\\362\\224\\u014E\\362\\u01B4\\u01B4\\u01B4\\u01B4\\u01B4\\u01D0\" + \"\\u01C2\\u01C2\\362\\u01E2\\224\\224\\224\\362\\u01AC\\u01B8\\224\\224\\224\\224\\224\\224\" + \"\\224\\224\\u01BC\\362\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\u01B8\\224\" + \"\\224\\224\\224\\u01B8\\362\\224\\224\\224\\u01BC\\362\\u0192\\362\\u01BE\\u01AC\\u014E\\u01A6\" + \"\\u01A6\\u01AC\\u01AC\\u01AC\\u01AC\\362\\362\\362\\362\\362\\362\\362\\362\\362\\u01AC\\u01E4\" + \"\\362\\362\\362\\362\\362\\u01B8\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\" + \"\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\u01C8\\224\\u014E\\u014E\\u014E\\u01A6\" + \"\\362\\u014A\\224\\224\\224\\u01E6\\356\\356\\u0176\\u01E8\\u01EA\\u01EA\\u01EA\\u01EA\\u01EA\" + \"\\u013E\\362\\362\\u01B8\\u01BC\\u01BC\\u01B8\\u01BC\\u01BC\\u01B8\\362\\362\\362\\224\\224\" + \"\\u01B8\\224\\224\\224\\u01B8\\224\\u01B8\\u01B8\\362\\224\\u01B8\\224\\u01C8\\224\\u014E\" + \"\\u014E\\u014E\\u01BA\\u01CE\\362\\224\\224\\u01BC\\u01EC\\356\\356\\u0176\\362\\u01EA\\u01EA\" + \"\\u01EA\\u01EA\\u01EA\\362\\224\\224\\u01EE\\u01F0\\u013E\\u013E\\u013E\\u013E\\u013E\\u013E\" + \"\\u013E\\u01F2\\u01F2\\u01F0\\356\\u01F0\\u01F0\\u01F0\\u01F4\\u01F4\\u01F4\\u01F4\\u01F4\" + \"\\u01C2\\u01C2\\u01C2\\u01C2\\u01C2\\u012E\\u012E\\u012E\\022\\022\\u01F6\\224\\224\\224\" + \"\\224\\u01B8\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\" + \"\\224\\u01BC\\362\\u01BA\\u014E\\u014E\\u014E\\u014E\\u014E\\u014E\\u01A8\\u014E\\356\\u01E8\" + \"\\356\\224\\224\\u01C8\\u014E\\u014E\\u014E\\u014E\\u014E\\u01BA\\u014E\\u014E\\u014E\\u014E\" + \"\\u014E\\u014E\\u014E\\u014E\\u014E\\u014E\\u014E\\u014E\\u014E\\u014E\\u014E\\u014E\\u014E\" + \"\\u01A6\\u01F0\\u01F0\\u01F0\\u01F0\\u01F8\\u01F0\\u01F0\\u01FA\\u01F0\\u013E\\u013E\\u01F2\" + \"\\u01F0\\u01FC\\u01E4\\362\\362\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\" + \"\\224\\224\\224\\224\\224\\224\\224\\224\\224\\u01FE\\u01AE\\u014E\\u01A8\\u014E\\u014E\\u01A0\" + \"\\u01B0\\u0200\\u01AE\\u01CE\\u01F4\\u01F4\\u01F4\\u01F4\\u01F4\\u013E\\u013E\\u013E\\224\" + \"\\224\\224\\u01AC\\u014E\\224\\224\\u014E\\u01CE\\u0202\\u0204\\u01FE\\u0202\\u01F6\\u01F6\" + \"\\224\\u01C8\\u014E\\u01CE\\224\\224\\224\\224\\224\\224\\u01A8\\u01AE\\u0206\\u01F6\\u01F6\" + \"\\u0208\\u020A\\u01EA\\u01EA\\u01EA\\u01EA\\u01EA\\u01F6\\u01AE\\u01F0\\u020C\\u020C\\u020C\" + \"\\u020C\\u020C\\u020C\\u020C\\u020C\\u020C\\u020C\\u020C\\u020C\\u020C\\u020C\\u020C\\u020C\" + \"\\u020C\\u020C\\u020C\\u020E\\362\\362\\u020E\\362\\224\\224\\224\\224\\224\\224\\224\\224\" + \"\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\u0210\\u0212\\224\\224\\224\" + \"\\224\\224\\u01BC\\224\\224\\362\\224\\224\\224\\u01BC\\u01BC\\224\\224\\362\\224\\224\\224\" + \"\\224\\u01BC\\224\\224\\362\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\" + \"\\224\\224\\224\\u01BC\\224\\224\\362\\224\\224\\224\\u01BC\\u01BC\\224\\224\\362\\224\\224\" + \"\\224\\224\\224\\224\\224\\u01BC\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\" + \"\\u01BC\\224\\224\\362\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\" + \"\\224\\224\\224\\u01BC\\u014C\\u0176\\u013E\\u013E\\u013E\\u013E\\u0214\\u0216\\u0216\\u0216\" + \"\\u0216\\u0218\\u021A\\u01C2\\u01C2\\u01C2\\u021C\\362\\224\\224\\224\\224\\224\\224\\224\" + \"\\224\\u016A\\u016A\\u016A\\u016A\\u016A\\362\\362\\362\\224\\224\\224\\224\\224\\224\\224\" + \"\\224\\224\\224\\u01BC\\362\\362\\362\\362\\362\\u021E\\224\\224\\224\\224\\224\\224\\224\\224\" + \"\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\u0210\\u0220\\224\\224\\224\" + \"\\224\\224\\224\\224\\224\\u0222\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\" + \"\\u0224\\u0226\\362\\224\\224\\224\\224\\224\\u0210\\u013E\\u0228\\u022A\\362\\362\\362\\362\" + \"\\362\\362\\362\\224\\224\\224\\224\\224\\224\\u01BC\\224\\224\\u014E\\u0192\\362\\362\\362\" + \"\\362\\362\\224\\224\\224\\224\\224\\224\\224\\224\\224\\u014E\\u01E8\\u01E4\\362\\362\\362\" + \"\\362\\224\\224\\224\\224\\224\\224\\224\\224\\224\\u014E\\362\\362\\362\\362\\362\\362\\224\" + \"\\224\\224\\224\\224\\224\\u01BC\\224\\u01BC\\u014E\\362\\362\\362\\362\\362\\362\\224\\224\" + \"\\224\\224\\224\\224\\224\\224\\224\\224\\356\\u01AE\\u014E\\u014E\\u014E\\u01AC\\u01AC\\u01AC\" + \"\\u01AC\\u01A8\\u01B0\\356\\356\\356\\356\\356\\u013E\\u01B6\\u013E\\u01CA\\u01B2\\362\\u01F4\" + \"\\u01F4\\u01F4\\u01F4\\u01F4\\362\\362\\362\\u022C\\u022C\\u022C\\u022C\\u022C\\362\\362\" + \"\\362\\020\\020\\020\\u022E\\020\\u0230\\356\\u0232\\u01EA\\u01EA\\u01EA\\u01EA\\u01EA\\362\" + \"\\362\\362\\224\\u0234\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\" + \"\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\362\\362\\362\\362\\224\\224\\224\" + \"\\224\\u01C8\\u01BC\\362\\362\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\" + \"\\224\\224\\224\\224\\224\\224\\362\\362\\362\\362\\362\\224\\224\\224\\224\\224\\224\\224\\224\" + \"\\224\\224\\224\\224\\224\\224\\u01BC\\362\\u014E\\u01A8\\u01AC\\u01AE\\u01A8\\u01AC\\362\" + \"\\362\\u01AC\\u01A8\\u01AC\\u01AC\\u01B0\\356\\362\\362\\u01D6\\362\\020\\u01B4\\u01B4\\u01B4\" + \"\\u01B4\\u01B4\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\362\" + \"\\224\\224\\u01BC\\362\\362\\362\\362\\362\\224\\224\\224\\224\\224\\224\\362\\362\\u01AC\\u01AC\" + \"\\u01AC\\u01AC\\u01AC\\u01AC\\u01AC\\u01AC\\u0236\\224\\224\\224\\u01AC\\362\\362\\362\\u01EA\" + \"\\u01EA\\u01EA\\u01EA\\u01EA\\u0238\\362\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\" + \"\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\224\\224\\224\\224\" + \"\\224\\224\\224\\224\\224\\224\\224\\u01C8\\u01A8\\u01AC\\362\\u013E\\224\\224\\224\\224\\224\" + \"\\224\\224\\224\\224\\224\\u01FE\\u01A8\\u014E\\u014E\\u014E\\u01A6\\u0200\\u01A8\\u01AE\" + \"\\u014E\\u014E\\u014E\\u01A8\\u01AC\\u01AC\\u01AE\\u01A0\\356\\356\\356\\u0192\\u014C\\u01F4\" + \"\\u01F4\\u01F4\\u01F4\\u01F4\\362\\362\\362\\u01EA\\u01EA\\u01EA\\u01EA\\u01EA\\362\\362\" + \"\\362\\u013E\\u013E\\u013E\\u01B6\\u013E\\u013E\\u013E\\362\\362\\362\\362\\362\\362\\362\" + \"\\362\\362\\u014E\\u014E\\u0236\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\" + \"\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\u0200\\u014E\\u014E\\u01A8\\u01A8\" + \"\\u01AC\\u01AC\\u01A8\\u0204\\224\\224\\224\\362\\362\\u01EA\\u01EA\\u01EA\\u01EA\\u01EA\" + \"\\u013E\\u013E\\u013E\\u01F2\\u01F0\\u01F0\\u01F0\\u01F0\\u012E\\356\\356\\356\\356\\u01F0\" + \"\\u01F0\\u01F0\\u01F0\\u01FA\\362\\u014E\\u0236\\224\\224\\224\\224\\224\\224\\224\\224\\224\" + \"\\224\\224\\224\\224\\224\\u01FE\\u014E\\u014E\\u01AC\\u014E\\u0208\\u01AC\\224\\u01EA\\u01EA\" + \"\\u01EA\\u01EA\\u01EA\\224\\224\\224\\224\\224\\224\\u0200\\u014E\\u01AC\\u01AE\\u01AE\\u014E\" + \"\\u01F6\\362\\362\\362\\362\\u013E\\u013E\\224\\224\\u01AC\\u01AC\\u01AC\\u01AC\\u014E\\u014E\" + \"\\u014E\\u014E\\u01AC\\356\\362\\u0146\\u013E\\u013E\\u01F4\\u01F4\\u01F4\\u01F4\\u01F4\" + \"\\362\\u01B8\\224\\u01EA\\u01EA\\u01EA\\u01EA\\u01EA\\224\\224\\224\\224\\224\\224\\224\\224\" + \"\\224\\224\\224\\224\\224\\224\\224\\342\\342\\342\\u013E\\u013E\\u013E\\u013E\\u013E\\362\" + \"\\362\\362\\362\\356\\u01E8\\356\\356\\356\\356\\356\\356\\u023A\\356\\356\\356\\u01AA\\224\" + \"\\u01B2\\224\\224\\u01AC\\u01AA\\u01BC\\362\\362\\362\\362\\210\\210\\210\\210\\210\\210\\210\" + \"\\210\\210\\210\\210\\210\\210\\210\\210\\210\\210\\210\\210\\210\\210\\210\\334\\334\\334\\334\" + \"\\334\\334\\334\\334\\334\\334\\334\\334\\334\\334\\334\\334\\334\\334\\334\\334\\334\\334\\334\" + \"\\334\\334\\334\\334\\334\\334\\334\\334\\u023C\\210\\210\\210\\210\\210\\210\\u023E\\210\\302\" + \"\\210\\210\\210\\210\\210\\210\\210\\210\\210\\210\\210\\210\\210\\210\\u0240\\334\\334\\356\" + \"\\356\\356\\u0192\\362\\362\\362\\362\\362\\362\\362\\362\\362\\362\\356\\356\\140\\140\\140\" + \"\\140\\140\\140\\140\\140\\140\\140\\140\\262\\262\\u0242\\210\\u0244\\u0246\\u0246\\u0246\" + \"\\u0246\\u0248\\u0248\\u0248\\u0248\\u0246\\u0246\\u0246\\362\\u0248\\u0248\\u0248\\362\" + \"\\u0246\\u0246\\u0246\\u0246\\u0248\\u0248\\u0248\\u0248\\u0246\\u0246\\u0246\\u0246\\u0248\" + \"\\u0248\\u0248\\u0248\\u0246\\u0246\\u0246\\362\\u0248\\u0248\\u0248\\362\\u024A\\u024A\" + \"\\u024A\\u024A\\u024C\\u024C\\u024C\\u024C\\u0246\\u0246\\u0246\\u0246\\u0248\\u0248\\u0248\" + \"\\u0248\\u024E\\u0250\\u0250\\u0252\\u0254\\u0256\\u0258\\362\\262\\262\\262\\262\\u025A\" + \"\\u025A\\u025A\\u025A\\262\\262\\262\\262\\u025A\\u025A\\u025A\\u025A\\262\\262\\262\\262\" + \"\\u025A\\u025A\\u025A\\u025A\\u0246\\262\\u025C\\262\\u0248\\u025E\\u0260\\u0262\\344\\262\" + \"\\u025C\\262\\u0264\\u0264\\u0260\\344\\u0246\\262\\362\\262\\u0248\\u0266\\u0268\\344\\u0246\" + \"\\262\\u026A\\262\\u0248\\u026C\\u026E\\344\\362\\262\\u025C\\262\\u0270\\u0272\\u0260\\u0274\" + \"\\u0276\\u0276\\u0276\\u0278\\u0276\\u027A\\u027C\\u027E\\u0280\\u0280\\u0280\\020\\u0282\" + \"\\u0284\\u0282\\u0284\\020\\020\\020\\020\\u0286\\u0288\\u0288\\u028A\\u028C\\u028C\\u028E\" + \"\\020\\u0290\\u0292\\020\\u0294\\u0296\\020\\u0298\\u029A\\020\\020\\020\\020\\020\\u029C\" + \"\\u0296\\020\\020\\020\\020\\u029E\\u027C\\u027C\\u02A0\\362\\362\\u027C\\u027C\\u027C\\u02A2\" + \"\\362\\110\\110\\110\\u02A4\\u02A6\\u02A8\\u02AA\\u02AA\\u02AA\\u02AA\\u02AA\\u02A4\\u02A6\" + \"\\u0226\\334\\334\\334\\334\\334\\334\\u02AC\\362\\072\\072\\072\\072\\072\\072\\072\\072\\072\" + \"\\072\\072\\072\\072\\072\\072\\072\\362\\362\\362\\362\\362\\362\\362\\362\\356\\356\\356\\356\" + \"\\356\\356\\u02AE\\u0130\\u02B0\\u0130\\u02B0\\356\\356\\356\\356\\356\\u0192\\362\\362\\362\" + \"\\362\\362\\362\\362\\u016A\\u02B2\\u016A\\u02B4\\u016A\\u02B6\\u0116\\210\\u0116\\u02B8\" + \"\\u02B4\\u016A\\u02BA\\u0116\\u0116\\u016A\\u016A\\u016A\\u02B2\\u02BC\\u02B2\\u020C\\u0116\" + \"\\u02BE\\u0116\\u02C0\\220\\224\\332\\u016A\\210\\u0116\\036\\u0162\\u02BA\\210\\210\\u02C2\" + \"\\u016A\\u02C4\\120\\120\\120\\120\\120\\120\\120\\120\\u02C6\\u02C6\\u02C6\\u02C6\\u02C6\" + \"\\u02C6\\u02C8\\u02C8\\u02CA\\u02CA\\u02CA\\u02CA\\u02CA\\u02CA\\u02CC\\u02CC\\u02CE\\u02D0\" + \"\\u02D2\\u02CE\\u02D4\\362\\362\\362\\u0162\\u0162\\u02D6\\u016A\\u016A\\u0162\\u016A\\u016A\" + \"\\u02D6\\u02C2\\u016A\\u02D6\\u016A\\u016A\\u016A\\u02D6\\u016A\\u016A\\u016A\\u016A\\u016A\" + \"\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u0162\\u016A\\u02D6\" + \"\\u02D6\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\" + \"\\u016A\\u016A\\u016A\\u0162\\u0162\\u0162\\u0162\\u0162\\u0162\\u02D8\\u02DA\\036\\u0162\" + \"\\u02DA\\u02DA\\u02DA\\u0162\\u02D8\\u02DC\\u02D8\\036\\u0162\\u02DA\\u02DA\\u02D8\\u02DA\" + \"\\036\\036\\036\\u0162\\u02D8\\u02DA\\u02DA\\u02DA\\u02DA\\u0162\\u0162\\u02D8\\u02D8\\u02DA\" + \"\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\\036\\u0162\\u0162\\u02DA\\u02DA\\u0162\" + \"\\u0162\\u0162\\u0162\\u02D8\\036\\036\\u02DA\\u02DA\\u02DA\\u02DA\\u0162\\u02DA\\u02DA\" + \"\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\" + \"\\036\\u02D8\\u02DA\\036\\u0162\\u0162\\036\\u0162\\u0162\\u0162\\u0162\\u02DA\\u0162\\u02DA\" + \"\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\\036\\u0162\\u0162\\u02DA\\u0162\" + \"\\u0162\\u0162\\u0162\\u02D8\\u02DA\\u02DA\\u0162\\u02DA\\u0162\\u0162\\u02DA\\u02DA\\u02DA\" + \"\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\\u0162\\u02DA\\u02DA\\u02DA\" + \"\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\\u016A\\u016A\\u016A\\u016A\\u02DA\\u02DA\\u016A\\u016A\" + \"\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u02DA\\u016A\\u016A\\u016A\\u02DE\" + \"\\u02E0\\u016A\\u016A\\u016A\\u016A\\u016A\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\" + \"\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\" + \"\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\" + \"\\u01F0\\u02E2\\u02D6\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\" + \"\\u016A\\u02E4\\u016A\\u016A\\u02C2\\u0162\\u0162\\u0162\\u0162\\u0162\\u0162\\u0162\\u0162\" + \"\\u0162\\u0162\\u0162\\u0162\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\" + \"\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u0162\\u0162\" + \"\\u0162\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\362\\362\\362\\362\" + \"\\362\\362\\u016A\\u016A\\u016A\\u01D6\\362\\362\\362\\362\\362\\362\\362\\362\\362\\362\\362\" + \"\\362\\u016A\\u016A\\u016A\\u016A\\u016A\\u01D6\\362\\362\\362\\362\\362\\362\\362\\362\\362\" + \"\\362\\u02E6\\u02E6\\u02E6\\u02E6\\u02E6\\u02E6\\u02E6\\u02E6\\u02E6\\u02E6\\u02E8\\u02E8\" + \"\\u02E8\\u02E8\\u02E8\\u02E8\\u02E8\\u02E8\\u02E8\\u02E8\\u02EA\\u02EA\\u02EA\\u02EA\\u02EA\" + \"\\u02EA\\u02EA\\u02EA\\u02EA\\u02EA\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\" + \"\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u02EC\\u02EC\\u02EC\\u02EC\\u02EC\\u02EC\\u02EC\\u02EC\" + \"\\u02EC\\u02EC\\u02EC\\u02EC\\u02EC\\u02EE\\u02EE\\u02EE\\u02EE\\u02EE\\u02EE\\u02EE\\u02EE\" + \"\\u02EE\\u02EE\\u02EE\\u02EE\\u02EE\\u02F0\\u02F2\\u02F2\\u02F2\\u02F2\\u02F4\\u02F6\\u02F6\" + \"\\u02F6\\u02F6\\u02F8\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\" + \"\\u016A\\u02C2\\u016A\\u016A\\u016A\\u016A\\u02C2\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\" + \"\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\" + \"\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u0162\\u0162\\u0162\\u0162\\u016A\" + \"\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u02C2\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\" + \"\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u02E2\\u016A\\u016A\\u016A\\u016A\" + \"\\u016A\\u016A\\u016A\\u016A\\u016A\\u02FA\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\" + \"\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\022\" + \"\\022\\022\\022\\022\\022\\022\\u02FC\\u02FC\\u02FC\\u02FC\\u02FC\\u02E6\\u02E6\\u02E6\\u02E6\" + \"\\u02E6\\u02FE\\u02FE\\u02FE\\u02FE\\u02FE\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\036\" + \"\\u02D8\\u0300\\u0302\\u02DA\\u02D8\\u02DA\\u0162\\u0162\\u02D8\\u02DA\\036\\u0162\\u0162\" + \"\\u02DA\\036\\u0162\\u02DA\\u02DA\\022\\022\\022\\022\\022\\u0162\\u0162\\u0162\\u0162\\u0162\" + \"\\u0162\\u0162\\u0162\\u0162\\u0162\\u0162\\u0162\\u0162\\u0162\\u0162\\u0162\\u0162\\u0162\" + \"\\u0162\\u0162\\u0162\\u0162\\u0162\\u0162\\u0162\\u02A6\\u0304\\u0304\\u0304\\u0304\\u0304\" + \"\\u0304\\u0304\\u0304\\u0304\\u0304\\u0302\\u02D8\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\" + \"\\u02DA\\u02DA\\u02DA\\u02DA\\u0162\\u0162\\u0162\\u0162\\036\\u0162\\u0162\\u0162\\u02DA\" + \"\\u02DA\\u02DA\\u0162\\u02D8\\u0162\\u0162\\u02DA\\u02DA\\036\\u02DA\\u0162\\022\\022\\036\" + \"\\u0162\\u02D8\\u02D8\\u02DA\\u0162\\u02DA\\u0162\\u0162\\u0162\\u0162\\u0162\\u02DA\\u02DA\" + \"\\u02DA\\u0162\\022\\u0162\\u0162\\u0162\\u0162\\u0162\\u0162\\u02DA\\u02DA\\u02DA\\u02DA\" + \"\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\\036\\u02DA\\u02DA\\u0162\\036\\036\\u02D8\\u02D8\\u02DA\" + \"\\036\\u0162\\u0162\\u02DA\\u0162\\u0162\\u0162\\u02DA\\036\\u0162\\u0162\\u0162\\u0162\" + \"\\u0162\\u0162\\u0162\\u0162\\u0162\\u0162\\u0162\\u02D8\\036\\u0162\\u0162\\u0162\\u0162\" + \"\\u0162\\u02DA\\u0162\\u0162\\u02DA\\u02DA\\u02D8\\036\\u02D8\\036\\u0162\\u02D8\\u02DA\" + \"\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\" + \"\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\\u0162\\u02DA\\u02DA\\u02DA\\u02DA\\u02D8\" + \"\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\" + \"\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\\u02DA\\036\\u0162\\u0162\\036\\036\\u0162\\u02DA\\u02DA\" + \"\\036\\u0162\\u0162\\u02DA\\036\\u0162\\u02D8\\u0162\\u02D8\\u02DA\\u02DA\\u02D8\\u0162\" + \"\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u0162\\u0162\\u0162\\u0162\\u0162\" + \"\\u0162\\u0162\\u0162\\u0162\\u0162\\u02D6\\u02C2\\u0162\\u0162\\u0306\\362\\u016A\\u016A\" + \"\\u016A\\u016A\\u016A\\362\\362\\362\\u0138\\u0138\\u0138\\u0138\\u0138\\u0138\\u0138\\u0138\" + \"\\u0138\\u0138\\u0138\\u0138\\u0138\\u0138\\u0138\\u0138\\u0138\\u0138\\u0138\\u0138\\u0138\" + \"\\u0138\\u0138\\u013A\\u0142\\u0142\\u0142\\u0142\\u0142\\u0142\\u0142\\u0142\\u0142\\u0142\" + \"\\u0142\\u0142\\u0142\\u0142\\u0142\\u0142\\u0142\\u0142\\u0142\\u0142\\u0142\\u0142\\u0142\" + \"\\u0308\\140\\u020C\\252\\254\\146\\146\\u030A\\u020C\\u0244\\140\\144\\164\\210\\210\\334\" + \"\\u020C\\140\\140\\u030C\\u016A\\u016A\\u030E\\146\\u0310\\356\\140\\362\\362\\u0312\\020\" + \"\\u0314\\020\\262\\262\\262\\262\\262\\262\\262\\262\\262\\262\\262\\262\\262\\262\\262\\262\" + \"\\262\\262\\262\\u0316\\362\\362\\u0316\\362\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\" + \"\\224\\224\\362\\362\\362\\u013C\\u01E4\\362\\362\\362\\362\\362\\362\\u014C\\224\\224\\224\" + \"\\224\\224\\224\\224\\224\\224\\224\\224\\u01BC\\362\\362\\362\\362\\224\\224\\224\\u01BC\\224\" + \"\\224\\224\\u01BC\\224\\224\\224\\u01BC\\224\\224\\224\\u01BC\\u014E\\u014E\\u014E\\u014E\" + \"\\u014E\\u014E\\u014E\\u014E\\u014E\\u014E\\u014E\\u014E\\u014E\\u014E\\u014E\\u014E\\020\" + \"\\u0318\\u0318\\020\\u0290\\u0292\\u0318\\020\\020\\020\\020\\u031A\\020\\u022E\\u0318\\020\" + \"\\u0318\\022\\022\\022\\022\\020\\020\\u031C\\020\\020\\020\\020\\020\\u0280\\362\\362\\u016A\" + \"\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u02FA\" + \"\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\362\" + \"\\362\\362\\362\\362\\362\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\" + \"\\u016A\\u016A\\362\\362\\362\\362\\362\\362\\362\\362\\362\\362\\362\\362\\362\\u016A\\u016A\" + \"\\u016A\\u016A\\u016A\\u016A\\362\\362\\012\\020\\u031E\\u0320\\022\\022\\022\\022\\022\\u016A\" + \"\\022\\022\\022\\022\\u0322\\u0324\\u0326\\u0328\\u0328\\u0328\\u0328\\356\\356\\u01F6\\u032A\" + \"\\342\\342\\u016A\\u032C\\u032E\\u0330\\u016A\\224\\224\\224\\224\\224\\224\\224\\224\\224\" + \"\\224\\224\\u01BC\\u014C\\u0332\\u0334\\u0212\\224\\224\\224\\224\\224\\224\\224\\224\\224\" + \"\\224\\224\\224\\224\\u0330\\342\\u0212\\362\\362\\u01B8\\224\\224\\224\\224\\224\\224\\224\" + \"\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\362\\u01B8\\224\\224\\224\" + \"\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\u01BC\\u01F0\\u0336\\u0336\\u01F0\" + \"\\u01F0\\u01F0\\u01F0\\u01F0\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\" + \"\\u01BC\\362\\362\\u016A\\u016A\\362\\362\\362\\362\\362\\362\\224\\224\\224\\224\\224\\224\" + \"\\224\\224\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\" + \"\\u01F0\\u01F0\\u01F0\\u02E2\\u01D6\\u0338\\u0338\\u0338\\u0338\\u0338\\u01F0\\u01F0\\u01F0\" + \"\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u033A\" + \"\\u033C\\u01C2\\u01C2\\u033E\\u0340\\u0340\\u0340\\u0340\\u0340\\120\\120\\u01F0\\u01F0\" + \"\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u016A\" + \"\\u02E4\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u0342\\120\\120\\120\\120\" + \"\\120\\120\\120\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u016A\\u016A\\u01F0\\u01F0\\u01F0\" + \"\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\" + \"\\u01F0\\u01F0\\u01F0\\u02E2\\u016A\\u02E4\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\" + \"\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u016A\\u01F0\\u01F0\" + \"\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\\u01F0\" + \"\\u02E2\\u0344\\u0344\\u0344\\u0344\\u0344\\u0344\\u0344\\u0344\\u0344\\u0344\\u0344\\u0344\" + \"\\u0344\\u0344\\u0344\\u0344\\u0344\\u0344\\u0344\\u0344\\u0344\\u0344\\u0344\\u0344\\u0344\" + \"\\u0344\\u0344\\362\\362\\362\\362\\362\\u0344\\u0344\\u0344\\u0344\\u0344\\u0344\\u0346\" + \"\\362\\362\\362\\362\\362\\362\\362\\362\\362\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\" + \"\\u0234\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\u01BC\\362\\u016A\\u016A\\u016A\" + \"\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u016A\\u01D6\\362\\362\\362\\362\\224\" + \"\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\u0348\\020\\224\\224\\224\" + \"\\224\\224\\224\\224\\224\\u01F4\\u01F4\\u01F4\\u01F4\\u01F4\\224\\362\\362\\362\\362\\362\" + \"\\362\\362\\362\\362\\362\\140\\140\\140\\140\\140\\140\\140\\u01B2\\u0130\\u034A\\u014E\\u014E\" + \"\\u014E\\u014E\\356\\u031C\\140\\140\\140\\140\\140\\140\\140\\140\\140\\140\\140\\140\\362\" + \"\\362\\362\\u01BA\\224\\224\\224\\u034C\\u034C\\u034C\\u034C\\u034E\\356\\u013E\\u013E\\u013E\" + \"\\362\\362\\362\\362\\344\\344\\344\\344\\344\\344\\344\\344\\344\\344\\344\\u0350\\346\\346\" + \"\\346\\346\\344\\140\\140\\140\\140\\140\\140\\140\\210\\140\\140\\140\\140\\140\\140\\140\\140\" + \"\\140\\140\\140\\140\\140\\140\\140\\u023C\\210\\210\\210\\144\\146\\u030A\\140\\140\\140\\140\" + \"\\140\\u0352\\u0354\\u030A\\u0356\\140\\140\\362\\362\\362\\362\\362\\362\\140\\140\\140\\140\" + \"\\140\\u0358\\362\\362\\362\\362\\362\\362\\362\\362\\362\\362\\362\\362\\362\\362\\362\\362\" + \"\\362\\362\\362\\362\\362\\362\\334\\220\\224\\224\\224\\u01AA\\224\\u01AA\\224\\u01B2\\224\" + \"\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\u01FE\\u01AE\\u01A8\\u016A\\u016A\\362\" + \"\\362\\u01C2\\u01C2\\u01C2\\u01F0\\u035A\\362\\362\\362\\224\\224\\224\\224\\224\\224\\224\" + \"\\224\\224\\224\\020\\020\\362\\362\\362\\362\\u01AC\\224\\224\\224\\224\\224\\224\\224\\224\" + \"\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\u01AC\" + \"\\u01AC\\u01AC\\u01AC\\u01AC\\u01AC\\u01AC\\u01AC\\u0192\\362\\362\\362\\362\\u013E\\u01EA\" + \"\\u01EA\\u01EA\\u01EA\\u01EA\\362\\362\\362\\356\\356\\356\\356\\356\\356\\356\\356\\356\\224\" + \"\\224\\224\\u013E\\u0220\\362\\362\\u01F4\\u01F4\\u01F4\\u01F4\\u01F4\\224\\224\\224\\224\" + \"\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\u014E\\u014E\\u01A0\\356\\u013E\\224\\224\" + \"\\224\\224\\224\\224\\224\\224\\224\\224\\224\\u01C8\\u014E\\u014E\\u014E\\u014E\\u014E\\u0202\" + \"\\362\\362\\362\\362\\362\\u0146\\224\\224\\224\\224\\224\\224\\224\\224\\224\\u01B2\\u01AC\" + \"\\u014E\\u014E\\u01AC\\u01A8\\u01AC\\u035C\\u013E\\u013E\\u013E\\u013E\\u013E\\u013E\\u013C\" + \"\\u01EA\\u01EA\\u01EA\\u01EA\\u01EA\\362\\362\\u013E\\224\\224\\224\\224\\u01C8\\u014E\\u014E\" + \"\\u01A8\\u01AE\\u01A8\\u01AE\\u01A6\\362\\362\\362\\362\\224\\u01C8\\224\\224\\224\\224\\u01A8\" + \"\\362\\u01EA\\u01EA\\u01EA\\u01EA\\u01EA\\362\\u013E\\u013E\\224\\224\\224\\224\\224\\224\" + \"\\224\\224\\u0212\\224\\224\\u01EE\\u01F0\\u020A\\362\\362\\224\\224\\224\\224\\224\\224\\224\" + \"\\224\\u01CE\\u014E\\u01CE\\u01C8\\u01CE\\224\\224\\u01A0\\u01B2\\u01BC\\362\\362\\362\\362\" + \"\\362\\362\\362\\362\\362\\362\\362\\u01B8\\u0234\\u013E\\224\\224\\224\\224\\224\\u01FE\\u014E\" + \"\\u01AC\\u013E\\u0234\\u035E\\u0192\\362\\362\\362\\362\\u01B8\\224\\224\\u01BC\\u01B8\\224\" + \"\\224\\u01BC\\u01B8\\224\\224\\u01BC\\362\\362\\362\\362\\224\\224\\224\\u01BC\\224\\224\\224\" + \"\\u01BC\\362\\362\\362\\362\\362\\362\\362\\362\\224\\u01FE\\u01AE\\u01AC\\u01A8\\u0360\\u0208\" + \"\\362\\u01EA\\u01EA\\u01EA\\u01EA\\u01EA\\362\\362\\362\\224\\224\\362\\362\\362\\362\\362\" + \"\\362\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\u01BC\\362\\u01B8\\224\\224\\224\" + \"\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\" + \"\\224\\224\\362\\362\\u0362\\u0362\\u0362\\u0362\\u0362\\u0362\\u0362\\u0362\\u0362\\u0362\" + \"\\u0362\\u0362\\u0362\\u0362\\u0362\\u0362\\u0364\\u0364\\u0364\\u0364\\u0364\\u0364\\u0364\" + \"\\u0364\\u0364\\u0364\\u0364\\u0364\\u0364\\u0364\\u0364\\u0364\\u0344\\u0344\\u0344\\u0344\" + \"\\u0344\\u0366\\u0344\\u0344\\u0344\\u0368\\u0344\\u0344\\u036A\\u0344\\u0344\\u0344\\u0344\" + \"\\u0344\\u0344\\u0344\\u0344\\u0344\\u0344\\u0344\\u0344\\u036C\\u0344\\u0344\\u0344\\u0344\" + \"\\u0344\\u0344\\u0344\\u0344\\u0344\\u0344\\u0344\\u0344\\u0344\\u0344\\u036E\\u0370\\u0344\" + \"\\u0344\\u0344\\u0344\\u0344\\u0344\\u0344\\u0344\\u0344\\u0344\\u0344\\u0344\\u0344\\u0344\" + \"\\u0344\\u0344\\u0344\\u0344\\u0344\\u0344\\u0372\\u0344\\u0344\\u0344\\u0344\\u0344\\u0344\" + \"\\u0344\\u0344\\362\\u0344\\u0344\\u0344\\u0344\\u0344\\u0344\\u0344\\u0344\\u0344\\u0344\" + \"\\u0344\\u0344\\u0344\\u0344\\u0344\\u0344\\u0344\\u0344\\u0344\\u0344\\u0344\\362\\362\" + \"\\362\\262\\262\\262\\u025C\\362\\362\\362\\362\\362\\u0316\\262\\262\\362\\362\\u0374\\u0376\" + \"\\u0156\\u0156\\u0156\\u0156\\u0378\\u0156\\u0156\\u0156\\u0156\\u0156\\u0156\\u0158\\u0156\" + \"\\u0156\\u0158\\u0158\\u0156\\u0374\\u0158\\u0156\\u0156\\u0156\\u0156\\u0156\\u0170\\u0170\" + \"\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\" + \"\\u0170\\u0170\\u037A\\u037A\\u037A\\u037A\\u037A\\u037A\\u037A\\u037A\\362\\362\\362\\362\" + \"\\362\\362\\362\\362\\u0194\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\" + \"\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u037C\" + \"\\362\\362\\362\\362\\362\\362\\362\\362\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\" + \"\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\362\\u0170\\u0170\\u0170\" + \"\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\362\\362\\362\\362\\362\\362\\362\" + \"\\362\\362\\362\\362\\362\\362\\362\\362\\362\\362\\362\\362\\362\\u0170\\u0170\\u0170\\u0170\" + \"\\u0170\\u0170\\u037E\\362\\356\\356\\356\\356\\356\\356\\356\\356\\020\\020\\020\\u0380\\u0382\" + \"\\362\\362\\362\\356\\356\\356\\u0192\\362\\362\\362\\362\\u031A\\u0384\\u0386\\u0388\\u0388\" + \"\\u0388\\u0388\\u0388\\u0388\\u0388\\u0382\\u0380\\u0382\\020\\u0294\\u038A\\034\\u038C\" + \"\\u038E\\020\\u0390\\u0304\\u0304\\u0392\\020\\u0394\\u02DA\\u0306\\u0396\\u028E\\362\\362\" + \"\\u0170\\u0170\\u01A4\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\" + \"\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u0170\\u01A4\\u0398\\u0312\\014\" + \"\\016\\020\\022\\024\\026\\030\\032\\032\\032\\032\\032\\034\\036\\040\\054\\056\\056\\056\\056\" + \"\\056\\056\\056\\056\\056\\056\\056\\056\\060\\062\\u02A6\\u029A\\022\\020\\224\\224\\224\\224\" + \"\\224\\u0212\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\" + \"\\224\\224\\224\\224\\224\\224\\342\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\\224\" + \"\\224\\224\\224\\u01BC\\362\\224\\224\\224\\362\\224\\224\\224\\362\\224\\224\\224\\362\\224\" + \"\\u01BC\\362\\072\\u039A\\u01D4\\u039C\\u02C2\\u0162\\u02D6\\u01D6\\362\\362\\362\\362\\u039E\" + \"\\u03A0\\u016A\\362\").toCharArray()","id":4379},{"comment":"// The A table has 930 entries for a total of 3720 bytes.\r\n","field_name":"A","field_type":"int[]","full_declaration":"static final int[] A = new int[930]","id":4380},{"comment":"static final String A_DATA = \"\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u5800\\u400F\\u5000\\u400F\\u5800\\u400F\\u6000\" + \"\\u400F\\u5000\\u400F\\u5000\\u400F\\u5000\\u400F\\u6000\\u400C\\u6800\\030\\u6800\\030\" + \"\\u2800\\030\\u2800\\u601A\\u2800\\030\\u6800\\030\\u6800\\030\\uE800\\025\\uE800\\026\\u6800\" + \"\\030\\u2000\\031\\u3800\\030\\u2000\\024\\u3800\\030\\u3800\\030\\u1800\\u3609\\u1800\\u3609\" + \"\\u3800\\030\\u6800\\030\\uE800\\031\\u6800\\031\\uE800\\031\\u6800\\030\\u6800\\030\\202\" + \"\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\\uE800\\025\\u6800\\030\\uE800\\026\\u6800\\033\" + \"\\u6800\\u5017\\u6800\\033\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\uE800\\025\\u6800\" + \"\\031\\uE800\\026\\u6800\\031\\u4800\\u100F\\u4800\\u100F\\u5000\\u100F\\u3800\\014\\u6800\" + \"\\030\\u2800\\u601A\\u2800\\u601A\\u6800\\034\\u6800\\030\\u6800\\033\\u6800\\034\\000\\u7005\" + \"\\uE800\\035\\u6800\\031\\u4800\\u1010\\u6800\\034\\u6800\\033\\u2800\\034\\u2800\\031\\u1800\" + \"\\u060B\\u1800\\u060B\\u6800\\033\\u07FD\\u7002\\u6800\\033\\u1800\\u050B\\000\\u7005\\uE800\" + \"\\036\\u6800\\u080B\\u6800\\u080B\\u6800\\u080B\\u6800\\030\\202\\u7001\\202\\u7001\\202\" + \"\\u7001\\u6800\\031\\202\\u7001\\u07FD\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\u6800\" + \"\\031\\201\\u7002\\u061D\\u7002\\006\\u7001\\005\\u7002\\u07FF\\uF001\\u03A1\\u7002\\000\" + \"\\u7002\\006\\u7001\\005\\u7002\\006\\u7001\\005\\u7002\\u07FD\\u7002\\u061E\\u7001\\006\" + \"\\u7001\\u04F5\\u7002\\u034A\\u7001\\u033A\\u7001\\006\\u7001\\005\\u7002\\u0336\\u7001\" + \"\\u0336\\u7001\\006\\u7001\\005\\u7002\\000\\u7002\\u013E\\u7001\\u032A\\u7001\\u032E\\u7001\" + \"\\006\\u7001\\u033E\\u7001\\u067D\\u7002\\u034E\\u7001\\u0346\\u7001\\u0575\\u7002\\000\" + \"\\u7002\\u034E\\u7001\\u0356\\u7001\\u05F9\\u7002\\u035A\\u7001\\u036A\\u7001\\006\\u7001\" + \"\\005\\u7002\\u036A\\u7001\\000\\u7002\\000\\u7002\\005\\u7002\\u0366\\u7001\\u0366\\u7001\" + \"\\006\\u7001\\005\\u7002\\u036E\\u7001\\000\\u7002\\000\\u7005\\000\\u7002\\u0721\\u7002\" + \"\\000\\u7005\\000\\u7005\\012\\uF001\\007\\uF003\\011\\uF002\\012\\uF001\\007\\uF003\\011\" + \"\\uF002\\011\\uF002\\006\\u7001\\005\\u7002\\u013D\\u7002\\u07FD\\u7002\\012\\uF001\\u067E\" + \"\\u7001\\u0722\\u7001\\u05FA\\u7001\\000\\u7002\\u07FE\\u7001\\006\\u7001\\005\\u7002\\u0576\" + \"\\u7001\\u07FE\\u7001\\u07FD\\u7002\\u07FD\\u7002\\006\\u7001\\005\\u7002\\u04F6\\u7001\" + \"\\u0116\\u7001\\u011E\\u7001\\u07FD\\u7002\\u07FD\\u7002\\u07FD\\u7002\\u0349\\u7002\\u0339\" + \"\\u7002\\000\\u7002\\u0335\\u7002\\u0335\\u7002\\000\\u7002\\u0329\\u7002\\000\\u7002\\u032D\" + \"\\u7002\\u0335\\u7002\\000\\u7002\\000\\u7002\\u033D\\u7002\\000\\u7002\\u07FD\\u7002\\u07FD\" + \"\\u7002\\000\\u7002\\u0345\\u7002\\u034D\\u7002\\000\\u7002\\u034D\\u7002\\u0355\\u7002\" + \"\\000\\u7002\\000\\u7002\\u0359\\u7002\\u0369\\u7002\\000\\u7002\\000\\u7002\\u0369\\u7002\" + \"\\u0369\\u7002\\u0115\\u7002\\u0365\\u7002\\u0365\\u7002\\u011D\\u7002\\000\\u7002\\u036D\" + \"\\u7002\\000\\u7002\\000\\u7005\\000\\u7002\\000\\u7004\\000\\u7004\\000\\u7004\\u6800\\u7004\" + \"\\u6800\\u7004\\000\\u7004\\000\\u7004\\000\\u7004\\u6800\\033\\u6800\\033\\u6800\\u7004\" + \"\\u6800\\u7004\\000\\u7004\\u6800\\033\\u6800\\u7004\\u6800\\033\\000\\u7004\\u6800\\033\" + \"\\u4000\\u3006\\u4000\\u3006\\u4000\\u3006\\u46B1\\u3006\\u7800\\000\\u7800\\000\\000\\u7004\" + \"\\u05F9\\u7002\\u05F9\\u7002\\u05F9\\u7002\\u6800\\030\\u7800\\000\\232\\u7001\\u6800\\030\" + \"\\226\\u7001\\226\\u7001\\226\\u7001\\u7800\\000\\u0102\\u7001\\u7800\\000\\376\\u7001\\376\" + \"\\u7001\\u07FD\\u7002\\202\\u7001\\u7800\\000\\202\\u7001\\231\\u7002\\225\\u7002\\225\\u7002\" + \"\\225\\u7002\\u07FD\\u7002\\201\\u7002\\175\\u7002\\201\\u7002\\u0101\\u7002\\375\\u7002\" + \"\\375\\u7002\\042\\u7001\\371\\u7002\\345\\u7002\\000\\u7001\\000\\u7001\\000\\u7001\\275\" + \"\\u7002\\331\\u7002\\041\\u7002\\u0159\\u7002\\u0141\\u7002\\u07E5\\u7002\\000\\u7002\\u0712\" + \"\\u7001\\u0181\\u7002\\u6800\\031\\006\\u7001\\005\\u7002\\u07E6\\u7001\\000\\u7002\\u05FA\" + \"\\u7001\\u05FA\\u7001\\u05FA\\u7001\\u0142\\u7001\\u0142\\u7001\\u0141\\u7002\\u0141\\u7002\" + \"\\000\\034\\u4000\\u3006\\u4000\\007\\u4000\\007\\076\\u7001\\006\\u7001\\005\\u7002\\075\" + \"\\u7002\\u7800\\000\\302\\u7001\\302\\u7001\\302\\u7001\\302\\u7001\\u7800\\000\\u7800\\000\" + \"\\000\\u7004\\000\\030\\000\\030\\u7800\\000\\301\\u7002\\301\\u7002\\301\\u7002\\301\\u7002\" + \"\\u07FD\\u7002\\u7800\\000\\000\\030\\u6800\\024\\u7800\\000\\u7800\\000\\u2800\\u601A\\u7800\" + \"\\000\\u4000\\u3006\\u4000\\u3006\\u4000\\u3006\\u0800\\024\\u4000\\u3006\\u0800\\030\\u4000\" + \"\\u3006\\u4000\\u3006\\u0800\\030\\u0800\\u7005\\u0800\\u7005\\u0800\\u7005\\u7800\\000\" + \"\\u0800\\u7005\\u0800\\030\\u0800\\030\\u7800\\000\\u3000\\u1010\\u3000\\u1010\\u3000\\u1010\" + \"\\u7800\\000\\u6800\\031\\u6800\\031\\u1000\\031\\u2800\\030\\u2800\\030\\u1000\\u601A\\u3800\" + \"\\030\\u1000\\030\\u6800\\034\\u6800\\034\\u4000\\u3006\\u1000\\030\\u1000\\030\\u1000\\030\" + \"\\u1000\\u7005\\u1000\\u7005\\u1000\\u7004\\u1000\\u7005\\u1000\\u7005\\u4000\\u3006\\u4000\" + \"\\u3006\\u4000\\u3006\\u3000\\u3409\\u3000\\u3409\\u2800\\030\\u3000\\030\\u3000\\030\\u1000\" + \"\\030\\u4000\\u3006\\u1000\\u7005\\u1000\\030\\u1000\\u7005\\u4000\\u3006\\u3000\\u1010\" + \"\\u6800\\034\\u4000\\u3006\\u4000\\u3006\\u1000\\u7004\\u1000\\u7004\\u4000\\u3006\\u4000\" + \"\\u3006\\u6800\\034\\u1000\\u7005\\u1000\\034\\u1000\\034\\u1000\\u7005\\u7800\\000\\u1000\" + \"\\u1010\\u4000\\u3006\\u7800\\000\\u7800\\000\\u1000\\u7005\\u0800\\u3409\\u0800\\u3409\" + \"\\u0800\\u7005\\u4000\\u3006\\u0800\\u7004\\u0800\\u7004\\u0800\\u7004\\u7800\\000\\u0800\" + \"\\u7004\\u4000\\u3006\\u4000\\u3006\\u4000\\u3006\\u0800\\030\\u0800\\030\\u1000\\u7005\" + \"\\u7800\\000\\u4000\\u3006\\u7800\\000\\u4000\\u3006\\000\\u3008\\u4000\\u3006\\000\\u7005\" + \"\\000\\u3008\\000\\u3008\\000\\u3008\\u4000\\u3006\\000\\u3008\\u4000\\u3006\\000\\u7005\" + \"\\u4000\\u3006\\000\\u3749\\000\\u3749\\000\\030\\000\\u7004\\u7800\\000\\000\\u7005\\u7800\" + \"\\000\\u4000\\u3006\\000\\u7005\\u7800\\000\\u7800\\000\\000\\u3008\\000\\u3008\\u7800\\000\" + \"\\000\\u080B\\000\\u080B\\000\\u080B\\000\\u06EB\\000\\034\\u2800\\u601A\\000\\u7005\\u4000\" + \"\\u3006\\000\\030\\u2800\\u601A\\000\\034\\000\\u7005\\u4000\\u3006\\000\\u7005\\000\\u074B\" + \"\\000\\u080B\\000\\u080B\\u6800\\034\\u6800\\034\\u2800\\u601A\\u6800\\034\\u7800\\000\\u6800\" + \"\\u050B\\u6800\\u050B\\u6800\\u04AB\\u6800\\u04AB\\u6800\\u04AB\\000\\034\\000\\u3008\\000\" + \"\\u3006\\000\\u3006\\000\\u3008\\u7800\\000\\000\\034\\000\\030\\u7800\\000\\000\\u7004\\u4000\" + \"\\u3006\\u4000\\u3006\\000\\030\\000\\u3609\\000\\u3609\\000\\u7004\\u7800\\000\\000\\u7005\" + \"\\000\\034\\000\\034\\000\\034\\000\\030\\000\\034\\000\\u3409\\000\\u3409\\000\\u3008\\000\" + \"\\u3008\\u4000\\u3006\\000\\034\\000\\034\\u7800\\000\\000\\034\\000\\030\\000\\u7005\\000\" + \"\\u3008\\u4000\\u3006\\000\\u3008\\000\\u3008\\000\\u3008\\000\\u3008\\000\\u7005\\u4000\" + \"\\u3006\\000\\u3008\\000\\u3008\\u4000\\u3006\\000\\u7005\\000\\u3008\\u07FE\\u7001\\u07FE\" + \"\\u7001\\u7800\\000\\u07FE\\u7001\\000\\u7005\\000\\030\\000\\u7004\\000\\u7005\\000\\030\" + \"\\000\\u070B\\000\\u070B\\000\\u070B\\000\\u070B\\000\\u042B\\000\\u054B\\000\\u080B\\000\" + \"\\u080B\\u7800\\000\\u6800\\024\\000\\u7005\\000\\030\\000\\u7005\\u6000\\u400C\\000\\u7005\" + \"\\000\\u7005\\uE800\\025\\uE800\\026\\u7800\\000\\000\\u746A\\000\\u746A\\000\\u746A\\u7800\" + \"\\000\\u6800\\u060B\\u6800\\u060B\\u6800\\024\\u6800\\030\\u6800\\030\\u4000\\u3006\\u6000\" + \"\\u400C\\u7800\\000\\000\\u7005\\000\\u7004\\000\\u3008\\000\\u7005\\000\\u04EB\\u7800\\000\" + \"\\u4000\\u3006\\000\\u3008\\000\\u7004\\000\\u7002\\000\\u7004\\u07FD\\u7002\\000\\u7002\" + \"\\000\\u7004\\u07FD\\u7002\\355\\u7002\\u07FE\\u7001\\000\\u7002\\u07E1\\u7002\\u07E1\\u7002\" + \"\\u07E2\\u7001\\u07E2\\u7001\\u07FD\\u7002\\u07E1\\u7002\\u7800\\000\\u07E2\\u7001\\u06D9\" + \"\\u7002\\u06D9\\u7002\\u06A9\\u7002\\u06A9\\u7002\\u0671\\u7002\\u0671\\u7002\\u0601\\u7002\" + \"\\u0601\\u7002\\u0641\\u7002\\u0641\\u7002\\u0609\\u7002\\u0609\\u7002\\u07FF\\uF003\\u07FF\" + \"\\uF003\\u07FD\\u7002\\u7800\\000\\u06DA\\u7001\\u06DA\\u7001\\u07FF\\uF003\\u6800\\033\" + \"\\u07FD\\u7002\\u6800\\033\\u06AA\\u7001\\u06AA\\u7001\\u0672\\u7001\\u0672\\u7001\\u7800\" + \"\\000\\u6800\\033\\u07FD\\u7002\\u07E5\\u7002\\u0642\\u7001\\u0642\\u7001\\u07E6\\u7001\" + \"\\u6800\\033\\u0602\\u7001\\u0602\\u7001\\u060A\\u7001\\u060A\\u7001\\u6800\\033\\u7800\" + \"\\000\\u6000\\u400C\\u6000\\u400C\\u6000\\u400C\\u6000\\014\\u6000\\u400C\\u4800\\u1010\" + \"\\u4800\\u1010\\u4800\\u1010\\000\\u1010\\u0800\\u1010\\u6800\\024\\u6800\\024\\u6800\\035\" + \"\\u6800\\036\\u6800\\025\\u6800\\035\\u6000\\u400D\\u5000\\u400E\\u7800\\u1010\\u7800\\u1010\" + \"\\u7800\\u1010\\u3800\\014\\u2800\\030\\u2800\\030\\u2800\\030\\u6800\\030\\u6800\\030\\uE800\" + \"\\035\\uE800\\036\\u6800\\030\\u6800\\030\\u6800\\u5017\\u6800\\u5017\\u6800\\030\\u3800\" + \"\\031\\uE800\\025\\uE800\\026\\u6800\\030\\u6800\\031\\u6800\\030\\u6800\\030\\u6000\\u400C\" + \"\\u4800\\u1010\\u7800\\000\\u1800\\u060B\\000\\u7004\\u2000\\031\\u2000\\031\\u6800\\031\" + \"\\uE800\\025\\uE800\\026\\000\\u7004\\u1800\\u040B\\u1800\\u040B\\000\\u7004\\u7800\\000\" + \"\\u4000\\u3006\\u4000\\007\\u4000\\007\\u4000\\u3006\\000\\u7001\\u6800\\034\\u6800\\034\" + \"\\000\\u7001\\000\\u7002\\000\\u7001\\000\\u7001\\000\\u7002\\u6800\\031\\000\\u7001\\u07FE\" + \"\\u7001\\u6800\\034\\u2800\\034\\000\\u7002\\162\\u7001\\000\\u7001\\u6800\\034\\u6800\\031\" + \"\\161\\u7002\\000\\034\\102\\u742A\\102\\u742A\\102\\u780A\\102\\u780A\\101\\u762A\\101\\u762A\" + \"\\101\\u780A\\101\\u780A\\000\\u780A\\000\\u780A\\000\\u780A\\006\\u7001\\005\\u7002\\000\" + \"\\u742A\\000\\u780A\\u6800\\u06EB\\u6800\\031\\u6800\\034\\u6800\\031\\uE800\\031\\uE800\" + \"\\031\\uE800\\031\\u2000\\031\\u2800\\031\\u6800\\034\\uE800\\025\\uE800\\026\\u6800\\034\" + \"\\000\\034\\u6800\\034\\u6800\\034\\000\\034\\u6800\\u042B\\u6800\\u042B\\u6800\\u05AB\\u6800\" + \"\\u05AB\\u1800\\u072B\\u1800\\u072B\\152\\034\\152\\034\\151\\034\\151\\034\\u6800\\u06CB\" + \"\\u6800\\u040B\\u6800\\u040B\\u6800\\u040B\\u6800\\u040B\\u6800\\u058B\\u6800\\u058B\\u6800\" + \"\\u058B\\u6800\\u058B\\u6800\\u042B\\u7800\\000\\u6800\\034\\u6800\\u056B\\u6800\\u056B\" + \"\\u6800\\u06EB\\u6800\\u06EB\\uE800\\031\\uE800\\025\\uE800\\026\\u6800\\031\\uE800\\026\" + \"\\uE800\\025\\u6800\\031\\u7800\\000\\301\\u7002\\u7800\\000\\005\\u7002\\u07FE\\u7001\\000\" + \"\\u7002\\u6800\\034\\u6800\\034\\006\\u7001\\005\\u7002\\u4000\\u3006\\u7800\\000\\u6800\" + \"\\030\\u6800\\030\\u6800\\u080B\\u7800\\000\\u07FD\\u7002\\uE800\\035\\uE800\\036\\u6800\" + \"\\030\\u6800\\024\\u6800\\030\\u6800\\u7004\\u6800\\034\\000\\u7004\\000\\u7005\\000\\u772A\" + \"\\u6800\\024\\u6800\\025\\u6800\\026\\u6800\\026\\u6800\\034\\000\\u740A\\000\\u740A\\000\" + \"\\u740A\\u6800\\024\\000\\u7004\\000\\u764A\\000\\u776A\\000\\u748A\\000\\u7004\\000\\u7005\" + \"\\u6800\\030\\u4000\\u3006\\u6800\\033\\u6800\\033\\000\\u7004\\000\\u05EB\\000\\u05EB\\000\" + \"\\u042B\\000\\u042B\\000\\u044B\\000\\u056B\\000\\u068B\\000\\u080B\\u6800\\034\\u6800\\u048B\" + \"\\u6800\\u048B\\u6800\\u048B\\000\\034\\u6800\\u080B\\000\\u7005\\000\\u7005\\000\\u7005\" + \"\\u7800\\000\\000\\u7004\\u6800\\030\\u4000\\007\\u6800\\030\\000\\u776A\\000\\u776A\\000\" + \"\\u776A\\000\\u762A\\u6800\\033\\u6800\\u7004\\u6800\\u7004\\000\\033\\000\\033\\006\\u7001\" + \"\\000\\u7002\\u7800\\000\\u07FE\\u7001\\u7800\\000\\u2800\\u601A\\u2800\\034\\000\\u3008\" + \"\\000\\030\\000\\u7004\\000\\u3008\\000\\u3008\\000\\030\\000\\023\\000\\023\\000\\022\\000\" + \"\\022\\000\\u7005\\000\\u7705\\000\\u7005\\000\\u76E5\\000\\u7545\\000\\u7005\\000\\u75C5\" + \"\\000\\u7005\\000\\u7005\\000\\u76A5\\000\\u7005\\000\\u7665\\000\\u7005\\000\\u75A5\\u7800\" + \"\\000\\u0800\\u7005\\u4000\\u3006\\u0800\\u7005\\u0800\\u7005\\u2000\\031\\u1000\\033\\u1000\" + \"\\033\\u6800\\025\\u6800\\026\\u1000\\u601A\\u6800\\034\\u6800\\030\\u6800\\025\\u6800\\026\" + \"\\u6800\\030\\u6800\\024\\u6800\\u5017\\u6800\\u5017\\u6800\\025\\u6800\\026\\u6800\\025\" + \"\\u6800\\u5017\\u6800\\u5017\\u3800\\030\\u7800\\000\\u6800\\030\\u3800\\030\\u6800\\024\" + \"\\uE800\\025\\uE800\\026\\u2800\\030\\u2000\\031\\u2000\\024\\u6800\\030\\u2800\\u601A\\u7800\" + \"\\000\\u4800\\u1010\\u6800\\031\\u6800\\033\\u2800\\u601A\\u7800\\000\\u7800\\000\\u6800\" + \"\\u1010\\u6800\\u1010\\u6800\\u1010\";","field_name":"A_DATA","field_type":"java.lang.String","full_declaration":"static final java.lang.String A_DATA = \"\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u5800\\u400F\\u5000\\u400F\\u5800\\u400F\\u6000\" + \"\\u400F\\u5000\\u400F\\u5000\\u400F\\u5000\\u400F\\u6000\\u400C\\u6800\\030\\u6800\\030\" + \"\\u2800\\030\\u2800\\u601A\\u2800\\030\\u6800\\030\\u6800\\030\\uE800\\025\\uE800\\026\\u6800\" + \"\\030\\u2000\\031\\u3800\\030\\u2000\\024\\u3800\\030\\u3800\\030\\u1800\\u3609\\u1800\\u3609\" + \"\\u3800\\030\\u6800\\030\\uE800\\031\\u6800\\031\\uE800\\031\\u6800\\030\\u6800\\030\\202\" + \"\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\\uE800\\025\\u6800\\030\\uE800\\026\\u6800\\033\" + \"\\u6800\\u5017\\u6800\\033\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\uE800\\025\\u6800\" + \"\\031\\uE800\\026\\u6800\\031\\u4800\\u100F\\u4800\\u100F\\u5000\\u100F\\u3800\\014\\u6800\" + \"\\030\\u2800\\u601A\\u2800\\u601A\\u6800\\034\\u6800\\030\\u6800\\033\\u6800\\034\\000\\u7005\" + \"\\uE800\\035\\u6800\\031\\u4800\\u1010\\u6800\\034\\u6800\\033\\u2800\\034\\u2800\\031\\u1800\" + \"\\u060B\\u1800\\u060B\\u6800\\033\\u07FD\\u7002\\u6800\\033\\u1800\\u050B\\000\\u7005\\uE800\" + \"\\036\\u6800\\u080B\\u6800\\u080B\\u6800\\u080B\\u6800\\030\\202\\u7001\\202\\u7001\\202\" + \"\\u7001\\u6800\\031\\202\\u7001\\u07FD\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\u6800\" + \"\\031\\201\\u7002\\u061D\\u7002\\006\\u7001\\005\\u7002\\u07FF\\uF001\\u03A1\\u7002\\000\" + \"\\u7002\\006\\u7001\\005\\u7002\\006\\u7001\\005\\u7002\\u07FD\\u7002\\u061E\\u7001\\006\" + \"\\u7001\\u04F5\\u7002\\u034A\\u7001\\u033A\\u7001\\006\\u7001\\005\\u7002\\u0336\\u7001\" + \"\\u0336\\u7001\\006\\u7001\\005\\u7002\\000\\u7002\\u013E\\u7001\\u032A\\u7001\\u032E\\u7001\" + \"\\006\\u7001\\u033E\\u7001\\u067D\\u7002\\u034E\\u7001\\u0346\\u7001\\u0575\\u7002\\000\" + \"\\u7002\\u034E\\u7001\\u0356\\u7001\\u05F9\\u7002\\u035A\\u7001\\u036A\\u7001\\006\\u7001\" + \"\\005\\u7002\\u036A\\u7001\\000\\u7002\\000\\u7002\\005\\u7002\\u0366\\u7001\\u0366\\u7001\" + \"\\006\\u7001\\005\\u7002\\u036E\\u7001\\000\\u7002\\000\\u7005\\000\\u7002\\u0721\\u7002\" + \"\\000\\u7005\\000\\u7005\\012\\uF001\\007\\uF003\\011\\uF002\\012\\uF001\\007\\uF003\\011\" + \"\\uF002\\011\\uF002\\006\\u7001\\005\\u7002\\u013D\\u7002\\u07FD\\u7002\\012\\uF001\\u067E\" + \"\\u7001\\u0722\\u7001\\u05FA\\u7001\\000\\u7002\\u07FE\\u7001\\006\\u7001\\005\\u7002\\u0576\" + \"\\u7001\\u07FE\\u7001\\u07FD\\u7002\\u07FD\\u7002\\006\\u7001\\005\\u7002\\u04F6\\u7001\" + \"\\u0116\\u7001\\u011E\\u7001\\u07FD\\u7002\\u07FD\\u7002\\u07FD\\u7002\\u0349\\u7002\\u0339\" + \"\\u7002\\000\\u7002\\u0335\\u7002\\u0335\\u7002\\000\\u7002\\u0329\\u7002\\000\\u7002\\u032D\" + \"\\u7002\\u0335\\u7002\\000\\u7002\\000\\u7002\\u033D\\u7002\\000\\u7002\\u07FD\\u7002\\u07FD\" + \"\\u7002\\000\\u7002\\u0345\\u7002\\u034D\\u7002\\000\\u7002\\u034D\\u7002\\u0355\\u7002\" + \"\\000\\u7002\\000\\u7002\\u0359\\u7002\\u0369\\u7002\\000\\u7002\\000\\u7002\\u0369\\u7002\" + \"\\u0369\\u7002\\u0115\\u7002\\u0365\\u7002\\u0365\\u7002\\u011D\\u7002\\000\\u7002\\u036D\" + \"\\u7002\\000\\u7002\\000\\u7005\\000\\u7002\\000\\u7004\\000\\u7004\\000\\u7004\\u6800\\u7004\" + \"\\u6800\\u7004\\000\\u7004\\000\\u7004\\000\\u7004\\u6800\\033\\u6800\\033\\u6800\\u7004\" + \"\\u6800\\u7004\\000\\u7004\\u6800\\033\\u6800\\u7004\\u6800\\033\\000\\u7004\\u6800\\033\" + \"\\u4000\\u3006\\u4000\\u3006\\u4000\\u3006\\u46B1\\u3006\\u7800\\000\\u7800\\000\\000\\u7004\" + \"\\u05F9\\u7002\\u05F9\\u7002\\u05F9\\u7002\\u6800\\030\\u7800\\000\\232\\u7001\\u6800\\030\" + \"\\226\\u7001\\226\\u7001\\226\\u7001\\u7800\\000\\u0102\\u7001\\u7800\\000\\376\\u7001\\376\" + \"\\u7001\\u07FD\\u7002\\202\\u7001\\u7800\\000\\202\\u7001\\231\\u7002\\225\\u7002\\225\\u7002\" + \"\\225\\u7002\\u07FD\\u7002\\201\\u7002\\175\\u7002\\201\\u7002\\u0101\\u7002\\375\\u7002\" + \"\\375\\u7002\\042\\u7001\\371\\u7002\\345\\u7002\\000\\u7001\\000\\u7001\\000\\u7001\\275\" + \"\\u7002\\331\\u7002\\041\\u7002\\u0159\\u7002\\u0141\\u7002\\u07E5\\u7002\\000\\u7002\\u0712\" + \"\\u7001\\u0181\\u7002\\u6800\\031\\006\\u7001\\005\\u7002\\u07E6\\u7001\\000\\u7002\\u05FA\" + \"\\u7001\\u05FA\\u7001\\u05FA\\u7001\\u0142\\u7001\\u0142\\u7001\\u0141\\u7002\\u0141\\u7002\" + \"\\000\\034\\u4000\\u3006\\u4000\\007\\u4000\\007\\076\\u7001\\006\\u7001\\005\\u7002\\075\" + \"\\u7002\\u7800\\000\\302\\u7001\\302\\u7001\\302\\u7001\\302\\u7001\\u7800\\000\\u7800\\000\" + \"\\000\\u7004\\000\\030\\000\\030\\u7800\\000\\301\\u7002\\301\\u7002\\301\\u7002\\301\\u7002\" + \"\\u07FD\\u7002\\u7800\\000\\000\\030\\u6800\\024\\u7800\\000\\u7800\\000\\u2800\\u601A\\u7800\" + \"\\000\\u4000\\u3006\\u4000\\u3006\\u4000\\u3006\\u0800\\024\\u4000\\u3006\\u0800\\030\\u4000\" + \"\\u3006\\u4000\\u3006\\u0800\\030\\u0800\\u7005\\u0800\\u7005\\u0800\\u7005\\u7800\\000\" + \"\\u0800\\u7005\\u0800\\030\\u0800\\030\\u7800\\000\\u3000\\u1010\\u3000\\u1010\\u3000\\u1010\" + \"\\u7800\\000\\u6800\\031\\u6800\\031\\u1000\\031\\u2800\\030\\u2800\\030\\u1000\\u601A\\u3800\" + \"\\030\\u1000\\030\\u6800\\034\\u6800\\034\\u4000\\u3006\\u1000\\030\\u1000\\030\\u1000\\030\" + \"\\u1000\\u7005\\u1000\\u7005\\u1000\\u7004\\u1000\\u7005\\u1000\\u7005\\u4000\\u3006\\u4000\" + \"\\u3006\\u4000\\u3006\\u3000\\u3409\\u3000\\u3409\\u2800\\030\\u3000\\030\\u3000\\030\\u1000\" + \"\\030\\u4000\\u3006\\u1000\\u7005\\u1000\\030\\u1000\\u7005\\u4000\\u3006\\u3000\\u1010\" + \"\\u6800\\034\\u4000\\u3006\\u4000\\u3006\\u1000\\u7004\\u1000\\u7004\\u4000\\u3006\\u4000\" + \"\\u3006\\u6800\\034\\u1000\\u7005\\u1000\\034\\u1000\\034\\u1000\\u7005\\u7800\\000\\u1000\" + \"\\u1010\\u4000\\u3006\\u7800\\000\\u7800\\000\\u1000\\u7005\\u0800\\u3409\\u0800\\u3409\" + \"\\u0800\\u7005\\u4000\\u3006\\u0800\\u7004\\u0800\\u7004\\u0800\\u7004\\u7800\\000\\u0800\" + \"\\u7004\\u4000\\u3006\\u4000\\u3006\\u4000\\u3006\\u0800\\030\\u0800\\030\\u1000\\u7005\" + \"\\u7800\\000\\u4000\\u3006\\u7800\\000\\u4000\\u3006\\000\\u3008\\u4000\\u3006\\000\\u7005\" + \"\\000\\u3008\\000\\u3008\\000\\u3008\\u4000\\u3006\\000\\u3008\\u4000\\u3006\\000\\u7005\" + \"\\u4000\\u3006\\000\\u3749\\000\\u3749\\000\\030\\000\\u7004\\u7800\\000\\000\\u7005\\u7800\" + \"\\000\\u4000\\u3006\\000\\u7005\\u7800\\000\\u7800\\000\\000\\u3008\\000\\u3008\\u7800\\000\" + \"\\000\\u080B\\000\\u080B\\000\\u080B\\000\\u06EB\\000\\034\\u2800\\u601A\\000\\u7005\\u4000\" + \"\\u3006\\000\\030\\u2800\\u601A\\000\\034\\000\\u7005\\u4000\\u3006\\000\\u7005\\000\\u074B\" + \"\\000\\u080B\\000\\u080B\\u6800\\034\\u6800\\034\\u2800\\u601A\\u6800\\034\\u7800\\000\\u6800\" + \"\\u050B\\u6800\\u050B\\u6800\\u04AB\\u6800\\u04AB\\u6800\\u04AB\\000\\034\\000\\u3008\\000\" + \"\\u3006\\000\\u3006\\000\\u3008\\u7800\\000\\000\\034\\000\\030\\u7800\\000\\000\\u7004\\u4000\" + \"\\u3006\\u4000\\u3006\\000\\030\\000\\u3609\\000\\u3609\\000\\u7004\\u7800\\000\\000\\u7005\" + \"\\000\\034\\000\\034\\000\\034\\000\\030\\000\\034\\000\\u3409\\000\\u3409\\000\\u3008\\000\" + \"\\u3008\\u4000\\u3006\\000\\034\\000\\034\\u7800\\000\\000\\034\\000\\030\\000\\u7005\\000\" + \"\\u3008\\u4000\\u3006\\000\\u3008\\000\\u3008\\000\\u3008\\000\\u3008\\000\\u7005\\u4000\" + \"\\u3006\\000\\u3008\\000\\u3008\\u4000\\u3006\\000\\u7005\\000\\u3008\\u07FE\\u7001\\u07FE\" + \"\\u7001\\u7800\\000\\u07FE\\u7001\\000\\u7005\\000\\030\\000\\u7004\\000\\u7005\\000\\030\" + \"\\000\\u070B\\000\\u070B\\000\\u070B\\000\\u070B\\000\\u042B\\000\\u054B\\000\\u080B\\000\" + \"\\u080B\\u7800\\000\\u6800\\024\\000\\u7005\\000\\030\\000\\u7005\\u6000\\u400C\\000\\u7005\" + \"\\000\\u7005\\uE800\\025\\uE800\\026\\u7800\\000\\000\\u746A\\000\\u746A\\000\\u746A\\u7800\" + \"\\000\\u6800\\u060B\\u6800\\u060B\\u6800\\024\\u6800\\030\\u6800\\030\\u4000\\u3006\\u6000\" + \"\\u400C\\u7800\\000\\000\\u7005\\000\\u7004\\000\\u3008\\000\\u7005\\000\\u04EB\\u7800\\000\" + \"\\u4000\\u3006\\000\\u3008\\000\\u7004\\000\\u7002\\000\\u7004\\u07FD\\u7002\\000\\u7002\" + \"\\000\\u7004\\u07FD\\u7002\\355\\u7002\\u07FE\\u7001\\000\\u7002\\u07E1\\u7002\\u07E1\\u7002\" + \"\\u07E2\\u7001\\u07E2\\u7001\\u07FD\\u7002\\u07E1\\u7002\\u7800\\000\\u07E2\\u7001\\u06D9\" + \"\\u7002\\u06D9\\u7002\\u06A9\\u7002\\u06A9\\u7002\\u0671\\u7002\\u0671\\u7002\\u0601\\u7002\" + \"\\u0601\\u7002\\u0641\\u7002\\u0641\\u7002\\u0609\\u7002\\u0609\\u7002\\u07FF\\uF003\\u07FF\" + \"\\uF003\\u07FD\\u7002\\u7800\\000\\u06DA\\u7001\\u06DA\\u7001\\u07FF\\uF003\\u6800\\033\" + \"\\u07FD\\u7002\\u6800\\033\\u06AA\\u7001\\u06AA\\u7001\\u0672\\u7001\\u0672\\u7001\\u7800\" + \"\\000\\u6800\\033\\u07FD\\u7002\\u07E5\\u7002\\u0642\\u7001\\u0642\\u7001\\u07E6\\u7001\" + \"\\u6800\\033\\u0602\\u7001\\u0602\\u7001\\u060A\\u7001\\u060A\\u7001\\u6800\\033\\u7800\" + \"\\000\\u6000\\u400C\\u6000\\u400C\\u6000\\u400C\\u6000\\014\\u6000\\u400C\\u4800\\u1010\" + \"\\u4800\\u1010\\u4800\\u1010\\000\\u1010\\u0800\\u1010\\u6800\\024\\u6800\\024\\u6800\\035\" + \"\\u6800\\036\\u6800\\025\\u6800\\035\\u6000\\u400D\\u5000\\u400E\\u7800\\u1010\\u7800\\u1010\" + \"\\u7800\\u1010\\u3800\\014\\u2800\\030\\u2800\\030\\u2800\\030\\u6800\\030\\u6800\\030\\uE800\" + \"\\035\\uE800\\036\\u6800\\030\\u6800\\030\\u6800\\u5017\\u6800\\u5017\\u6800\\030\\u3800\" + \"\\031\\uE800\\025\\uE800\\026\\u6800\\030\\u6800\\031\\u6800\\030\\u6800\\030\\u6000\\u400C\" + \"\\u4800\\u1010\\u7800\\000\\u1800\\u060B\\000\\u7004\\u2000\\031\\u2000\\031\\u6800\\031\" + \"\\uE800\\025\\uE800\\026\\000\\u7004\\u1800\\u040B\\u1800\\u040B\\000\\u7004\\u7800\\000\" + \"\\u4000\\u3006\\u4000\\007\\u4000\\007\\u4000\\u3006\\000\\u7001\\u6800\\034\\u6800\\034\" + \"\\000\\u7001\\000\\u7002\\000\\u7001\\000\\u7001\\000\\u7002\\u6800\\031\\000\\u7001\\u07FE\" + \"\\u7001\\u6800\\034\\u2800\\034\\000\\u7002\\162\\u7001\\000\\u7001\\u6800\\034\\u6800\\031\" + \"\\161\\u7002\\000\\034\\102\\u742A\\102\\u742A\\102\\u780A\\102\\u780A\\101\\u762A\\101\\u762A\" + \"\\101\\u780A\\101\\u780A\\000\\u780A\\000\\u780A\\000\\u780A\\006\\u7001\\005\\u7002\\000\" + \"\\u742A\\000\\u780A\\u6800\\u06EB\\u6800\\031\\u6800\\034\\u6800\\031\\uE800\\031\\uE800\" + \"\\031\\uE800\\031\\u2000\\031\\u2800\\031\\u6800\\034\\uE800\\025\\uE800\\026\\u6800\\034\" + \"\\000\\034\\u6800\\034\\u6800\\034\\000\\034\\u6800\\u042B\\u6800\\u042B\\u6800\\u05AB\\u6800\" + \"\\u05AB\\u1800\\u072B\\u1800\\u072B\\152\\034\\152\\034\\151\\034\\151\\034\\u6800\\u06CB\" + \"\\u6800\\u040B\\u6800\\u040B\\u6800\\u040B\\u6800\\u040B\\u6800\\u058B\\u6800\\u058B\\u6800\" + \"\\u058B\\u6800\\u058B\\u6800\\u042B\\u7800\\000\\u6800\\034\\u6800\\u056B\\u6800\\u056B\" + \"\\u6800\\u06EB\\u6800\\u06EB\\uE800\\031\\uE800\\025\\uE800\\026\\u6800\\031\\uE800\\026\" + \"\\uE800\\025\\u6800\\031\\u7800\\000\\301\\u7002\\u7800\\000\\005\\u7002\\u07FE\\u7001\\000\" + \"\\u7002\\u6800\\034\\u6800\\034\\006\\u7001\\005\\u7002\\u4000\\u3006\\u7800\\000\\u6800\" + \"\\030\\u6800\\030\\u6800\\u080B\\u7800\\000\\u07FD\\u7002\\uE800\\035\\uE800\\036\\u6800\" + \"\\030\\u6800\\024\\u6800\\030\\u6800\\u7004\\u6800\\034\\000\\u7004\\000\\u7005\\000\\u772A\" + \"\\u6800\\024\\u6800\\025\\u6800\\026\\u6800\\026\\u6800\\034\\000\\u740A\\000\\u740A\\000\" + \"\\u740A\\u6800\\024\\000\\u7004\\000\\u764A\\000\\u776A\\000\\u748A\\000\\u7004\\000\\u7005\" + \"\\u6800\\030\\u4000\\u3006\\u6800\\033\\u6800\\033\\000\\u7004\\000\\u05EB\\000\\u05EB\\000\" + \"\\u042B\\000\\u042B\\000\\u044B\\000\\u056B\\000\\u068B\\000\\u080B\\u6800\\034\\u6800\\u048B\" + \"\\u6800\\u048B\\u6800\\u048B\\000\\034\\u6800\\u080B\\000\\u7005\\000\\u7005\\000\\u7005\" + \"\\u7800\\000\\000\\u7004\\u6800\\030\\u4000\\007\\u6800\\030\\000\\u776A\\000\\u776A\\000\" + \"\\u776A\\000\\u762A\\u6800\\033\\u6800\\u7004\\u6800\\u7004\\000\\033\\000\\033\\006\\u7001\" + \"\\000\\u7002\\u7800\\000\\u07FE\\u7001\\u7800\\000\\u2800\\u601A\\u2800\\034\\000\\u3008\" + \"\\000\\030\\000\\u7004\\000\\u3008\\000\\u3008\\000\\030\\000\\023\\000\\023\\000\\022\\000\" + \"\\022\\000\\u7005\\000\\u7705\\000\\u7005\\000\\u76E5\\000\\u7545\\000\\u7005\\000\\u75C5\" + \"\\000\\u7005\\000\\u7005\\000\\u76A5\\000\\u7005\\000\\u7665\\000\\u7005\\000\\u75A5\\u7800\" + \"\\000\\u0800\\u7005\\u4000\\u3006\\u0800\\u7005\\u0800\\u7005\\u2000\\031\\u1000\\033\\u1000\" + \"\\033\\u6800\\025\\u6800\\026\\u1000\\u601A\\u6800\\034\\u6800\\030\\u6800\\025\\u6800\\026\" + \"\\u6800\\030\\u6800\\024\\u6800\\u5017\\u6800\\u5017\\u6800\\025\\u6800\\026\\u6800\\025\" + \"\\u6800\\u5017\\u6800\\u5017\\u3800\\030\\u7800\\000\\u6800\\030\\u3800\\030\\u6800\\024\" + \"\\uE800\\025\\uE800\\026\\u2800\\030\\u2000\\031\\u2000\\024\\u6800\\030\\u2800\\u601A\\u7800\" + \"\\000\\u4800\\u1010\\u6800\\031\\u6800\\033\\u2800\\u601A\\u7800\\000\\u7800\\000\\u6800\" + \"\\u1010\\u6800\\u1010\\u6800\\u1010\"","id":4381},{"comment":"// The B table has 930 entries for a total of 1860 bytes.\r\n","field_name":"B","field_type":"char[]","full_declaration":"static final char[] B = (\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\" + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\" + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\" + \"\\000\\000\\000\\000\\000\\000\\000\\001\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\" + \"\\000\\000\\001\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\" + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\" + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\" + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\" + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\" + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\" + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\" + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\001\\001\\001\\000\\000\\000\\000\\000\" + \"\\000\\000\\000\\000\\001\\000\\000\\000\\000\\000\\000\\000\\000\\005\\000\\000\\001\\000\\000\" + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\" + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\" + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\" + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\" + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\004\\004\\000\\004\\000\\004\\004\\000\" + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\" + \"\\000\\000\\000\\004\\000\\000\\000\\000\\000\\000\\000\\000\\004\\000\\004\\000\\000\\000\\000\" + \"\\000\\000\\004\\000\\000\\000\\004\\000\\000\\000\\004\\000\\000\\004\\004\\000\\000\\000\\000\" + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\004\\004\\000\" + \"\\000\\000\\000\\000\\004\\000\\004\\004\\000\\000\\004\\004\\004\\004\\004\\000\\000\\000\\000\" + \"\\000\\000\\000\\000\\000\\000\\004\\000\\000\\000\\004\\004\\000\\000\\000\\000\\000\\000\\000\" + \"\\000\\004\\000\\000\\000\\000\\004\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\" + \"\\000\\000\\000\\004\\004\\004\\004\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\" + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\004\\000\" + \"\\004\\004\\000\\000\\000\\004\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\" + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\" + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\004\\000\\000\\000\" + \"\\000\\000\\001\\000\\001\\000\\000\\001\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\" + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\" + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\" + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\" + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\" + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\001\\000\\000\\000\\000\\000\\001\\000\\000\" + \"\\001\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\" + \"\\000\\000\\000\\000\\000\\000\\000\\002\\002\\002\\002\\001\\001\\001\\001\\000\\000\\000\\000\" + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\" + \"\\000\\000\\000\\000\\000\\000\\000\\006\\006\\005\\005\\000\\000\\000\\000\\000\\000\\000\\000\" + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\" + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\" + \"\\000\\000\\020\\020\\000\\000\\000\\000\\000\\020\\020\\020\\000\\000\\020\\020\\020\\000\\000\" + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\" + \"\\020\\020\\020\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\" + \"\\000\\000\\000\\000\\000\\000\\000\\000\\004\\004\\000\\000\\000\\000\\000\\020\\020\\020\\020\" + \"\\020\\020\\020\\020\\020\\020\\020\\020\\020\\020\\000\\000\\004\\000\\000\\000\\000\\000\\000\" + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\" + \"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\").toCharArray()","id":4382},{"comment":"static final CharacterData instance = new CharacterData01();","field_name":"instance","field_type":"java.lang.CharacterData","full_declaration":"static final java.lang.CharacterData instance = new CharacterData01()","id":4383},{"comment":"// The following tables and code generated using:\r\n// java GenerateCharacter -plane 1 -template c:/re/workspace/8-2-build-windows-amd64-cygwin/jdk8u211/12973/jdk/make/data/characterdata/CharacterData01.java.template -spec c:/re/workspace/8-2-build-windows-amd64-cygwin/jdk8u211/12973/jdk/make/data/unicodedata/UnicodeData.txt -specialcasing c:/re/workspace/8-2-build-windows-amd64-cygwin/jdk8u211/12973/jdk/make/data/unicodedata/SpecialCasing.txt -proplist c:/re/workspace/8-2-build-windows-amd64-cygwin/jdk8u211/12973/jdk/make/data/unicodedata/PropList.txt -o c:/re/workspace/8-2-build-windows-amd64-cygwin/jdk8u211/12973/build/windows-amd64/jdk/gensrc/java/lang/CharacterData01.java -string -usecharforbyte 11 4 1\r\n// The X table has 2048 entries for a total of 4096 bytes.\r\n","field_name":"X","field_type":"char[]","full_declaration":"static final char[] X = (\"\\000\\001\\002\\003\\004\\004\\004\\005\\006\\007\\010\\011\\012\\003\\013\\014\\003\\003\\003\" + \"\\003\\015\\004\\016\\003\\017\\020\\021\\003\\022\\004\\023\\003\\024\\025\\026\\004\\027\\030\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\031\\032\\033\\003\\003\\003\\003\\003\\034\\035\\003\\003\" + \"\\036\\037\\003\\003\\040\\041\\042\\043\\003\\003\\003\\003\\036\\044\\045\\046\\003\\003\\003\" + \"\\003\\036\\036\\047\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\050\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\051\\052\\053\\054\\055\" + \"\\056\\057\\060\\061\\062\\063\\003\\064\\065\\066\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\004\\067\\030\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\004\\004\\004\\004\\004\\004\\004\\004\\004\\004\" + \"\\004\\004\\004\\004\\004\\004\\004\\004\\004\\004\\004\\004\\004\\004\\004\\004\\004\\070\\003\" + \"\\003\\003\\003\\071\\072\\073\\074\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\004\\004\\004\\004\\004\\004\\004\\004\\004\\004\\004\\004\\004\\004\\004\" + \"\\004\\004\\004\\004\\004\\004\\004\\004\\004\\004\\004\\004\\004\\004\\004\\004\\004\\004\\070\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\004\\004\\004\\004\" + \"\\004\\004\\004\\004\\004\\004\\004\\004\\004\\004\\004\\004\\004\\075\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\004\\004\\076\\077\\100\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\101\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\102\\102\\102\\102\\102\\102\\102\\103\" + \"\\102\\104\\102\\105\\106\\107\\110\\003\\111\\111\\112\\003\\003\\003\\003\\003\\111\\111\\113\" + \"\\114\\003\\003\\003\\003\\115\\116\\117\\120\\121\\122\\123\\124\\125\\126\\127\\130\\131\\115\" + \"\\116\\132\\120\\133\\134\\135\\124\\136\\137\\140\\141\\142\\143\\144\\145\\146\\147\\150\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\151\\152\\153\\154\\155\\156\\003\\157\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\111\\160\\111\\111\\161\\162\\163\\003\\164\\165\\102\\166\\167\\003\\003\\170\\171\\167\" + \"\\172\\003\\003\\003\\003\\003\\111\\173\\111\\174\\161\\111\\175\\176\\111\\177\\200\\111\\111\" + \"\\111\\111\\201\\111\\202\\203\\204\\003\\003\\003\\205\\111\\111\\206\\003\\111\\111\\207\\003\" + \"\\111\\111\\111\\161\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\" + \"\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\\003\").toCharArray()","id":4384},{"comment":"// The Y table has 2176 entries for a total of 4352 bytes.\r\n","field_name":"Y","field_type":"char[]","full_declaration":"static final chartoCharArray()","id":4385},{"comment":"// The A table has 320 entries for a total of 1280 bytes.\r\n","field_name":"A","field_type":"int[]","full_declaration":"static final int[] A = new int[320]","id":4386},{"comment":"static final String A_DATA = \"\\000\\u7005\\000\\u7005\\u7800\\000\\000\\u7005\\000\\u7005\\u7800\\000\\u7800\\000\\u7800\" + \"\\000\\000\\030\\u6800\\030\\000\\030\\u7800\\000\\u7800\\000\\000\\u074B\\000\\u074B\\000\" + \"\\u074B\\000\\u074B\\000\\u046B\\000\\u058B\\000\\u080B\\000\\u080B\\000\\u080B\\u7800\\000\" + \"\\000\\034\\000\\034\\000\\034\\u6800\\u780A\\u6800\\u780A\\u6800\\u77EA\\u6800\\u744A\\u6800\" + \"\\u77AA\\u6800\\u742A\\u6800\\u780A\\u6800\\u76CA\\u6800\\u774A\\u6800\\u780A\\u6800\\u780A\" + \"\\u6800\\u766A\\u6800\\u752A\\u6800\\u750A\\u6800\\u74EA\\u6800\\u74EA\\u6800\\u74CA\\u6800\" + \"\\u74AA\\u6800\\u748A\\u6800\\u74CA\\u6800\\u754A\\u6800\\u752A\\u6800\\u750A\\u6800\\u74EA\" + \"\\u6800\\u74CA\\u6800\\u772A\\u6800\\u780A\\u6800\\u764A\\u6800\\u780A\\u6800\\u080B\\u6800\" + \"\\u080B\\u6800\\u080B\\u6800\\u080B\\u6800\\034\\u6800\\034\\u6800\\034\\u6800\\u06CB\\u7800\" + \"\\000\\000\\034\\u4000\\u3006\\000\\u042B\\000\\u048B\\000\\u050B\\000\\u080B\\000\\u7005\" + \"\\000\\u780A\\000\\u780A\\u7800\\000\\u7800\\000\\000\\030\\000\\030\\000\\u760A\\000\\u760A\" + \"\\000\\u76EA\\000\\u740A\\000\\u780A\\242\\u7001\\242\\u7001\\241\\u7002\\241\\u7002\\000\" + \"\\u3409\\000\\u3409\\u0800\\u7005\\u0800\\u7005\\u0800\\u7005\\u7800\\000\\u7800\\000\\u0800\" + \"\\u7005\\u7800\\000\\u0800\\030\\u0800\\u052B\\u0800\\u052B\\u0800\\u052B\\u0800\\u05EB\" + \"\\u0800\\u070B\\u0800\\u080B\\u0800\\u080B\\u0800\\u080B\\u0800\\u056B\\u0800\\u066B\\u0800\" + \"\\u078B\\u0800\\u080B\\u0800\\u050B\\u0800\\u050B\\u7800\\000\\u6800\\030\\u0800\\u7005\" + \"\\u4000\\u3006\\u4000\\u3006\\u4000\\u3006\\u7800\\000\\u4000\\u3006\\u4000\\u3006\\u7800\" + \"\\000\\u4000\\u3006\\u4000\\u3006\\u4000\\u3006\\u7800\\000\\u7800\\000\\u4000\\u3006\\u0800\" + \"\\u042B\\u0800\\u042B\\u0800\\u04CB\\u0800\\u05EB\\u0800\\030\\u0800\\030\\u0800\\030\\u7800\" + \"\\000\\u0800\\u7005\\u0800\\u048B\\u0800\\u080B\\u0800\\030\\u6800\\030\\u6800\\030\\u0800\" + \"\\u05CB\\u0800\\u06EB\\u3000\\u042B\\u3000\\u042B\\u3000\\u054B\\u3000\\u066B\\u3000\\u080B\" + \"\\u3000\\u080B\\u3000\\u080B\\u7800\\000\\000\\u3008\\u4000\\u3006\\000\\u3008\\000\\u7005\" + \"\\u4000\\u3006\\000\\030\\000\\030\\000\\030\\u6800\\u05EB\\u6800\\u05EB\\u6800\\u070B\\u6800\" + \"\\u042B\\000\\u3749\\000\\u3749\\000\\u3008\\000\\u3008\\u4000\\u3006\\000\\u3008\\000\\u3008\" + \"\\u4000\\u3006\\000\\030\\000\\u1010\\000\\u3609\\000\\u3609\\u4000\\u3006\\000\\u7005\\000\" + \"\\u7005\\u4000\\u3006\\u4000\\u3006\\u4000\\u3006\\000\\u3549\\000\\u3549\\000\\u7005\\000\" + \"\\u3008\\000\\u3008\\000\\u7005\\000\\u7005\\000\\030\\000\\u3008\\u4000\\u3006\\000\\u744A\" + \"\\000\\u744A\\000\\u776A\\000\\u776A\\000\\u776A\\000\\u76AA\\000\\u76AA\\000\\u76AA\\000\" + \"\\u76AA\\000\\u758A\\000\\u758A\\000\\u758A\\000\\u746A\\000\\u746A\\000\\u746A\\000\\u77EA\" + \"\\000\\u77EA\\000\\u77CA\\000\\u77CA\\000\\u77CA\\000\\u76AA\\000\\u768A\\000\\u768A\\000\" + \"\\u768A\\000\\u780A\\000\\u780A\\000\\u75AA\\000\\u75AA\\000\\u75AA\\000\\u758A\\000\\u752A\" + \"\\000\\u750A\\000\\u750A\\000\\u74EA\\000\\u74CA\\000\\u74AA\\000\\u74CA\\000\\u74CA\\000\" + \"\\u74AA\\000\\u748A\\000\\u748A\\000\\u746A\\000\\u746A\\000\\u744A\\000\\u742A\\000\\u740A\" + \"\\000\\u770A\\000\\u770A\\000\\u770A\\000\\u764A\\000\\u764A\\000\\u764A\\000\\u764A\\000\" + \"\\u762A\\000\\u762A\\000\\u760A\\000\\u752A\\000\\u752A\\000\\u3008\\u7800\\000\\u4000\\u3006\" + \"\\000\\u7004\\000\\u7004\\000\\u7004\\000\\034\\u7800\\000\\000\\034\\000\\u3008\\000\\u3008\" + \"\\000\\u3008\\000\\u3008\\u4800\\u1010\\u4800\\u1010\\u4800\\u1010\\u4800\\u1010\\u4000\" + \"\\u3006\\u4000\\u3006\\000\\034\\u4000\\u3006\\u6800\\034\\u6800\\034\\u7800\\000\\000\\u042B\" + \"\\000\\u042B\\000\\u054B\\000\\u066B\\000\\u7001\\000\\u7001\\000\\u7002\\000\\u7002\\000\" + \"\\u7002\\u7800\\000\\000\\u7001\\u7800\\000\\u7800\\000\\000\\u7001\\u7800\\000\\000\\u7002\" + \"\\000\\u7001\\000\\031\\000\\u7002\\uE800\\031\\000\\u7001\\000\\u7002\\u1800\\u3649\\u1800\" + \"\\u3649\\u1800\\u3509\\u1800\\u3509\\u1800\\u37C9\\u1800\\u37C9\\u1800\\u3689\\u1800\\u3689\" + \"\\u1800\\u3549\\u1800\\u3549\\u1000\\u7005\\u1000\\u7005\\u7800\\000\\u1000\\u7005\\u1000\" + \"\\u7005\\u7800\\000\\u6800\\031\\u6800\\031\\u7800\\000\\u6800\\034\\u1800\\u040B\\u1800\" + \"\\u07EB\\u1800\\u07EB\\u1800\\u07EB\\u1800\\u07EB\\u7800\\000\";","field_name":"A_DATA","field_type":"java.lang.String","full_declaration":"static final java.lang.String A_DATA = \"\\000\\u7005\\000\\u7005\\u7800\\000\\000\\u7005\\000\\u7005\\u7800\\000\\u7800\\000\\u7800\" + \"\\000\\000\\030\\u6800\\030\\000\\030\\u7800\\000\\u7800\\000\\000\\u074B\\000\\u074B\\000\" + \"\\u074B\\000\\u074B\\000\\u046B\\000\\u058B\\000\\u080B\\000\\u080B\\000\\u080B\\u7800\\000\" + \"\\000\\034\\000\\034\\000\\034\\u6800\\u780A\\u6800\\u780A\\u6800\\u77EA\\u6800\\u744A\\u6800\" + \"\\u77AA\\u6800\\u742A\\u6800\\u780A\\u6800\\u76CA\\u6800\\u774A\\u6800\\u780A\\u6800\\u780A\" + \"\\u6800\\u766A\\u6800\\u752A\\u6800\\u750A\\u6800\\u74EA\\u6800\\u74EA\\u6800\\u74CA\\u6800\" + \"\\u74AA\\u6800\\u748A\\u6800\\u74CA\\u6800\\u754A\\u6800\\u752A\\u6800\\u750A\\u6800\\u74EA\" + \"\\u6800\\u74CA\\u6800\\u772A\\u6800\\u780A\\u6800\\u764A\\u6800\\u780A\\u6800\\u080B\\u6800\" + \"\\u080B\\u6800\\u080B\\u6800\\u080B\\u6800\\034\\u6800\\034\\u6800\\034\\u6800\\u06CB\\u7800\" + \"\\000\\000\\034\\u4000\\u3006\\000\\u042B\\000\\u048B\\000\\u050B\\000\\u080B\\000\\u7005\" + \"\\000\\u780A\\000\\u780A\\u7800\\000\\u7800\\000\\000\\030\\000\\030\\000\\u760A\\000\\u760A\" + \"\\000\\u76EA\\000\\u740A\\000\\u780A\\242\\u7001\\242\\u7001\\241\\u7002\\241\\u7002\\000\" + \"\\u3409\\000\\u3409\\u0800\\u7005\\u0800\\u7005\\u0800\\u7005\\u7800\\000\\u7800\\000\\u0800\" + \"\\u7005\\u7800\\000\\u0800\\030\\u0800\\u052B\\u0800\\u052B\\u0800\\u052B\\u0800\\u05EB\" + \"\\u0800\\u070B\\u0800\\u080B\\u0800\\u080B\\u0800\\u080B\\u0800\\u056B\\u0800\\u066B\\u0800\" + \"\\u078B\\u0800\\u080B\\u0800\\u050B\\u0800\\u050B\\u7800\\000\\u6800\\030\\u0800\\u7005\" + \"\\u4000\\u3006\\u4000\\u3006\\u4000\\u3006\\u7800\\000\\u4000\\u3006\\u4000\\u3006\\u7800\" + \"\\000\\u4000\\u3006\\u4000\\u3006\\u4000\\u3006\\u7800\\000\\u7800\\000\\u4000\\u3006\\u0800\" + \"\\u042B\\u0800\\u042B\\u0800\\u04CB\\u0800\\u05EB\\u0800\\030\\u0800\\030\\u0800\\030\\u7800\" + \"\\000\\u0800\\u7005\\u0800\\u048B\\u0800\\u080B\\u0800\\030\\u6800\\030\\u6800\\030\\u0800\" + \"\\u05CB\\u0800\\u06EB\\u3000\\u042B\\u3000\\u042B\\u3000\\u054B\\u3000\\u066B\\u3000\\u080B\" + \"\\u3000\\u080B\\u3000\\u080B\\u7800\\000\\000\\u3008\\u4000\\u3006\\000\\u3008\\000\\u7005\" + \"\\u4000\\u3006\\000\\030\\000\\030\\000\\030\\u6800\\u05EB\\u6800\\u05EB\\u6800\\u070B\\u6800\" + \"\\u042B\\000\\u3749\\000\\u3749\\000\\u3008\\000\\u3008\\u4000\\u3006\\000\\u3008\\000\\u3008\" + \"\\u4000\\u3006\\000\\030\\000\\u1010\\000\\u3609\\000\\u3609\\u4000\\u3006\\000\\u7005\\000\" + \"\\u7005\\u4000\\u3006\\u4000\\u3006\\u4000\\u3006\\000\\u3549\\000\\u3549\\000\\u7005\\000\" + \"\\u3008\\000\\u3008\\000\\u7005\\000\\u7005\\000\\030\\000\\u3008\\u4000\\u3006\\000\\u744A\" + \"\\000\\u744A\\000\\u776A\\000\\u776A\\000\\u776A\\000\\u76AA\\000\\u76AA\\000\\u76AA\\000\" + \"\\u76AA\\000\\u758A\\000\\u758A\\000\\u758A\\000\\u746A\\000\\u746A\\000\\u746A\\000\\u77EA\" + \"\\000\\u77EA\\000\\u77CA\\000\\u77CA\\000\\u77CA\\000\\u76AA\\000\\u768A\\000\\u768A\\000\" + \"\\u768A\\000\\u780A\\000\\u780A\\000\\u75AA\\000\\u75AA\\000\\u75AA\\000\\u758A\\000\\u752A\" + \"\\000\\u750A\\000\\u750A\\000\\u74EA\\000\\u74CA\\000\\u74AA\\000\\u74CA\\000\\u74CA\\000\" + \"\\u74AA\\000\\u748A\\000\\u748A\\000\\u746A\\000\\u746A\\000\\u744A\\000\\u742A\\000\\u740A\" + \"\\000\\u770A\\000\\u770A\\000\\u770A\\000\\u764A\\000\\u764A\\000\\u764A\\000\\u764A\\000\" + \"\\u762A\\000\\u762A\\000\\u760A\\000\\u752A\\000\\u752A\\000\\u3008\\u7800\\000\\u4000\\u3006\" + \"\\000\\u7004\\000\\u7004\\000\\u7004\\000\\034\\u7800\\000\\000\\034\\000\\u3008\\000\\u3008\" + \"\\000\\u3008\\000\\u3008\\u4800\\u1010\\u4800\\u1010\\u4800\\u1010\\u4800\\u1010\\u4000\" + \"\\u3006\\u4000\\u3006\\000\\034\\u4000\\u3006\\u6800\\034\\u6800\\034\\u7800\\000\\000\\u042B\" + \"\\000\\u042B\\000\\u054B\\000\\u066B\\000\\u7001\\000\\u7001\\000\\u7002\\000\\u7002\\000\" + \"\\u7002\\u7800\\000\\000\\u7001\\u7800\\000\\u7800\\000\\000\\u7001\\u7800\\000\\000\\u7002\" + \"\\000\\u7001\\000\\031\\000\\u7002\\uE800\\031\\000\\u7001\\000\\u7002\\u1800\\u3649\\u1800\" + \"\\u3649\\u1800\\u3509\\u1800\\u3509\\u1800\\u37C9\\u1800\\u37C9\\u1800\\u3689\\u1800\\u3689\" + \"\\u1800\\u3549\\u1800\\u3549\\u1000\\u7005\\u1000\\u7005\\u7800\\000\\u1000\\u7005\\u1000\" + \"\\u7005\\u7800\\000\\u6800\\031\\u6800\\031\\u7800\\000\\u6800\\034\\u1800\\u040B\\u1800\" + \"\\u07EB\\u1800\\u07EB\\u1800\\u07EB\\u1800\\u07EB\\u7800\\000\"","id":4387},{"comment":"// The B table has 320 entries for a total of 640 bytes.\r\n","field_name":"B","field_type":"char[]","full_declaration":"static final chartoCharArray()","id":4388},{"comment":"static final CharacterData instance = new CharacterData02();","field_name":"instance","field_type":"java.lang.CharacterData","full_declaration":"static final java.lang.CharacterData instance = new CharacterData02()","id":4389},{"comment":"// The following tables and code generated using:\r\n// java GenerateCharacter -plane 2 -template c:/re/workspace/8-2-build-windows-amd64-cygwin/jdk8u211/12973/jdk/make/data/characterdata/CharacterData02.java.template -spec c:/re/workspace/8-2-build-windows-amd64-cygwin/jdk8u211/12973/jdk/make/data/unicodedata/UnicodeData.txt -specialcasing c:/re/workspace/8-2-build-windows-amd64-cygwin/jdk8u211/12973/jdk/make/data/unicodedata/SpecialCasing.txt -proplist c:/re/workspace/8-2-build-windows-amd64-cygwin/jdk8u211/12973/jdk/make/data/unicodedata/PropList.txt -o c:/re/workspace/8-2-build-windows-amd64-cygwin/jdk8u211/12973/build/windows-amd64/jdk/gensrc/java/lang/CharacterData02.java -string -usecharforbyte 11 4 1\r\n// The X table has 2048 entries for a total of 4096 bytes.\r\n","field_name":"X","field_type":"char[]","full_declaration":"static final chartoCharArray()","id":4390},{"comment":"// The Y table has 96 entries for a total of 192 bytes.\r\n","field_name":"Y","field_type":"char[]","full_declaration":"static final char[] Y = (\"\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\" + \"\\000\\000\\000\\000\\000\\000\\000\\000\\002\\004\\004\\004\\004\\004\\004\\004\\004\\004\\004\" + \"\\004\\004\\004\\004\\004\\004\\004\\004\\004\\004\\000\\000\\000\\000\\000\\000\\000\\000\\000\" + \"\\000\\002\\004\\004\\004\\004\\004\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\\000\" + \"\\000\\000\\000\\004\\000\\000\\000\\000\\000\\000\\000\\000\\006\\000\\000\\000\\000\\000\\000\" + \"\\000\").toCharArray()","id":4391},{"comment":"// The A table has 8 entries for a total of 32 bytes.\r\n","field_name":"A","field_type":"int[]","full_declaration":"static final int[] A = new int[8]","id":4392},{"comment":"static final String A_DATA = \"\\000\\u7005\\000\\u7005\\000\\u7005\\u7800\\000\\u7800\\000\\u7800\\000\\000\\u7725\\000\" + \"\\u7005\";","field_name":"A_DATA","field_type":"java.lang.String","full_declaration":"static final java.lang.String A_DATA = \"\\000\\u7005\\000\\u7005\\000\\u7005\\u7800\\000\\u7800\\000\\u7800\\000\\000\\u7725\\000\" + \"\\u7005\"","id":4393},{"comment":"// The B table has 8 entries for a total of 16 bytes.\r\n","field_name":"B","field_type":"char[]","full_declaration":"static final char[] B = (\"\\020\\020\\020\\000\\000\\000\\020\\020\").toCharArray()","id":4394},{"comment":"static final CharacterData instance = new CharacterData0E();","field_name":"instance","field_type":"java.lang.CharacterData","full_declaration":"static final java.lang.CharacterData instance = new CharacterData0E()","id":4395},{"comment":"// The following tables and code generated using:\r\n// java GenerateCharacter -plane 14 -template c:/re/workspace/8-2-build-windows-amd64-cygwin/jdk8u211/12973/jdk/make/data/characterdata/CharacterData0E.java.template -spec c:/re/workspace/8-2-build-windows-amd64-cygwin/jdk8u211/12973/jdk/make/data/unicodedata/UnicodeData.txt -specialcasing c:/re/workspace/8-2-build-windows-amd64-cygwin/jdk8u211/12973/jdk/make/data/unicodedata/SpecialCasing.txt -proplist c:/re/workspace/8-2-build-windows-amd64-cygwin/jdk8u211/12973/jdk/make/data/unicodedata/PropList.txt -o c:/re/workspace/8-2-build-windows-amd64-cygwin/jdk8u211/12973/build/windows-amd64/jdk/gensrc/java/lang/CharacterData0E.java -string -usecharforbyte 11 4 1\r\n// The X table has 2048 entries for a total of 4096 bytes.\r\n","field_name":"X","field_type":"char[]","full_declaration":"static final chartoCharArray()","id":4396},{"comment":"// The Y table has 80 entries for a total of 160 bytes.\r\n","field_name":"Y","field_type":"char[]","full_declaration":"static final char[] Y = (\"\\000\\002\\002\\002\\002\\002\\002\\002\\002\\002\\002\\002\\002\\002\\002\\002\\004\\004\\004\" + \"\\004\\004\\004\\004\\004\\004\\004\\004\\004\\004\\004\\004\\004\\002\\002\\002\\002\\002\\002\" + \"\\002\\002\\002\\002\\002\\002\\002\\002\\002\\002\\006\\006\\006\\006\\006\\006\\006\\006\\006\" + \"\\006\\006\\006\\006\\006\\006\\006\\006\\006\\006\\006\\006\\006\\006\\006\\002\\002\\002\\002\" + \"\\002\\002\\002\\002\").toCharArray()","id":4397},{"comment":"// The A table has 8 entries for a total of 32 bytes.\r\n","field_name":"A","field_type":"int[]","full_declaration":"static final int[] A = new int[8]","id":4398},{"comment":"static final String A_DATA = \"\\u7800\\000\\u4800\\u1010\\u7800\\000\\u7800\\000\\u4800\\u1010\\u4800\\u1010\\u4000\\u3006\" + \"\\u4000\\u3006\";","field_name":"A_DATA","field_type":"java.lang.String","full_declaration":"static final java.lang.String A_DATA = \"\\u7800\\000\\u4800\\u1010\\u7800\\000\\u7800\\000\\u4800\\u1010\\u4800\\u1010\\u4000\\u3006\" + \"\\u4000\\u3006\"","id":4399},{"comment":"// The B table has 8 entries for a total of 16 bytes.\r\n","field_name":"B","field_type":"char[]","full_declaration":"static final char[] B = (\"\\000\\000\\000\\000\\000\\000\\000\\000\").toCharArray()","id":4400},{"comment":"","field_name":"sharpsMap","field_type":"char[]","full_declaration":"static char[] sharpsMap = new char[] { 'S', 'S' }","id":4401},{"comment":"static final CharacterDataLatin1 instance = new CharacterDataLatin1();","field_name":"instance","field_type":"java.lang.CharacterDataLatin1","full_declaration":"static final java.lang.CharacterDataLatin1 instance = new CharacterDataLatin1()","id":4402},{"comment":"// The following tables and code generated using:\r\n// java GenerateCharacter -template c:/re/workspace/8-2-build-windows-amd64-cygwin/jdk8u211/12973/jdk/make/data/characterdata/CharacterDataLatin1.java.template -spec c:/re/workspace/8-2-build-windows-amd64-cygwin/jdk8u211/12973/jdk/make/data/unicodedata/UnicodeData.txt -specialcasing c:/re/workspace/8-2-build-windows-amd64-cygwin/jdk8u211/12973/jdk/make/data/unicodedata/SpecialCasing.txt -proplist c:/re/workspace/8-2-build-windows-amd64-cygwin/jdk8u211/12973/jdk/make/data/unicodedata/PropList.txt -o c:/re/workspace/8-2-build-windows-amd64-cygwin/jdk8u211/12973/build/windows-amd64/jdk/gensrc/java/lang/CharacterDataLatin1.java -string -usecharforbyte -latin1 8\r\n// The A table has 256 entries for a total of 1024 bytes.\r\n","field_name":"A","field_type":"int[]","full_declaration":"static final int[] A = new int[256]","id":4403},{"comment":"static final String A_DATA = \"\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\" + \"\\u100F\\u4800\\u100F\\u4800\\u100F\\u5800\\u400F\\u5000\\u400F\\u5800\\u400F\\u6000\\u400F\" + \"\\u5000\\u400F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\" + \"\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\" + \"\\u4800\\u100F\\u4800\\u100F\\u5000\\u400F\\u5000\\u400F\\u5000\\u400F\\u5800\\u400F\\u6000\" + \"\\u400C\\u6800\\030\\u6800\\030\\u2800\\030\\u2800\\u601A\\u2800\\030\\u6800\\030\\u6800\" + \"\\030\\uE800\\025\\uE800\\026\\u6800\\030\\u2000\\031\\u3800\\030\\u2000\\024\\u3800\\030\" + \"\\u3800\\030\\u1800\\u3609\\u1800\\u3609\\u1800\\u3609\\u1800\\u3609\\u1800\\u3609\\u1800\" + \"\\u3609\\u1800\\u3609\\u1800\\u3609\\u1800\\u3609\\u1800\\u3609\\u3800\\030\\u6800\\030\" + \"\\uE800\\031\\u6800\\031\\uE800\\031\\u6800\\030\\u6800\\030\\202\\u7FE1\\202\\u7FE1\\202\" + \"\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\" + \"\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\" + \"\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\" + \"\\202\\u7FE1\\uE800\\025\\u6800\\030\\uE800\\026\\u6800\\033\\u6800\\u5017\\u6800\\033\\201\" + \"\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\" + \"\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\" + \"\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\" + \"\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\uE800\\025\\u6800\\031\\uE800\\026\\u6800\\031\\u4800\" + \"\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u5000\\u100F\" + \"\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\" + \"\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\" + \"\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\" + \"\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\" + \"\\u3800\\014\\u6800\\030\\u2800\\u601A\\u2800\\u601A\\u2800\\u601A\\u2800\\u601A\\u6800\" + \"\\034\\u6800\\030\\u6800\\033\\u6800\\034\\000\\u7005\\uE800\\035\\u6800\\031\\u4800\\u1010\" + \"\\u6800\\034\\u6800\\033\\u2800\\034\\u2800\\031\\u1800\\u060B\\u1800\\u060B\\u6800\\033\" + \"\\u07FD\\u7002\\u6800\\030\\u6800\\030\\u6800\\033\\u1800\\u050B\\000\\u7005\\uE800\\036\" + \"\\u6800\\u080B\\u6800\\u080B\\u6800\\u080B\\u6800\\030\\202\\u7001\\202\\u7001\\202\\u7001\" + \"\\202\\u7001\\202\\u7001\\202\\u7001\\202\\u7001\\202\\u7001\\202\\u7001\\202\\u7001\\202\" + \"\\u7001\\202\\u7001\\202\\u7001\\202\\u7001\\202\\u7001\\202\\u7001\\202\\u7001\\202\\u7001\" + \"\\202\\u7001\\202\\u7001\\202\\u7001\\202\\u7001\\202\\u7001\\u6800\\031\\202\\u7001\\202\" + \"\\u7001\\202\\u7001\\202\\u7001\\202\\u7001\\202\\u7001\\202\\u7001\\u07FD\\u7002\\201\\u7002\" + \"\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\201\" + \"\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\" + \"\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\u6800\" + \"\\031\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\" + \"\\u061D\\u7002\";","field_name":"A_DATA","field_type":"java.lang.String","full_declaration":"static final java.lang.String A_DATA = \"\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\" + \"\\u100F\\u4800\\u100F\\u4800\\u100F\\u5800\\u400F\\u5000\\u400F\\u5800\\u400F\\u6000\\u400F\" + \"\\u5000\\u400F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\" + \"\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\" + \"\\u4800\\u100F\\u4800\\u100F\\u5000\\u400F\\u5000\\u400F\\u5000\\u400F\\u5800\\u400F\\u6000\" + \"\\u400C\\u6800\\030\\u6800\\030\\u2800\\030\\u2800\\u601A\\u2800\\030\\u6800\\030\\u6800\" + \"\\030\\uE800\\025\\uE800\\026\\u6800\\030\\u2000\\031\\u3800\\030\\u2000\\024\\u3800\\030\" + \"\\u3800\\030\\u1800\\u3609\\u1800\\u3609\\u1800\\u3609\\u1800\\u3609\\u1800\\u3609\\u1800\" + \"\\u3609\\u1800\\u3609\\u1800\\u3609\\u1800\\u3609\\u1800\\u3609\\u3800\\030\\u6800\\030\" + \"\\uE800\\031\\u6800\\031\\uE800\\031\\u6800\\030\\u6800\\030\\202\\u7FE1\\202\\u7FE1\\202\" + \"\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\" + \"\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\" + \"\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\\202\\u7FE1\" + \"\\202\\u7FE1\\uE800\\025\\u6800\\030\\uE800\\026\\u6800\\033\\u6800\\u5017\\u6800\\033\\201\" + \"\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\" + \"\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\" + \"\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\" + \"\\201\\u7FE2\\201\\u7FE2\\201\\u7FE2\\uE800\\025\\u6800\\031\\uE800\\026\\u6800\\031\\u4800\" + \"\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u5000\\u100F\" + \"\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\" + \"\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\" + \"\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\" + \"\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\\u4800\\u100F\" + \"\\u3800\\014\\u6800\\030\\u2800\\u601A\\u2800\\u601A\\u2800\\u601A\\u2800\\u601A\\u6800\" + \"\\034\\u6800\\030\\u6800\\033\\u6800\\034\\000\\u7005\\uE800\\035\\u6800\\031\\u4800\\u1010\" + \"\\u6800\\034\\u6800\\033\\u2800\\034\\u2800\\031\\u1800\\u060B\\u1800\\u060B\\u6800\\033\" + \"\\u07FD\\u7002\\u6800\\030\\u6800\\030\\u6800\\033\\u1800\\u050B\\000\\u7005\\uE800\\036\" + \"\\u6800\\u080B\\u6800\\u080B\\u6800\\u080B\\u6800\\030\\202\\u7001\\202\\u7001\\202\\u7001\" + \"\\202\\u7001\\202\\u7001\\202\\u7001\\202\\u7001\\202\\u7001\\202\\u7001\\202\\u7001\\202\" + \"\\u7001\\202\\u7001\\202\\u7001\\202\\u7001\\202\\u7001\\202\\u7001\\202\\u7001\\202\\u7001\" + \"\\202\\u7001\\202\\u7001\\202\\u7001\\202\\u7001\\202\\u7001\\u6800\\031\\202\\u7001\\202\" + \"\\u7001\\202\\u7001\\202\\u7001\\202\\u7001\\202\\u7001\\202\\u7001\\u07FD\\u7002\\201\\u7002\" + \"\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\201\" + \"\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\" + \"\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\u6800\" + \"\\031\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\\201\\u7002\" + \"\\u061D\\u7002\"","id":4404},{"comment":"// The B table has 256 entries for a total of 512 bytes.\r\n","field_name":"B","field_type":"char[]","full_declaration":"static final chartoCharArray()","id":4405},{"comment":"static final CharacterData instance = new CharacterDataPrivateUse();","field_name":"instance","field_type":"java.lang.CharacterData","full_declaration":"static final java.lang.CharacterData instance = new CharacterDataPrivateUse()","id":4406},{"comment":"static final CharacterData instance = new CharacterDataUndefined();","field_name":"instance","field_type":"java.lang.CharacterData","full_declaration":"static final java.lang.CharacterData instance = new CharacterDataUndefined()","id":4407},{"comment":"private static SoftReference<byte[]> refStrPool;","field_name":"refStrPool","field_type":"java.lang.ref.SoftReference","full_declaration":"private static java.lang.ref.SoftReference refStrPool","id":4408},{"comment":"","field_name":"lookup","field_type":"int[][]","full_declaration":"private static int[][] lookup","id":4409},{"comment":"","field_name":"cur","field_type":"int","full_declaration":"int cur = 0","id":4410},{"comment":"","field_name":"cur","field_type":"int","full_declaration":"int cur = 0","id":4411},{"comment":"","field_name":"ANNOTATION","field_type":"int","full_declaration":"private static final int ANNOTATION = 0x00002000","id":4412},{"comment":"","field_name":"ENUM","field_type":"int","full_declaration":"private static final int ENUM = 0x00004000","id":4413},{"comment":"","field_name":"SYNTHETIC","field_type":"int","full_declaration":"private static final int SYNTHETIC = 0x00001000","id":4414},{"comment":"private volatile transient Constructor<T> cachedConstructor;","field_name":"cachedConstructor","field_type":"java.lang.reflect.Constructor","full_declaration":"private volatile transient java.lang.reflect.Constructor cachedConstructor","id":4415},{"comment":"private volatile transient Class<?> newInstanceCallerCache;","field_name":"newInstanceCallerCache","field_type":"java.lang.Class","full_declaration":"private volatile transient java.lang.Class newInstanceCallerCache","id":4416},{"comment":"// cache the name to reduce the number of calls into the VM\r\nprivate transient String name;","field_name":"name","field_type":"java.lang.String","full_declaration":"private transient java.lang.String name","id":4417},{"comment":"// Initialized in JVM not by private constructor\r\n// This field is filtered from reflection access, i.e. getDeclaredField\r\n// will throw NoSuchFieldException\r\nprivate final ClassLoader classLoader;","field_name":"classLoader","field_type":"java.lang.ClassLoader","full_declaration":"private final java.lang.ClassLoader classLoader","id":4418},{"comment":"/**\r\n * protection domain returned when the internal domain is null\r\n */\r\n","field_name":"allPermDomain","field_type":"java.security.ProtectionDomain","full_declaration":"private static java.security.ProtectionDomain allPermDomain","id":4419},{"comment":"/**\r\n * Reflection support.\r\n */\r\n// Caches for certain reflective results\r\n","field_name":"useCaches","field_type":"boolean","full_declaration":"private static boolean useCaches = true","id":4420},{"comment":"private volatile transient SoftReference<ReflectionData<T>> reflectionData;","field_name":"reflectionData","field_type":"java.lang.ref.SoftReference","full_declaration":"private volatile transient java.lang.ref.SoftReference reflectionData","id":4421},{"comment":"// Incremented by the VM on each call to JVM TI RedefineClasses()\r\n// that redefines this class or a superclass.\r\n","field_name":"classRedefinedCount","field_type":"int","full_declaration":"private volatile transient int classRedefinedCount = 0","id":4422},{"comment":"// Generic info repository; lazily initialized\r\nprivate volatile transient ClassRepository genericInfo;","field_name":"genericInfo","field_type":"sun.reflect.generics.repository.ClassRepository","full_declaration":"private volatile transient sun.reflect.generics.repository.ClassRepository genericInfo","id":4423},{"comment":"/**\r\n * use serialVersionUID from JDK 1.1 for interoperability\r\n */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 3206093459760846163L","id":4424},{"comment":"/**\r\n * Class Class is special cased within the Serialization Stream Protocol.\r\n *\r\n * A Class instance is written initially into an ObjectOutputStream in the\r\n * following format:\r\n * <pre>\r\n *      {@code TC_CLASS} ClassDescriptor\r\n *      A ClassDescriptor is a special cased serialization of\r\n *      a {@code java.io.ObjectStreamClass} instance.\r\n * </pre>\r\n * A new handle is generated for the initial time the class descriptor\r\n * is written into the stream. Future references to the class descriptor\r\n * are written as references to the initial class descriptor instance.\r\n *\r\n * @see java.io.ObjectStreamClass\r\n */\r\n","field_name":"serialPersistentFields","field_type":"ObjectStreamField[]","full_declaration":"private static final ObjectStreamField[] serialPersistentFields = new ObjectStreamField[0]","id":4425},{"comment":"private static ReflectionFactory reflectionFactory;","field_name":"reflectionFactory","field_type":"sun.reflect.ReflectionFactory","full_declaration":"private static sun.reflect.ReflectionFactory reflectionFactory","id":4426},{"comment":"// To be able to query system properties as soon as they're available\r\n","field_name":"initted","field_type":"boolean","full_declaration":"private static boolean initted = false","id":4427},{"comment":"","field_name":"enumConstants","field_type":"T[]","full_declaration":"private volatile transient T[] enumConstants = null","id":4428},{"comment":"private volatile transient Map<String, T> enumConstantDirectory = null;","field_name":"enumConstantDirectory","field_type":"java.util.Map","full_declaration":"private volatile transient java.util.Map enumConstantDirectory = null","id":4429},{"comment":"// Annotations cache\r\n@SuppressWarnings(\"UnusedDeclaration\")\r\nprivate volatile transient AnnotationData annotationData;","field_name":"annotationData","field_type":"java.lang.Class.AnnotationData","full_declaration":"private volatile transient java.lang.Class.AnnotationData annotationData","id":4430},{"comment":"// Annotation types cache their internal (AnnotationType) form\r\n@SuppressWarnings(\"UnusedDeclaration\")\r\nprivate volatile transient AnnotationType annotationType;","field_name":"annotationType","field_type":"sun.reflect.annotation.AnnotationType","full_declaration":"private volatile transient sun.reflect.annotation.AnnotationType annotationType","id":4431},{"comment":"/* Backing store of user-defined values pertaining to this class.\r\n     * Maintained by the ClassValue class.\r\n     */\r\ntransient ClassValue.ClassValueMap classValueMap;","field_name":"classValueMap","field_type":"java.lang.ClassValue.ClassValueMap","full_declaration":"transient java.lang.ClassValue.ClassValueMap classValueMap","id":4432},{"comment":"private Class<?> enclosingClass;","field_name":"enclosingClass","field_type":"java.lang.Class","full_declaration":"private java.lang.Class enclosingClass","id":4433},{"comment":"private String name;","field_name":"name","field_type":"java.lang.String","full_declaration":"private java.lang.String name","id":4434},{"comment":"private String descriptor;","field_name":"descriptor","field_type":"java.lang.String","full_declaration":"private java.lang.String descriptor","id":4435},{"comment":"// initialize Unsafe machinery here, since we need to call Class.class instance method\r\n// and have to avoid calling it in the static initializer of the Class class...\r\nprivate static final Unsafe unsafe = Unsafe.getUnsafe();","field_name":"unsafe","field_type":"sun.misc.Unsafe","full_declaration":"private static final sun.misc.Unsafe unsafe = Unsafe.getUnsafe()","id":4436},{"comment":"// offset of Class.reflectionData instance field\r\n","field_name":"reflectionDataOffset","field_type":"long","full_declaration":"private static final long reflectionDataOffset","id":4437},{"comment":"// offset of Class.annotationType instance field\r\n","field_name":"annotationTypeOffset","field_type":"long","full_declaration":"private static final long annotationTypeOffset","id":4438},{"comment":"// offset of Class.annotationData instance field\r\n","field_name":"annotationDataOffset","field_type":"long","full_declaration":"private static final long annotationDataOffset","id":4439},{"comment":"","field_name":"declaredFields","field_type":"Field[]","full_declaration":"volatile Field[] declaredFields","id":4440},{"comment":"","field_name":"publicFields","field_type":"Field[]","full_declaration":"volatile Field[] publicFields","id":4441},{"comment":"","field_name":"declaredMethods","field_type":"Method[]","full_declaration":"volatile Method[] declaredMethods","id":4442},{"comment":"","field_name":"publicMethods","field_type":"Method[]","full_declaration":"volatile Method[] publicMethods","id":4443},{"comment":"","field_name":"declaredConstructors","field_type":"Constructor<T>[]","full_declaration":"volatile Constructor<T>[] declaredConstructors","id":4444},{"comment":"","field_name":"publicConstructors","field_type":"Constructor<T>[]","full_declaration":"volatile Constructor<T>[] publicConstructors","id":4445},{"comment":"// Intermediate results for getFields and getMethods\r\n","field_name":"declaredPublicFields","field_type":"Field[]","full_declaration":"volatile Field[] declaredPublicFields","id":4446},{"comment":"","field_name":"declaredPublicMethods","field_type":"Method[]","full_declaration":"volatile Method[] declaredPublicMethods","id":4447},{"comment":"","field_name":"interfaces","field_type":"Class<?>[]","full_declaration":"volatile Class<?>[] interfaces","id":4448},{"comment":"// Value of classRedefinedCount when we created this ReflectionData instance\r\n","field_name":"redefinedCount","field_type":"int","full_declaration":"final int redefinedCount","id":4449},{"comment":"// Don't add or remove methods except by add() or remove() calls.\r\n","field_name":"methods","field_type":"Method[]","full_declaration":"private Method[] methods","id":4450},{"comment":"","field_name":"length","field_type":"int","full_declaration":"private int length","id":4451},{"comment":"","field_name":"defaults","field_type":"int","full_declaration":"private int defaults","id":4452},{"comment":"final Map<Class<? extends Annotation>, Annotation> annotations;","field_name":"annotations","field_type":"java.util.Map","full_declaration":"final java.util.Map annotations","id":4453},{"comment":"final Map<Class<? extends Annotation>, Annotation> declaredAnnotations;","field_name":"declaredAnnotations","field_type":"java.util.Map","full_declaration":"final java.util.Map declaredAnnotations","id":4454},{"comment":"// Value of classRedefinedCount when we created this AnnotationData instance\r\n","field_name":"redefinedCount","field_type":"int","full_declaration":"final int redefinedCount","id":4455},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -9223365651070458532L","id":4456},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 1054362542914539689L","id":4457},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -8420114879011949195L","id":4458},{"comment":"// The parent class loader for delegation\r\n// Note: VM hardcoded the offset of this field, thus all new fields\r\n// must be added *after* it.\r\nprivate final ClassLoader parent;","field_name":"parent","field_type":"java.lang.ClassLoader","full_declaration":"private final java.lang.ClassLoader parent","id":4459},{"comment":"// Maps class name to the corresponding lock object when the current\r\n// class loader is parallel capable.\r\n// Note: VM also uses this field to decide if the current class loader\r\n// is parallel capable and the appropriate lock object for class loading.\r\nprivate final ConcurrentHashMap<String, Object> parallelLockMap;","field_name":"parallelLockMap","field_type":"java.util.concurrent.ConcurrentHashMap","full_declaration":"private final java.util.concurrent.ConcurrentHashMap parallelLockMap","id":4460},{"comment":"// Hashtable that maps packages to certs\r\nprivate final Map<String, Certificate[]> package2certs;","field_name":"package2certs","field_type":"java.util.Map","full_declaration":"private final java.util.Map package2certs","id":4461},{"comment":"// Shared among all packages with unsigned classes\r\n","field_name":"nocerts","field_type":"Certificate[]","full_declaration":"private static final Certificate[] nocerts = new Certificate[0]","id":4462},{"comment":"// The classes loaded by this class loader. The only purpose of this table\r\n// is to keep the classes from being GC'ed until the loader is GC'ed.\r\nprivate final Vector<Class<?>> classes = new Vector<>();","field_name":"classes","field_type":"java.util.Vector","full_declaration":"private final java.util.Vector classes = new Vector<>()","id":4463},{"comment":"// The \"default\" domain. Set as the default ProtectionDomain on newly\r\n// created classes.\r\nprivate final ProtectionDomain defaultDomain = new ProtectionDomain(new CodeSource(null, (Certificate[]) null), null, this, null);","field_name":"defaultDomain","field_type":"java.security.ProtectionDomain","full_declaration":"private final java.security.ProtectionDomain defaultDomain = new ProtectionDomain(new CodeSource(null, (Certificate[]) null), null, this, null)","id":4464},{"comment":"// The initiating protection domains for all classes loaded by this loader\r\nprivate final Set<ProtectionDomain> domains;","field_name":"domains","field_type":"java.util.Set","full_declaration":"private final java.util.Set domains","id":4465},{"comment":"// The packages defined in this class loader.  Each package name is mapped\r\n// to its corresponding Package object.\r\n// @GuardedBy(\"itself\")\r\nprivate final HashMap<String, Package> packages = new HashMap<>();","field_name":"packages","field_type":"java.util.HashMap","full_declaration":"private final java.util.HashMap packages = new HashMap<>()","id":4466},{"comment":"// The class loader for the system\r\n// @GuardedBy(\"ClassLoader.class\")\r\nprivate static ClassLoader scl;","field_name":"scl","field_type":"java.lang.ClassLoader","full_declaration":"private static java.lang.ClassLoader scl","id":4467},{"comment":"// Set to true once the system class loader has been set\r\n// @GuardedBy(\"ClassLoader.class\")\r\n","field_name":"sclSet","field_type":"boolean","full_declaration":"private static boolean sclSet","id":4468},{"comment":"// All native library names we've loaded.\r\nprivate static Vector<String> loadedLibraryNames = new Vector<>();","field_name":"loadedLibraryNames","field_type":"java.util.Vector","full_declaration":"private static java.util.Vector loadedLibraryNames = new Vector<>()","id":4469},{"comment":"// Native libraries belonging to system classes.\r\nprivate static Vector<NativeLibrary> systemNativeLibraries = new Vector<>();","field_name":"systemNativeLibraries","field_type":"java.util.Vector","full_declaration":"private static java.util.Vector systemNativeLibraries = new Vector<>()","id":4470},{"comment":"// Native libraries associated with the class loader.\r\nprivate Vector<NativeLibrary> nativeLibraries = new Vector<>();","field_name":"nativeLibraries","field_type":"java.util.Vector","full_declaration":"private java.util.Vector nativeLibraries = new Vector<>()","id":4471},{"comment":"// native libraries being loaded/unloaded.\r\nprivate static Stack<NativeLibrary> nativeLibraryContext = new Stack<>();","field_name":"nativeLibraryContext","field_type":"java.util.Stack","full_declaration":"private static java.util.Stack nativeLibraryContext = new Stack<>()","id":4472},{"comment":"// The paths searched for libraries\r\n","field_name":"usr_paths","field_type":"String[]","full_declaration":"private static String[] usr_paths","id":4473},{"comment":"","field_name":"sys_paths","field_type":"String[]","full_declaration":"private static String[] sys_paths","id":4474},{"comment":"// -- Assertion management --\r\nfinal Object assertionLock;","field_name":"assertionLock","field_type":"java.lang.Object","full_declaration":"final java.lang.Object assertionLock","id":4475},{"comment":"// The default toggle for assertion checking.\r\n// @GuardedBy(\"assertionLock\")\r\n","field_name":"defaultAssertionStatus","field_type":"boolean","full_declaration":"private boolean defaultAssertionStatus = false","id":4476},{"comment":"// Maps String packageName to Boolean package default assertion status Note\r\n// that the default package is placed under a null map key.  If this field\r\n// is null then we are delegating assertion status queries to the VM, i.e.,\r\n// none of this ClassLoader's assertion status modification methods have\r\n// been invoked.\r\n// @GuardedBy(\"assertionLock\")\r\nprivate Map<String, Boolean> packageAssertionStatus = null;","field_name":"packageAssertionStatus","field_type":"java.util.Map","full_declaration":"private java.util.Map packageAssertionStatus = null","id":4477},{"comment":"// Maps String fullyQualifiedClassName to Boolean assertionStatus If this\r\n// field is null then we are delegating assertion status queries to the VM,\r\n// i.e., none of this ClassLoader's assertion status modification methods\r\n// have been invoked.\r\n// @GuardedBy(\"assertionLock\")\r\nMap<String, Boolean> classAssertionStatus = null;","field_name":"classAssertionStatus","field_type":"java.util.Map","full_declaration":"java.util.Map classAssertionStatus = null","id":4478},{"comment":"// the set of parallel capable loader types\r\nprivate static final Set<Class<? extends ClassLoader>> loaderTypes = Collections.newSetFromMap(new WeakHashMap<Class<? extends ClassLoader>, Boolean>());","field_name":"loaderTypes","field_type":"java.util.Set","full_declaration":"private static final java.util.Set loaderTypes = Collections.newSetFromMap(new WeakHashMap<Class<? extends ClassLoader>, Boolean>())","id":4479},{"comment":"// opaque handle to native library, used in native code.\r\n","field_name":"handle","field_type":"long","full_declaration":"long handle","id":4480},{"comment":"// the version of JNI environment the native library requires.\r\n","field_name":"jniVersion","field_type":"int","full_declaration":"private int jniVersion","id":4481},{"comment":"// the class from which the library is loaded, also indicates\r\n// the loader this native library belongs.\r\nprivate final Class<?> fromClass;","field_name":"fromClass","field_type":"java.lang.Class","full_declaration":"private final java.lang.Class fromClass","id":4482},{"comment":"// the canonicalized name of the native library.\r\n// or static library name\r\nString name;","field_name":"name","field_type":"java.lang.String","full_declaration":"java.lang.String name","id":4483},{"comment":"// Indicates if the native library is linked into the VM\r\n","field_name":"isBuiltin","field_type":"boolean","full_declaration":"boolean isBuiltin","id":4484},{"comment":"// Indicates if the native library is loaded\r\n","field_name":"loaded","field_type":"boolean","full_declaration":"boolean loaded","id":4485},{"comment":"private ClassLoader parent;","field_name":"parent","field_type":"java.lang.ClassLoader","full_declaration":"private java.lang.ClassLoader parent","id":4486},{"comment":"/**\r\n * use serialVersionUID from JDK 1.1.X for interoperability\r\n */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 9176873029745254542L","id":4487},{"comment":"/**\r\n * This field holds the exception ex if the\r\n * ClassNotFoundException(String s, Throwable ex) constructor was\r\n * used to instantiate the object\r\n * @serial\r\n * @since 1.2\r\n */\r\nprivate Throwable ex;","field_name":"ex","field_type":"java.lang.Throwable","full_declaration":"private java.lang.Throwable ex","id":4488},{"comment":"/**\r\n * Initial, one-element, empty cache used by all Class instances.  Must never be filled.\r\n */\r\n","field_name":"EMPTY_CACHE","field_type":"Entry<?>[]","full_declaration":"private static final Entry<?>[] EMPTY_CACHE = { null }","id":4489},{"comment":"/**\r\n * Internal hash code for accessing Class.classValueMap.cacheArray.\r\n */\r\n","field_name":"hashCodeForCache","field_type":"int","full_declaration":"final int hashCodeForCache = nextHashCode.getAndAdd(HASH_INCREMENT) & HASH_MASK","id":4490},{"comment":"/**\r\n * Value stream for hashCodeForCache.  See similar structure in ThreadLocal.\r\n */\r\nprivate static final AtomicInteger nextHashCode = new AtomicInteger();","field_name":"nextHashCode","field_type":"java.util.concurrent.atomic.AtomicInteger","full_declaration":"private static final java.util.concurrent.atomic.AtomicInteger nextHashCode = new AtomicInteger()","id":4491},{"comment":"/**\r\n * Good for power-of-two tables.  See similar structure in ThreadLocal.\r\n */\r\n","field_name":"HASH_INCREMENT","field_type":"int","full_declaration":"private static final int HASH_INCREMENT = 0x61c88647","id":4492},{"comment":"/**\r\n * Mask a hash code to be positive but not too large, to prevent wraparound.\r\n */\r\n","field_name":"HASH_MASK","field_type":"int","full_declaration":"static final int HASH_MASK = (-1 >>> 2)","id":4493},{"comment":"/**\r\n * This ClassValue's identity, expressed as an opaque object.\r\n * The main object {@code ClassValue.this} is incorrect since\r\n * subclasses may override {@code ClassValue.equals}, which\r\n * could confuse keys in the ClassValueMap.\r\n */\r\nfinal Identity identity = new Identity();","field_name":"identity","field_type":"java.lang.ClassValue.Identity","full_declaration":"final java.lang.ClassValue.Identity identity = new Identity()","id":4494},{"comment":"/**\r\n * Current version for retrieving this class value from the cache.\r\n * Any number of computeValue calls can be cached in association with one version.\r\n * But the version changes when a remove (on any type) is executed.\r\n * A version change invalidates all cache entries for the affected ClassValue,\r\n * by marking them as stale.  Stale cache entries do not force another call\r\n * to computeValue, but they do require a synchronized visit to a backing map.\r\n * <p>\r\n * All user-visible state changes on the ClassValue take place under\r\n * a lock inside the synchronized methods of ClassValueMap.\r\n * Readers (of ClassValue.get) are notified of such state changes\r\n * when this.version is bumped to a new token.\r\n * This variable must be volatile so that an unsynchronized reader\r\n * will receive the notification without delay.\r\n * <p>\r\n * If version were not volatile, one thread T1 could persistently hold onto\r\n * a stale value this.value == V1, while while another thread T2 advances\r\n * (under a lock) to this.value == V2.  This will typically be harmless,\r\n * but if T1 and T2 interact causally via some other channel, such that\r\n * T1's further actions are constrained (in the JMM) to happen after\r\n * the V2 event, then T1's observation of V1 will be an error.\r\n * <p>\r\n * The practical effect of making this.version be volatile is that it cannot\r\n * be hoisted out of a loop (by an optimizing JIT) or otherwise cached.\r\n * Some machines may also require a barrier instruction to execute\r\n * before this.version.\r\n */\r\nprivate volatile Version<T> version = new Version<>(this);","field_name":"version","field_type":"java.lang.ClassValue.Version","full_declaration":"private volatile java.lang.ClassValue.Version version = new Version<>(this)","id":4495},{"comment":"private static final Object CRITICAL_SECTION = new Object();","field_name":"CRITICAL_SECTION","field_type":"java.lang.Object","full_declaration":"private static final java.lang.Object CRITICAL_SECTION = new Object()","id":4496},{"comment":"private final ClassValue<T> classValue;","field_name":"classValue","field_type":"java.lang.ClassValue","full_declaration":"private final java.lang.ClassValue classValue","id":4497},{"comment":"private final Entry<T> promise = new Entry<>(this);","field_name":"promise","field_type":"java.lang.ClassValue.Entry","full_declaration":"private final java.lang.ClassValue.Entry promise = new Entry<>(this)","id":4498},{"comment":"// usually of type T, but sometimes (Entry)this\r\nfinal Object value;","field_name":"value","field_type":"java.lang.Object","full_declaration":"final java.lang.Object value","id":4499},{"comment":"static final Entry<?> DEAD_ENTRY = new Entry<>(null, null);","field_name":"DEAD_ENTRY","field_type":"java.lang.ClassValue.Entry","full_declaration":"static final java.lang.ClassValue.Entry DEAD_ENTRY = new Entry<>(null, null)","id":4500},{"comment":"private final Class<?> type;","field_name":"type","field_type":"java.lang.Class","full_declaration":"private final java.lang.Class type","id":4501},{"comment":"","field_name":"cacheArray","field_type":"Entry<?>[]","full_declaration":"private Entry<?>[] cacheArray","id":4502},{"comment":"private int cacheLoad, cacheLoadLimit;","field_name":"cacheLoad","field_type":"int","full_declaration":"private int cacheLoad","id":4503},{"comment":"private int cacheLoad, cacheLoadLimit;","field_name":"cacheLoadLimit","field_type":"int","full_declaration":"private int cacheLoadint cacheLoadLimit","id":4504},{"comment":"/**\r\n * Number of entries initially allocated to each type when first used with any ClassValue.\r\n *  It would be pointless to make this much smaller than the Class and ClassValueMap objects themselves.\r\n *  Must be a power of 2.\r\n */\r\n","field_name":"INITIAL_ENTRIES","field_type":"int","full_declaration":"private static final int INITIAL_ENTRIES = 32","id":4505},{"comment":"/**\r\n * Percent loading of cache before resize.\r\n */\r\n// 0..100\r\n","field_name":"CACHE_LOAD_LIMIT","field_type":"int","full_declaration":"private static final int CACHE_LOAD_LIMIT = 67","id":4506},{"comment":"/**\r\n * Maximum number of probes to attempt.\r\n */\r\n// 1..\r\n","field_name":"PROBE_LIMIT","field_type":"int","full_declaration":"private static final int PROBE_LIMIT = 6","id":4507},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 5195511250079656443L","id":4508},{"comment":"// context conditions.\r\n","field_name":"FINAL_CASED","field_type":"int","full_declaration":"final static int FINAL_CASED = 1","id":4509},{"comment":"","field_name":"AFTER_SOFT_DOTTED","field_type":"int","full_declaration":"final static int AFTER_SOFT_DOTTED = 2","id":4510},{"comment":"","field_name":"MORE_ABOVE","field_type":"int","full_declaration":"final static int MORE_ABOVE = 3","id":4511},{"comment":"","field_name":"AFTER_I","field_type":"int","full_declaration":"final static int AFTER_I = 4","id":4512},{"comment":"","field_name":"NOT_BEFORE_DOT","field_type":"int","full_declaration":"final static int NOT_BEFORE_DOT = 5","id":4513},{"comment":"// combining class definitions\r\n","field_name":"COMBINING_CLASS_ABOVE","field_type":"int","full_declaration":"final static int COMBINING_CLASS_ABOVE = 230","id":4514},{"comment":"// Special case mapping entries\r\n","field_name":"entry","field_type":"Entry[]","full_declaration":"static Entry[] entry = { // # ================================================================================\r\n// # Conditional mappings\r\n// # ================================================================================\r\n// # GREEK CAPITAL LETTER SIGMA\r\nnew Entry(0x03A3, new char[] { 0x03C2 }, new char[] { 0x03A3 }, null, FINAL_CASED), // # LATIN CAPITAL LETTER I WITH DOT ABOVE\r\nnew Entry(0x0130, new char[] { 0x0069, 0x0307 }, new char[] { 0x0130 }, null, 0), // # ================================================================================\r\n// # Locale-sensitive mappings\r\n// # ================================================================================\r\n// # Lithuanian\r\n// # COMBINING DOT ABOVE\r\nnew Entry(0x0307, new char[] { 0x0307 }, new char[] {}, \"lt\", AFTER_SOFT_DOTTED), // # LATIN CAPITAL LETTER I\r\nnew Entry(0x0049, new char[] { 0x0069, 0x0307 }, new char[] { 0x0049 }, \"lt\", MORE_ABOVE), // # LATIN CAPITAL LETTER J\r\nnew Entry(0x004A, new char[] { 0x006A, 0x0307 }, new char[] { 0x004A }, \"lt\", MORE_ABOVE), // # LATIN CAPITAL LETTER I WITH OGONEK\r\nnew Entry(0x012E, new char[] { 0x012F, 0x0307 }, new char[] { 0x012E }, \"lt\", MORE_ABOVE), // # LATIN CAPITAL LETTER I WITH GRAVE\r\nnew Entry(0x00CC, new char[] { 0x0069, 0x0307, 0x0300 }, new char[] { 0x00CC }, \"lt\", 0), // # LATIN CAPITAL LETTER I WITH ACUTE\r\nnew Entry(0x00CD, new char[] { 0x0069, 0x0307, 0x0301 }, new char[] { 0x00CD }, \"lt\", 0), // # LATIN CAPITAL LETTER I WITH TILDE\r\nnew Entry(0x0128, new char[] { 0x0069, 0x0307, 0x0303 }, new char[] { 0x0128 }, \"lt\", 0), // # ================================================================================\r\n// # Turkish and Azeri\r\n// # LATIN CAPITAL LETTER I WITH DOT ABOVE\r\nnew Entry(0x0130, new char[] { 0x0069 }, new char[] { 0x0130 }, \"tr\", 0), // # LATIN CAPITAL LETTER I WITH DOT ABOVE\r\nnew Entry(0x0130, new char[] { 0x0069 }, new char[] { 0x0130 }, \"az\", 0), // # COMBINING DOT ABOVE\r\nnew Entry(0x0307, new char[] {}, new char[] { 0x0307 }, \"tr\", AFTER_I), // # COMBINING DOT ABOVE\r\nnew Entry(0x0307, new char[] {}, new char[] { 0x0307 }, \"az\", AFTER_I), // # LATIN CAPITAL LETTER I\r\nnew Entry(0x0049, new char[] { 0x0131 }, new char[] { 0x0049 }, \"tr\", NOT_BEFORE_DOT), // # LATIN CAPITAL LETTER I\r\nnew Entry(0x0049, new char[] { 0x0131 }, new char[] { 0x0049 }, \"az\", NOT_BEFORE_DOT), // # LATIN SMALL LETTER I\r\nnew Entry(0x0069, new char[] { 0x0069 }, new char[] { 0x0130 }, \"tr\", 0), // # LATIN SMALL LETTER I\r\nnew Entry(0x0069, new char[] { 0x0069 }, new char[] { 0x0130 }, \"az\", 0) }","id":4515},{"comment":"// A hash table that contains the above entries\r\nstatic Hashtable<Integer, HashSet<Entry>> entryTable = new Hashtable<>();","field_name":"entryTable","field_type":"java.util.Hashtable","full_declaration":"static java.util.Hashtable entryTable = new Hashtable<>()","id":4516},{"comment":"","field_name":"ch","field_type":"int","full_declaration":"int ch","id":4517},{"comment":"","field_name":"lower","field_type":"char[]","full_declaration":"char[] lower","id":4518},{"comment":"","field_name":"upper","field_type":"char[]","full_declaration":"char[] upper","id":4519},{"comment":"String lang;","field_name":"lang","field_type":"java.lang.String","full_declaration":"java.lang.String lang","id":4520},{"comment":"","field_name":"condition","field_type":"int","full_declaration":"int condition","id":4521},{"comment":"/**\r\n * A constant holding the positive infinity of type\r\n * {@code double}. It is equal to the value returned by\r\n * {@code Double.longBitsToDouble(0x7ff0000000000000L)}.\r\n */\r\n","field_name":"POSITIVE_INFINITY","field_type":"double","full_declaration":"public static final double POSITIVE_INFINITY = 1.0 / 0.0","id":4522},{"comment":"/**\r\n * A constant holding the negative infinity of type\r\n * {@code double}. It is equal to the value returned by\r\n * {@code Double.longBitsToDouble(0xfff0000000000000L)}.\r\n */\r\n","field_name":"NEGATIVE_INFINITY","field_type":"double","full_declaration":"public static final double NEGATIVE_INFINITY = -1.0 / 0.0","id":4523},{"comment":"/**\r\n * A constant holding a Not-a-Number (NaN) value of type\r\n * {@code double}. It is equivalent to the value returned by\r\n * {@code Double.longBitsToDouble(0x7ff8000000000000L)}.\r\n */\r\n","field_name":"NaN","field_type":"double","full_declaration":"public static final double NaN = 0.0d / 0.0","id":4524},{"comment":"/**\r\n * A constant holding the largest positive finite value of type\r\n * {@code double},\r\n * (2-2<sup>-52</sup>)&middot;2<sup>1023</sup>.  It is equal to\r\n * the hexadecimal floating-point literal\r\n * {@code 0x1.fffffffffffffP+1023} and also equal to\r\n * {@code Double.longBitsToDouble(0x7fefffffffffffffL)}.\r\n */\r\n// 1.7976931348623157e+308\r\n","field_name":"MAX_VALUE","field_type":"double","full_declaration":"public static final double MAX_VALUE = 0x1.fffffffffffffP+1023","id":4525},{"comment":"/**\r\n * A constant holding the smallest positive normal value of type\r\n * {@code double}, 2<sup>-1022</sup>.  It is equal to the\r\n * hexadecimal floating-point literal {@code 0x1.0p-1022} and also\r\n * equal to {@code Double.longBitsToDouble(0x0010000000000000L)}.\r\n *\r\n * @since 1.6\r\n */\r\n// 2.2250738585072014E-308\r\n","field_name":"MIN_NORMAL","field_type":"double","full_declaration":"public static final double MIN_NORMAL = 0x1.0p-1022","id":4526},{"comment":"/**\r\n * A constant holding the smallest positive nonzero value of type\r\n * {@code double}, 2<sup>-1074</sup>. It is equal to the\r\n * hexadecimal floating-point literal\r\n * {@code 0x0.0000000000001P-1022} and also equal to\r\n * {@code Double.longBitsToDouble(0x1L)}.\r\n */\r\n// 4.9e-324\r\n","field_name":"MIN_VALUE","field_type":"double","full_declaration":"public static final double MIN_VALUE = 0x0.0000000000001P-1022","id":4527},{"comment":"/**\r\n * Maximum exponent a finite {@code double} variable may have.\r\n * It is equal to the value returned by\r\n * {@code Math.getExponent(Double.MAX_VALUE)}.\r\n *\r\n * @since 1.6\r\n */\r\n","field_name":"MAX_EXPONENT","field_type":"int","full_declaration":"public static final int MAX_EXPONENT = 1023","id":4528},{"comment":"/**\r\n * Minimum exponent a normalized {@code double} variable may\r\n * have.  It is equal to the value returned by\r\n * {@code Math.getExponent(Double.MIN_NORMAL)}.\r\n *\r\n * @since 1.6\r\n */\r\n","field_name":"MIN_EXPONENT","field_type":"int","full_declaration":"public static final int MIN_EXPONENT = -1022","id":4529},{"comment":"/**\r\n * The number of bits used to represent a {@code double} value.\r\n *\r\n * @since 1.5\r\n */\r\n","field_name":"SIZE","field_type":"int","full_declaration":"public static final int SIZE = 64","id":4530},{"comment":"/**\r\n * The number of bytes used to represent a {@code double} value.\r\n *\r\n * @since 1.8\r\n */\r\n","field_name":"BYTES","field_type":"int","full_declaration":"public static final int BYTES = SIZE / Byte.SIZE","id":4531},{"comment":"/**\r\n * The {@code Class} instance representing the primitive type\r\n * {@code double}.\r\n *\r\n * @since JDK1.1\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\npublic static final Class<Double> TYPE = (Class<Double>) Class.getPrimitiveClass(\"double\");","field_name":"TYPE","field_type":"java.lang.Class","full_declaration":"public static final java.lang.Class TYPE = (Class<Double>) Class.getPrimitiveClass(\"double\")","id":4532},{"comment":"/**\r\n * The value of the Double.\r\n *\r\n * @serial\r\n */\r\n","field_name":"value","field_type":"double","full_declaration":"private final double value","id":4533},{"comment":"/**\r\n * use serialVersionUID from JDK 1.0.2 for interoperability\r\n */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -9172774392245257468L","id":4534},{"comment":"/**\r\n * The name of this enum constant, as declared in the enum declaration.\r\n * Most programmers should use the {@link #toString} method rather than\r\n * accessing this field.\r\n */\r\nprivate final String name;","field_name":"name","field_type":"java.lang.String","full_declaration":"private final java.lang.String name","id":4535},{"comment":"/**\r\n * The ordinal of this enumeration constant (its position\r\n * in the enum declaration, where the initial constant is assigned\r\n * an ordinal of zero).\r\n *\r\n * Most programmers will have no use for this field.  It is designed\r\n * for use by sophisticated enum-based data structures, such as\r\n * {@link java.util.EnumSet} and {@link java.util.EnumMap}.\r\n */\r\n","field_name":"ordinal","field_type":"int","full_declaration":"private final int ordinal","id":4536},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -6046998521960521108L","id":4537},{"comment":"/**\r\n * The type of the missing enum constant.\r\n */\r\nprivate Class<? extends Enum> enumType;","field_name":"enumType","field_type":"java.lang.Class","full_declaration":"private java.lang.Class enumType","id":4538},{"comment":"/**\r\n * The name of the missing enum constant.\r\n */\r\nprivate String constantName;","field_name":"constantName","field_type":"java.lang.String","full_declaration":"private java.lang.String constantName","id":4539},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"static final long serialVersionUID = 4980196508277280342L","id":4540},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"static final long serialVersionUID = -3387516993124229948L","id":4541},{"comment":"/**\r\n * Use serialVersionUID from JDK 1.1.X for interoperability\r\n */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 1521711792217232256L","id":4542},{"comment":"/**\r\n * This field holds the exception if the\r\n * ExceptionInInitializerError(Throwable thrown) constructor was\r\n * used to instantiate the object\r\n *\r\n * @serial\r\n */\r\nprivate Throwable exception;","field_name":"exception","field_type":"java.lang.Throwable","full_declaration":"private java.lang.Throwable exception","id":4543},{"comment":"/**\r\n * A constant holding the positive infinity of type\r\n * {@code float}. It is equal to the value returned by\r\n * {@code Float.intBitsToFloat(0x7f800000)}.\r\n */\r\n","field_name":"POSITIVE_INFINITY","field_type":"float","full_declaration":"public static final float POSITIVE_INFINITY = 1.0f / 0.0f","id":4544},{"comment":"/**\r\n * A constant holding the negative infinity of type\r\n * {@code float}. It is equal to the value returned by\r\n * {@code Float.intBitsToFloat(0xff800000)}.\r\n */\r\n","field_name":"NEGATIVE_INFINITY","field_type":"float","full_declaration":"public static final float NEGATIVE_INFINITY = -1.0f / 0.0f","id":4545},{"comment":"/**\r\n * A constant holding a Not-a-Number (NaN) value of type\r\n * {@code float}.  It is equivalent to the value returned by\r\n * {@code Float.intBitsToFloat(0x7fc00000)}.\r\n */\r\n","field_name":"NaN","field_type":"float","full_declaration":"public static final float NaN = 0.0f / 0.0f","id":4546},{"comment":"/**\r\n * A constant holding the largest positive finite value of type\r\n * {@code float}, (2-2<sup>-23</sup>)&middot;2<sup>127</sup>.\r\n * It is equal to the hexadecimal floating-point literal\r\n * {@code 0x1.fffffeP+127f} and also equal to\r\n * {@code Float.intBitsToFloat(0x7f7fffff)}.\r\n */\r\n// 3.4028235e+38f\r\n","field_name":"MAX_VALUE","field_type":"float","full_declaration":"public static final float MAX_VALUE = 0x1.fffffeP+127f","id":4547},{"comment":"/**\r\n * A constant holding the smallest positive normal value of type\r\n * {@code float}, 2<sup>-126</sup>.  It is equal to the\r\n * hexadecimal floating-point literal {@code 0x1.0p-126f} and also\r\n * equal to {@code Float.intBitsToFloat(0x00800000)}.\r\n *\r\n * @since 1.6\r\n */\r\n// 1.17549435E-38f\r\n","field_name":"MIN_NORMAL","field_type":"float","full_declaration":"public static final float MIN_NORMAL = 0x1.0p-126f","id":4548},{"comment":"/**\r\n * A constant holding the smallest positive nonzero value of type\r\n * {@code float}, 2<sup>-149</sup>. It is equal to the\r\n * hexadecimal floating-point literal {@code 0x0.000002P-126f}\r\n * and also equal to {@code Float.intBitsToFloat(0x1)}.\r\n */\r\n// 1.4e-45f\r\n","field_name":"MIN_VALUE","field_type":"float","full_declaration":"public static final float MIN_VALUE = 0x0.000002P-126f","id":4549},{"comment":"/**\r\n * Maximum exponent a finite {@code float} variable may have.  It\r\n * is equal to the value returned by {@code\r\n * Math.getExponent(Float.MAX_VALUE)}.\r\n *\r\n * @since 1.6\r\n */\r\n","field_name":"MAX_EXPONENT","field_type":"int","full_declaration":"public static final int MAX_EXPONENT = 127","id":4550},{"comment":"/**\r\n * Minimum exponent a normalized {@code float} variable may have.\r\n * It is equal to the value returned by {@code\r\n * Math.getExponent(Float.MIN_NORMAL)}.\r\n *\r\n * @since 1.6\r\n */\r\n","field_name":"MIN_EXPONENT","field_type":"int","full_declaration":"public static final int MIN_EXPONENT = -126","id":4551},{"comment":"/**\r\n * The number of bits used to represent a {@code float} value.\r\n *\r\n * @since 1.5\r\n */\r\n","field_name":"SIZE","field_type":"int","full_declaration":"public static final int SIZE = 32","id":4552},{"comment":"/**\r\n * The number of bytes used to represent a {@code float} value.\r\n *\r\n * @since 1.8\r\n */\r\n","field_name":"BYTES","field_type":"int","full_declaration":"public static final int BYTES = SIZE / Byte.SIZE","id":4553},{"comment":"/**\r\n * The {@code Class} instance representing the primitive type\r\n * {@code float}.\r\n *\r\n * @since JDK1.1\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\npublic static final Class<Float> TYPE = (Class<Float>) Class.getPrimitiveClass(\"float\");","field_name":"TYPE","field_type":"java.lang.Class","full_declaration":"public static final java.lang.Class TYPE = (Class<Float>) Class.getPrimitiveClass(\"float\")","id":4554},{"comment":"/**\r\n * The value of the Float.\r\n *\r\n * @serial\r\n */\r\n","field_name":"value","field_type":"float","full_declaration":"private final float value","id":4555},{"comment":"/**\r\n * use serialVersionUID from JDK 1.0.2 for interoperability\r\n */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -2671257302660747028L","id":4556},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -8988904074992417891L","id":4557},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 6616958222490762034L","id":4558},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -5365630128856068164L","id":4559},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 3713306369498869069L","id":4560},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"static final long serialVersionUID = -1848914673093119416L","id":4561},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -7626246362397460174L","id":4562},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -4914975503642802119L","id":4563},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 234122996006267687L","id":4564},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -4885810657349421204L","id":4565},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -8441929162975509110L","id":4566},{"comment":"/**\r\n *  The class to redefine\r\n */\r\nprivate final Class<?> mClass;","field_name":"mClass","field_type":"java.lang.Class","full_declaration":"private final java.lang.Class mClass","id":4567},{"comment":"/**\r\n *  The replacement class file bytes\r\n */\r\n","field_name":"mClassFile","field_type":"byte[]","full_declaration":"private final byte[] mClassFile","id":4568},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -3841736710924794009L","id":4569},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 1716652643585309178L","id":4570},{"comment":"/**\r\n * A constant holding the minimum value an {@code int} can\r\n * have, -2<sup>31</sup>.\r\n */\r\n@Native\r\n","field_name":"MIN_VALUE","field_type":"int","full_declaration":"public static final int MIN_VALUE = 0x80000000","id":4571},{"comment":"/**\r\n * A constant holding the maximum value an {@code int} can\r\n * have, 2<sup>31</sup>-1.\r\n */\r\n@Native\r\n","field_name":"MAX_VALUE","field_type":"int","full_declaration":"public static final int MAX_VALUE = 0x7fffffff","id":4572},{"comment":"/**\r\n * The {@code Class} instance representing the primitive type\r\n * {@code int}.\r\n *\r\n * @since   JDK1.1\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\npublic static final Class<Integer> TYPE = (Class<Integer>) Class.getPrimitiveClass(\"int\");","field_name":"TYPE","field_type":"java.lang.Class","full_declaration":"public static final java.lang.Class TYPE = (Class<Integer>) Class.getPrimitiveClass(\"int\")","id":4573},{"comment":"/**\r\n * All possible chars for representing a number as a String\r\n */\r\n","field_name":"digits","field_type":"char[]","full_declaration":"final static char[] digits = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' }","id":4574},{"comment":"","field_name":"DigitTens","field_type":"char[]","full_declaration":"final static char[] DigitTens = { '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '2', '2', '2', '2', '2', '2', '2', '2', '2', '2', '3', '3', '3', '3', '3', '3', '3', '3', '3', '3', '4', '4', '4', '4', '4', '4', '4', '4', '4', '4', '5', '5', '5', '5', '5', '5', '5', '5', '5', '5', '6', '6', '6', '6', '6', '6', '6', '6', '6', '6', '7', '7', '7', '7', '7', '7', '7', '7', '7', '7', '8', '8', '8', '8', '8', '8', '8', '8', '8', '8', '9', '9', '9', '9', '9', '9', '9', '9', '9', '9' }","id":4575},{"comment":"","field_name":"DigitOnes","field_type":"char[]","full_declaration":"final static char[] DigitOnes = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' }","id":4576},{"comment":"","field_name":"sizeTable","field_type":"int[]","full_declaration":"final static int[] sizeTable = { 9, 99, 999, 9999, 99999, 999999, 9999999, 99999999, 999999999, Integer.MAX_VALUE }","id":4577},{"comment":"/**\r\n * The value of the {@code Integer}.\r\n *\r\n * @serial\r\n */\r\n","field_name":"value","field_type":"int","full_declaration":"private final int value","id":4578},{"comment":"// Bit twiddling\r\n/**\r\n * The number of bits used to represent an {@code int} value in two's\r\n * complement binary form.\r\n *\r\n * @since 1.5\r\n */\r\n@Native\r\n","field_name":"SIZE","field_type":"int","full_declaration":"public static final int SIZE = 32","id":4579},{"comment":"/**\r\n * The number of bytes used to represent a {@code int} value in two's\r\n * complement binary form.\r\n *\r\n * @since 1.8\r\n */\r\n","field_name":"BYTES","field_type":"int","full_declaration":"public static final int BYTES = SIZE / Byte.SIZE","id":4580},{"comment":"/**\r\n * use serialVersionUID from JDK 1.0.2 for interoperability\r\n */\r\n@Native\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 1360826667806852920L","id":4581},{"comment":"","field_name":"low","field_type":"int","full_declaration":"static final int low = -128","id":4582},{"comment":"","field_name":"high","field_type":"int","full_declaration":"static final int high","id":4583},{"comment":"","field_name":"cache","field_type":"Integer[]","full_declaration":"static final Integer[] cache","id":4584},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -9062593416125562365L","id":4585},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 6700697376100628473L","id":4586},{"comment":"/*\r\n     * For context, the comments for the following fields are marked in quotes\r\n     * with their values, given this program:\r\n     * interface II<T> {  Object foo(T x); }\r\n     * interface JJ<R extends Number> extends II<R> { }\r\n     * class CC {  String impl(int i) { return \"impl:\"+i; }}\r\n     * class X {\r\n     *     public static void main(String[] args) {\r\n     *         JJ<Integer> iii = (new CC())::impl;\r\n     *         System.out.printf(\">>> %s\\n\", iii.foo(44));\r\n     * }}\r\n     */\r\n// The class calling the meta-factory via invokedynamic \"class X\"\r\nfinal Class<?> targetClass;","field_name":"targetClass","field_type":"java.lang.Class","full_declaration":"final java.lang.Class targetClass","id":4587},{"comment":"// The type of the invoked method \"(CC)II\"\r\nfinal MethodType invokedType;","field_name":"invokedType","field_type":"java.lang.invoke.MethodType","full_declaration":"final java.lang.invoke.MethodType invokedType","id":4588},{"comment":"// The type of the returned instance \"interface JJ\"\r\nfinal Class<?> samBase;","field_name":"samBase","field_type":"java.lang.Class","full_declaration":"final java.lang.Class samBase","id":4589},{"comment":"// Name of the SAM method \"foo\"\r\nfinal String samMethodName;","field_name":"samMethodName","field_type":"java.lang.String","full_declaration":"final java.lang.String samMethodName","id":4590},{"comment":"// Type of the SAM method \"(Object)Object\"\r\nfinal MethodType samMethodType;","field_name":"samMethodType","field_type":"java.lang.invoke.MethodType","full_declaration":"final java.lang.invoke.MethodType samMethodType","id":4591},{"comment":"// Raw method handle for the implementation method\r\nfinal MethodHandle implMethod;","field_name":"implMethod","field_type":"java.lang.invoke.MethodHandle","full_declaration":"final java.lang.invoke.MethodHandle implMethod","id":4592},{"comment":"// Info about the implementation method handle \"MethodHandleInfo[5 CC.impl(int)String]\"\r\nfinal MethodHandleInfo implInfo;","field_name":"implInfo","field_type":"java.lang.invoke.MethodHandleInfo","full_declaration":"final java.lang.invoke.MethodHandleInfo implInfo","id":4593},{"comment":"// Invocation kind for implementation \"5\"=invokevirtual\r\n","field_name":"implKind","field_type":"int","full_declaration":"final int implKind","id":4594},{"comment":"// Is the implementation an instance method \"true\"\r\n","field_name":"implIsInstanceMethod","field_type":"boolean","full_declaration":"final boolean implIsInstanceMethod","id":4595},{"comment":"// Type defining the implementation \"class CC\"\r\nfinal Class<?> implDefiningClass;","field_name":"implDefiningClass","field_type":"java.lang.Class","full_declaration":"final java.lang.Class implDefiningClass","id":4596},{"comment":"// Type of the implementation method \"(int)String\"\r\nfinal MethodType implMethodType;","field_name":"implMethodType","field_type":"java.lang.invoke.MethodType","full_declaration":"final java.lang.invoke.MethodType implMethodType","id":4597},{"comment":"// Instantiated erased functional interface method type \"(Integer)Object\"\r\nfinal MethodType instantiatedMethodType;","field_name":"instantiatedMethodType","field_type":"java.lang.invoke.MethodType","full_declaration":"final java.lang.invoke.MethodType instantiatedMethodType","id":4598},{"comment":"// Should the returned instance be serializable\r\n","field_name":"isSerializable","field_type":"boolean","full_declaration":"final boolean isSerializable","id":4599},{"comment":"// Additional marker interfaces to be implemented\r\n","field_name":"markerInterfaces","field_type":"Class<?>[]","full_declaration":"final Class<?>[] markerInterfaces","id":4600},{"comment":"// Signatures of additional methods to bridge\r\n","field_name":"additionalBridges","field_type":"MethodType[]","full_declaration":"final MethodType[] additionalBridges","id":4601},{"comment":"// largest convenient BMH field count\r\n","field_name":"FIELD_COUNT_THRESHOLD","field_type":"int","full_declaration":"private static final int FIELD_COUNT_THRESHOLD = 12","id":4602},{"comment":"// largest convenient BMH expression count\r\n","field_name":"FORM_EXPRESSION_THRESHOLD","field_type":"int","full_declaration":"private static final int FORM_EXPRESSION_THRESHOLD = 24","id":4603},{"comment":"private static final Lookup LOOKUP = Lookup.IMPL_LOOKUP;","field_name":"LOOKUP","field_type":"java.lang.invoke.MethodHandles.Lookup","full_declaration":"private static final java.lang.invoke.MethodHandles.Lookup LOOKUP = Lookup.IMPL_LOOKUP","id":4604},{"comment":"/**\r\n * All subclasses must provide such a value describing their type signature.\r\n */\r\nstatic final SpeciesData SPECIES_DATA = SpeciesData.EMPTY;","field_name":"SPECIES_DATA","field_type":"java.lang.invoke.BoundMethodHandle.SpeciesData","full_declaration":"static final java.lang.invoke.BoundMethodHandle.SpeciesData SPECIES_DATA = SpeciesData.EMPTY","id":4605},{"comment":"","field_name":"SPECIES_DATA_CACHE","field_type":"SpeciesData[]","full_declaration":"private static final SpeciesData[] SPECIES_DATA_CACHE = new SpeciesData[5]","id":4606},{"comment":"final Object argL0;","field_name":"argL0","field_type":"java.lang.Object","full_declaration":"final java.lang.Object argL0","id":4607},{"comment":"/*non-public*/\r\nstatic final SpeciesData SPECIES_DATA = new SpeciesData(\"L\", Species_L.class);","field_name":"SPECIES_DATA","field_type":"java.lang.invoke.BoundMethodHandle.SpeciesData","full_declaration":"static final java.lang.invoke.BoundMethodHandle.SpeciesData SPECIES_DATA = new SpeciesData(\"L\", Species_L.class)","id":4608},{"comment":"private final String typeChars;","field_name":"typeChars","field_type":"java.lang.String","full_declaration":"private final java.lang.String typeChars","id":4609},{"comment":"","field_name":"typeCodes","field_type":"BasicType[]","full_declaration":"private final BasicType[] typeCodes","id":4610},{"comment":"private final Class<? extends BoundMethodHandle> clazz;","field_name":"clazz","field_type":"java.lang.Class","full_declaration":"private final java.lang.Class clazz","id":4611},{"comment":"// Bootstrapping requires circular relations MH -> BMH -> SpeciesData -> MH\r\n// Therefore, we need a non-final link in the chain.  Use array elements.\r\n@Stable\r\n","field_name":"constructor","field_type":"MethodHandle[]","full_declaration":"private final MethodHandle[] constructor","id":4612},{"comment":"@Stable\r\n","field_name":"getters","field_type":"MethodHandle[]","full_declaration":"private final MethodHandle[] getters","id":4613},{"comment":"@Stable\r\n","field_name":"nominalGetters","field_type":"NamedFunction[]","full_declaration":"private final NamedFunction[] nominalGetters","id":4614},{"comment":"@Stable\r\n","field_name":"extensions","field_type":"SpeciesData[]","full_declaration":"private final SpeciesData[] extensions","id":4615},{"comment":"static final SpeciesData EMPTY = new SpeciesData(\"\", BoundMethodHandle.class);","field_name":"EMPTY","field_type":"java.lang.invoke.BoundMethodHandle.SpeciesData","full_declaration":"static final java.lang.invoke.BoundMethodHandle.SpeciesData EMPTY = new SpeciesData(\"\", BoundMethodHandle.class)","id":4616},{"comment":"private static final ConcurrentMap<String, SpeciesData> CACHE = new ConcurrentHashMap<>();","field_name":"CACHE","field_type":"java.util.concurrent.ConcurrentMap","full_declaration":"private static final java.util.concurrent.ConcurrentMap CACHE = new ConcurrentHashMap<>()","id":4617},{"comment":"// set after <clinit> finishes...\r\n","field_name":"INIT_DONE","field_type":"boolean","full_declaration":"private static final boolean INIT_DONE","id":4618},{"comment":"static final String JLO_SIG = \"Ljava/lang/Object;\";","field_name":"JLO_SIG","field_type":"java.lang.String","full_declaration":"static final java.lang.String JLO_SIG = \"Ljava/lang/Object;\"","id":4619},{"comment":"static final String JLS_SIG = \"Ljava/lang/String;\";","field_name":"JLS_SIG","field_type":"java.lang.String","full_declaration":"static final java.lang.String JLS_SIG = \"Ljava/lang/String;\"","id":4620},{"comment":"static final String JLC_SIG = \"Ljava/lang/Class;\";","field_name":"JLC_SIG","field_type":"java.lang.String","full_declaration":"static final java.lang.String JLC_SIG = \"Ljava/lang/Class;\"","id":4621},{"comment":"static final String MH = \"java/lang/invoke/MethodHandle\";","field_name":"MH","field_type":"java.lang.String","full_declaration":"static final java.lang.String MH = \"java/lang/invoke/MethodHandle\"","id":4622},{"comment":"static final String MH_SIG = \"L\" + MH + \";\";","field_name":"MH_SIG","field_type":"java.lang.String","full_declaration":"static final java.lang.String MH_SIG = \"L\" + MH + \";\"","id":4623},{"comment":"static final String BMH = \"java/lang/invoke/BoundMethodHandle\";","field_name":"BMH","field_type":"java.lang.String","full_declaration":"static final java.lang.String BMH = \"java/lang/invoke/BoundMethodHandle\"","id":4624},{"comment":"static final String BMH_SIG = \"L\" + BMH + \";\";","field_name":"BMH_SIG","field_type":"java.lang.String","full_declaration":"static final java.lang.String BMH_SIG = \"L\" + BMH + \";\"","id":4625},{"comment":"static final String SPECIES_DATA = \"java/lang/invoke/BoundMethodHandle$SpeciesData\";","field_name":"SPECIES_DATA","field_type":"java.lang.String","full_declaration":"static final java.lang.String SPECIES_DATA = \"java/lang/invoke/BoundMethodHandle$SpeciesData\"","id":4626},{"comment":"static final String SPECIES_DATA_SIG = \"L\" + SPECIES_DATA + \";\";","field_name":"SPECIES_DATA_SIG","field_type":"java.lang.String","full_declaration":"static final java.lang.String SPECIES_DATA_SIG = \"L\" + SPECIES_DATA + \";\"","id":4627},{"comment":"static final String STABLE_SIG = \"Ljava/lang/invoke/Stable;\";","field_name":"STABLE_SIG","field_type":"java.lang.String","full_declaration":"static final java.lang.String STABLE_SIG = \"Ljava/lang/invoke/Stable;\"","id":4628},{"comment":"static final String SPECIES_PREFIX_NAME = \"Species_\";","field_name":"SPECIES_PREFIX_NAME","field_type":"java.lang.String","full_declaration":"static final java.lang.String SPECIES_PREFIX_NAME = \"Species_\"","id":4629},{"comment":"static final String SPECIES_PREFIX_PATH = BMH + \"$\" + SPECIES_PREFIX_NAME;","field_name":"SPECIES_PREFIX_PATH","field_type":"java.lang.String","full_declaration":"static final java.lang.String SPECIES_PREFIX_PATH = BMH + \"$\" + SPECIES_PREFIX_NAME","id":4630},{"comment":"static final String BMHSPECIES_DATA_EWI_SIG = \"(B)\" + SPECIES_DATA_SIG;","field_name":"BMHSPECIES_DATA_EWI_SIG","field_type":"java.lang.String","full_declaration":"static final java.lang.String BMHSPECIES_DATA_EWI_SIG = \"(B)\" + SPECIES_DATA_SIG","id":4631},{"comment":"static final String BMHSPECIES_DATA_GFC_SIG = \"(\" + JLS_SIG + JLC_SIG + \")\" + SPECIES_DATA_SIG;","field_name":"BMHSPECIES_DATA_GFC_SIG","field_type":"java.lang.String","full_declaration":"static final java.lang.String BMHSPECIES_DATA_GFC_SIG = \"(\" + JLS_SIG + JLC_SIG + \")\" + SPECIES_DATA_SIG","id":4632},{"comment":"static final String MYSPECIES_DATA_SIG = \"()\" + SPECIES_DATA_SIG;","field_name":"MYSPECIES_DATA_SIG","field_type":"java.lang.String","full_declaration":"static final java.lang.String MYSPECIES_DATA_SIG = \"()\" + SPECIES_DATA_SIG","id":4633},{"comment":"static final String VOID_SIG = \"()V\";","field_name":"VOID_SIG","field_type":"java.lang.String","full_declaration":"static final java.lang.String VOID_SIG = \"()V\"","id":4634},{"comment":"static final String INT_SIG = \"()I\";","field_name":"INT_SIG","field_type":"java.lang.String","full_declaration":"static final java.lang.String INT_SIG = \"()I\"","id":4635},{"comment":"static final String SIG_INCIPIT = \"(Ljava/lang/invoke/MethodType;Ljava/lang/invoke/LambdaForm;\";","field_name":"SIG_INCIPIT","field_type":"java.lang.String","full_declaration":"static final java.lang.String SIG_INCIPIT = \"(Ljava/lang/invoke/MethodType;Ljava/lang/invoke/LambdaForm;\"","id":4636},{"comment":"","field_name":"E_THROWABLE","field_type":"String[]","full_declaration":"static final String[] E_THROWABLE = new String[] { \"java/lang/Throwable\" }","id":4637},{"comment":"static final ConcurrentMap<String, Class<? extends BoundMethodHandle>> CLASS_CACHE = new ConcurrentHashMap<>();","field_name":"CLASS_CACHE","field_type":"java.util.concurrent.ConcurrentMap","full_declaration":"static final java.util.concurrent.ConcurrentMap CLASS_CACHE = new ConcurrentHashMap<>()","id":4638},{"comment":"// The actual payload of this call site:\r\n/*package-private*/\r\n// Note: This field is known to the JVM.  Do not change.\r\nMethodHandle target;","field_name":"target","field_type":"java.lang.invoke.MethodHandle","full_declaration":"java.lang.invoke.MethodHandle target","id":4639},{"comment":"private static final MethodHandle GET_TARGET;","field_name":"GET_TARGET","field_type":"java.lang.invoke.MethodHandle","full_declaration":"private static final java.lang.invoke.MethodHandle GET_TARGET","id":4640},{"comment":"private static final MethodHandle THROW_UCS;","field_name":"THROW_UCS","field_type":"java.lang.invoke.MethodHandle","full_declaration":"private static final java.lang.invoke.MethodHandle THROW_UCS","id":4641},{"comment":"// unsafe stuff:\r\n","field_name":"TARGET_OFFSET","field_type":"long","full_declaration":"private static final long TARGET_OFFSET","id":4642},{"comment":"","field_name":"isFrozen","field_type":"boolean","full_declaration":"private final boolean isFrozen","id":4643},{"comment":"static final NamedFunction NF_getTarget;","field_name":"NF_getTarget","field_type":"java.lang.invoke.LambdaForm.NamedFunction","full_declaration":"static final java.lang.invoke.LambdaForm.NamedFunction NF_getTarget","id":4644},{"comment":"final MemberName member;","field_name":"member","field_type":"java.lang.invoke.MemberName","full_declaration":"final java.lang.invoke.MemberName member","id":4645},{"comment":"private static final MemberName.Factory IMPL_NAMES = MemberName.getFactory();","field_name":"IMPL_NAMES","field_type":"java.lang.invoke.MemberName.Factory","full_declaration":"private static final java.lang.invoke.MemberName.Factory IMPL_NAMES = MemberName.getFactory()","id":4646},{"comment":"// Caching machinery for field accessors:\r\nprivate static byte AF_GETFIELD = 0, AF_PUTFIELD = 1, AF_GETSTATIC = 2, AF_PUTSTATIC = 3, AF_GETSTATIC_INIT = 4, AF_PUTSTATIC_INIT = 5, AF_LIMIT = 6;","field_name":"AF_GETFIELD","field_type":"byte","full_declaration":"private static byte AF_GETFIELD = 0","id":4647},{"comment":"// Caching machinery for field accessors:\r\nprivate static byte AF_GETFIELD = 0, AF_PUTFIELD = 1, AF_GETSTATIC = 2, AF_PUTSTATIC = 3, AF_GETSTATIC_INIT = 4, AF_PUTSTATIC_INIT = 5, AF_LIMIT = 6;","field_name":"AF_PUTFIELD","field_type":"byte","full_declaration":"private static byte AF_GETFIELD = 0byte AF_PUTFIELD = 1","id":4648},{"comment":"// Caching machinery for field accessors:\r\nprivate static byte AF_GETFIELD = 0, AF_PUTFIELD = 1, AF_GETSTATIC = 2, AF_PUTSTATIC = 3, AF_GETSTATIC_INIT = 4, AF_PUTSTATIC_INIT = 5, AF_LIMIT = 6;","field_name":"AF_GETSTATIC","field_type":"byte","full_declaration":"private static byte AF_GETFIELD = 0byte AF_PUTFIELD = 1byte AF_GETSTATIC = 2","id":4649},{"comment":"// Caching machinery for field accessors:\r\nprivate static byte AF_GETFIELD = 0, AF_PUTFIELD = 1, AF_GETSTATIC = 2, AF_PUTSTATIC = 3, AF_GETSTATIC_INIT = 4, AF_PUTSTATIC_INIT = 5, AF_LIMIT = 6;","field_name":"AF_PUTSTATIC","field_type":"byte","full_declaration":"private static byte AF_GETFIELD = 0byte AF_PUTFIELD = 1byte AF_GETSTATIC = 2byte AF_PUTSTATIC = 3","id":4650},{"comment":"// Caching machinery for field accessors:\r\nprivate static byte AF_GETFIELD = 0, AF_PUTFIELD = 1, AF_GETSTATIC = 2, AF_PUTSTATIC = 3, AF_GETSTATIC_INIT = 4, AF_PUTSTATIC_INIT = 5, AF_LIMIT = 6;","field_name":"AF_GETSTATIC_INIT","field_type":"byte","full_declaration":"private static byte AF_GETFIELD = 0byte AF_PUTFIELD = 1byte AF_GETSTATIC = 2byte AF_PUTSTATIC = 3byte AF_GETSTATIC_INIT = 4","id":4651},{"comment":"// Caching machinery for field accessors:\r\nprivate static byte AF_GETFIELD = 0, AF_PUTFIELD = 1, AF_GETSTATIC = 2, AF_PUTSTATIC = 3, AF_GETSTATIC_INIT = 4, AF_PUTSTATIC_INIT = 5, AF_LIMIT = 6;","field_name":"AF_PUTSTATIC_INIT","field_type":"byte","full_declaration":"private static byte AF_GETFIELD = 0byte AF_PUTFIELD = 1byte AF_GETSTATIC = 2byte AF_PUTSTATIC = 3byte AF_GETSTATIC_INIT = 4byte AF_PUTSTATIC_INIT = 5","id":4652},{"comment":"// Caching machinery for field accessors:\r\nprivate static byte AF_GETFIELD = 0, AF_PUTFIELD = 1, AF_GETSTATIC = 2, AF_PUTSTATIC = 3, AF_GETSTATIC_INIT = 4, AF_PUTSTATIC_INIT = 5, AF_LIMIT = 6;","field_name":"AF_LIMIT","field_type":"byte","full_declaration":"private static byte AF_GETFIELD = 0byte AF_PUTFIELD = 1byte AF_GETSTATIC = 2byte AF_PUTSTATIC = 3byte AF_GETSTATIC_INIT = 4byte AF_PUTSTATIC_INIT = 5byte AF_LIMIT = 6","id":4653},{"comment":"// Enumerate the different field kinds using Wrapper,\r\n// with an extra case added for checked references.\r\nprivate static int FT_LAST_WRAPPER = Wrapper.values().length - 1, FT_UNCHECKED_REF = Wrapper.OBJECT.ordinal(), FT_CHECKED_REF = FT_LAST_WRAPPER + 1, FT_LIMIT = FT_LAST_WRAPPER + 2;","field_name":"FT_LAST_WRAPPER","field_type":"int","full_declaration":"private static int FT_LAST_WRAPPER = Wrapper.values().length - 1","id":4654},{"comment":"// Enumerate the different field kinds using Wrapper,\r\n// with an extra case added for checked references.\r\nprivate static int FT_LAST_WRAPPER = Wrapper.values().length - 1, FT_UNCHECKED_REF = Wrapper.OBJECT.ordinal(), FT_CHECKED_REF = FT_LAST_WRAPPER + 1, FT_LIMIT = FT_LAST_WRAPPER + 2;","field_name":"FT_UNCHECKED_REF","field_type":"int","full_declaration":"private static int FT_LAST_WRAPPER = Wrapper.values().length - 1int FT_UNCHECKED_REF = Wrapper.OBJECT.ordinal()","id":4655},{"comment":"// Enumerate the different field kinds using Wrapper,\r\n// with an extra case added for checked references.\r\nprivate static int FT_LAST_WRAPPER = Wrapper.values().length - 1, FT_UNCHECKED_REF = Wrapper.OBJECT.ordinal(), FT_CHECKED_REF = FT_LAST_WRAPPER + 1, FT_LIMIT = FT_LAST_WRAPPER + 2;","field_name":"FT_CHECKED_REF","field_type":"int","full_declaration":"private static int FT_LAST_WRAPPER = Wrapper.values().length - 1int FT_UNCHECKED_REF = Wrapper.OBJECT.ordinal()int FT_CHECKED_REF = FT_LAST_WRAPPER + 1","id":4656},{"comment":"// Enumerate the different field kinds using Wrapper,\r\n// with an extra case added for checked references.\r\nprivate static int FT_LAST_WRAPPER = Wrapper.values().length - 1, FT_UNCHECKED_REF = Wrapper.OBJECT.ordinal(), FT_CHECKED_REF = FT_LAST_WRAPPER + 1, FT_LIMIT = FT_LAST_WRAPPER + 2;","field_name":"FT_LIMIT","field_type":"int","full_declaration":"private static int FT_LAST_WRAPPER = Wrapper.values().length - 1int FT_UNCHECKED_REF = Wrapper.OBJECT.ordinal()int FT_CHECKED_REF = FT_LAST_WRAPPER + 1int FT_LIMIT = FT_LAST_WRAPPER + 2","id":4657},{"comment":"","field_name":"ACCESSOR_FORMS","field_type":"LambdaForm[]","full_declaration":"private static final LambdaForm[] ACCESSOR_FORMS = new LambdaForm[afIndex(AF_LIMIT, false, 0)]","id":4658},{"comment":"static final EnsureInitialized INSTANCE = new EnsureInitialized();","field_name":"INSTANCE","field_type":"java.lang.invoke.DirectMethodHandle.EnsureInitialized","full_declaration":"static final java.lang.invoke.DirectMethodHandle.EnsureInitialized INSTANCE = new EnsureInitialized()","id":4659},{"comment":"private final Class<?> refc;","field_name":"refc","field_type":"java.lang.Class","full_declaration":"private final java.lang.Class refc","id":4660},{"comment":"final MemberName initMethod;","field_name":"initMethod","field_type":"java.lang.invoke.MemberName","full_declaration":"final java.lang.invoke.MemberName initMethod","id":4661},{"comment":"final Class<?> instanceClass;","field_name":"instanceClass","field_type":"java.lang.Class","full_declaration":"final java.lang.Class instanceClass","id":4662},{"comment":"final Class<?> fieldType;","field_name":"fieldType","field_type":"java.lang.Class","full_declaration":"final java.lang.Class fieldType","id":4663},{"comment":"","field_name":"fieldOffset","field_type":"int","full_declaration":"final int fieldOffset","id":4664},{"comment":"final private Class<?> fieldType;","field_name":"fieldType","field_type":"java.lang.Class","full_declaration":"final private java.lang.Class fieldType","id":4665},{"comment":"final private Object staticBase;","field_name":"staticBase","field_type":"java.lang.Object","full_declaration":"final private java.lang.Object staticBase","id":4666},{"comment":"","field_name":"staticOffset","field_type":"long","full_declaration":"final private long staticOffset","id":4667},{"comment":"static final NamedFunction NF_internalMemberName, NF_internalMemberNameEnsureInit, NF_ensureInitialized, NF_fieldOffset, NF_checkBase, NF_staticBase, NF_staticOffset, NF_checkCast, NF_allocateInstance, NF_constructorMethod, NF_checkReceiver;","field_name":"NF_internalMemberName","field_type":"java.lang.invoke.LambdaForm.NamedFunction","full_declaration":"static final java.lang.invoke.LambdaForm.NamedFunction NF_internalMemberName","id":4668},{"comment":"static final NamedFunction NF_internalMemberName, NF_internalMemberNameEnsureInit, NF_ensureInitialized, NF_fieldOffset, NF_checkBase, NF_staticBase, NF_staticOffset, NF_checkCast, NF_allocateInstance, NF_constructorMethod, NF_checkReceiver;","field_name":"NF_internalMemberNameEnsureInit","field_type":"java.lang.invoke.LambdaForm.NamedFunction","full_declaration":"static final java.lang.invoke.LambdaForm.NamedFunction NF_internalMemberNamejava.lang.invoke.LambdaForm.NamedFunction NF_internalMemberNameEnsureInit","id":4669},{"comment":"static final NamedFunction NF_internalMemberName, NF_internalMemberNameEnsureInit, NF_ensureInitialized, NF_fieldOffset, NF_checkBase, NF_staticBase, NF_staticOffset, NF_checkCast, NF_allocateInstance, NF_constructorMethod, NF_checkReceiver;","field_name":"NF_ensureInitialized","field_type":"java.lang.invoke.LambdaForm.NamedFunction","full_declaration":"static final java.lang.invoke.LambdaForm.NamedFunction NF_internalMemberNamejava.lang.invoke.LambdaForm.NamedFunction NF_internalMemberNameEnsureInitjava.lang.invoke.LambdaForm.NamedFunction NF_ensureInitialized","id":4670},{"comment":"static final NamedFunction NF_internalMemberName, NF_internalMemberNameEnsureInit, NF_ensureInitialized, NF_fieldOffset, NF_checkBase, NF_staticBase, NF_staticOffset, NF_checkCast, NF_allocateInstance, NF_constructorMethod, NF_checkReceiver;","field_name":"NF_fieldOffset","field_type":"java.lang.invoke.LambdaForm.NamedFunction","full_declaration":"static final java.lang.invoke.LambdaForm.NamedFunction NF_internalMemberNamejava.lang.invoke.LambdaForm.NamedFunction NF_internalMemberNameEnsureInitjava.lang.invoke.LambdaForm.NamedFunction NF_ensureInitializedjava.lang.invoke.LambdaForm.NamedFunction NF_fieldOffset","id":4671},{"comment":"static final NamedFunction NF_internalMemberName, NF_internalMemberNameEnsureInit, NF_ensureInitialized, NF_fieldOffset, NF_checkBase, NF_staticBase, NF_staticOffset, NF_checkCast, NF_allocateInstance, NF_constructorMethod, NF_checkReceiver;","field_name":"NF_checkBase","field_type":"java.lang.invoke.LambdaForm.NamedFunction","full_declaration":"static final java.lang.invoke.LambdaForm.NamedFunction NF_internalMemberNamejava.lang.invoke.LambdaForm.NamedFunction NF_internalMemberNameEnsureInitjava.lang.invoke.LambdaForm.NamedFunction NF_ensureInitializedjava.lang.invoke.LambdaForm.NamedFunction NF_fieldOffsetjava.lang.invoke.LambdaForm.NamedFunction NF_checkBase","id":4672},{"comment":"static final NamedFunction NF_internalMemberName, NF_internalMemberNameEnsureInit, NF_ensureInitialized, NF_fieldOffset, NF_checkBase, NF_staticBase, NF_staticOffset, NF_checkCast, NF_allocateInstance, NF_constructorMethod, NF_checkReceiver;","field_name":"NF_staticBase","field_type":"java.lang.invoke.LambdaForm.NamedFunction","full_declaration":"static final java.lang.invoke.LambdaForm.NamedFunction NF_internalMemberNamejava.lang.invoke.LambdaForm.NamedFunction NF_internalMemberNameEnsureInitjava.lang.invoke.LambdaForm.NamedFunction NF_ensureInitializedjava.lang.invoke.LambdaForm.NamedFunction NF_fieldOffsetjava.lang.invoke.LambdaForm.NamedFunction NF_checkBasejava.lang.invoke.LambdaForm.NamedFunction NF_staticBase","id":4673},{"comment":"static final NamedFunction NF_internalMemberName, NF_internalMemberNameEnsureInit, NF_ensureInitialized, NF_fieldOffset, NF_checkBase, NF_staticBase, NF_staticOffset, NF_checkCast, NF_allocateInstance, NF_constructorMethod, NF_checkReceiver;","field_name":"NF_staticOffset","field_type":"java.lang.invoke.LambdaForm.NamedFunction","full_declaration":"static final java.lang.invoke.LambdaForm.NamedFunction NF_internalMemberNamejava.lang.invoke.LambdaForm.NamedFunction NF_internalMemberNameEnsureInitjava.lang.invoke.LambdaForm.NamedFunction NF_ensureInitializedjava.lang.invoke.LambdaForm.NamedFunction NF_fieldOffsetjava.lang.invoke.LambdaForm.NamedFunction NF_checkBasejava.lang.invoke.LambdaForm.NamedFunction NF_staticBasejava.lang.invoke.LambdaForm.NamedFunction NF_staticOffset","id":4674},{"comment":"static final NamedFunction NF_internalMemberName, NF_internalMemberNameEnsureInit, NF_ensureInitialized, NF_fieldOffset, NF_checkBase, NF_staticBase, NF_staticOffset, NF_checkCast, NF_allocateInstance, NF_constructorMethod, NF_checkReceiver;","field_name":"NF_checkCast","field_type":"java.lang.invoke.LambdaForm.NamedFunction","full_declaration":"static final java.lang.invoke.LambdaForm.NamedFunction NF_internalMemberNamejava.lang.invoke.LambdaForm.NamedFunction NF_internalMemberNameEnsureInitjava.lang.invoke.LambdaForm.NamedFunction NF_ensureInitializedjava.lang.invoke.LambdaForm.NamedFunction NF_fieldOffsetjava.lang.invoke.LambdaForm.NamedFunction NF_checkBasejava.lang.invoke.LambdaForm.NamedFunction NF_staticBasejava.lang.invoke.LambdaForm.NamedFunction NF_staticOffsetjava.lang.invoke.LambdaForm.NamedFunction NF_checkCast","id":4675},{"comment":"static final NamedFunction NF_internalMemberName, NF_internalMemberNameEnsureInit, NF_ensureInitialized, NF_fieldOffset, NF_checkBase, NF_staticBase, NF_staticOffset, NF_checkCast, NF_allocateInstance, NF_constructorMethod, NF_checkReceiver;","field_name":"NF_allocateInstance","field_type":"java.lang.invoke.LambdaForm.NamedFunction","full_declaration":"static final java.lang.invoke.LambdaForm.NamedFunction NF_internalMemberNamejava.lang.invoke.LambdaForm.NamedFunction NF_internalMemberNameEnsureInitjava.lang.invoke.LambdaForm.NamedFunction NF_ensureInitializedjava.lang.invoke.LambdaForm.NamedFunction NF_fieldOffsetjava.lang.invoke.LambdaForm.NamedFunction NF_checkBasejava.lang.invoke.LambdaForm.NamedFunction NF_staticBasejava.lang.invoke.LambdaForm.NamedFunction NF_staticOffsetjava.lang.invoke.LambdaForm.NamedFunction NF_checkCastjava.lang.invoke.LambdaForm.NamedFunction NF_allocateInstance","id":4676},{"comment":"static final NamedFunction NF_internalMemberName, NF_internalMemberNameEnsureInit, NF_ensureInitialized, NF_fieldOffset, NF_checkBase, NF_staticBase, NF_staticOffset, NF_checkCast, NF_allocateInstance, NF_constructorMethod, NF_checkReceiver;","field_name":"NF_constructorMethod","field_type":"java.lang.invoke.LambdaForm.NamedFunction","full_declaration":"static final java.lang.invoke.LambdaForm.NamedFunction NF_internalMemberNamejava.lang.invoke.LambdaForm.NamedFunction NF_internalMemberNameEnsureInitjava.lang.invoke.LambdaForm.NamedFunction NF_ensureInitializedjava.lang.invoke.LambdaForm.NamedFunction NF_fieldOffsetjava.lang.invoke.LambdaForm.NamedFunction NF_checkBasejava.lang.invoke.LambdaForm.NamedFunction NF_staticBasejava.lang.invoke.LambdaForm.NamedFunction NF_staticOffsetjava.lang.invoke.LambdaForm.NamedFunction NF_checkCastjava.lang.invoke.LambdaForm.NamedFunction NF_allocateInstancejava.lang.invoke.LambdaForm.NamedFunction NF_constructorMethod","id":4677},{"comment":"static final NamedFunction NF_internalMemberName, NF_internalMemberNameEnsureInit, NF_ensureInitialized, NF_fieldOffset, NF_checkBase, NF_staticBase, NF_staticOffset, NF_checkCast, NF_allocateInstance, NF_constructorMethod, NF_checkReceiver;","field_name":"NF_checkReceiver","field_type":"java.lang.invoke.LambdaForm.NamedFunction","full_declaration":"static final java.lang.invoke.LambdaForm.NamedFunction NF_internalMemberNamejava.lang.invoke.LambdaForm.NamedFunction NF_internalMemberNameEnsureInitjava.lang.invoke.LambdaForm.NamedFunction NF_ensureInitializedjava.lang.invoke.LambdaForm.NamedFunction NF_fieldOffsetjava.lang.invoke.LambdaForm.NamedFunction NF_checkBasejava.lang.invoke.LambdaForm.NamedFunction NF_staticBasejava.lang.invoke.LambdaForm.NamedFunction NF_staticOffsetjava.lang.invoke.LambdaForm.NamedFunction NF_checkCastjava.lang.invoke.LambdaForm.NamedFunction NF_allocateInstancejava.lang.invoke.LambdaForm.NamedFunction NF_constructorMethodjava.lang.invoke.LambdaForm.NamedFunction NF_checkReceiver","id":4678},{"comment":"private final MemberName member;","field_name":"member","field_type":"java.lang.invoke.MemberName","full_declaration":"private final java.lang.invoke.MemberName member","id":4679},{"comment":"","field_name":"referenceKind","field_type":"int","full_declaration":"private final int referenceKind","id":4680},{"comment":"private static final Unsafe UNSAFE = Unsafe.getUnsafe();","field_name":"UNSAFE","field_type":"sun.misc.Unsafe","full_declaration":"private static final sun.misc.Unsafe UNSAFE = Unsafe.getUnsafe()","id":4681},{"comment":"","field_name":"CLASSFILE_VERSION","field_type":"int","full_declaration":"private static final int CLASSFILE_VERSION = 52","id":4682},{"comment":"private static final String METHOD_DESCRIPTOR_VOID = Type.getMethodDescriptor(Type.VOID_TYPE);","field_name":"METHOD_DESCRIPTOR_VOID","field_type":"java.lang.String","full_declaration":"private static final java.lang.String METHOD_DESCRIPTOR_VOID = Type.getMethodDescriptor(Type.VOID_TYPE)","id":4683},{"comment":"private static final String JAVA_LANG_OBJECT = \"java/lang/Object\";","field_name":"JAVA_LANG_OBJECT","field_type":"java.lang.String","full_declaration":"private static final java.lang.String JAVA_LANG_OBJECT = \"java/lang/Object\"","id":4684},{"comment":"private static final String NAME_CTOR = \"<init>\";","field_name":"NAME_CTOR","field_type":"java.lang.String","full_declaration":"private static final java.lang.String NAME_CTOR = \"<init>\"","id":4685},{"comment":"private static final String NAME_FACTORY = \"get$Lambda\";","field_name":"NAME_FACTORY","field_type":"java.lang.String","full_declaration":"private static final java.lang.String NAME_FACTORY = \"get$Lambda\"","id":4686},{"comment":"// Serialization support\r\nprivate static final String NAME_SERIALIZED_LAMBDA = \"java/lang/invoke/SerializedLambda\";","field_name":"NAME_SERIALIZED_LAMBDA","field_type":"java.lang.String","full_declaration":"private static final java.lang.String NAME_SERIALIZED_LAMBDA = \"java/lang/invoke/SerializedLambda\"","id":4687},{"comment":"private static final String NAME_NOT_SERIALIZABLE_EXCEPTION = \"java/io/NotSerializableException\";","field_name":"NAME_NOT_SERIALIZABLE_EXCEPTION","field_type":"java.lang.String","full_declaration":"private static final java.lang.String NAME_NOT_SERIALIZABLE_EXCEPTION = \"java/io/NotSerializableException\"","id":4688},{"comment":"private static final String DESCR_METHOD_WRITE_REPLACE = \"()Ljava/lang/Object;\";","field_name":"DESCR_METHOD_WRITE_REPLACE","field_type":"java.lang.String","full_declaration":"private static final java.lang.String DESCR_METHOD_WRITE_REPLACE = \"()Ljava/lang/Object;\"","id":4689},{"comment":"private static final String DESCR_METHOD_WRITE_OBJECT = \"(Ljava/io/ObjectOutputStream;)V\";","field_name":"DESCR_METHOD_WRITE_OBJECT","field_type":"java.lang.String","full_declaration":"private static final java.lang.String DESCR_METHOD_WRITE_OBJECT = \"(Ljava/io/ObjectOutputStream;)V\"","id":4690},{"comment":"private static final String DESCR_METHOD_READ_OBJECT = \"(Ljava/io/ObjectInputStream;)V\";","field_name":"DESCR_METHOD_READ_OBJECT","field_type":"java.lang.String","full_declaration":"private static final java.lang.String DESCR_METHOD_READ_OBJECT = \"(Ljava/io/ObjectInputStream;)V\"","id":4691},{"comment":"private static final String NAME_METHOD_WRITE_REPLACE = \"writeReplace\";","field_name":"NAME_METHOD_WRITE_REPLACE","field_type":"java.lang.String","full_declaration":"private static final java.lang.String NAME_METHOD_WRITE_REPLACE = \"writeReplace\"","id":4692},{"comment":"private static final String NAME_METHOD_READ_OBJECT = \"readObject\";","field_name":"NAME_METHOD_READ_OBJECT","field_type":"java.lang.String","full_declaration":"private static final java.lang.String NAME_METHOD_READ_OBJECT = \"readObject\"","id":4693},{"comment":"private static final String NAME_METHOD_WRITE_OBJECT = \"writeObject\";","field_name":"NAME_METHOD_WRITE_OBJECT","field_type":"java.lang.String","full_declaration":"private static final java.lang.String NAME_METHOD_WRITE_OBJECT = \"writeObject\"","id":4694},{"comment":"private static final String DESCR_CTOR_SERIALIZED_LAMBDA = MethodType.methodType(void.class, Class.class, String.class, String.class, String.class, int.class, String.class, String.class, String.class, String.class, Object[].class).toMethodDescriptorString();","field_name":"DESCR_CTOR_SERIALIZED_LAMBDA","field_type":"java.lang.String","full_declaration":"private static final java.lang.String DESCR_CTOR_SERIALIZED_LAMBDA = MethodType.methodType(void.class, Class.class, String.class, String.class, String.class, int.class, String.class, String.class, String.class, String.class, Object[].class).toMethodDescriptorString()","id":4695},{"comment":"private static final String DESCR_CTOR_NOT_SERIALIZABLE_EXCEPTION = MethodType.methodType(void.class, String.class).toMethodDescriptorString();","field_name":"DESCR_CTOR_NOT_SERIALIZABLE_EXCEPTION","field_type":"java.lang.String","full_declaration":"private static final java.lang.String DESCR_CTOR_NOT_SERIALIZABLE_EXCEPTION = MethodType.methodType(void.class, String.class).toMethodDescriptorString()","id":4696},{"comment":"","field_name":"SER_HOSTILE_EXCEPTIONS","field_type":"String[]","full_declaration":"private static final String[] SER_HOSTILE_EXCEPTIONS = new String[] { NAME_NOT_SERIALIZABLE_EXCEPTION }","id":4697},{"comment":"","field_name":"EMPTY_STRING_ARRAY","field_type":"String[]","full_declaration":"private static final String[] EMPTY_STRING_ARRAY = new String[0]","id":4698},{"comment":"// Used to ensure that each spun class name is unique\r\nprivate static final AtomicInteger counter = new AtomicInteger(0);","field_name":"counter","field_type":"java.util.concurrent.atomic.AtomicInteger","full_declaration":"private static final java.util.concurrent.atomic.AtomicInteger counter = new AtomicInteger(0)","id":4699},{"comment":"// For dumping generated classes to disk, for debugging purposes\r\nprivate static final ProxyClassesDumper dumper;","field_name":"dumper","field_type":"java.lang.invoke.ProxyClassesDumper","full_declaration":"private static final java.lang.invoke.ProxyClassesDumper dumper","id":4700},{"comment":"// See context values in AbstractValidatingLambdaMetafactory\r\n// Name of type containing implementation \"CC\"\r\nprivate final String implMethodClassName;","field_name":"implMethodClassName","field_type":"java.lang.String","full_declaration":"private final java.lang.String implMethodClassName","id":4701},{"comment":"// Name of implementation method \"impl\"\r\nprivate final String implMethodName;","field_name":"implMethodName","field_type":"java.lang.String","full_declaration":"private final java.lang.String implMethodName","id":4702},{"comment":"// Type descriptor for implementation methods \"(I)Ljava/lang/String;\"\r\nprivate final String implMethodDesc;","field_name":"implMethodDesc","field_type":"java.lang.String","full_declaration":"private final java.lang.String implMethodDesc","id":4703},{"comment":"// class for implementaion method return type \"Ljava/lang/String;\"\r\nprivate final Class<?> implMethodReturnClass;","field_name":"implMethodReturnClass","field_type":"java.lang.Class","full_declaration":"private final java.lang.Class implMethodReturnClass","id":4704},{"comment":"// Generated class constructor type \"(CC)void\"\r\nprivate final MethodType constructorType;","field_name":"constructorType","field_type":"java.lang.invoke.MethodType","full_declaration":"private final java.lang.invoke.MethodType constructorType","id":4705},{"comment":"// ASM class writer\r\nprivate final ClassWriter cw;","field_name":"cw","field_type":"jdk.internal.org.objectweb.asm.ClassWriter","full_declaration":"private final jdk.internal.org.objectweb.asm.ClassWriter cw","id":4706},{"comment":"// Generated names for the constructor arguments\r\n","field_name":"argNames","field_type":"String[]","full_declaration":"private final String[] argNames","id":4707},{"comment":"// Type descriptors for the constructor arguments\r\n","field_name":"argDescs","field_type":"String[]","full_declaration":"private final String[] argDescs","id":4708},{"comment":"// Generated name for the generated class \"X$$Lambda$1\"\r\nprivate final String lambdaClassName;","field_name":"lambdaClassName","field_type":"java.lang.String","full_declaration":"private final java.lang.String lambdaClassName","id":4709},{"comment":"/**\r\n * Define class names for convenience.\r\n */\r\nprivate static final String MH = \"java/lang/invoke/MethodHandle\";","field_name":"MH","field_type":"java.lang.String","full_declaration":"private static final java.lang.String MH = \"java/lang/invoke/MethodHandle\"","id":4710},{"comment":"private static final String MHI = \"java/lang/invoke/MethodHandleImpl\";","field_name":"MHI","field_type":"java.lang.String","full_declaration":"private static final java.lang.String MHI = \"java/lang/invoke/MethodHandleImpl\"","id":4711},{"comment":"private static final String LF = \"java/lang/invoke/LambdaForm\";","field_name":"LF","field_type":"java.lang.String","full_declaration":"private static final java.lang.String LF = \"java/lang/invoke/LambdaForm\"","id":4712},{"comment":"private static final String LFN = \"java/lang/invoke/LambdaForm$Name\";","field_name":"LFN","field_type":"java.lang.String","full_declaration":"private static final java.lang.String LFN = \"java/lang/invoke/LambdaForm$Name\"","id":4713},{"comment":"private static final String CLS = \"java/lang/Class\";","field_name":"CLS","field_type":"java.lang.String","full_declaration":"private static final java.lang.String CLS = \"java/lang/Class\"","id":4714},{"comment":"private static final String OBJ = \"java/lang/Object\";","field_name":"OBJ","field_type":"java.lang.String","full_declaration":"private static final java.lang.String OBJ = \"java/lang/Object\"","id":4715},{"comment":"private static final String OBJARY = \"[Ljava/lang/Object;\";","field_name":"OBJARY","field_type":"java.lang.String","full_declaration":"private static final java.lang.String OBJARY = \"[Ljava/lang/Object;\"","id":4716},{"comment":"private static final String MH_SIG = \"L\" + MH + \";\";","field_name":"MH_SIG","field_type":"java.lang.String","full_declaration":"private static final java.lang.String MH_SIG = \"L\" + MH + \";\"","id":4717},{"comment":"private static final String LF_SIG = \"L\" + LF + \";\";","field_name":"LF_SIG","field_type":"java.lang.String","full_declaration":"private static final java.lang.String LF_SIG = \"L\" + LF + \";\"","id":4718},{"comment":"private static final String LFN_SIG = \"L\" + LFN + \";\";","field_name":"LFN_SIG","field_type":"java.lang.String","full_declaration":"private static final java.lang.String LFN_SIG = \"L\" + LFN + \";\"","id":4719},{"comment":"private static final String LL_SIG = \"(L\" + OBJ + \";)L\" + OBJ + \";\";","field_name":"LL_SIG","field_type":"java.lang.String","full_declaration":"private static final java.lang.String LL_SIG = \"(L\" + OBJ + \";)L\" + OBJ + \";\"","id":4720},{"comment":"private static final String LLV_SIG = \"(L\" + OBJ + \";L\" + OBJ + \";)V\";","field_name":"LLV_SIG","field_type":"java.lang.String","full_declaration":"private static final java.lang.String LLV_SIG = \"(L\" + OBJ + \";L\" + OBJ + \";)V\"","id":4721},{"comment":"private static final String CLL_SIG = \"(L\" + CLS + \";L\" + OBJ + \";)L\" + OBJ + \";\";","field_name":"CLL_SIG","field_type":"java.lang.String","full_declaration":"private static final java.lang.String CLL_SIG = \"(L\" + CLS + \";L\" + OBJ + \";)L\" + OBJ + \";\"","id":4722},{"comment":"/**\r\n * Name of its super class\r\n */\r\nprivate static final String superName = OBJ;","field_name":"superName","field_type":"java.lang.String","full_declaration":"private static final java.lang.String superName = OBJ","id":4723},{"comment":"/**\r\n * Name of new class\r\n */\r\nprivate final String className;","field_name":"className","field_type":"java.lang.String","full_declaration":"private final java.lang.String className","id":4724},{"comment":"/**\r\n * Name of the source file (for stack trace printing).\r\n */\r\nprivate final String sourceFile;","field_name":"sourceFile","field_type":"java.lang.String","full_declaration":"private final java.lang.String sourceFile","id":4725},{"comment":"private final LambdaForm lambdaForm;","field_name":"lambdaForm","field_type":"java.lang.invoke.LambdaForm","full_declaration":"private final java.lang.invoke.LambdaForm lambdaForm","id":4726},{"comment":"private final String invokerName;","field_name":"invokerName","field_type":"java.lang.String","full_declaration":"private final java.lang.String invokerName","id":4727},{"comment":"private final MethodType invokerType;","field_name":"invokerType","field_type":"java.lang.invoke.MethodType","full_declaration":"private final java.lang.invoke.MethodType invokerType","id":4728},{"comment":"/**\r\n * Info about local variables in compiled lambda form\r\n */\r\n// index\r\n","field_name":"localsMap","field_type":"int[]","full_declaration":"private final int[] localsMap","id":4729},{"comment":"// basic type\r\n","field_name":"localTypes","field_type":"BasicType[]","full_declaration":"private final BasicType[] localTypes","id":4730},{"comment":"// type\r\n","field_name":"localClasses","field_type":"Class<?>[]","full_declaration":"private final Class<?>[] localClasses","id":4731},{"comment":"/**\r\n * ASM bytecode generation.\r\n */\r\nprivate ClassWriter cw;","field_name":"cw","field_type":"jdk.internal.org.objectweb.asm.ClassWriter","full_declaration":"private jdk.internal.org.objectweb.asm.ClassWriter cw","id":4732},{"comment":"private MethodVisitor mv;","field_name":"mv","field_type":"jdk.internal.org.objectweb.asm.MethodVisitor","full_declaration":"private jdk.internal.org.objectweb.asm.MethodVisitor mv","id":4733},{"comment":"private static final MemberName.Factory MEMBERNAME_FACTORY = MemberName.getFactory();","field_name":"MEMBERNAME_FACTORY","field_type":"java.lang.invoke.MemberName.Factory","full_declaration":"private static final java.lang.invoke.MemberName.Factory MEMBERNAME_FACTORY = MemberName.getFactory()","id":4734},{"comment":"private static final Class<?> HOST_CLASS = LambdaForm.class;","field_name":"HOST_CLASS","field_type":"java.lang.Class","full_declaration":"private static final java.lang.Class HOST_CLASS = LambdaForm.class","id":4735},{"comment":"/**\r\n * instance counters for dumped classes\r\n */\r\nprivate final static HashMap<String, Integer> DUMP_CLASS_FILES_COUNTERS;","field_name":"DUMP_CLASS_FILES_COUNTERS","field_type":"java.util.HashMap","full_declaration":"private final static java.util.HashMap DUMP_CLASS_FILES_COUNTERS","id":4736},{"comment":"/**\r\n * debugging flag for saving generated class files\r\n */\r\nprivate final static File DUMP_CLASS_FILES_DIR;","field_name":"DUMP_CLASS_FILES_DIR","field_type":"java.io.File","full_declaration":"private final static java.io.File DUMP_CLASS_FILES_DIR","id":4737},{"comment":"Map<Object, CpPatch> cpPatches = new HashMap<>();","field_name":"cpPatches","field_type":"java.util.Map","full_declaration":"java.util.Map cpPatches = new HashMap<>()","id":4738},{"comment":"// for counting constant placeholders\r\n","field_name":"cph","field_type":"int","full_declaration":"int cph = 0","id":4739},{"comment":"","field_name":"STATICALLY_INVOCABLE_PACKAGES","field_type":"Class<?>[]","full_declaration":"static private Class<?>[] STATICALLY_INVOCABLE_PACKAGES = { // Sample classes from each package we are willing to bind to statically:\r\njava.lang.Object.class, java.util.Arrays.class, sun.misc.Unsafe.class // MethodHandle.class already covered\r\n}","id":4740},{"comment":"","field_name":"index","field_type":"int","full_declaration":"final int index","id":4741},{"comment":"final String placeholder;","field_name":"placeholder","field_type":"java.lang.String","full_declaration":"final java.lang.String placeholder","id":4742},{"comment":"final Object value;","field_name":"value","field_type":"java.lang.Object","full_declaration":"final java.lang.Object value","id":4743},{"comment":"// exact type (sans leading taget MH) for the outgoing call\r\nprivate final MethodType targetType;","field_name":"targetType","field_type":"java.lang.invoke.MethodType","full_declaration":"private final java.lang.invoke.MethodType targetType","id":4744},{"comment":"// Cached adapter information:\r\n@Stable\r\n","field_name":"invokers","field_type":"MethodHandle[]","full_declaration":"private final MethodHandle[] invokers = new MethodHandle[INV_LIMIT]","id":4745},{"comment":"// Indexes into invokers:\r\nstatic final int // MethodHandles.exactInvoker\r\nINV_EXACT = 0, // MethodHandles.invoker (generic invocation)\r\nINV_GENERIC = 1, // MethodHandles.basicInvoker\r\nINV_BASIC = 2, INV_LIMIT = 3;","field_name":"INV_EXACT","field_type":"int","full_declaration":"static final int // MethodHandles.exactInvoker\r\nINV_EXACT = 0","id":4746},{"comment":"// Indexes into invokers:\r\nstatic final int // MethodHandles.exactInvoker\r\nINV_EXACT = 0, // MethodHandles.invoker (generic invocation)\r\nINV_GENERIC = 1, // MethodHandles.basicInvoker\r\nINV_BASIC = 2, INV_LIMIT = 3;","field_name":"INV_GENERIC","field_type":"int","full_declaration":"static final int // MethodHandles.exactInvoker\r\nINV_EXACT = 0int // MethodHandles.invoker (generic invocation)\r\nINV_GENERIC = 1","id":4747},{"comment":"// Indexes into invokers:\r\nstatic final int // MethodHandles.exactInvoker\r\nINV_EXACT = 0, // MethodHandles.invoker (generic invocation)\r\nINV_GENERIC = 1, // MethodHandles.basicInvoker\r\nINV_BASIC = 2, INV_LIMIT = 3;","field_name":"INV_BASIC","field_type":"int","full_declaration":"static final int // MethodHandles.exactInvoker\r\nINV_EXACT = 0int // MethodHandles.invoker (generic invocation)\r\nINV_GENERIC = 1int // MethodHandles.basicInvoker\r\nINV_BASIC = 2","id":4748},{"comment":"// Indexes into invokers:\r\nstatic final int // MethodHandles.exactInvoker\r\nINV_EXACT = 0, // MethodHandles.invoker (generic invocation)\r\nINV_GENERIC = 1, // MethodHandles.basicInvoker\r\nINV_BASIC = 2, INV_LIMIT = 3;","field_name":"INV_LIMIT","field_type":"int","full_declaration":"static final int // MethodHandles.exactInvoker\r\nINV_EXACT = 0int // MethodHandles.invoker (generic invocation)\r\nINV_GENERIC = 1int // MethodHandles.basicInvoker\r\nINV_BASIC = 2int INV_LIMIT = 3","id":4749},{"comment":"// argument count to account for trailing \"appendix value\" (typically the mtype)\r\n","field_name":"MH_LINKER_ARG_APPENDED","field_type":"int","full_declaration":"private static final int MH_LINKER_ARG_APPENDED = 1","id":4750},{"comment":"// Local constant functions:\r\nprivate static final NamedFunction NF_checkExactType, NF_checkGenericType, NF_getCallSiteTarget, NF_checkCustomized;","field_name":"NF_checkExactType","field_type":"java.lang.invoke.LambdaForm.NamedFunction","full_declaration":"private static final java.lang.invoke.LambdaForm.NamedFunction NF_checkExactType","id":4751},{"comment":"// Local constant functions:\r\nprivate static final NamedFunction NF_checkExactType, NF_checkGenericType, NF_getCallSiteTarget, NF_checkCustomized;","field_name":"NF_checkGenericType","field_type":"java.lang.invoke.LambdaForm.NamedFunction","full_declaration":"private static final java.lang.invoke.LambdaForm.NamedFunction NF_checkExactTypejava.lang.invoke.LambdaForm.NamedFunction NF_checkGenericType","id":4752},{"comment":"// Local constant functions:\r\nprivate static final NamedFunction NF_checkExactType, NF_checkGenericType, NF_getCallSiteTarget, NF_checkCustomized;","field_name":"NF_getCallSiteTarget","field_type":"java.lang.invoke.LambdaForm.NamedFunction","full_declaration":"private static final java.lang.invoke.LambdaForm.NamedFunction NF_checkExactTypejava.lang.invoke.LambdaForm.NamedFunction NF_checkGenericTypejava.lang.invoke.LambdaForm.NamedFunction NF_getCallSiteTarget","id":4753},{"comment":"// Local constant functions:\r\nprivate static final NamedFunction NF_checkExactType, NF_checkGenericType, NF_getCallSiteTarget, NF_checkCustomized;","field_name":"NF_checkCustomized","field_type":"java.lang.invoke.LambdaForm.NamedFunction","full_declaration":"private static final java.lang.invoke.LambdaForm.NamedFunction NF_checkExactTypejava.lang.invoke.LambdaForm.NamedFunction NF_checkGenericTypejava.lang.invoke.LambdaForm.NamedFunction NF_getCallSiteTargetjava.lang.invoke.LambdaForm.NamedFunction NF_checkCustomized","id":4754},{"comment":"private static final MethodHandle MH_asSpreader;","field_name":"MH_asSpreader","field_type":"java.lang.invoke.MethodHandle","full_declaration":"private static final java.lang.invoke.MethodHandle MH_asSpreader","id":4755},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 292L + 8L","id":4756},{"comment":"","field_name":"arity","field_type":"int","full_declaration":"final int arity","id":4757},{"comment":"","field_name":"result","field_type":"int","full_declaration":"final int result","id":4758},{"comment":"","field_name":"forceInline","field_type":"boolean","full_declaration":"final boolean forceInline","id":4759},{"comment":"final MethodHandle customized;","field_name":"customized","field_type":"java.lang.invoke.MethodHandle","full_declaration":"final java.lang.invoke.MethodHandle customized","id":4760},{"comment":"@Stable\r\n","field_name":"names","field_type":"Name[]","full_declaration":"final Name[] names","id":4761},{"comment":"final String debugName;","field_name":"debugName","field_type":"java.lang.String","full_declaration":"final java.lang.String debugName","id":4762},{"comment":"// low-level behavior, or null if not yet prepared\r\nMemberName vmentry;","field_name":"vmentry","field_type":"java.lang.invoke.MemberName","full_declaration":"java.lang.invoke.MemberName vmentry","id":4763},{"comment":"","field_name":"isCompiled","field_type":"boolean","full_declaration":"private boolean isCompiled","id":4764},{"comment":"// Either a LambdaForm cache (managed by LambdaFormEditor) or a link to uncustomized version (for customized LF)\r\nvolatile Object transformCache;","field_name":"transformCache","field_type":"java.lang.Object","full_declaration":"volatile java.lang.Object transformCache","id":4765},{"comment":"public static final int VOID_RESULT = -1, LAST_RESULT = -2;","field_name":"VOID_RESULT","field_type":"int","full_declaration":"public static final int VOID_RESULT = -1","id":4766},{"comment":"public static final int VOID_RESULT = -1, LAST_RESULT = -2;","field_name":"LAST_RESULT","field_type":"int","full_declaration":"public static final int VOID_RESULT = -1int LAST_RESULT = -2","id":4767},{"comment":"// Set this false to disable use of the interpret_L methods defined in this file.\r\n","field_name":"USE_PREDEFINED_INTERPRET_METHODS","field_type":"boolean","full_declaration":"private static final boolean USE_PREDEFINED_INTERPRET_METHODS = true","id":4768},{"comment":"/**\r\n * If the invocation count hits the threshold we spin bytecodes and call that subsequently.\r\n */\r\n","field_name":"COMPILE_THRESHOLD","field_type":"int","full_declaration":"private static final int COMPILE_THRESHOLD","id":4769},{"comment":"","field_name":"invocationCounter","field_type":"int","full_declaration":"private int invocationCounter = 0","id":4770},{"comment":"","field_name":"INTERNED_ARGUMENT_LIMIT","field_type":"int","full_declaration":"static final int INTERNED_ARGUMENT_LIMIT = 10","id":4771},{"comment":"","field_name":"INTERNED_ARGUMENTS","field_type":"Name[][]","full_declaration":"private static final Name[][] INTERNED_ARGUMENTS = new Name[ARG_TYPE_LIMIT][INTERNED_ARGUMENT_LIMIT]","id":4772},{"comment":"private static final MemberName.Factory IMPL_NAMES = MemberName.getFactory();","field_name":"IMPL_NAMES","field_type":"java.lang.invoke.MemberName.Factory","full_declaration":"private static final java.lang.invoke.MemberName.Factory IMPL_NAMES = MemberName.getFactory()","id":4773},{"comment":"","field_name":"LF_identityForm","field_type":"LambdaForm[]","full_declaration":"private static final LambdaForm[] LF_identityForm = new LambdaForm[TYPE_LIMIT]","id":4774},{"comment":"","field_name":"LF_zeroForm","field_type":"LambdaForm[]","full_declaration":"private static final LambdaForm[] LF_zeroForm = new LambdaForm[TYPE_LIMIT]","id":4775},{"comment":"","field_name":"NF_identity","field_type":"NamedFunction[]","full_declaration":"private static final NamedFunction[] NF_identity = new NamedFunction[TYPE_LIMIT]","id":4776},{"comment":"","field_name":"NF_zero","field_type":"NamedFunction[]","full_declaration":"private static final NamedFunction[] NF_zero = new NamedFunction[TYPE_LIMIT]","id":4777},{"comment":"private static final HashMap<String, Integer> DEBUG_NAME_COUNTERS;","field_name":"DEBUG_NAME_COUNTERS","field_type":"java.util.HashMap","full_declaration":"private static final java.util.HashMap DEBUG_NAME_COUNTERS","id":4778},{"comment":"// The following hack is necessary in order to suppress TRACE_INTERPRETER\r\n// during execution of the static initializes of this class.\r\n// Turning on TRACE_INTERPRETER too early will cause\r\n// stack overflows and other misbehavior during attempts to trace events\r\n// that occur during LambdaForm.<clinit>.\r\n// Therefore, do not move this line higher in this file, and do not remove.\r\n","field_name":"TRACE_INTERPRETER","field_type":"boolean","full_declaration":"private static final boolean TRACE_INTERPRETER = MethodHandleStatics.TRACE_INTERPRETER","id":4779},{"comment":"final MemberName member;","field_name":"member","field_type":"java.lang.invoke.MemberName","full_declaration":"final java.lang.invoke.MemberName member","id":4780},{"comment":"@Stable\r\nMethodHandle resolvedHandle;","field_name":"resolvedHandle","field_type":"java.lang.invoke.MethodHandle","full_declaration":"java.lang.invoke.MethodHandle resolvedHandle","id":4781},{"comment":"@Stable\r\nMethodHandle invoker;","field_name":"invoker","field_type":"java.lang.invoke.MethodHandle","full_declaration":"java.lang.invoke.MethodHandle invoker","id":4782},{"comment":"static final MethodType INVOKER_METHOD_TYPE = MethodType.methodType(Object.class, MethodHandle.class, Object[].class);","field_name":"INVOKER_METHOD_TYPE","field_type":"java.lang.invoke.MethodType","full_declaration":"static final java.lang.invoke.MethodType INVOKER_METHOD_TYPE = MethodType.methodType(Object.class, MethodHandle.class, Object[].class)","id":4783},{"comment":"final BasicType type;","field_name":"type","field_type":"java.lang.invoke.LambdaForm.BasicType","full_declaration":"final java.lang.invoke.LambdaForm.BasicType type","id":4784},{"comment":"","field_name":"index","field_type":"short","full_declaration":"private short index","id":4785},{"comment":"final NamedFunction function;","field_name":"function","field_type":"java.lang.invoke.LambdaForm.NamedFunction","full_declaration":"final java.lang.invoke.LambdaForm.NamedFunction function","id":4786},{"comment":"// additional type information, if not null\r\nfinal Object constraint;","field_name":"constraint","field_type":"java.lang.Object","full_declaration":"final java.lang.Object constraint","id":4787},{"comment":"@Stable\r\n","field_name":"arguments","field_type":"Object[]","full_declaration":"final Object[] arguments","id":4788},{"comment":"private int arity, length;","field_name":"arity","field_type":"int","full_declaration":"private int arity","id":4789},{"comment":"private int arity, length;","field_name":"length","field_type":"int","full_declaration":"private int arityint length","id":4790},{"comment":"","field_name":"names","field_type":"Name[]","full_declaration":"private Name[] names","id":4791},{"comment":"// snapshot of pre-transaction names\r\n","field_name":"originalNames","field_type":"Name[]","full_declaration":"private Name[] originalNames","id":4792},{"comment":"","field_name":"flags","field_type":"byte","full_declaration":"private byte flags","id":4793},{"comment":"","field_name":"firstChange","field_type":"int","full_declaration":"private int firstChange","id":4794},{"comment":"private Name resultName;","field_name":"resultName","field_type":"java.lang.invoke.LambdaForm.Name","full_declaration":"private java.lang.invoke.LambdaForm.Name resultName","id":4795},{"comment":"private String debugName;","field_name":"debugName","field_type":"java.lang.String","full_declaration":"private java.lang.String debugName","id":4796},{"comment":"private ArrayList<Name> dups;","field_name":"dups","field_type":"java.util.ArrayList","full_declaration":"private java.util.ArrayList dups","id":4797},{"comment":"private static final int F_TRANS = 0x10, F_OWNED = 0x03;","field_name":"F_TRANS","field_type":"int","full_declaration":"private static final int F_TRANS = 0x10","id":4798},{"comment":"private static final int F_TRANS = 0x10, F_OWNED = 0x03;","field_name":"F_OWNED","field_type":"int","full_declaration":"private static final int F_TRANS = 0x10int F_OWNED = 0x03","id":4799},{"comment":"final LambdaForm lambdaForm;","field_name":"lambdaForm","field_type":"java.lang.invoke.LambdaForm","full_declaration":"final java.lang.invoke.LambdaForm lambdaForm","id":4800},{"comment":"/**\r\n * Arbitrary but reasonable limits on Transform[] size for cache.\r\n */\r\nprivate static final int MIN_CACHE_ARRAY_SIZE = 4, MAX_CACHE_ARRAY_SIZE = 16;","field_name":"MIN_CACHE_ARRAY_SIZE","field_type":"int","full_declaration":"private static final int MIN_CACHE_ARRAY_SIZE = 4","id":4801},{"comment":"/**\r\n * Arbitrary but reasonable limits on Transform[] size for cache.\r\n */\r\nprivate static final int MIN_CACHE_ARRAY_SIZE = 4, MAX_CACHE_ARRAY_SIZE = 16;","field_name":"MAX_CACHE_ARRAY_SIZE","field_type":"int","full_declaration":"private static final int MIN_CACHE_ARRAY_SIZE = 4int MAX_CACHE_ARRAY_SIZE = 16","id":4802},{"comment":"","field_name":"packedBytes","field_type":"long","full_declaration":"final long packedBytes","id":4803},{"comment":"","field_name":"fullBytes","field_type":"byte[]","full_declaration":"final byte[] fullBytes","id":4804},{"comment":"// turn on to disable most packing\r\n","field_name":"STRESS_TEST","field_type":"boolean","full_declaration":"private static final boolean STRESS_TEST = false","id":4805},{"comment":"private static final int PACKED_BYTE_SIZE = (STRESS_TEST ? 2 : 4), PACKED_BYTE_MASK = (1 << PACKED_BYTE_SIZE) - 1, PACKED_BYTE_MAX_LENGTH = (STRESS_TEST ? 3 : 64 / PACKED_BYTE_SIZE);","field_name":"PACKED_BYTE_SIZE","field_type":"int","full_declaration":"private static final int PACKED_BYTE_SIZE = (STRESS_TEST ? 2 : 4)","id":4806},{"comment":"private static final int PACKED_BYTE_SIZE = (STRESS_TEST ? 2 : 4), PACKED_BYTE_MASK = (1 << PACKED_BYTE_SIZE) - 1, PACKED_BYTE_MAX_LENGTH = (STRESS_TEST ? 3 : 64 / PACKED_BYTE_SIZE);","field_name":"PACKED_BYTE_MASK","field_type":"int","full_declaration":"private static final int PACKED_BYTE_SIZE = (STRESS_TEST ? 2 : 4)int PACKED_BYTE_MASK = (1 << PACKED_BYTE_SIZE) - 1","id":4807},{"comment":"private static final int PACKED_BYTE_SIZE = (STRESS_TEST ? 2 : 4), PACKED_BYTE_MASK = (1 << PACKED_BYTE_SIZE) - 1, PACKED_BYTE_MAX_LENGTH = (STRESS_TEST ? 3 : 64 / PACKED_BYTE_SIZE);","field_name":"PACKED_BYTE_MAX_LENGTH","field_type":"int","full_declaration":"private static final int PACKED_BYTE_SIZE = (STRESS_TEST ? 2 : 4)int PACKED_BYTE_MASK = (1 << PACKED_BYTE_SIZE) - 1int PACKED_BYTE_MAX_LENGTH = (STRESS_TEST ? 3 : 64 / PACKED_BYTE_SIZE)","id":4808},{"comment":"","field_name":"NO_BYTES","field_type":"byte[]","full_declaration":"private static final byte[] NO_BYTES = {}","id":4809},{"comment":"/**\r\n * Flag for alternate metafactories indicating the lambda object\r\n * must be serializable\r\n */\r\n","field_name":"FLAG_SERIALIZABLE","field_type":"int","full_declaration":"public static final int FLAG_SERIALIZABLE = 1 << 0","id":4810},{"comment":"/**\r\n * Flag for alternate metafactories indicating the lambda object implements\r\n * other marker interfaces\r\n * besides Serializable\r\n */\r\n","field_name":"FLAG_MARKERS","field_type":"int","full_declaration":"public static final int FLAG_MARKERS = 1 << 1","id":4811},{"comment":"/**\r\n * Flag for alternate metafactories indicating the lambda object requires\r\n * additional bridge methods\r\n */\r\n","field_name":"FLAG_BRIDGES","field_type":"int","full_declaration":"public static final int FLAG_BRIDGES = 1 << 2","id":4812},{"comment":"","field_name":"EMPTY_CLASS_ARRAY","field_type":"Class<?>[]","full_declaration":"private static final Class<?>[] EMPTY_CLASS_ARRAY = new Class<?>[0]","id":4813},{"comment":"","field_name":"EMPTY_MT_ARRAY","field_type":"MethodType[]","full_declaration":"private static final MethodType[] EMPTY_MT_ARRAY = new MethodType[0]","id":4814},{"comment":"// class in which the method is defined\r\nprivate Class<?> clazz;","field_name":"clazz","field_type":"java.lang.Class","full_declaration":"private java.lang.Class clazz","id":4815},{"comment":"// may be null if not yet materialized\r\nprivate String name;","field_name":"name","field_type":"java.lang.String","full_declaration":"private java.lang.String name","id":4816},{"comment":"// may be null if not yet materialized\r\nprivate Object type;","field_name":"type","field_type":"java.lang.Object","full_declaration":"private java.lang.Object type","id":4817},{"comment":"// modifier bits; see reflect.Modifier\r\n","field_name":"flags","field_type":"int","full_declaration":"private int flags","id":4818},{"comment":"// @Injected JVM_Method* vmtarget;\r\n// @Injected int         vmindex;\r\n// if null, this guy is resolved\r\nprivate Object resolution;","field_name":"resolution","field_type":"java.lang.Object","full_declaration":"private java.lang.Object resolution","id":4819},{"comment":"","field_name":"MH_INVOKE_MODS","field_type":"int","full_declaration":"private static final int MH_INVOKE_MODS = Modifier.NATIVE | Modifier.FINAL | Modifier.PUBLIC","id":4820},{"comment":"// let the rest (native, volatile, transient, etc.) be tested via Modifier.isFoo\r\n// unofficial modifier flags, used by HotSpot:\r\n","field_name":"BRIDGE","field_type":"int","full_declaration":"static final int BRIDGE = 0x00000040","id":4821},{"comment":"","field_name":"VARARGS","field_type":"int","full_declaration":"static final int VARARGS = 0x00000080","id":4822},{"comment":"","field_name":"SYNTHETIC","field_type":"int","full_declaration":"static final int SYNTHETIC = 0x00001000","id":4823},{"comment":"","field_name":"ANNOTATION","field_type":"int","full_declaration":"static final int ANNOTATION = 0x00002000","id":4824},{"comment":"","field_name":"ENUM","field_type":"int","full_declaration":"static final int ENUM = 0x00004000","id":4825},{"comment":"// the ever-popular\r\nstatic final String CONSTRUCTOR_NAME = \"<init>\";","field_name":"CONSTRUCTOR_NAME","field_type":"java.lang.String","full_declaration":"static final java.lang.String CONSTRUCTOR_NAME = \"<init>\"","id":4826},{"comment":"// modifiers exported by the JVM:\r\n","field_name":"RECOGNIZED_MODIFIERS","field_type":"int","full_declaration":"static final int RECOGNIZED_MODIFIERS = 0xFFFF","id":4827},{"comment":"// private flags, not part of RECOGNIZED_MODIFIERS:\r\nstatic final int // method (not constructor)\r\nIS_METHOD = MN_IS_METHOD, // constructor\r\nIS_CONSTRUCTOR = MN_IS_CONSTRUCTOR, // field\r\nIS_FIELD = MN_IS_FIELD, // nested type\r\nIS_TYPE = MN_IS_TYPE, // @CallerSensitive annotation detected\r\nCALLER_SENSITIVE = MN_CALLER_SENSITIVE;","field_name":"IS_METHOD","field_type":"int","full_declaration":"static final int // method (not constructor)\r\nIS_METHOD = MN_IS_METHOD","id":4828},{"comment":"// private flags, not part of RECOGNIZED_MODIFIERS:\r\nstatic final int // method (not constructor)\r\nIS_METHOD = MN_IS_METHOD, // constructor\r\nIS_CONSTRUCTOR = MN_IS_CONSTRUCTOR, // field\r\nIS_FIELD = MN_IS_FIELD, // nested type\r\nIS_TYPE = MN_IS_TYPE, // @CallerSensitive annotation detected\r\nCALLER_SENSITIVE = MN_CALLER_SENSITIVE;","field_name":"IS_CONSTRUCTOR","field_type":"int","full_declaration":"static final int // method (not constructor)\r\nIS_METHOD = MN_IS_METHODint // constructor\r\nIS_CONSTRUCTOR = MN_IS_CONSTRUCTOR","id":4829},{"comment":"// private flags, not part of RECOGNIZED_MODIFIERS:\r\nstatic final int // method (not constructor)\r\nIS_METHOD = MN_IS_METHOD, // constructor\r\nIS_CONSTRUCTOR = MN_IS_CONSTRUCTOR, // field\r\nIS_FIELD = MN_IS_FIELD, // nested type\r\nIS_TYPE = MN_IS_TYPE, // @CallerSensitive annotation detected\r\nCALLER_SENSITIVE = MN_CALLER_SENSITIVE;","field_name":"IS_FIELD","field_type":"int","full_declaration":"static final int // method (not constructor)\r\nIS_METHOD = MN_IS_METHODint // constructor\r\nIS_CONSTRUCTOR = MN_IS_CONSTRUCTORint // field\r\nIS_FIELD = MN_IS_FIELD","id":4830},{"comment":"// private flags, not part of RECOGNIZED_MODIFIERS:\r\nstatic final int // method (not constructor)\r\nIS_METHOD = MN_IS_METHOD, // constructor\r\nIS_CONSTRUCTOR = MN_IS_CONSTRUCTOR, // field\r\nIS_FIELD = MN_IS_FIELD, // nested type\r\nIS_TYPE = MN_IS_TYPE, // @CallerSensitive annotation detected\r\nCALLER_SENSITIVE = MN_CALLER_SENSITIVE;","field_name":"IS_TYPE","field_type":"int","full_declaration":"static final int // method (not constructor)\r\nIS_METHOD = MN_IS_METHODint // constructor\r\nIS_CONSTRUCTOR = MN_IS_CONSTRUCTORint // field\r\nIS_FIELD = MN_IS_FIELDint // nested type\r\nIS_TYPE = MN_IS_TYPE","id":4831},{"comment":"// private flags, not part of RECOGNIZED_MODIFIERS:\r\nstatic final int // method (not constructor)\r\nIS_METHOD = MN_IS_METHOD, // constructor\r\nIS_CONSTRUCTOR = MN_IS_CONSTRUCTOR, // field\r\nIS_FIELD = MN_IS_FIELD, // nested type\r\nIS_TYPE = MN_IS_TYPE, // @CallerSensitive annotation detected\r\nCALLER_SENSITIVE = MN_CALLER_SENSITIVE;","field_name":"CALLER_SENSITIVE","field_type":"int","full_declaration":"static final int // method (not constructor)\r\nIS_METHOD = MN_IS_METHODint // constructor\r\nIS_CONSTRUCTOR = MN_IS_CONSTRUCTORint // field\r\nIS_FIELD = MN_IS_FIELDint // nested type\r\nIS_TYPE = MN_IS_TYPEint // @CallerSensitive annotation detected\r\nCALLER_SENSITIVE = MN_CALLER_SENSITIVE","id":4832},{"comment":"","field_name":"ALL_ACCESS","field_type":"int","full_declaration":"static final int ALL_ACCESS = Modifier.PUBLIC | Modifier.PRIVATE | Modifier.PROTECTED","id":4833},{"comment":"","field_name":"ALL_KINDS","field_type":"int","full_declaration":"static final int ALL_KINDS = IS_METHOD | IS_CONSTRUCTOR | IS_FIELD | IS_TYPE","id":4834},{"comment":"","field_name":"IS_INVOCABLE","field_type":"int","full_declaration":"static final int IS_INVOCABLE = IS_METHOD | IS_CONSTRUCTOR","id":4835},{"comment":"","field_name":"IS_FIELD_OR_METHOD","field_type":"int","full_declaration":"static final int IS_FIELD_OR_METHOD = IS_METHOD | IS_FIELD","id":4836},{"comment":"","field_name":"SEARCH_ALL_SUPERS","field_type":"int","full_declaration":"static final int SEARCH_ALL_SUPERS = MN_SEARCH_SUPERCLASSES | MN_SEARCH_INTERFACES","id":4837},{"comment":"static Factory INSTANCE = new Factory();","field_name":"INSTANCE","field_type":"java.lang.invoke.MemberName.Factory","full_declaration":"static java.lang.invoke.MemberName.Factory INSTANCE = new Factory()","id":4838},{"comment":"","field_name":"ALLOWED_FLAGS","field_type":"int","full_declaration":"private static int ALLOWED_FLAGS = ALL_KINDS","id":4839},{"comment":"private final MethodType type;","field_name":"type","field_type":"java.lang.invoke.MethodType","full_declaration":"private final java.lang.invoke.MethodType type","id":4840},{"comment":"/*private*/\r\nfinal LambdaForm form;","field_name":"form","field_type":"java.lang.invoke.LambdaForm","full_declaration":"final java.lang.invoke.LambdaForm form","id":4841},{"comment":"// form is not private so that invokers can easily fetch it\r\n/*private*/\r\nMethodHandle asTypeCache;","field_name":"asTypeCache","field_type":"java.lang.invoke.MethodHandle","full_declaration":"java.lang.invoke.MethodHandle asTypeCache","id":4842},{"comment":"// asTypeCache is not private so that invokers can easily fetch it\r\n/*non-public*/\r\n","field_name":"customizationCount","field_type":"byte","full_declaration":"byte customizationCount","id":4843},{"comment":"","field_name":"FORM_OFFSET","field_type":"long","full_declaration":"private static final long FORM_OFFSET","id":4844},{"comment":"// Do not adjust this except for special platforms:\r\n","field_name":"MAX_ARITY","field_type":"int","full_declaration":"private static final int MAX_ARITY","id":4845},{"comment":"/**\r\n * Constructs reinvoker lambda form which block inlining during JIT-compilation for a particular method handle\r\n */\r\nprivate static final Function<MethodHandle, LambdaForm> PRODUCE_BLOCK_INLINING_FORM = new Function<MethodHandle, LambdaForm>() {\r\n\r\n    @Override\r\n    public LambdaForm apply(MethodHandle target) {\r\n        return DelegatingMethodHandle.makeReinvokerForm(target, MethodTypeForm.LF_DELEGATE_BLOCK_INLINING, CountingWrapper.class, \"reinvoker.dontInline\", false, DelegatingMethodHandle.NF_getTarget, CountingWrapper.NF_maybeStopCounting);\r\n    }\r\n};","field_name":"PRODUCE_BLOCK_INLINING_FORM","field_type":"java.util.function.Function","full_declaration":"private static final java.util.function.Function PRODUCE_BLOCK_INLINING_FORM = new Function<MethodHandle, LambdaForm>() {\r\n\r\n    @Override\r\n    public LambdaForm apply(MethodHandle target) {\r\n        return DelegatingMethodHandle.makeReinvokerForm(target, MethodTypeForm.LF_DELEGATE_BLOCK_INLINING, CountingWrapper.class, \"reinvoker.dontInline\", false, DelegatingMethodHandle.NF_getTarget, CountingWrapper.NF_maybeStopCounting);\r\n    }\r\n}","id":4846},{"comment":"/**\r\n * Constructs simple reinvoker lambda form for a particular method handle\r\n */\r\nprivate static final Function<MethodHandle, LambdaForm> PRODUCE_REINVOKER_FORM = new Function<MethodHandle, LambdaForm>() {\r\n\r\n    @Override\r\n    public LambdaForm apply(MethodHandle target) {\r\n        return DelegatingMethodHandle.makeReinvokerForm(target, MethodTypeForm.LF_DELEGATE, DelegatingMethodHandle.class, DelegatingMethodHandle.NF_getTarget);\r\n    }\r\n};","field_name":"PRODUCE_REINVOKER_FORM","field_type":"java.util.function.Function","full_declaration":"private static final java.util.function.Function PRODUCE_REINVOKER_FORM = new Function<MethodHandle, LambdaForm>() {\r\n\r\n    @Override\r\n    public LambdaForm apply(MethodHandle target) {\r\n        return DelegatingMethodHandle.makeReinvokerForm(target, MethodTypeForm.LF_DELEGATE, DelegatingMethodHandle.class, DelegatingMethodHandle.NF_getTarget);\r\n    }\r\n}","id":4847},{"comment":"","field_name":"FAKE_METHOD_HANDLE_INVOKE","field_type":"MethodHandle[]","full_declaration":"static MethodHandle[] FAKE_METHOD_HANDLE_INVOKE = new MethodHandle[2]","id":4848},{"comment":"","field_name":"NO_ARGS_ARRAY","field_type":"Object[]","full_declaration":"private static final Object[] NO_ARGS_ARRAY = {}","id":4849},{"comment":"// current number of fillArray methods\r\n","field_name":"FILL_ARRAYS_COUNT","field_type":"int","full_declaration":"private static final int FILL_ARRAYS_COUNT = 11","id":4850},{"comment":"","field_name":"LEFT_ARGS","field_type":"int","full_declaration":"private static final int LEFT_ARGS = FILL_ARRAYS_COUNT - 1","id":4851},{"comment":"","field_name":"FILL_ARRAY_TO_RIGHT","field_type":"MethodHandle[]","full_declaration":"private static final MethodHandle[] FILL_ARRAY_TO_RIGHT = new MethodHandle[MAX_ARITY + 1]","id":4852},{"comment":"// Type-polymorphic version of varargs maker.\r\nprivate static final ClassValue<MethodHandle[]> TYPED_COLLECTORS = new ClassValue<MethodHandle[]>() {\r\n\r\n    @Override\r\n    protected MethodHandle[] computeValue(Class<?> type) {\r\n        return new MethodHandle[256];\r\n    }\r\n};","field_name":"TYPED_COLLECTORS","field_type":"java.lang.ClassValue","full_declaration":"private static final java.lang.ClassValue TYPED_COLLECTORS = new ClassValue<MethodHandle[]>() {\r\n\r\n    @Override\r\n    protected MethodHandle[] computeValue(Class<?> type) {\r\n        return new MethodHandle[256];\r\n    }\r\n}","id":4853},{"comment":"// limit imposed by the JVM\r\n","field_name":"MAX_JVM_ARITY","field_type":"int","full_declaration":"static final int MAX_JVM_ARITY = 255","id":4854},{"comment":"// / Support for array element access\r\nstatic final int GETTER_INDEX = 0, SETTER_INDEX = 1, INDEX_LIMIT = 2;","field_name":"GETTER_INDEX","field_type":"int","full_declaration":"static final int GETTER_INDEX = 0","id":4855},{"comment":"// / Support for array element access\r\nstatic final int GETTER_INDEX = 0, SETTER_INDEX = 1, INDEX_LIMIT = 2;","field_name":"SETTER_INDEX","field_type":"int","full_declaration":"static final int GETTER_INDEX = 0int SETTER_INDEX = 1","id":4856},{"comment":"// / Support for array element access\r\nstatic final int GETTER_INDEX = 0, SETTER_INDEX = 1, INDEX_LIMIT = 2;","field_name":"INDEX_LIMIT","field_type":"int","full_declaration":"static final int GETTER_INDEX = 0int SETTER_INDEX = 1int INDEX_LIMIT = 2","id":4857},{"comment":"static final ClassValue<MethodHandle[]> TYPED_ACCESSORS = new ClassValue<MethodHandle[]>() {\r\n\r\n    @Override\r\n    protected MethodHandle[] computeValue(Class<?> type) {\r\n        return new MethodHandle[INDEX_LIMIT];\r\n    }\r\n};","field_name":"TYPED_ACCESSORS","field_type":"java.lang.ClassValue","full_declaration":"static final java.lang.ClassValue TYPED_ACCESSORS = new ClassValue<MethodHandle[]>() {\r\n\r\n    @Override\r\n    protected MethodHandle[] computeValue(Class<?> type) {\r\n        return new MethodHandle[INDEX_LIMIT];\r\n    }\r\n}","id":4858},{"comment":"static final MethodHandle OBJECT_ARRAY_GETTER, OBJECT_ARRAY_SETTER;","field_name":"OBJECT_ARRAY_GETTER","field_type":"java.lang.invoke.MethodHandle","full_declaration":"static final java.lang.invoke.MethodHandle OBJECT_ARRAY_GETTER","id":4859},{"comment":"static final MethodHandle OBJECT_ARRAY_GETTER, OBJECT_ARRAY_SETTER;","field_name":"OBJECT_ARRAY_SETTER","field_type":"java.lang.invoke.MethodHandle","full_declaration":"static final java.lang.invoke.MethodHandle OBJECT_ARRAY_GETTERjava.lang.invoke.MethodHandle OBJECT_ARRAY_SETTER","id":4860},{"comment":"private final MethodHandle target;","field_name":"target","field_type":"java.lang.invoke.MethodHandle","full_declaration":"private final java.lang.invoke.MethodHandle target","id":4861},{"comment":"private final Class<?> arrayType;","field_name":"arrayType","field_type":"java.lang.Class","full_declaration":"private final java.lang.Class arrayType","id":4862},{"comment":"@Stable\r\nprivate MethodHandle asCollectorCache;","field_name":"asCollectorCache","field_type":"java.lang.invoke.MethodHandle","full_declaration":"private java.lang.invoke.MethodHandle asCollectorCache","id":4863},{"comment":"private static final Class<?> MHI = MethodHandleImpl.class;","field_name":"MHI","field_type":"java.lang.Class","full_declaration":"private static final java.lang.Class MHI = MethodHandleImpl.class","id":4864},{"comment":"","field_name":"ARRAYS","field_type":"MethodHandle[]","full_declaration":"private static final MethodHandle[] ARRAYS","id":4865},{"comment":"","field_name":"FILL_ARRAYS","field_type":"MethodHandle[]","full_declaration":"private static final MethodHandle[] FILL_ARRAYS","id":4866},{"comment":"static final NamedFunction NF_checkSpreadArgument;","field_name":"NF_checkSpreadArgument","field_type":"java.lang.invoke.LambdaForm.NamedFunction","full_declaration":"static final java.lang.invoke.LambdaForm.NamedFunction NF_checkSpreadArgument","id":4867},{"comment":"static final NamedFunction NF_guardWithCatch;","field_name":"NF_guardWithCatch","field_type":"java.lang.invoke.LambdaForm.NamedFunction","full_declaration":"static final java.lang.invoke.LambdaForm.NamedFunction NF_guardWithCatch","id":4868},{"comment":"static final NamedFunction NF_throwException;","field_name":"NF_throwException","field_type":"java.lang.invoke.LambdaForm.NamedFunction","full_declaration":"static final java.lang.invoke.LambdaForm.NamedFunction NF_throwException","id":4869},{"comment":"static final NamedFunction NF_profileBoolean;","field_name":"NF_profileBoolean","field_type":"java.lang.invoke.LambdaForm.NamedFunction","full_declaration":"static final java.lang.invoke.LambdaForm.NamedFunction NF_profileBoolean","id":4870},{"comment":"static final MethodHandle MH_castReference;","field_name":"MH_castReference","field_type":"java.lang.invoke.MethodHandle","full_declaration":"static final java.lang.invoke.MethodHandle MH_castReference","id":4871},{"comment":"static final MethodHandle MH_selectAlternative;","field_name":"MH_selectAlternative","field_type":"java.lang.invoke.MethodHandle","full_declaration":"static final java.lang.invoke.MethodHandle MH_selectAlternative","id":4872},{"comment":"static final MethodHandle MH_copyAsPrimitiveArray;","field_name":"MH_copyAsPrimitiveArray","field_type":"java.lang.invoke.MethodHandle","full_declaration":"static final java.lang.invoke.MethodHandle MH_copyAsPrimitiveArray","id":4873},{"comment":"static final MethodHandle MH_fillNewTypedArray;","field_name":"MH_fillNewTypedArray","field_type":"java.lang.invoke.MethodHandle","full_declaration":"static final java.lang.invoke.MethodHandle MH_fillNewTypedArray","id":4874},{"comment":"static final MethodHandle MH_fillNewArray;","field_name":"MH_fillNewArray","field_type":"java.lang.invoke.MethodHandle","full_declaration":"static final java.lang.invoke.MethodHandle MH_fillNewArray","id":4875},{"comment":"static final MethodHandle MH_arrayIdentity;","field_name":"MH_arrayIdentity","field_type":"java.lang.invoke.MethodHandle","full_declaration":"static final java.lang.invoke.MethodHandle MH_arrayIdentity","id":4876},{"comment":"private final MethodHandle target;","field_name":"target","field_type":"java.lang.invoke.MethodHandle","full_declaration":"private final java.lang.invoke.MethodHandle target","id":4877},{"comment":"","field_name":"count","field_type":"int","full_declaration":"private int count","id":4878},{"comment":"private Function<MethodHandle, LambdaForm> countingFormProducer;","field_name":"countingFormProducer","field_type":"java.util.function.Function","full_declaration":"private java.util.function.Function countingFormProducer","id":4879},{"comment":"private Function<MethodHandle, LambdaForm> nonCountingFormProducer;","field_name":"nonCountingFormProducer","field_type":"java.util.function.Function","full_declaration":"private java.util.function.Function nonCountingFormProducer","id":4880},{"comment":"","field_name":"isCounting","field_type":"boolean","full_declaration":"private volatile boolean isCounting","id":4881},{"comment":"static final NamedFunction NF_maybeStopCounting;","field_name":"NF_maybeStopCounting","field_type":"java.lang.invoke.LambdaForm.NamedFunction","full_declaration":"static final java.lang.invoke.LambdaForm.NamedFunction NF_maybeStopCounting","id":4882},{"comment":"private static ClassValue<MethodHandle> CV_makeInjectedInvoker = new ClassValue<MethodHandle>() {\r\n\r\n    @Override\r\n    protected MethodHandle computeValue(Class<?> hostClass) {\r\n        return makeInjectedInvoker(hostClass);\r\n    }\r\n};","field_name":"CV_makeInjectedInvoker","field_type":"java.lang.ClassValue","full_declaration":"private static java.lang.ClassValue CV_makeInjectedInvoker = new ClassValue<MethodHandle>() {\r\n\r\n    @Override\r\n    protected MethodHandle computeValue(Class<?> hostClass) {\r\n        return makeInjectedInvoker(hostClass);\r\n    }\r\n}","id":4883},{"comment":"private static final MethodHandle MH_checkCallerClass;","field_name":"MH_checkCallerClass","field_type":"java.lang.invoke.MethodHandle","full_declaration":"private static final java.lang.invoke.MethodHandle MH_checkCallerClass","id":4884},{"comment":"","field_name":"T_BYTES","field_type":"byte[]","full_declaration":"private static final byte[] T_BYTES","id":4885},{"comment":"private final MethodHandle target;","field_name":"target","field_type":"java.lang.invoke.MethodHandle","full_declaration":"private final java.lang.invoke.MethodHandle target","id":4886},{"comment":"private final MemberName member;","field_name":"member","field_type":"java.lang.invoke.MemberName","full_declaration":"private final java.lang.invoke.MemberName member","id":4887},{"comment":"private final Class<?> callerClass;","field_name":"callerClass","field_type":"java.lang.Class","full_declaration":"private final java.lang.Class callerClass","id":4888},{"comment":"","field_name":"isInvokeSpecial","field_type":"boolean","full_declaration":"private final boolean isInvokeSpecial","id":4889},{"comment":"private final MethodHandle target;","field_name":"target","field_type":"java.lang.invoke.MethodHandle","full_declaration":"private final java.lang.invoke.MethodHandle target","id":4890},{"comment":"private final Intrinsic intrinsicName;","field_name":"intrinsicName","field_type":"java.lang.invoke.MethodHandleImpl.Intrinsic","full_declaration":"private final java.lang.invoke.MethodHandleImpl.Intrinsic intrinsicName","id":4891},{"comment":"/**\r\n * A direct method handle reference kind,\r\n * as defined in the <a href=\"MethodHandleInfo.html#refkinds\">table above</a>.\r\n */\r\npublic static final int REF_getField = Constants.REF_getField, REF_getStatic = Constants.REF_getStatic, REF_putField = Constants.REF_putField, REF_putStatic = Constants.REF_putStatic, REF_invokeVirtual = Constants.REF_invokeVirtual, REF_invokeStatic = Constants.REF_invokeStatic, REF_invokeSpecial = Constants.REF_invokeSpecial, REF_newInvokeSpecial = Constants.REF_newInvokeSpecial, REF_invokeInterface = Constants.REF_invokeInterface;","field_name":"REF_getField","field_type":"int","full_declaration":"public static final int REF_getField = Constants.REF_getField","id":4892},{"comment":"/**\r\n * A direct method handle reference kind,\r\n * as defined in the <a href=\"MethodHandleInfo.html#refkinds\">table above</a>.\r\n */\r\npublic static final int REF_getField = Constants.REF_getField, REF_getStatic = Constants.REF_getStatic, REF_putField = Constants.REF_putField, REF_putStatic = Constants.REF_putStatic, REF_invokeVirtual = Constants.REF_invokeVirtual, REF_invokeStatic = Constants.REF_invokeStatic, REF_invokeSpecial = Constants.REF_invokeSpecial, REF_newInvokeSpecial = Constants.REF_newInvokeSpecial, REF_invokeInterface = Constants.REF_invokeInterface;","field_name":"REF_getStatic","field_type":"int","full_declaration":"public static final int REF_getField = Constants.REF_getFieldint REF_getStatic = Constants.REF_getStatic","id":4893},{"comment":"/**\r\n * A direct method handle reference kind,\r\n * as defined in the <a href=\"MethodHandleInfo.html#refkinds\">table above</a>.\r\n */\r\npublic static final int REF_getField = Constants.REF_getField, REF_getStatic = Constants.REF_getStatic, REF_putField = Constants.REF_putField, REF_putStatic = Constants.REF_putStatic, REF_invokeVirtual = Constants.REF_invokeVirtual, REF_invokeStatic = Constants.REF_invokeStatic, REF_invokeSpecial = Constants.REF_invokeSpecial, REF_newInvokeSpecial = Constants.REF_newInvokeSpecial, REF_invokeInterface = Constants.REF_invokeInterface;","field_name":"REF_putField","field_type":"int","full_declaration":"public static final int REF_getField = Constants.REF_getFieldint REF_getStatic = Constants.REF_getStaticint REF_putField = Constants.REF_putField","id":4894},{"comment":"/**\r\n * A direct method handle reference kind,\r\n * as defined in the <a href=\"MethodHandleInfo.html#refkinds\">table above</a>.\r\n */\r\npublic static final int REF_getField = Constants.REF_getField, REF_getStatic = Constants.REF_getStatic, REF_putField = Constants.REF_putField, REF_putStatic = Constants.REF_putStatic, REF_invokeVirtual = Constants.REF_invokeVirtual, REF_invokeStatic = Constants.REF_invokeStatic, REF_invokeSpecial = Constants.REF_invokeSpecial, REF_newInvokeSpecial = Constants.REF_newInvokeSpecial, REF_invokeInterface = Constants.REF_invokeInterface;","field_name":"REF_putStatic","field_type":"int","full_declaration":"public static final int REF_getField = Constants.REF_getFieldint REF_getStatic = Constants.REF_getStaticint REF_putField = Constants.REF_putFieldint REF_putStatic = Constants.REF_putStatic","id":4895},{"comment":"/**\r\n * A direct method handle reference kind,\r\n * as defined in the <a href=\"MethodHandleInfo.html#refkinds\">table above</a>.\r\n */\r\npublic static final int REF_getField = Constants.REF_getField, REF_getStatic = Constants.REF_getStatic, REF_putField = Constants.REF_putField, REF_putStatic = Constants.REF_putStatic, REF_invokeVirtual = Constants.REF_invokeVirtual, REF_invokeStatic = Constants.REF_invokeStatic, REF_invokeSpecial = Constants.REF_invokeSpecial, REF_newInvokeSpecial = Constants.REF_newInvokeSpecial, REF_invokeInterface = Constants.REF_invokeInterface;","field_name":"REF_invokeVirtual","field_type":"int","full_declaration":"public static final int REF_getField = Constants.REF_getFieldint REF_getStatic = Constants.REF_getStaticint REF_putField = Constants.REF_putFieldint REF_putStatic = Constants.REF_putStaticint REF_invokeVirtual = Constants.REF_invokeVirtual","id":4896},{"comment":"/**\r\n * A direct method handle reference kind,\r\n * as defined in the <a href=\"MethodHandleInfo.html#refkinds\">table above</a>.\r\n */\r\npublic static final int REF_getField = Constants.REF_getField, REF_getStatic = Constants.REF_getStatic, REF_putField = Constants.REF_putField, REF_putStatic = Constants.REF_putStatic, REF_invokeVirtual = Constants.REF_invokeVirtual, REF_invokeStatic = Constants.REF_invokeStatic, REF_invokeSpecial = Constants.REF_invokeSpecial, REF_newInvokeSpecial = Constants.REF_newInvokeSpecial, REF_invokeInterface = Constants.REF_invokeInterface;","field_name":"REF_invokeStatic","field_type":"int","full_declaration":"public static final int REF_getField = Constants.REF_getFieldint REF_getStatic = Constants.REF_getStaticint REF_putField = Constants.REF_putFieldint REF_putStatic = Constants.REF_putStaticint REF_invokeVirtual = Constants.REF_invokeVirtualint REF_invokeStatic = Constants.REF_invokeStatic","id":4897},{"comment":"/**\r\n * A direct method handle reference kind,\r\n * as defined in the <a href=\"MethodHandleInfo.html#refkinds\">table above</a>.\r\n */\r\npublic static final int REF_getField = Constants.REF_getField, REF_getStatic = Constants.REF_getStatic, REF_putField = Constants.REF_putField, REF_putStatic = Constants.REF_putStatic, REF_invokeVirtual = Constants.REF_invokeVirtual, REF_invokeStatic = Constants.REF_invokeStatic, REF_invokeSpecial = Constants.REF_invokeSpecial, REF_newInvokeSpecial = Constants.REF_newInvokeSpecial, REF_invokeInterface = Constants.REF_invokeInterface;","field_name":"REF_invokeSpecial","field_type":"int","full_declaration":"public static final int REF_getField = Constants.REF_getFieldint REF_getStatic = Constants.REF_getStaticint REF_putField = Constants.REF_putFieldint REF_putStatic = Constants.REF_putStaticint REF_invokeVirtual = Constants.REF_invokeVirtualint REF_invokeStatic = Constants.REF_invokeStaticint REF_invokeSpecial = Constants.REF_invokeSpecial","id":4898},{"comment":"/**\r\n * A direct method handle reference kind,\r\n * as defined in the <a href=\"MethodHandleInfo.html#refkinds\">table above</a>.\r\n */\r\npublic static final int REF_getField = Constants.REF_getField, REF_getStatic = Constants.REF_getStatic, REF_putField = Constants.REF_putField, REF_putStatic = Constants.REF_putStatic, REF_invokeVirtual = Constants.REF_invokeVirtual, REF_invokeStatic = Constants.REF_invokeStatic, REF_invokeSpecial = Constants.REF_invokeSpecial, REF_newInvokeSpecial = Constants.REF_newInvokeSpecial, REF_invokeInterface = Constants.REF_invokeInterface;","field_name":"REF_newInvokeSpecial","field_type":"int","full_declaration":"public static final int REF_getField = Constants.REF_getFieldint REF_getStatic = Constants.REF_getStaticint REF_putField = Constants.REF_putFieldint REF_putStatic = Constants.REF_putStaticint REF_invokeVirtual = Constants.REF_invokeVirtualint REF_invokeStatic = Constants.REF_invokeStaticint REF_invokeSpecial = Constants.REF_invokeSpecialint REF_newInvokeSpecial = Constants.REF_newInvokeSpecial","id":4899},{"comment":"/**\r\n * A direct method handle reference kind,\r\n * as defined in the <a href=\"MethodHandleInfo.html#refkinds\">table above</a>.\r\n */\r\npublic static final int REF_getField = Constants.REF_getField, REF_getStatic = Constants.REF_getStatic, REF_putField = Constants.REF_putField, REF_putStatic = Constants.REF_putStatic, REF_invokeVirtual = Constants.REF_invokeVirtual, REF_invokeStatic = Constants.REF_invokeStatic, REF_invokeSpecial = Constants.REF_invokeSpecial, REF_newInvokeSpecial = Constants.REF_newInvokeSpecial, REF_invokeInterface = Constants.REF_invokeInterface;","field_name":"REF_invokeInterface","field_type":"int","full_declaration":"public static final int REF_getField = Constants.REF_getFieldint REF_getStatic = Constants.REF_getStaticint REF_putField = Constants.REF_putFieldint REF_putStatic = Constants.REF_putStaticint REF_invokeVirtual = Constants.REF_invokeVirtualint REF_invokeStatic = Constants.REF_invokeStaticint REF_invokeSpecial = Constants.REF_invokeSpecialint REF_newInvokeSpecial = Constants.REF_newInvokeSpecialint REF_invokeInterface = Constants.REF_invokeInterface","id":4900},{"comment":"","field_name":"COUNT_GWT","field_type":"boolean","full_declaration":"static final boolean COUNT_GWT","id":4901},{"comment":"// MethodHandleImpl\r\nstatic final int // for getConstant\r\nGC_COUNT_GWT = 4, GC_LAMBDA_SUPPORT = 5;","field_name":"GC_COUNT_GWT","field_type":"int","full_declaration":"static final int // for getConstant\r\nGC_COUNT_GWT = 4","id":4902},{"comment":"// MethodHandleImpl\r\nstatic final int // for getConstant\r\nGC_COUNT_GWT = 4, GC_LAMBDA_SUPPORT = 5;","field_name":"GC_LAMBDA_SUPPORT","field_type":"int","full_declaration":"static final int // for getConstant\r\nGC_COUNT_GWT = 4int GC_LAMBDA_SUPPORT = 5","id":4903},{"comment":"// MemberName\r\n// The JVM uses values of -2 and above for vtable indexes.\r\n// Field values are simple positive offsets.\r\n// Ref: src/share/vm/oops/methodOop.hpp\r\n// This value is negative enough to avoid such numbers,\r\n// but not too negative.\r\nstatic final int // method (not constructor)\r\nMN_IS_METHOD = 0x00010000, // constructor\r\nMN_IS_CONSTRUCTOR = 0x00020000, // field\r\nMN_IS_FIELD = 0x00040000, // nested type\r\nMN_IS_TYPE = 0x00080000, // @CallerSensitive annotation detected\r\nMN_CALLER_SENSITIVE = 0x00100000, // refKind\r\nMN_REFERENCE_KIND_SHIFT = 24, MN_REFERENCE_KIND_MASK = 0x0F000000 >> MN_REFERENCE_KIND_SHIFT, // The SEARCH_* bits are not for MN.flags but for the matchFlags argument of MHN.getMembers:\r\nMN_SEARCH_SUPERCLASSES = 0x00100000, MN_SEARCH_INTERFACES = 0x00200000;","field_name":"MN_IS_METHOD","field_type":"int","full_declaration":"static final int // method (not constructor)\r\nMN_IS_METHOD = 0x00010000","id":4904},{"comment":"// MemberName\r\n// The JVM uses values of -2 and above for vtable indexes.\r\n// Field values are simple positive offsets.\r\n// Ref: src/share/vm/oops/methodOop.hpp\r\n// This value is negative enough to avoid such numbers,\r\n// but not too negative.\r\nstatic final int // method (not constructor)\r\nMN_IS_METHOD = 0x00010000, // constructor\r\nMN_IS_CONSTRUCTOR = 0x00020000, // field\r\nMN_IS_FIELD = 0x00040000, // nested type\r\nMN_IS_TYPE = 0x00080000, // @CallerSensitive annotation detected\r\nMN_CALLER_SENSITIVE = 0x00100000, // refKind\r\nMN_REFERENCE_KIND_SHIFT = 24, MN_REFERENCE_KIND_MASK = 0x0F000000 >> MN_REFERENCE_KIND_SHIFT, // The SEARCH_* bits are not for MN.flags but for the matchFlags argument of MHN.getMembers:\r\nMN_SEARCH_SUPERCLASSES = 0x00100000, MN_SEARCH_INTERFACES = 0x00200000;","field_name":"MN_IS_CONSTRUCTOR","field_type":"int","full_declaration":"static final int // method (not constructor)\r\nMN_IS_METHOD = 0x00010000int // constructor\r\nMN_IS_CONSTRUCTOR = 0x00020000","id":4905},{"comment":"// MemberName\r\n// The JVM uses values of -2 and above for vtable indexes.\r\n// Field values are simple positive offsets.\r\n// Ref: src/share/vm/oops/methodOop.hpp\r\n// This value is negative enough to avoid such numbers,\r\n// but not too negative.\r\nstatic final int // method (not constructor)\r\nMN_IS_METHOD = 0x00010000, // constructor\r\nMN_IS_CONSTRUCTOR = 0x00020000, // field\r\nMN_IS_FIELD = 0x00040000, // nested type\r\nMN_IS_TYPE = 0x00080000, // @CallerSensitive annotation detected\r\nMN_CALLER_SENSITIVE = 0x00100000, // refKind\r\nMN_REFERENCE_KIND_SHIFT = 24, MN_REFERENCE_KIND_MASK = 0x0F000000 >> MN_REFERENCE_KIND_SHIFT, // The SEARCH_* bits are not for MN.flags but for the matchFlags argument of MHN.getMembers:\r\nMN_SEARCH_SUPERCLASSES = 0x00100000, MN_SEARCH_INTERFACES = 0x00200000;","field_name":"MN_IS_FIELD","field_type":"int","full_declaration":"static final int // method (not constructor)\r\nMN_IS_METHOD = 0x00010000int // constructor\r\nMN_IS_CONSTRUCTOR = 0x00020000int // field\r\nMN_IS_FIELD = 0x00040000","id":4906},{"comment":"// MemberName\r\n// The JVM uses values of -2 and above for vtable indexes.\r\n// Field values are simple positive offsets.\r\n// Ref: src/share/vm/oops/methodOop.hpp\r\n// This value is negative enough to avoid such numbers,\r\n// but not too negative.\r\nstatic final int // method (not constructor)\r\nMN_IS_METHOD = 0x00010000, // constructor\r\nMN_IS_CONSTRUCTOR = 0x00020000, // field\r\nMN_IS_FIELD = 0x00040000, // nested type\r\nMN_IS_TYPE = 0x00080000, // @CallerSensitive annotation detected\r\nMN_CALLER_SENSITIVE = 0x00100000, // refKind\r\nMN_REFERENCE_KIND_SHIFT = 24, MN_REFERENCE_KIND_MASK = 0x0F000000 >> MN_REFERENCE_KIND_SHIFT, // The SEARCH_* bits are not for MN.flags but for the matchFlags argument of MHN.getMembers:\r\nMN_SEARCH_SUPERCLASSES = 0x00100000, MN_SEARCH_INTERFACES = 0x00200000;","field_name":"MN_IS_TYPE","field_type":"int","full_declaration":"static final int // method (not constructor)\r\nMN_IS_METHOD = 0x00010000int // constructor\r\nMN_IS_CONSTRUCTOR = 0x00020000int // field\r\nMN_IS_FIELD = 0x00040000int // nested type\r\nMN_IS_TYPE = 0x00080000","id":4907},{"comment":"// MemberName\r\n// The JVM uses values of -2 and above for vtable indexes.\r\n// Field values are simple positive offsets.\r\n// Ref: src/share/vm/oops/methodOop.hpp\r\n// This value is negative enough to avoid such numbers,\r\n// but not too negative.\r\nstatic final int // method (not constructor)\r\nMN_IS_METHOD = 0x00010000, // constructor\r\nMN_IS_CONSTRUCTOR = 0x00020000, // field\r\nMN_IS_FIELD = 0x00040000, // nested type\r\nMN_IS_TYPE = 0x00080000, // @CallerSensitive annotation detected\r\nMN_CALLER_SENSITIVE = 0x00100000, // refKind\r\nMN_REFERENCE_KIND_SHIFT = 24, MN_REFERENCE_KIND_MASK = 0x0F000000 >> MN_REFERENCE_KIND_SHIFT, // The SEARCH_* bits are not for MN.flags but for the matchFlags argument of MHN.getMembers:\r\nMN_SEARCH_SUPERCLASSES = 0x00100000, MN_SEARCH_INTERFACES = 0x00200000;","field_name":"MN_CALLER_SENSITIVE","field_type":"int","full_declaration":"static final int // method (not constructor)\r\nMN_IS_METHOD = 0x00010000int // constructor\r\nMN_IS_CONSTRUCTOR = 0x00020000int // field\r\nMN_IS_FIELD = 0x00040000int // nested type\r\nMN_IS_TYPE = 0x00080000int // @CallerSensitive annotation detected\r\nMN_CALLER_SENSITIVE = 0x00100000","id":4908},{"comment":"// MemberName\r\n// The JVM uses values of -2 and above for vtable indexes.\r\n// Field values are simple positive offsets.\r\n// Ref: src/share/vm/oops/methodOop.hpp\r\n// This value is negative enough to avoid such numbers,\r\n// but not too negative.\r\nstatic final int // method (not constructor)\r\nMN_IS_METHOD = 0x00010000, // constructor\r\nMN_IS_CONSTRUCTOR = 0x00020000, // field\r\nMN_IS_FIELD = 0x00040000, // nested type\r\nMN_IS_TYPE = 0x00080000, // @CallerSensitive annotation detected\r\nMN_CALLER_SENSITIVE = 0x00100000, // refKind\r\nMN_REFERENCE_KIND_SHIFT = 24, MN_REFERENCE_KIND_MASK = 0x0F000000 >> MN_REFERENCE_KIND_SHIFT, // The SEARCH_* bits are not for MN.flags but for the matchFlags argument of MHN.getMembers:\r\nMN_SEARCH_SUPERCLASSES = 0x00100000, MN_SEARCH_INTERFACES = 0x00200000;","field_name":"MN_REFERENCE_KIND_SHIFT","field_type":"int","full_declaration":"static final int // method (not constructor)\r\nMN_IS_METHOD = 0x00010000int // constructor\r\nMN_IS_CONSTRUCTOR = 0x00020000int // field\r\nMN_IS_FIELD = 0x00040000int // nested type\r\nMN_IS_TYPE = 0x00080000int // @CallerSensitive annotation detected\r\nMN_CALLER_SENSITIVE = 0x00100000int // refKind\r\nMN_REFERENCE_KIND_SHIFT = 24","id":4909},{"comment":"// MemberName\r\n// The JVM uses values of -2 and above for vtable indexes.\r\n// Field values are simple positive offsets.\r\n// Ref: src/share/vm/oops/methodOop.hpp\r\n// This value is negative enough to avoid such numbers,\r\n// but not too negative.\r\nstatic final int // method (not constructor)\r\nMN_IS_METHOD = 0x00010000, // constructor\r\nMN_IS_CONSTRUCTOR = 0x00020000, // field\r\nMN_IS_FIELD = 0x00040000, // nested type\r\nMN_IS_TYPE = 0x00080000, // @CallerSensitive annotation detected\r\nMN_CALLER_SENSITIVE = 0x00100000, // refKind\r\nMN_REFERENCE_KIND_SHIFT = 24, MN_REFERENCE_KIND_MASK = 0x0F000000 >> MN_REFERENCE_KIND_SHIFT, // The SEARCH_* bits are not for MN.flags but for the matchFlags argument of MHN.getMembers:\r\nMN_SEARCH_SUPERCLASSES = 0x00100000, MN_SEARCH_INTERFACES = 0x00200000;","field_name":"MN_REFERENCE_KIND_MASK","field_type":"int","full_declaration":"static final int // method (not constructor)\r\nMN_IS_METHOD = 0x00010000int // constructor\r\nMN_IS_CONSTRUCTOR = 0x00020000int // field\r\nMN_IS_FIELD = 0x00040000int // nested type\r\nMN_IS_TYPE = 0x00080000int // @CallerSensitive annotation detected\r\nMN_CALLER_SENSITIVE = 0x00100000int // refKind\r\nMN_REFERENCE_KIND_SHIFT = 24int MN_REFERENCE_KIND_MASK = 0x0F000000 >> MN_REFERENCE_KIND_SHIFT","id":4910},{"comment":"// MemberName\r\n// The JVM uses values of -2 and above for vtable indexes.\r\n// Field values are simple positive offsets.\r\n// Ref: src/share/vm/oops/methodOop.hpp\r\n// This value is negative enough to avoid such numbers,\r\n// but not too negative.\r\nstatic final int // method (not constructor)\r\nMN_IS_METHOD = 0x00010000, // constructor\r\nMN_IS_CONSTRUCTOR = 0x00020000, // field\r\nMN_IS_FIELD = 0x00040000, // nested type\r\nMN_IS_TYPE = 0x00080000, // @CallerSensitive annotation detected\r\nMN_CALLER_SENSITIVE = 0x00100000, // refKind\r\nMN_REFERENCE_KIND_SHIFT = 24, MN_REFERENCE_KIND_MASK = 0x0F000000 >> MN_REFERENCE_KIND_SHIFT, // The SEARCH_* bits are not for MN.flags but for the matchFlags argument of MHN.getMembers:\r\nMN_SEARCH_SUPERCLASSES = 0x00100000, MN_SEARCH_INTERFACES = 0x00200000;","field_name":"MN_SEARCH_SUPERCLASSES","field_type":"int","full_declaration":"static final int // method (not constructor)\r\nMN_IS_METHOD = 0x00010000int // constructor\r\nMN_IS_CONSTRUCTOR = 0x00020000int // field\r\nMN_IS_FIELD = 0x00040000int // nested type\r\nMN_IS_TYPE = 0x00080000int // @CallerSensitive annotation detected\r\nMN_CALLER_SENSITIVE = 0x00100000int // refKind\r\nMN_REFERENCE_KIND_SHIFT = 24int MN_REFERENCE_KIND_MASK = 0x0F000000 >> MN_REFERENCE_KIND_SHIFTint // The SEARCH_* bits are not for MN.flags but for the matchFlags argument of MHN.getMembers:\r\nMN_SEARCH_SUPERCLASSES = 0x00100000","id":4911},{"comment":"// MemberName\r\n// The JVM uses values of -2 and above for vtable indexes.\r\n// Field values are simple positive offsets.\r\n// Ref: src/share/vm/oops/methodOop.hpp\r\n// This value is negative enough to avoid such numbers,\r\n// but not too negative.\r\nstatic final int // method (not constructor)\r\nMN_IS_METHOD = 0x00010000, // constructor\r\nMN_IS_CONSTRUCTOR = 0x00020000, // field\r\nMN_IS_FIELD = 0x00040000, // nested type\r\nMN_IS_TYPE = 0x00080000, // @CallerSensitive annotation detected\r\nMN_CALLER_SENSITIVE = 0x00100000, // refKind\r\nMN_REFERENCE_KIND_SHIFT = 24, MN_REFERENCE_KIND_MASK = 0x0F000000 >> MN_REFERENCE_KIND_SHIFT, // The SEARCH_* bits are not for MN.flags but for the matchFlags argument of MHN.getMembers:\r\nMN_SEARCH_SUPERCLASSES = 0x00100000, MN_SEARCH_INTERFACES = 0x00200000;","field_name":"MN_SEARCH_INTERFACES","field_type":"int","full_declaration":"static final int // method (not constructor)\r\nMN_IS_METHOD = 0x00010000int // constructor\r\nMN_IS_CONSTRUCTOR = 0x00020000int // field\r\nMN_IS_FIELD = 0x00040000int // nested type\r\nMN_IS_TYPE = 0x00080000int // @CallerSensitive annotation detected\r\nMN_CALLER_SENSITIVE = 0x00100000int // refKind\r\nMN_REFERENCE_KIND_SHIFT = 24int MN_REFERENCE_KIND_MASK = 0x0F000000 >> MN_REFERENCE_KIND_SHIFTint // The SEARCH_* bits are not for MN.flags but for the matchFlags argument of MHN.getMembers:\r\nMN_SEARCH_SUPERCLASSES = 0x00100000int MN_SEARCH_INTERFACES = 0x00200000","id":4912},{"comment":"/**\r\n * Basic types as encoded in the JVM.  These code values are not\r\n * intended for use outside this class.  They are used as part of\r\n * a private interface between the JVM and this class.\r\n */\r\nstatic final int T_BOOLEAN = 4, T_CHAR = 5, T_FLOAT = 6, T_DOUBLE = 7, T_BYTE = 8, T_SHORT = 9, T_INT = 10, T_LONG = 11, T_OBJECT = 12, // T_ARRAY    = 13\r\nT_VOID = 14, // T_ADDRESS  = 15\r\nT_ILLEGAL = 99;","field_name":"T_BOOLEAN","field_type":"int","full_declaration":"static final int T_BOOLEAN = 4","id":4913},{"comment":"/**\r\n * Basic types as encoded in the JVM.  These code values are not\r\n * intended for use outside this class.  They are used as part of\r\n * a private interface between the JVM and this class.\r\n */\r\nstatic final int T_BOOLEAN = 4, T_CHAR = 5, T_FLOAT = 6, T_DOUBLE = 7, T_BYTE = 8, T_SHORT = 9, T_INT = 10, T_LONG = 11, T_OBJECT = 12, // T_ARRAY    = 13\r\nT_VOID = 14, // T_ADDRESS  = 15\r\nT_ILLEGAL = 99;","field_name":"T_CHAR","field_type":"int","full_declaration":"static final int T_BOOLEAN = 4int T_CHAR = 5","id":4914},{"comment":"/**\r\n * Basic types as encoded in the JVM.  These code values are not\r\n * intended for use outside this class.  They are used as part of\r\n * a private interface between the JVM and this class.\r\n */\r\nstatic final int T_BOOLEAN = 4, T_CHAR = 5, T_FLOAT = 6, T_DOUBLE = 7, T_BYTE = 8, T_SHORT = 9, T_INT = 10, T_LONG = 11, T_OBJECT = 12, // T_ARRAY    = 13\r\nT_VOID = 14, // T_ADDRESS  = 15\r\nT_ILLEGAL = 99;","field_name":"T_FLOAT","field_type":"int","full_declaration":"static final int T_BOOLEAN = 4int T_CHAR = 5int T_FLOAT = 6","id":4915},{"comment":"/**\r\n * Basic types as encoded in the JVM.  These code values are not\r\n * intended for use outside this class.  They are used as part of\r\n * a private interface between the JVM and this class.\r\n */\r\nstatic final int T_BOOLEAN = 4, T_CHAR = 5, T_FLOAT = 6, T_DOUBLE = 7, T_BYTE = 8, T_SHORT = 9, T_INT = 10, T_LONG = 11, T_OBJECT = 12, // T_ARRAY    = 13\r\nT_VOID = 14, // T_ADDRESS  = 15\r\nT_ILLEGAL = 99;","field_name":"T_DOUBLE","field_type":"int","full_declaration":"static final int T_BOOLEAN = 4int T_CHAR = 5int T_FLOAT = 6int T_DOUBLE = 7","id":4916},{"comment":"/**\r\n * Basic types as encoded in the JVM.  These code values are not\r\n * intended for use outside this class.  They are used as part of\r\n * a private interface between the JVM and this class.\r\n */\r\nstatic final int T_BOOLEAN = 4, T_CHAR = 5, T_FLOAT = 6, T_DOUBLE = 7, T_BYTE = 8, T_SHORT = 9, T_INT = 10, T_LONG = 11, T_OBJECT = 12, // T_ARRAY    = 13\r\nT_VOID = 14, // T_ADDRESS  = 15\r\nT_ILLEGAL = 99;","field_name":"T_BYTE","field_type":"int","full_declaration":"static final int T_BOOLEAN = 4int T_CHAR = 5int T_FLOAT = 6int T_DOUBLE = 7int T_BYTE = 8","id":4917},{"comment":"/**\r\n * Basic types as encoded in the JVM.  These code values are not\r\n * intended for use outside this class.  They are used as part of\r\n * a private interface between the JVM and this class.\r\n */\r\nstatic final int T_BOOLEAN = 4, T_CHAR = 5, T_FLOAT = 6, T_DOUBLE = 7, T_BYTE = 8, T_SHORT = 9, T_INT = 10, T_LONG = 11, T_OBJECT = 12, // T_ARRAY    = 13\r\nT_VOID = 14, // T_ADDRESS  = 15\r\nT_ILLEGAL = 99;","field_name":"T_SHORT","field_type":"int","full_declaration":"static final int T_BOOLEAN = 4int T_CHAR = 5int T_FLOAT = 6int T_DOUBLE = 7int T_BYTE = 8int T_SHORT = 9","id":4918},{"comment":"/**\r\n * Basic types as encoded in the JVM.  These code values are not\r\n * intended for use outside this class.  They are used as part of\r\n * a private interface between the JVM and this class.\r\n */\r\nstatic final int T_BOOLEAN = 4, T_CHAR = 5, T_FLOAT = 6, T_DOUBLE = 7, T_BYTE = 8, T_SHORT = 9, T_INT = 10, T_LONG = 11, T_OBJECT = 12, // T_ARRAY    = 13\r\nT_VOID = 14, // T_ADDRESS  = 15\r\nT_ILLEGAL = 99;","field_name":"T_INT","field_type":"int","full_declaration":"static final int T_BOOLEAN = 4int T_CHAR = 5int T_FLOAT = 6int T_DOUBLE = 7int T_BYTE = 8int T_SHORT = 9int T_INT = 10","id":4919},{"comment":"/**\r\n * Basic types as encoded in the JVM.  These code values are not\r\n * intended for use outside this class.  They are used as part of\r\n * a private interface between the JVM and this class.\r\n */\r\nstatic final int T_BOOLEAN = 4, T_CHAR = 5, T_FLOAT = 6, T_DOUBLE = 7, T_BYTE = 8, T_SHORT = 9, T_INT = 10, T_LONG = 11, T_OBJECT = 12, // T_ARRAY    = 13\r\nT_VOID = 14, // T_ADDRESS  = 15\r\nT_ILLEGAL = 99;","field_name":"T_LONG","field_type":"int","full_declaration":"static final int T_BOOLEAN = 4int T_CHAR = 5int T_FLOAT = 6int T_DOUBLE = 7int T_BYTE = 8int T_SHORT = 9int T_INT = 10int T_LONG = 11","id":4920},{"comment":"/**\r\n * Basic types as encoded in the JVM.  These code values are not\r\n * intended for use outside this class.  They are used as part of\r\n * a private interface between the JVM and this class.\r\n */\r\nstatic final int T_BOOLEAN = 4, T_CHAR = 5, T_FLOAT = 6, T_DOUBLE = 7, T_BYTE = 8, T_SHORT = 9, T_INT = 10, T_LONG = 11, T_OBJECT = 12, // T_ARRAY    = 13\r\nT_VOID = 14, // T_ADDRESS  = 15\r\nT_ILLEGAL = 99;","field_name":"T_OBJECT","field_type":"int","full_declaration":"static final int T_BOOLEAN = 4int T_CHAR = 5int T_FLOAT = 6int T_DOUBLE = 7int T_BYTE = 8int T_SHORT = 9int T_INT = 10int T_LONG = 11int T_OBJECT = 12","id":4921},{"comment":"/**\r\n * Basic types as encoded in the JVM.  These code values are not\r\n * intended for use outside this class.  They are used as part of\r\n * a private interface between the JVM and this class.\r\n */\r\nstatic final int T_BOOLEAN = 4, T_CHAR = 5, T_FLOAT = 6, T_DOUBLE = 7, T_BYTE = 8, T_SHORT = 9, T_INT = 10, T_LONG = 11, T_OBJECT = 12, // T_ARRAY    = 13\r\nT_VOID = 14, // T_ADDRESS  = 15\r\nT_ILLEGAL = 99;","field_name":"T_VOID","field_type":"int","full_declaration":"static final int T_BOOLEAN = 4int T_CHAR = 5int T_FLOAT = 6int T_DOUBLE = 7int T_BYTE = 8int T_SHORT = 9int T_INT = 10int T_LONG = 11int T_OBJECT = 12int // T_ARRAY    = 13\r\nT_VOID = 14","id":4922},{"comment":"/**\r\n * Basic types as encoded in the JVM.  These code values are not\r\n * intended for use outside this class.  They are used as part of\r\n * a private interface between the JVM and this class.\r\n */\r\nstatic final int T_BOOLEAN = 4, T_CHAR = 5, T_FLOAT = 6, T_DOUBLE = 7, T_BYTE = 8, T_SHORT = 9, T_INT = 10, T_LONG = 11, T_OBJECT = 12, // T_ARRAY    = 13\r\nT_VOID = 14, // T_ADDRESS  = 15\r\nT_ILLEGAL = 99;","field_name":"T_ILLEGAL","field_type":"int","full_declaration":"static final int T_BOOLEAN = 4int T_CHAR = 5int T_FLOAT = 6int T_DOUBLE = 7int T_BYTE = 8int T_SHORT = 9int T_INT = 10int T_LONG = 11int T_OBJECT = 12int // T_ARRAY    = 13\r\nT_VOID = 14int // T_ADDRESS  = 15\r\nT_ILLEGAL = 99","id":4923},{"comment":"/**\r\n * Constant pool entry types.\r\n */\r\nstatic final byte CONSTANT_Utf8 = 1, CONSTANT_Integer = 3, CONSTANT_Float = 4, CONSTANT_Long = 5, CONSTANT_Double = 6, CONSTANT_Class = 7, CONSTANT_String = 8, CONSTANT_Fieldref = 9, CONSTANT_Methodref = 10, CONSTANT_InterfaceMethodref = 11, CONSTANT_NameAndType = 12, // JSR 292\r\nCONSTANT_MethodHandle = 15, // JSR 292\r\nCONSTANT_MethodType = 16, CONSTANT_InvokeDynamic = 18, // Limit to tags found in classfiles\r\nCONSTANT_LIMIT = 19;","field_name":"CONSTANT_Utf8","field_type":"byte","full_declaration":"static final byte CONSTANT_Utf8 = 1","id":4924},{"comment":"/**\r\n * Constant pool entry types.\r\n */\r\nstatic final byte CONSTANT_Utf8 = 1, CONSTANT_Integer = 3, CONSTANT_Float = 4, CONSTANT_Long = 5, CONSTANT_Double = 6, CONSTANT_Class = 7, CONSTANT_String = 8, CONSTANT_Fieldref = 9, CONSTANT_Methodref = 10, CONSTANT_InterfaceMethodref = 11, CONSTANT_NameAndType = 12, // JSR 292\r\nCONSTANT_MethodHandle = 15, // JSR 292\r\nCONSTANT_MethodType = 16, CONSTANT_InvokeDynamic = 18, // Limit to tags found in classfiles\r\nCONSTANT_LIMIT = 19;","field_name":"CONSTANT_Integer","field_type":"byte","full_declaration":"static final byte CONSTANT_Utf8 = 1byte CONSTANT_Integer = 3","id":4925},{"comment":"/**\r\n * Constant pool entry types.\r\n */\r\nstatic final byte CONSTANT_Utf8 = 1, CONSTANT_Integer = 3, CONSTANT_Float = 4, CONSTANT_Long = 5, CONSTANT_Double = 6, CONSTANT_Class = 7, CONSTANT_String = 8, CONSTANT_Fieldref = 9, CONSTANT_Methodref = 10, CONSTANT_InterfaceMethodref = 11, CONSTANT_NameAndType = 12, // JSR 292\r\nCONSTANT_MethodHandle = 15, // JSR 292\r\nCONSTANT_MethodType = 16, CONSTANT_InvokeDynamic = 18, // Limit to tags found in classfiles\r\nCONSTANT_LIMIT = 19;","field_name":"CONSTANT_Float","field_type":"byte","full_declaration":"static final byte CONSTANT_Utf8 = 1byte CONSTANT_Integer = 3byte CONSTANT_Float = 4","id":4926},{"comment":"/**\r\n * Constant pool entry types.\r\n */\r\nstatic final byte CONSTANT_Utf8 = 1, CONSTANT_Integer = 3, CONSTANT_Float = 4, CONSTANT_Long = 5, CONSTANT_Double = 6, CONSTANT_Class = 7, CONSTANT_String = 8, CONSTANT_Fieldref = 9, CONSTANT_Methodref = 10, CONSTANT_InterfaceMethodref = 11, CONSTANT_NameAndType = 12, // JSR 292\r\nCONSTANT_MethodHandle = 15, // JSR 292\r\nCONSTANT_MethodType = 16, CONSTANT_InvokeDynamic = 18, // Limit to tags found in classfiles\r\nCONSTANT_LIMIT = 19;","field_name":"CONSTANT_Long","field_type":"byte","full_declaration":"static final byte CONSTANT_Utf8 = 1byte CONSTANT_Integer = 3byte CONSTANT_Float = 4byte CONSTANT_Long = 5","id":4927},{"comment":"/**\r\n * Constant pool entry types.\r\n */\r\nstatic final byte CONSTANT_Utf8 = 1, CONSTANT_Integer = 3, CONSTANT_Float = 4, CONSTANT_Long = 5, CONSTANT_Double = 6, CONSTANT_Class = 7, CONSTANT_String = 8, CONSTANT_Fieldref = 9, CONSTANT_Methodref = 10, CONSTANT_InterfaceMethodref = 11, CONSTANT_NameAndType = 12, // JSR 292\r\nCONSTANT_MethodHandle = 15, // JSR 292\r\nCONSTANT_MethodType = 16, CONSTANT_InvokeDynamic = 18, // Limit to tags found in classfiles\r\nCONSTANT_LIMIT = 19;","field_name":"CONSTANT_Double","field_type":"byte","full_declaration":"static final byte CONSTANT_Utf8 = 1byte CONSTANT_Integer = 3byte CONSTANT_Float = 4byte CONSTANT_Long = 5byte CONSTANT_Double = 6","id":4928},{"comment":"/**\r\n * Constant pool entry types.\r\n */\r\nstatic final byte CONSTANT_Utf8 = 1, CONSTANT_Integer = 3, CONSTANT_Float = 4, CONSTANT_Long = 5, CONSTANT_Double = 6, CONSTANT_Class = 7, CONSTANT_String = 8, CONSTANT_Fieldref = 9, CONSTANT_Methodref = 10, CONSTANT_InterfaceMethodref = 11, CONSTANT_NameAndType = 12, // JSR 292\r\nCONSTANT_MethodHandle = 15, // JSR 292\r\nCONSTANT_MethodType = 16, CONSTANT_InvokeDynamic = 18, // Limit to tags found in classfiles\r\nCONSTANT_LIMIT = 19;","field_name":"CONSTANT_Class","field_type":"byte","full_declaration":"static final byte CONSTANT_Utf8 = 1byte CONSTANT_Integer = 3byte CONSTANT_Float = 4byte CONSTANT_Long = 5byte CONSTANT_Double = 6byte CONSTANT_Class = 7","id":4929},{"comment":"/**\r\n * Constant pool entry types.\r\n */\r\nstatic final byte CONSTANT_Utf8 = 1, CONSTANT_Integer = 3, CONSTANT_Float = 4, CONSTANT_Long = 5, CONSTANT_Double = 6, CONSTANT_Class = 7, CONSTANT_String = 8, CONSTANT_Fieldref = 9, CONSTANT_Methodref = 10, CONSTANT_InterfaceMethodref = 11, CONSTANT_NameAndType = 12, // JSR 292\r\nCONSTANT_MethodHandle = 15, // JSR 292\r\nCONSTANT_MethodType = 16, CONSTANT_InvokeDynamic = 18, // Limit to tags found in classfiles\r\nCONSTANT_LIMIT = 19;","field_name":"CONSTANT_String","field_type":"byte","full_declaration":"static final byte CONSTANT_Utf8 = 1byte CONSTANT_Integer = 3byte CONSTANT_Float = 4byte CONSTANT_Long = 5byte CONSTANT_Double = 6byte CONSTANT_Class = 7byte CONSTANT_String = 8","id":4930},{"comment":"/**\r\n * Constant pool entry types.\r\n */\r\nstatic final byte CONSTANT_Utf8 = 1, CONSTANT_Integer = 3, CONSTANT_Float = 4, CONSTANT_Long = 5, CONSTANT_Double = 6, CONSTANT_Class = 7, CONSTANT_String = 8, CONSTANT_Fieldref = 9, CONSTANT_Methodref = 10, CONSTANT_InterfaceMethodref = 11, CONSTANT_NameAndType = 12, // JSR 292\r\nCONSTANT_MethodHandle = 15, // JSR 292\r\nCONSTANT_MethodType = 16, CONSTANT_InvokeDynamic = 18, // Limit to tags found in classfiles\r\nCONSTANT_LIMIT = 19;","field_name":"CONSTANT_Fieldref","field_type":"byte","full_declaration":"static final byte CONSTANT_Utf8 = 1byte CONSTANT_Integer = 3byte CONSTANT_Float = 4byte CONSTANT_Long = 5byte CONSTANT_Double = 6byte CONSTANT_Class = 7byte CONSTANT_String = 8byte CONSTANT_Fieldref = 9","id":4931},{"comment":"/**\r\n * Constant pool entry types.\r\n */\r\nstatic final byte CONSTANT_Utf8 = 1, CONSTANT_Integer = 3, CONSTANT_Float = 4, CONSTANT_Long = 5, CONSTANT_Double = 6, CONSTANT_Class = 7, CONSTANT_String = 8, CONSTANT_Fieldref = 9, CONSTANT_Methodref = 10, CONSTANT_InterfaceMethodref = 11, CONSTANT_NameAndType = 12, // JSR 292\r\nCONSTANT_MethodHandle = 15, // JSR 292\r\nCONSTANT_MethodType = 16, CONSTANT_InvokeDynamic = 18, // Limit to tags found in classfiles\r\nCONSTANT_LIMIT = 19;","field_name":"CONSTANT_Methodref","field_type":"byte","full_declaration":"static final byte CONSTANT_Utf8 = 1byte CONSTANT_Integer = 3byte CONSTANT_Float = 4byte CONSTANT_Long = 5byte CONSTANT_Double = 6byte CONSTANT_Class = 7byte CONSTANT_String = 8byte CONSTANT_Fieldref = 9byte CONSTANT_Methodref = 10","id":4932},{"comment":"/**\r\n * Constant pool entry types.\r\n */\r\nstatic final byte CONSTANT_Utf8 = 1, CONSTANT_Integer = 3, CONSTANT_Float = 4, CONSTANT_Long = 5, CONSTANT_Double = 6, CONSTANT_Class = 7, CONSTANT_String = 8, CONSTANT_Fieldref = 9, CONSTANT_Methodref = 10, CONSTANT_InterfaceMethodref = 11, CONSTANT_NameAndType = 12, // JSR 292\r\nCONSTANT_MethodHandle = 15, // JSR 292\r\nCONSTANT_MethodType = 16, CONSTANT_InvokeDynamic = 18, // Limit to tags found in classfiles\r\nCONSTANT_LIMIT = 19;","field_name":"CONSTANT_InterfaceMethodref","field_type":"byte","full_declaration":"static final byte CONSTANT_Utf8 = 1byte CONSTANT_Integer = 3byte CONSTANT_Float = 4byte CONSTANT_Long = 5byte CONSTANT_Double = 6byte CONSTANT_Class = 7byte CONSTANT_String = 8byte CONSTANT_Fieldref = 9byte CONSTANT_Methodref = 10byte CONSTANT_InterfaceMethodref = 11","id":4933},{"comment":"/**\r\n * Constant pool entry types.\r\n */\r\nstatic final byte CONSTANT_Utf8 = 1, CONSTANT_Integer = 3, CONSTANT_Float = 4, CONSTANT_Long = 5, CONSTANT_Double = 6, CONSTANT_Class = 7, CONSTANT_String = 8, CONSTANT_Fieldref = 9, CONSTANT_Methodref = 10, CONSTANT_InterfaceMethodref = 11, CONSTANT_NameAndType = 12, // JSR 292\r\nCONSTANT_MethodHandle = 15, // JSR 292\r\nCONSTANT_MethodType = 16, CONSTANT_InvokeDynamic = 18, // Limit to tags found in classfiles\r\nCONSTANT_LIMIT = 19;","field_name":"CONSTANT_NameAndType","field_type":"byte","full_declaration":"static final byte CONSTANT_Utf8 = 1byte CONSTANT_Integer = 3byte CONSTANT_Float = 4byte CONSTANT_Long = 5byte CONSTANT_Double = 6byte CONSTANT_Class = 7byte CONSTANT_String = 8byte CONSTANT_Fieldref = 9byte CONSTANT_Methodref = 10byte CONSTANT_InterfaceMethodref = 11byte CONSTANT_NameAndType = 12","id":4934},{"comment":"/**\r\n * Constant pool entry types.\r\n */\r\nstatic final byte CONSTANT_Utf8 = 1, CONSTANT_Integer = 3, CONSTANT_Float = 4, CONSTANT_Long = 5, CONSTANT_Double = 6, CONSTANT_Class = 7, CONSTANT_String = 8, CONSTANT_Fieldref = 9, CONSTANT_Methodref = 10, CONSTANT_InterfaceMethodref = 11, CONSTANT_NameAndType = 12, // JSR 292\r\nCONSTANT_MethodHandle = 15, // JSR 292\r\nCONSTANT_MethodType = 16, CONSTANT_InvokeDynamic = 18, // Limit to tags found in classfiles\r\nCONSTANT_LIMIT = 19;","field_name":"CONSTANT_MethodHandle","field_type":"byte","full_declaration":"static final byte CONSTANT_Utf8 = 1byte CONSTANT_Integer = 3byte CONSTANT_Float = 4byte CONSTANT_Long = 5byte CONSTANT_Double = 6byte CONSTANT_Class = 7byte CONSTANT_String = 8byte CONSTANT_Fieldref = 9byte CONSTANT_Methodref = 10byte CONSTANT_InterfaceMethodref = 11byte CONSTANT_NameAndType = 12byte // JSR 292\r\nCONSTANT_MethodHandle = 15","id":4935},{"comment":"/**\r\n * Constant pool entry types.\r\n */\r\nstatic final byte CONSTANT_Utf8 = 1, CONSTANT_Integer = 3, CONSTANT_Float = 4, CONSTANT_Long = 5, CONSTANT_Double = 6, CONSTANT_Class = 7, CONSTANT_String = 8, CONSTANT_Fieldref = 9, CONSTANT_Methodref = 10, CONSTANT_InterfaceMethodref = 11, CONSTANT_NameAndType = 12, // JSR 292\r\nCONSTANT_MethodHandle = 15, // JSR 292\r\nCONSTANT_MethodType = 16, CONSTANT_InvokeDynamic = 18, // Limit to tags found in classfiles\r\nCONSTANT_LIMIT = 19;","field_name":"CONSTANT_MethodType","field_type":"byte","full_declaration":"static final byte CONSTANT_Utf8 = 1byte CONSTANT_Integer = 3byte CONSTANT_Float = 4byte CONSTANT_Long = 5byte CONSTANT_Double = 6byte CONSTANT_Class = 7byte CONSTANT_String = 8byte CONSTANT_Fieldref = 9byte CONSTANT_Methodref = 10byte CONSTANT_InterfaceMethodref = 11byte CONSTANT_NameAndType = 12byte // JSR 292\r\nCONSTANT_MethodHandle = 15byte // JSR 292\r\nCONSTANT_MethodType = 16","id":4936},{"comment":"/**\r\n * Constant pool entry types.\r\n */\r\nstatic final byte CONSTANT_Utf8 = 1, CONSTANT_Integer = 3, CONSTANT_Float = 4, CONSTANT_Long = 5, CONSTANT_Double = 6, CONSTANT_Class = 7, CONSTANT_String = 8, CONSTANT_Fieldref = 9, CONSTANT_Methodref = 10, CONSTANT_InterfaceMethodref = 11, CONSTANT_NameAndType = 12, // JSR 292\r\nCONSTANT_MethodHandle = 15, // JSR 292\r\nCONSTANT_MethodType = 16, CONSTANT_InvokeDynamic = 18, // Limit to tags found in classfiles\r\nCONSTANT_LIMIT = 19;","field_name":"CONSTANT_InvokeDynamic","field_type":"byte","full_declaration":"static final byte CONSTANT_Utf8 = 1byte CONSTANT_Integer = 3byte CONSTANT_Float = 4byte CONSTANT_Long = 5byte CONSTANT_Double = 6byte CONSTANT_Class = 7byte CONSTANT_String = 8byte CONSTANT_Fieldref = 9byte CONSTANT_Methodref = 10byte CONSTANT_InterfaceMethodref = 11byte CONSTANT_NameAndType = 12byte // JSR 292\r\nCONSTANT_MethodHandle = 15byte // JSR 292\r\nCONSTANT_MethodType = 16byte CONSTANT_InvokeDynamic = 18","id":4937},{"comment":"/**\r\n * Constant pool entry types.\r\n */\r\nstatic final byte CONSTANT_Utf8 = 1, CONSTANT_Integer = 3, CONSTANT_Float = 4, CONSTANT_Long = 5, CONSTANT_Double = 6, CONSTANT_Class = 7, CONSTANT_String = 8, CONSTANT_Fieldref = 9, CONSTANT_Methodref = 10, CONSTANT_InterfaceMethodref = 11, CONSTANT_NameAndType = 12, // JSR 292\r\nCONSTANT_MethodHandle = 15, // JSR 292\r\nCONSTANT_MethodType = 16, CONSTANT_InvokeDynamic = 18, // Limit to tags found in classfiles\r\nCONSTANT_LIMIT = 19;","field_name":"CONSTANT_LIMIT","field_type":"byte","full_declaration":"static final byte CONSTANT_Utf8 = 1byte CONSTANT_Integer = 3byte CONSTANT_Float = 4byte CONSTANT_Long = 5byte CONSTANT_Double = 6byte CONSTANT_Class = 7byte CONSTANT_String = 8byte CONSTANT_Fieldref = 9byte CONSTANT_Methodref = 10byte CONSTANT_InterfaceMethodref = 11byte CONSTANT_NameAndType = 12byte // JSR 292\r\nCONSTANT_MethodHandle = 15byte // JSR 292\r\nCONSTANT_MethodType = 16byte CONSTANT_InvokeDynamic = 18byte // Limit to tags found in classfiles\r\nCONSTANT_LIMIT = 19","id":4938},{"comment":"/**\r\n * Access modifier flags.\r\n */\r\nstatic final char ACC_PUBLIC = 0x0001, ACC_PRIVATE = 0x0002, ACC_PROTECTED = 0x0004, ACC_STATIC = 0x0008, ACC_FINAL = 0x0010, ACC_SYNCHRONIZED = 0x0020, ACC_VOLATILE = 0x0040, ACC_TRANSIENT = 0x0080, ACC_NATIVE = 0x0100, ACC_INTERFACE = 0x0200, ACC_ABSTRACT = 0x0400, ACC_STRICT = 0x0800, ACC_SYNTHETIC = 0x1000, ACC_ANNOTATION = 0x2000, ACC_ENUM = 0x4000, // aliases:\r\nACC_SUPER = ACC_SYNCHRONIZED, ACC_BRIDGE = ACC_VOLATILE, ACC_VARARGS = ACC_TRANSIENT;","field_name":"ACC_PUBLIC","field_type":"char","full_declaration":"static final char ACC_PUBLIC = 0x0001","id":4939},{"comment":"/**\r\n * Access modifier flags.\r\n */\r\nstatic final char ACC_PUBLIC = 0x0001, ACC_PRIVATE = 0x0002, ACC_PROTECTED = 0x0004, ACC_STATIC = 0x0008, ACC_FINAL = 0x0010, ACC_SYNCHRONIZED = 0x0020, ACC_VOLATILE = 0x0040, ACC_TRANSIENT = 0x0080, ACC_NATIVE = 0x0100, ACC_INTERFACE = 0x0200, ACC_ABSTRACT = 0x0400, ACC_STRICT = 0x0800, ACC_SYNTHETIC = 0x1000, ACC_ANNOTATION = 0x2000, ACC_ENUM = 0x4000, // aliases:\r\nACC_SUPER = ACC_SYNCHRONIZED, ACC_BRIDGE = ACC_VOLATILE, ACC_VARARGS = ACC_TRANSIENT;","field_name":"ACC_PRIVATE","field_type":"char","full_declaration":"static final char ACC_PUBLIC = 0x0001char ACC_PRIVATE = 0x0002","id":4940},{"comment":"/**\r\n * Access modifier flags.\r\n */\r\nstatic final char ACC_PUBLIC = 0x0001, ACC_PRIVATE = 0x0002, ACC_PROTECTED = 0x0004, ACC_STATIC = 0x0008, ACC_FINAL = 0x0010, ACC_SYNCHRONIZED = 0x0020, ACC_VOLATILE = 0x0040, ACC_TRANSIENT = 0x0080, ACC_NATIVE = 0x0100, ACC_INTERFACE = 0x0200, ACC_ABSTRACT = 0x0400, ACC_STRICT = 0x0800, ACC_SYNTHETIC = 0x1000, ACC_ANNOTATION = 0x2000, ACC_ENUM = 0x4000, // aliases:\r\nACC_SUPER = ACC_SYNCHRONIZED, ACC_BRIDGE = ACC_VOLATILE, ACC_VARARGS = ACC_TRANSIENT;","field_name":"ACC_PROTECTED","field_type":"char","full_declaration":"static final char ACC_PUBLIC = 0x0001char ACC_PRIVATE = 0x0002char ACC_PROTECTED = 0x0004","id":4941},{"comment":"/**\r\n * Access modifier flags.\r\n */\r\nstatic final char ACC_PUBLIC = 0x0001, ACC_PRIVATE = 0x0002, ACC_PROTECTED = 0x0004, ACC_STATIC = 0x0008, ACC_FINAL = 0x0010, ACC_SYNCHRONIZED = 0x0020, ACC_VOLATILE = 0x0040, ACC_TRANSIENT = 0x0080, ACC_NATIVE = 0x0100, ACC_INTERFACE = 0x0200, ACC_ABSTRACT = 0x0400, ACC_STRICT = 0x0800, ACC_SYNTHETIC = 0x1000, ACC_ANNOTATION = 0x2000, ACC_ENUM = 0x4000, // aliases:\r\nACC_SUPER = ACC_SYNCHRONIZED, ACC_BRIDGE = ACC_VOLATILE, ACC_VARARGS = ACC_TRANSIENT;","field_name":"ACC_STATIC","field_type":"char","full_declaration":"static final char ACC_PUBLIC = 0x0001char ACC_PRIVATE = 0x0002char ACC_PROTECTED = 0x0004char ACC_STATIC = 0x0008","id":4942},{"comment":"/**\r\n * Access modifier flags.\r\n */\r\nstatic final char ACC_PUBLIC = 0x0001, ACC_PRIVATE = 0x0002, ACC_PROTECTED = 0x0004, ACC_STATIC = 0x0008, ACC_FINAL = 0x0010, ACC_SYNCHRONIZED = 0x0020, ACC_VOLATILE = 0x0040, ACC_TRANSIENT = 0x0080, ACC_NATIVE = 0x0100, ACC_INTERFACE = 0x0200, ACC_ABSTRACT = 0x0400, ACC_STRICT = 0x0800, ACC_SYNTHETIC = 0x1000, ACC_ANNOTATION = 0x2000, ACC_ENUM = 0x4000, // aliases:\r\nACC_SUPER = ACC_SYNCHRONIZED, ACC_BRIDGE = ACC_VOLATILE, ACC_VARARGS = ACC_TRANSIENT;","field_name":"ACC_FINAL","field_type":"char","full_declaration":"static final char ACC_PUBLIC = 0x0001char ACC_PRIVATE = 0x0002char ACC_PROTECTED = 0x0004char ACC_STATIC = 0x0008char ACC_FINAL = 0x0010","id":4943},{"comment":"/**\r\n * Access modifier flags.\r\n */\r\nstatic final char ACC_PUBLIC = 0x0001, ACC_PRIVATE = 0x0002, ACC_PROTECTED = 0x0004, ACC_STATIC = 0x0008, ACC_FINAL = 0x0010, ACC_SYNCHRONIZED = 0x0020, ACC_VOLATILE = 0x0040, ACC_TRANSIENT = 0x0080, ACC_NATIVE = 0x0100, ACC_INTERFACE = 0x0200, ACC_ABSTRACT = 0x0400, ACC_STRICT = 0x0800, ACC_SYNTHETIC = 0x1000, ACC_ANNOTATION = 0x2000, ACC_ENUM = 0x4000, // aliases:\r\nACC_SUPER = ACC_SYNCHRONIZED, ACC_BRIDGE = ACC_VOLATILE, ACC_VARARGS = ACC_TRANSIENT;","field_name":"ACC_SYNCHRONIZED","field_type":"char","full_declaration":"static final char ACC_PUBLIC = 0x0001char ACC_PRIVATE = 0x0002char ACC_PROTECTED = 0x0004char ACC_STATIC = 0x0008char ACC_FINAL = 0x0010char ACC_SYNCHRONIZED = 0x0020","id":4944},{"comment":"/**\r\n * Access modifier flags.\r\n */\r\nstatic final char ACC_PUBLIC = 0x0001, ACC_PRIVATE = 0x0002, ACC_PROTECTED = 0x0004, ACC_STATIC = 0x0008, ACC_FINAL = 0x0010, ACC_SYNCHRONIZED = 0x0020, ACC_VOLATILE = 0x0040, ACC_TRANSIENT = 0x0080, ACC_NATIVE = 0x0100, ACC_INTERFACE = 0x0200, ACC_ABSTRACT = 0x0400, ACC_STRICT = 0x0800, ACC_SYNTHETIC = 0x1000, ACC_ANNOTATION = 0x2000, ACC_ENUM = 0x4000, // aliases:\r\nACC_SUPER = ACC_SYNCHRONIZED, ACC_BRIDGE = ACC_VOLATILE, ACC_VARARGS = ACC_TRANSIENT;","field_name":"ACC_VOLATILE","field_type":"char","full_declaration":"static final char ACC_PUBLIC = 0x0001char ACC_PRIVATE = 0x0002char ACC_PROTECTED = 0x0004char ACC_STATIC = 0x0008char ACC_FINAL = 0x0010char ACC_SYNCHRONIZED = 0x0020char ACC_VOLATILE = 0x0040","id":4945},{"comment":"/**\r\n * Access modifier flags.\r\n */\r\nstatic final char ACC_PUBLIC = 0x0001, ACC_PRIVATE = 0x0002, ACC_PROTECTED = 0x0004, ACC_STATIC = 0x0008, ACC_FINAL = 0x0010, ACC_SYNCHRONIZED = 0x0020, ACC_VOLATILE = 0x0040, ACC_TRANSIENT = 0x0080, ACC_NATIVE = 0x0100, ACC_INTERFACE = 0x0200, ACC_ABSTRACT = 0x0400, ACC_STRICT = 0x0800, ACC_SYNTHETIC = 0x1000, ACC_ANNOTATION = 0x2000, ACC_ENUM = 0x4000, // aliases:\r\nACC_SUPER = ACC_SYNCHRONIZED, ACC_BRIDGE = ACC_VOLATILE, ACC_VARARGS = ACC_TRANSIENT;","field_name":"ACC_TRANSIENT","field_type":"char","full_declaration":"static final char ACC_PUBLIC = 0x0001char ACC_PRIVATE = 0x0002char ACC_PROTECTED = 0x0004char ACC_STATIC = 0x0008char ACC_FINAL = 0x0010char ACC_SYNCHRONIZED = 0x0020char ACC_VOLATILE = 0x0040char ACC_TRANSIENT = 0x0080","id":4946},{"comment":"/**\r\n * Access modifier flags.\r\n */\r\nstatic final char ACC_PUBLIC = 0x0001, ACC_PRIVATE = 0x0002, ACC_PROTECTED = 0x0004, ACC_STATIC = 0x0008, ACC_FINAL = 0x0010, ACC_SYNCHRONIZED = 0x0020, ACC_VOLATILE = 0x0040, ACC_TRANSIENT = 0x0080, ACC_NATIVE = 0x0100, ACC_INTERFACE = 0x0200, ACC_ABSTRACT = 0x0400, ACC_STRICT = 0x0800, ACC_SYNTHETIC = 0x1000, ACC_ANNOTATION = 0x2000, ACC_ENUM = 0x4000, // aliases:\r\nACC_SUPER = ACC_SYNCHRONIZED, ACC_BRIDGE = ACC_VOLATILE, ACC_VARARGS = ACC_TRANSIENT;","field_name":"ACC_NATIVE","field_type":"char","full_declaration":"static final char ACC_PUBLIC = 0x0001char ACC_PRIVATE = 0x0002char ACC_PROTECTED = 0x0004char ACC_STATIC = 0x0008char ACC_FINAL = 0x0010char ACC_SYNCHRONIZED = 0x0020char ACC_VOLATILE = 0x0040char ACC_TRANSIENT = 0x0080char ACC_NATIVE = 0x0100","id":4947},{"comment":"/**\r\n * Access modifier flags.\r\n */\r\nstatic final char ACC_PUBLIC = 0x0001, ACC_PRIVATE = 0x0002, ACC_PROTECTED = 0x0004, ACC_STATIC = 0x0008, ACC_FINAL = 0x0010, ACC_SYNCHRONIZED = 0x0020, ACC_VOLATILE = 0x0040, ACC_TRANSIENT = 0x0080, ACC_NATIVE = 0x0100, ACC_INTERFACE = 0x0200, ACC_ABSTRACT = 0x0400, ACC_STRICT = 0x0800, ACC_SYNTHETIC = 0x1000, ACC_ANNOTATION = 0x2000, ACC_ENUM = 0x4000, // aliases:\r\nACC_SUPER = ACC_SYNCHRONIZED, ACC_BRIDGE = ACC_VOLATILE, ACC_VARARGS = ACC_TRANSIENT;","field_name":"ACC_INTERFACE","field_type":"char","full_declaration":"static final char ACC_PUBLIC = 0x0001char ACC_PRIVATE = 0x0002char ACC_PROTECTED = 0x0004char ACC_STATIC = 0x0008char ACC_FINAL = 0x0010char ACC_SYNCHRONIZED = 0x0020char ACC_VOLATILE = 0x0040char ACC_TRANSIENT = 0x0080char ACC_NATIVE = 0x0100char ACC_INTERFACE = 0x0200","id":4948},{"comment":"/**\r\n * Access modifier flags.\r\n */\r\nstatic final char ACC_PUBLIC = 0x0001, ACC_PRIVATE = 0x0002, ACC_PROTECTED = 0x0004, ACC_STATIC = 0x0008, ACC_FINAL = 0x0010, ACC_SYNCHRONIZED = 0x0020, ACC_VOLATILE = 0x0040, ACC_TRANSIENT = 0x0080, ACC_NATIVE = 0x0100, ACC_INTERFACE = 0x0200, ACC_ABSTRACT = 0x0400, ACC_STRICT = 0x0800, ACC_SYNTHETIC = 0x1000, ACC_ANNOTATION = 0x2000, ACC_ENUM = 0x4000, // aliases:\r\nACC_SUPER = ACC_SYNCHRONIZED, ACC_BRIDGE = ACC_VOLATILE, ACC_VARARGS = ACC_TRANSIENT;","field_name":"ACC_ABSTRACT","field_type":"char","full_declaration":"static final char ACC_PUBLIC = 0x0001char ACC_PRIVATE = 0x0002char ACC_PROTECTED = 0x0004char ACC_STATIC = 0x0008char ACC_FINAL = 0x0010char ACC_SYNCHRONIZED = 0x0020char ACC_VOLATILE = 0x0040char ACC_TRANSIENT = 0x0080char ACC_NATIVE = 0x0100char ACC_INTERFACE = 0x0200char ACC_ABSTRACT = 0x0400","id":4949},{"comment":"/**\r\n * Access modifier flags.\r\n */\r\nstatic final char ACC_PUBLIC = 0x0001, ACC_PRIVATE = 0x0002, ACC_PROTECTED = 0x0004, ACC_STATIC = 0x0008, ACC_FINAL = 0x0010, ACC_SYNCHRONIZED = 0x0020, ACC_VOLATILE = 0x0040, ACC_TRANSIENT = 0x0080, ACC_NATIVE = 0x0100, ACC_INTERFACE = 0x0200, ACC_ABSTRACT = 0x0400, ACC_STRICT = 0x0800, ACC_SYNTHETIC = 0x1000, ACC_ANNOTATION = 0x2000, ACC_ENUM = 0x4000, // aliases:\r\nACC_SUPER = ACC_SYNCHRONIZED, ACC_BRIDGE = ACC_VOLATILE, ACC_VARARGS = ACC_TRANSIENT;","field_name":"ACC_STRICT","field_type":"char","full_declaration":"static final char ACC_PUBLIC = 0x0001char ACC_PRIVATE = 0x0002char ACC_PROTECTED = 0x0004char ACC_STATIC = 0x0008char ACC_FINAL = 0x0010char ACC_SYNCHRONIZED = 0x0020char ACC_VOLATILE = 0x0040char ACC_TRANSIENT = 0x0080char ACC_NATIVE = 0x0100char ACC_INTERFACE = 0x0200char ACC_ABSTRACT = 0x0400char ACC_STRICT = 0x0800","id":4950},{"comment":"/**\r\n * Access modifier flags.\r\n */\r\nstatic final char ACC_PUBLIC = 0x0001, ACC_PRIVATE = 0x0002, ACC_PROTECTED = 0x0004, ACC_STATIC = 0x0008, ACC_FINAL = 0x0010, ACC_SYNCHRONIZED = 0x0020, ACC_VOLATILE = 0x0040, ACC_TRANSIENT = 0x0080, ACC_NATIVE = 0x0100, ACC_INTERFACE = 0x0200, ACC_ABSTRACT = 0x0400, ACC_STRICT = 0x0800, ACC_SYNTHETIC = 0x1000, ACC_ANNOTATION = 0x2000, ACC_ENUM = 0x4000, // aliases:\r\nACC_SUPER = ACC_SYNCHRONIZED, ACC_BRIDGE = ACC_VOLATILE, ACC_VARARGS = ACC_TRANSIENT;","field_name":"ACC_SYNTHETIC","field_type":"char","full_declaration":"static final char ACC_PUBLIC = 0x0001char ACC_PRIVATE = 0x0002char ACC_PROTECTED = 0x0004char ACC_STATIC = 0x0008char ACC_FINAL = 0x0010char ACC_SYNCHRONIZED = 0x0020char ACC_VOLATILE = 0x0040char ACC_TRANSIENT = 0x0080char ACC_NATIVE = 0x0100char ACC_INTERFACE = 0x0200char ACC_ABSTRACT = 0x0400char ACC_STRICT = 0x0800char ACC_SYNTHETIC = 0x1000","id":4951},{"comment":"/**\r\n * Access modifier flags.\r\n */\r\nstatic final char ACC_PUBLIC = 0x0001, ACC_PRIVATE = 0x0002, ACC_PROTECTED = 0x0004, ACC_STATIC = 0x0008, ACC_FINAL = 0x0010, ACC_SYNCHRONIZED = 0x0020, ACC_VOLATILE = 0x0040, ACC_TRANSIENT = 0x0080, ACC_NATIVE = 0x0100, ACC_INTERFACE = 0x0200, ACC_ABSTRACT = 0x0400, ACC_STRICT = 0x0800, ACC_SYNTHETIC = 0x1000, ACC_ANNOTATION = 0x2000, ACC_ENUM = 0x4000, // aliases:\r\nACC_SUPER = ACC_SYNCHRONIZED, ACC_BRIDGE = ACC_VOLATILE, ACC_VARARGS = ACC_TRANSIENT;","field_name":"ACC_ANNOTATION","field_type":"char","full_declaration":"static final char ACC_PUBLIC = 0x0001char ACC_PRIVATE = 0x0002char ACC_PROTECTED = 0x0004char ACC_STATIC = 0x0008char ACC_FINAL = 0x0010char ACC_SYNCHRONIZED = 0x0020char ACC_VOLATILE = 0x0040char ACC_TRANSIENT = 0x0080char ACC_NATIVE = 0x0100char ACC_INTERFACE = 0x0200char ACC_ABSTRACT = 0x0400char ACC_STRICT = 0x0800char ACC_SYNTHETIC = 0x1000char ACC_ANNOTATION = 0x2000","id":4952},{"comment":"/**\r\n * Access modifier flags.\r\n */\r\nstatic final char ACC_PUBLIC = 0x0001, ACC_PRIVATE = 0x0002, ACC_PROTECTED = 0x0004, ACC_STATIC = 0x0008, ACC_FINAL = 0x0010, ACC_SYNCHRONIZED = 0x0020, ACC_VOLATILE = 0x0040, ACC_TRANSIENT = 0x0080, ACC_NATIVE = 0x0100, ACC_INTERFACE = 0x0200, ACC_ABSTRACT = 0x0400, ACC_STRICT = 0x0800, ACC_SYNTHETIC = 0x1000, ACC_ANNOTATION = 0x2000, ACC_ENUM = 0x4000, // aliases:\r\nACC_SUPER = ACC_SYNCHRONIZED, ACC_BRIDGE = ACC_VOLATILE, ACC_VARARGS = ACC_TRANSIENT;","field_name":"ACC_ENUM","field_type":"char","full_declaration":"static final char ACC_PUBLIC = 0x0001char ACC_PRIVATE = 0x0002char ACC_PROTECTED = 0x0004char ACC_STATIC = 0x0008char ACC_FINAL = 0x0010char ACC_SYNCHRONIZED = 0x0020char ACC_VOLATILE = 0x0040char ACC_TRANSIENT = 0x0080char ACC_NATIVE = 0x0100char ACC_INTERFACE = 0x0200char ACC_ABSTRACT = 0x0400char ACC_STRICT = 0x0800char ACC_SYNTHETIC = 0x1000char ACC_ANNOTATION = 0x2000char ACC_ENUM = 0x4000","id":4953},{"comment":"/**\r\n * Access modifier flags.\r\n */\r\nstatic final char ACC_PUBLIC = 0x0001, ACC_PRIVATE = 0x0002, ACC_PROTECTED = 0x0004, ACC_STATIC = 0x0008, ACC_FINAL = 0x0010, ACC_SYNCHRONIZED = 0x0020, ACC_VOLATILE = 0x0040, ACC_TRANSIENT = 0x0080, ACC_NATIVE = 0x0100, ACC_INTERFACE = 0x0200, ACC_ABSTRACT = 0x0400, ACC_STRICT = 0x0800, ACC_SYNTHETIC = 0x1000, ACC_ANNOTATION = 0x2000, ACC_ENUM = 0x4000, // aliases:\r\nACC_SUPER = ACC_SYNCHRONIZED, ACC_BRIDGE = ACC_VOLATILE, ACC_VARARGS = ACC_TRANSIENT;","field_name":"ACC_SUPER","field_type":"char","full_declaration":"static final char ACC_PUBLIC = 0x0001char ACC_PRIVATE = 0x0002char ACC_PROTECTED = 0x0004char ACC_STATIC = 0x0008char ACC_FINAL = 0x0010char ACC_SYNCHRONIZED = 0x0020char ACC_VOLATILE = 0x0040char ACC_TRANSIENT = 0x0080char ACC_NATIVE = 0x0100char ACC_INTERFACE = 0x0200char ACC_ABSTRACT = 0x0400char ACC_STRICT = 0x0800char ACC_SYNTHETIC = 0x1000char ACC_ANNOTATION = 0x2000char ACC_ENUM = 0x4000char // aliases:\r\nACC_SUPER = ACC_SYNCHRONIZED","id":4954},{"comment":"/**\r\n * Access modifier flags.\r\n */\r\nstatic final char ACC_PUBLIC = 0x0001, ACC_PRIVATE = 0x0002, ACC_PROTECTED = 0x0004, ACC_STATIC = 0x0008, ACC_FINAL = 0x0010, ACC_SYNCHRONIZED = 0x0020, ACC_VOLATILE = 0x0040, ACC_TRANSIENT = 0x0080, ACC_NATIVE = 0x0100, ACC_INTERFACE = 0x0200, ACC_ABSTRACT = 0x0400, ACC_STRICT = 0x0800, ACC_SYNTHETIC = 0x1000, ACC_ANNOTATION = 0x2000, ACC_ENUM = 0x4000, // aliases:\r\nACC_SUPER = ACC_SYNCHRONIZED, ACC_BRIDGE = ACC_VOLATILE, ACC_VARARGS = ACC_TRANSIENT;","field_name":"ACC_BRIDGE","field_type":"char","full_declaration":"static final char ACC_PUBLIC = 0x0001char ACC_PRIVATE = 0x0002char ACC_PROTECTED = 0x0004char ACC_STATIC = 0x0008char ACC_FINAL = 0x0010char ACC_SYNCHRONIZED = 0x0020char ACC_VOLATILE = 0x0040char ACC_TRANSIENT = 0x0080char ACC_NATIVE = 0x0100char ACC_INTERFACE = 0x0200char ACC_ABSTRACT = 0x0400char ACC_STRICT = 0x0800char ACC_SYNTHETIC = 0x1000char ACC_ANNOTATION = 0x2000char ACC_ENUM = 0x4000char // aliases:\r\nACC_SUPER = ACC_SYNCHRONIZEDchar ACC_BRIDGE = ACC_VOLATILE","id":4955},{"comment":"/**\r\n * Access modifier flags.\r\n */\r\nstatic final char ACC_PUBLIC = 0x0001, ACC_PRIVATE = 0x0002, ACC_PROTECTED = 0x0004, ACC_STATIC = 0x0008, ACC_FINAL = 0x0010, ACC_SYNCHRONIZED = 0x0020, ACC_VOLATILE = 0x0040, ACC_TRANSIENT = 0x0080, ACC_NATIVE = 0x0100, ACC_INTERFACE = 0x0200, ACC_ABSTRACT = 0x0400, ACC_STRICT = 0x0800, ACC_SYNTHETIC = 0x1000, ACC_ANNOTATION = 0x2000, ACC_ENUM = 0x4000, // aliases:\r\nACC_SUPER = ACC_SYNCHRONIZED, ACC_BRIDGE = ACC_VOLATILE, ACC_VARARGS = ACC_TRANSIENT;","field_name":"ACC_VARARGS","field_type":"char","full_declaration":"static final char ACC_PUBLIC = 0x0001char ACC_PRIVATE = 0x0002char ACC_PROTECTED = 0x0004char ACC_STATIC = 0x0008char ACC_FINAL = 0x0010char ACC_SYNCHRONIZED = 0x0020char ACC_VOLATILE = 0x0040char ACC_TRANSIENT = 0x0080char ACC_NATIVE = 0x0100char ACC_INTERFACE = 0x0200char ACC_ABSTRACT = 0x0400char ACC_STRICT = 0x0800char ACC_SYNTHETIC = 0x1000char ACC_ANNOTATION = 0x2000char ACC_ENUM = 0x4000char // aliases:\r\nACC_SUPER = ACC_SYNCHRONIZEDchar ACC_BRIDGE = ACC_VOLATILEchar ACC_VARARGS = ACC_TRANSIENT","id":4956},{"comment":"/**\r\n * Constant pool reference-kind codes, as used by CONSTANT_MethodHandle CP entries.\r\n */\r\nstatic final byte // null value\r\nREF_NONE = 0, REF_getField = 1, REF_getStatic = 2, REF_putField = 3, REF_putStatic = 4, REF_invokeVirtual = 5, REF_invokeStatic = 6, REF_invokeSpecial = 7, REF_newInvokeSpecial = 8, REF_invokeInterface = 9, REF_LIMIT = 10;","field_name":"REF_NONE","field_type":"byte","full_declaration":"static final byte // null value\r\nREF_NONE = 0","id":4957},{"comment":"/**\r\n * Constant pool reference-kind codes, as used by CONSTANT_MethodHandle CP entries.\r\n */\r\nstatic final byte // null value\r\nREF_NONE = 0, REF_getField = 1, REF_getStatic = 2, REF_putField = 3, REF_putStatic = 4, REF_invokeVirtual = 5, REF_invokeStatic = 6, REF_invokeSpecial = 7, REF_newInvokeSpecial = 8, REF_invokeInterface = 9, REF_LIMIT = 10;","field_name":"REF_getField","field_type":"byte","full_declaration":"static final byte // null value\r\nREF_NONE = 0byte REF_getField = 1","id":4958},{"comment":"/**\r\n * Constant pool reference-kind codes, as used by CONSTANT_MethodHandle CP entries.\r\n */\r\nstatic final byte // null value\r\nREF_NONE = 0, REF_getField = 1, REF_getStatic = 2, REF_putField = 3, REF_putStatic = 4, REF_invokeVirtual = 5, REF_invokeStatic = 6, REF_invokeSpecial = 7, REF_newInvokeSpecial = 8, REF_invokeInterface = 9, REF_LIMIT = 10;","field_name":"REF_getStatic","field_type":"byte","full_declaration":"static final byte // null value\r\nREF_NONE = 0byte REF_getField = 1byte REF_getStatic = 2","id":4959},{"comment":"/**\r\n * Constant pool reference-kind codes, as used by CONSTANT_MethodHandle CP entries.\r\n */\r\nstatic final byte // null value\r\nREF_NONE = 0, REF_getField = 1, REF_getStatic = 2, REF_putField = 3, REF_putStatic = 4, REF_invokeVirtual = 5, REF_invokeStatic = 6, REF_invokeSpecial = 7, REF_newInvokeSpecial = 8, REF_invokeInterface = 9, REF_LIMIT = 10;","field_name":"REF_putField","field_type":"byte","full_declaration":"static final byte // null value\r\nREF_NONE = 0byte REF_getField = 1byte REF_getStatic = 2byte REF_putField = 3","id":4960},{"comment":"/**\r\n * Constant pool reference-kind codes, as used by CONSTANT_MethodHandle CP entries.\r\n */\r\nstatic final byte // null value\r\nREF_NONE = 0, REF_getField = 1, REF_getStatic = 2, REF_putField = 3, REF_putStatic = 4, REF_invokeVirtual = 5, REF_invokeStatic = 6, REF_invokeSpecial = 7, REF_newInvokeSpecial = 8, REF_invokeInterface = 9, REF_LIMIT = 10;","field_name":"REF_putStatic","field_type":"byte","full_declaration":"static final byte // null value\r\nREF_NONE = 0byte REF_getField = 1byte REF_getStatic = 2byte REF_putField = 3byte REF_putStatic = 4","id":4961},{"comment":"/**\r\n * Constant pool reference-kind codes, as used by CONSTANT_MethodHandle CP entries.\r\n */\r\nstatic final byte // null value\r\nREF_NONE = 0, REF_getField = 1, REF_getStatic = 2, REF_putField = 3, REF_putStatic = 4, REF_invokeVirtual = 5, REF_invokeStatic = 6, REF_invokeSpecial = 7, REF_newInvokeSpecial = 8, REF_invokeInterface = 9, REF_LIMIT = 10;","field_name":"REF_invokeVirtual","field_type":"byte","full_declaration":"static final byte // null value\r\nREF_NONE = 0byte REF_getField = 1byte REF_getStatic = 2byte REF_putField = 3byte REF_putStatic = 4byte REF_invokeVirtual = 5","id":4962},{"comment":"/**\r\n * Constant pool reference-kind codes, as used by CONSTANT_MethodHandle CP entries.\r\n */\r\nstatic final byte // null value\r\nREF_NONE = 0, REF_getField = 1, REF_getStatic = 2, REF_putField = 3, REF_putStatic = 4, REF_invokeVirtual = 5, REF_invokeStatic = 6, REF_invokeSpecial = 7, REF_newInvokeSpecial = 8, REF_invokeInterface = 9, REF_LIMIT = 10;","field_name":"REF_invokeStatic","field_type":"byte","full_declaration":"static final byte // null value\r\nREF_NONE = 0byte REF_getField = 1byte REF_getStatic = 2byte REF_putField = 3byte REF_putStatic = 4byte REF_invokeVirtual = 5byte REF_invokeStatic = 6","id":4963},{"comment":"/**\r\n * Constant pool reference-kind codes, as used by CONSTANT_MethodHandle CP entries.\r\n */\r\nstatic final byte // null value\r\nREF_NONE = 0, REF_getField = 1, REF_getStatic = 2, REF_putField = 3, REF_putStatic = 4, REF_invokeVirtual = 5, REF_invokeStatic = 6, REF_invokeSpecial = 7, REF_newInvokeSpecial = 8, REF_invokeInterface = 9, REF_LIMIT = 10;","field_name":"REF_invokeSpecial","field_type":"byte","full_declaration":"static final byte // null value\r\nREF_NONE = 0byte REF_getField = 1byte REF_getStatic = 2byte REF_putField = 3byte REF_putStatic = 4byte REF_invokeVirtual = 5byte REF_invokeStatic = 6byte REF_invokeSpecial = 7","id":4964},{"comment":"/**\r\n * Constant pool reference-kind codes, as used by CONSTANT_MethodHandle CP entries.\r\n */\r\nstatic final byte // null value\r\nREF_NONE = 0, REF_getField = 1, REF_getStatic = 2, REF_putField = 3, REF_putStatic = 4, REF_invokeVirtual = 5, REF_invokeStatic = 6, REF_invokeSpecial = 7, REF_newInvokeSpecial = 8, REF_invokeInterface = 9, REF_LIMIT = 10;","field_name":"REF_newInvokeSpecial","field_type":"byte","full_declaration":"static final byte // null value\r\nREF_NONE = 0byte REF_getField = 1byte REF_getStatic = 2byte REF_putField = 3byte REF_putStatic = 4byte REF_invokeVirtual = 5byte REF_invokeStatic = 6byte REF_invokeSpecial = 7byte REF_newInvokeSpecial = 8","id":4965},{"comment":"/**\r\n * Constant pool reference-kind codes, as used by CONSTANT_MethodHandle CP entries.\r\n */\r\nstatic final byte // null value\r\nREF_NONE = 0, REF_getField = 1, REF_getStatic = 2, REF_putField = 3, REF_putStatic = 4, REF_invokeVirtual = 5, REF_invokeStatic = 6, REF_invokeSpecial = 7, REF_newInvokeSpecial = 8, REF_invokeInterface = 9, REF_LIMIT = 10;","field_name":"REF_invokeInterface","field_type":"byte","full_declaration":"static final byte // null value\r\nREF_NONE = 0byte REF_getField = 1byte REF_getStatic = 2byte REF_putField = 3byte REF_putStatic = 4byte REF_invokeVirtual = 5byte REF_invokeStatic = 6byte REF_invokeSpecial = 7byte REF_newInvokeSpecial = 8byte REF_invokeInterface = 9","id":4966},{"comment":"/**\r\n * Constant pool reference-kind codes, as used by CONSTANT_MethodHandle CP entries.\r\n */\r\nstatic final byte // null value\r\nREF_NONE = 0, REF_getField = 1, REF_getStatic = 2, REF_putField = 3, REF_putStatic = 4, REF_invokeVirtual = 5, REF_invokeStatic = 6, REF_invokeSpecial = 7, REF_newInvokeSpecial = 8, REF_invokeInterface = 9, REF_LIMIT = 10;","field_name":"REF_LIMIT","field_type":"byte","full_declaration":"static final byte // null value\r\nREF_NONE = 0byte REF_getField = 1byte REF_getStatic = 2byte REF_putField = 3byte REF_putStatic = 4byte REF_invokeVirtual = 5byte REF_invokeStatic = 6byte REF_invokeSpecial = 7byte REF_newInvokeSpecial = 8byte REF_invokeInterface = 9byte REF_LIMIT = 10","id":4967},{"comment":"private static final MemberName.Factory IMPL_NAMES = MemberName.getFactory();","field_name":"IMPL_NAMES","field_type":"java.lang.invoke.MemberName.Factory","full_declaration":"private static final java.lang.invoke.MemberName.Factory IMPL_NAMES = MemberName.getFactory()","id":4968},{"comment":"// Copied from AccessibleObject, as used by Method.setAccessible, etc.:\r\n","field_name":"ACCESS_PERMISSION","field_type":"java.security.Permission","full_declaration":"static final private java.security.Permission ACCESS_PERMISSION = new ReflectPermission(\"suppressAccessChecks\")","id":4969},{"comment":"","field_name":"IDENTITY_MHS","field_type":"MethodHandle[]","full_declaration":"private static final MethodHandle[] IDENTITY_MHS = new MethodHandle[Wrapper.values().length]","id":4970},{"comment":"","field_name":"ZERO_MHS","field_type":"MethodHandle[]","full_declaration":"private static final MethodHandle[] ZERO_MHS = new MethodHandle[Wrapper.values().length]","id":4971},{"comment":"/**\r\n * The class on behalf of whom the lookup is being performed.\r\n */\r\nprivate final Class<?> lookupClass;","field_name":"lookupClass","field_type":"java.lang.Class","full_declaration":"private final java.lang.Class lookupClass","id":4972},{"comment":"/**\r\n * The allowed sorts of members which may be looked up (PUBLIC, etc.).\r\n */\r\n","field_name":"allowedModes","field_type":"int","full_declaration":"private final int allowedModes","id":4973},{"comment":"/**\r\n * A single-bit mask representing {@code public} access,\r\n *  which may contribute to the result of {@link #lookupModes lookupModes}.\r\n *  The value, {@code 0x01}, happens to be the same as the value of the\r\n *  {@code public} {@linkplain java.lang.reflect.Modifier#PUBLIC modifier bit}.\r\n */\r\n","field_name":"PUBLIC","field_type":"int","full_declaration":"public static final int PUBLIC = Modifier.PUBLIC","id":4974},{"comment":"/**\r\n * A single-bit mask representing {@code private} access,\r\n *  which may contribute to the result of {@link #lookupModes lookupModes}.\r\n *  The value, {@code 0x02}, happens to be the same as the value of the\r\n *  {@code private} {@linkplain java.lang.reflect.Modifier#PRIVATE modifier bit}.\r\n */\r\n","field_name":"PRIVATE","field_type":"int","full_declaration":"public static final int PRIVATE = Modifier.PRIVATE","id":4975},{"comment":"/**\r\n * A single-bit mask representing {@code protected} access,\r\n *  which may contribute to the result of {@link #lookupModes lookupModes}.\r\n *  The value, {@code 0x04}, happens to be the same as the value of the\r\n *  {@code protected} {@linkplain java.lang.reflect.Modifier#PROTECTED modifier bit}.\r\n */\r\n","field_name":"PROTECTED","field_type":"int","full_declaration":"public static final int PROTECTED = Modifier.PROTECTED","id":4976},{"comment":"/**\r\n * A single-bit mask representing {@code package} access (default access),\r\n *  which may contribute to the result of {@link #lookupModes lookupModes}.\r\n *  The value is {@code 0x08}, which does not correspond meaningfully to\r\n *  any particular {@linkplain java.lang.reflect.Modifier modifier bit}.\r\n */\r\n","field_name":"PACKAGE","field_type":"int","full_declaration":"public static final int PACKAGE = Modifier.STATIC","id":4977},{"comment":"","field_name":"ALL_MODES","field_type":"int","full_declaration":"private static final int ALL_MODES = (PUBLIC | PRIVATE | PROTECTED | PACKAGE)","id":4978},{"comment":"","field_name":"TRUSTED","field_type":"int","full_declaration":"private static final int TRUSTED = -1","id":4979},{"comment":"/**\r\n * Version of lookup which is trusted minimally.\r\n *  It can only be used to create method handles to\r\n *  publicly accessible members.\r\n */\r\nstatic final Lookup PUBLIC_LOOKUP = new Lookup(Object.class, PUBLIC);","field_name":"PUBLIC_LOOKUP","field_type":"java.lang.invoke.MethodHandles.Lookup","full_declaration":"static final java.lang.invoke.MethodHandles.Lookup PUBLIC_LOOKUP = new Lookup(Object.class, PUBLIC)","id":4980},{"comment":"/**\r\n * Package-private version of lookup which is trusted.\r\n */\r\nstatic final Lookup IMPL_LOOKUP = new Lookup(Object.class, TRUSTED);","field_name":"IMPL_LOOKUP","field_type":"java.lang.invoke.MethodHandles.Lookup","full_declaration":"static final java.lang.invoke.MethodHandles.Lookup IMPL_LOOKUP = new Lookup(Object.class, TRUSTED)","id":4981},{"comment":"","field_name":"ALLOW_NESTMATE_ACCESS","field_type":"boolean","full_declaration":"private static final boolean ALLOW_NESTMATE_ACCESS = false","id":4982},{"comment":"static ConcurrentHashMap<MemberName, DirectMethodHandle> LOOKASIDE_TABLE = new ConcurrentHashMap<>();","field_name":"LOOKASIDE_TABLE","field_type":"java.util.concurrent.ConcurrentHashMap","full_declaration":"static java.util.concurrent.ConcurrentHashMap LOOKASIDE_TABLE = new ConcurrentHashMap<>()","id":4983},{"comment":"static final Unsafe UNSAFE = Unsafe.getUnsafe();","field_name":"UNSAFE","field_type":"sun.misc.Unsafe","full_declaration":"static final sun.misc.Unsafe UNSAFE = Unsafe.getUnsafe()","id":4984},{"comment":"","field_name":"DEBUG_METHOD_HANDLE_NAMES","field_type":"boolean","full_declaration":"static final boolean DEBUG_METHOD_HANDLE_NAMES","id":4985},{"comment":"","field_name":"DUMP_CLASS_FILES","field_type":"boolean","full_declaration":"static final boolean DUMP_CLASS_FILES","id":4986},{"comment":"","field_name":"TRACE_INTERPRETER","field_type":"boolean","full_declaration":"static final boolean TRACE_INTERPRETER","id":4987},{"comment":"","field_name":"TRACE_METHOD_LINKAGE","field_type":"boolean","full_declaration":"static final boolean TRACE_METHOD_LINKAGE","id":4988},{"comment":"","field_name":"COMPILE_THRESHOLD","field_type":"int","full_declaration":"static final int COMPILE_THRESHOLD","id":4989},{"comment":"","field_name":"DONT_INLINE_THRESHOLD","field_type":"int","full_declaration":"static final int DONT_INLINE_THRESHOLD","id":4990},{"comment":"","field_name":"PROFILE_LEVEL","field_type":"int","full_declaration":"static final int PROFILE_LEVEL","id":4991},{"comment":"","field_name":"PROFILE_GWT","field_type":"boolean","full_declaration":"static final boolean PROFILE_GWT","id":4992},{"comment":"","field_name":"CUSTOMIZE_THRESHOLD","field_type":"int","full_declaration":"static final int CUSTOMIZE_THRESHOLD","id":4993},{"comment":"// {rtype, {ptype...}}\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 292L","id":4994},{"comment":"// The rtype and ptypes fields define the structural identity of the method type:\r\nprivate final Class<?> rtype;","field_name":"rtype","field_type":"java.lang.Class","full_declaration":"private final java.lang.Class rtype","id":4995},{"comment":"","field_name":"ptypes","field_type":"Class<?>[]","full_declaration":"private final Class<?>[] ptypes","id":4996},{"comment":"// The remaining fields are caches of various sorts:\r\n// erased form, plus cached data about primitives\r\n@Stable\r\nprivate MethodTypeForm form;","field_name":"form","field_type":"java.lang.invoke.MethodTypeForm","full_declaration":"private java.lang.invoke.MethodTypeForm form","id":4997},{"comment":"// alternative wrapped/unwrapped version\r\n@Stable\r\nprivate MethodType wrapAlt;","field_name":"wrapAlt","field_type":"java.lang.invoke.MethodType","full_declaration":"private java.lang.invoke.MethodType wrapAlt","id":4998},{"comment":"// cache of handy higher-order adapters\r\n@Stable\r\nprivate Invokers invokers;","field_name":"invokers","field_type":"java.lang.invoke.Invokers","full_declaration":"private java.lang.invoke.Invokers invokers","id":4999},{"comment":"// cache for toMethodDescriptorString\r\n@Stable\r\nprivate String methodDescriptor;","field_name":"methodDescriptor","field_type":"java.lang.String","full_declaration":"private java.lang.String methodDescriptor","id":5000},{"comment":"/**\r\n * This number, mandated by the JVM spec as 255,\r\n *  is the maximum number of <em>slots</em>\r\n *  that any Java method can receive in its argument list.\r\n *  It limits both JVM signatures and method type objects.\r\n *  The longest possible invocation will look like\r\n *  {@code staticMethod(arg1, arg2, ..., arg255)} or\r\n *  {@code x.virtualMethod(arg1, arg2, ..., arg254)}.\r\n */\r\n/*non-public*/\r\n// this is mandated by the JVM spec.\r\n","field_name":"MAX_JVM_ARITY","field_type":"int","full_declaration":"static final int MAX_JVM_ARITY = 255","id":5001},{"comment":"/**\r\n * This number is the maximum arity of a method handle, 254.\r\n *  It is derived from the absolute JVM-imposed arity by subtracting one,\r\n *  which is the slot occupied by the method handle itself at the\r\n *  beginning of the argument list used to invoke the method handle.\r\n *  The longest possible invocation will look like\r\n *  {@code mh.invoke(arg1, arg2, ..., arg254)}.\r\n */\r\n// Issue:  Should we allow MH.invokeWithArguments to go to the full 255?\r\n/*non-public*/\r\n// deduct one for mh receiver\r\n","field_name":"MAX_MH_ARITY","field_type":"int","full_declaration":"static final int MAX_MH_ARITY = MAX_JVM_ARITY - 1","id":5002},{"comment":"/**\r\n * This number is the maximum arity of a method handle invoker, 253.\r\n *  It is derived from the absolute JVM-imposed arity by subtracting two,\r\n *  which are the slots occupied by invoke method handle, and the\r\n *  target method handle, which are both at the beginning of the argument\r\n *  list used to invoke the target method handle.\r\n *  The longest possible invocation will look like\r\n *  {@code invokermh.invoke(targetmh, arg1, arg2, ..., arg253)}.\r\n */\r\n/*non-public*/\r\n// deduct one more for invoker\r\n","field_name":"MAX_MH_INVOKER_ARITY","field_type":"int","full_declaration":"static final int MAX_MH_INVOKER_ARITY = MAX_MH_ARITY - 1","id":5003},{"comment":"static final ConcurrentWeakInternSet<MethodType> internTable = new ConcurrentWeakInternSet<>();","field_name":"internTable","field_type":"java.lang.invoke.MethodType.ConcurrentWeakInternSet","full_declaration":"static final java.lang.invoke.MethodType.ConcurrentWeakInternSet internTable = new ConcurrentWeakInternSet<>()","id":5004},{"comment":"","field_name":"NO_PTYPES","field_type":"Class<?>[]","full_declaration":"static final Class<?>[] NO_PTYPES = {}","id":5005},{"comment":"","field_name":"objectOnlyTypes","field_type":"MethodType[]","full_declaration":"private static final MethodType[] objectOnlyTypes = new MethodType[20]","id":5006},{"comment":"// / Serialization.\r\n/**\r\n * There are no serializable fields for {@code MethodType}.\r\n */\r\n","field_name":"serialPersistentFields","field_type":"java.io.ObjectStreamField[]","full_declaration":"private static final java.io.ObjectStreamField[] serialPersistentFields = {}","id":5007},{"comment":"// Support for resetting final fields while deserializing\r\nprivate static final long rtypeOffset, ptypesOffset;","field_name":"rtypeOffset","field_type":"long","full_declaration":"private static final long rtypeOffset","id":5008},{"comment":"// Support for resetting final fields while deserializing\r\nprivate static final long rtypeOffset, ptypesOffset;","field_name":"ptypesOffset","field_type":"long","full_declaration":"private static final long rtypeOffsetlong ptypesOffset","id":5009},{"comment":"private final ConcurrentMap<WeakEntry<T>, WeakEntry<T>> map;","field_name":"map","field_type":"java.util.concurrent.ConcurrentMap","full_declaration":"private final java.util.concurrent.ConcurrentMap map","id":5010},{"comment":"private final ReferenceQueue<T> stale;","field_name":"stale","field_type":"java.lang.ref.ReferenceQueue","full_declaration":"private final java.lang.ref.ReferenceQueue stale","id":5011},{"comment":"","field_name":"hashcode","field_type":"int","full_declaration":"public final int hashcode","id":5012},{"comment":"final int[] argToSlotTable, slotToArgTable;","field_name":"argToSlotTable","field_type":"int[]","full_declaration":"final int[] argToSlotTable","id":5013},{"comment":"final int[] argToSlotTable, slotToArgTable;","field_name":"slotToArgTable","field_type":"int[]","full_declaration":"final int[] argToSlotTableint[] slotToArgTable","id":5014},{"comment":"// packed slot & value counts\r\n","field_name":"argCounts","field_type":"long","full_declaration":"final long argCounts","id":5015},{"comment":"// packed prim & double counts\r\n","field_name":"primCounts","field_type":"long","full_declaration":"final long primCounts","id":5016},{"comment":"// the canonical erasure\r\nfinal MethodType erasedType;","field_name":"erasedType","field_type":"java.lang.invoke.MethodType","full_declaration":"final java.lang.invoke.MethodType erasedType","id":5017},{"comment":"// the canonical erasure, with primitives simplified\r\nfinal MethodType basicType;","field_name":"basicType","field_type":"java.lang.invoke.MethodType","full_declaration":"final java.lang.invoke.MethodType basicType","id":5018},{"comment":"// Cached adapter information:\r\n@Stable\r\n","field_name":"methodHandles","field_type":"SoftReference<MethodHandle>[]","full_declaration":"final SoftReference<MethodHandle>[] methodHandles","id":5019},{"comment":"// Indexes into methodHandles:\r\nstatic final int // cached instance of MH.invokeBasic\r\nMH_BASIC_INV = 0, // cached helper for LF.NamedFunction\r\nMH_NF_INV = 1, // uninitialized call site\r\nMH_UNINIT_CS = 2, MH_LIMIT = 3;","field_name":"MH_BASIC_INV","field_type":"int","full_declaration":"static final int // cached instance of MH.invokeBasic\r\nMH_BASIC_INV = 0","id":5020},{"comment":"// Indexes into methodHandles:\r\nstatic final int // cached instance of MH.invokeBasic\r\nMH_BASIC_INV = 0, // cached helper for LF.NamedFunction\r\nMH_NF_INV = 1, // uninitialized call site\r\nMH_UNINIT_CS = 2, MH_LIMIT = 3;","field_name":"MH_NF_INV","field_type":"int","full_declaration":"static final int // cached instance of MH.invokeBasic\r\nMH_BASIC_INV = 0int // cached helper for LF.NamedFunction\r\nMH_NF_INV = 1","id":5021},{"comment":"// Indexes into methodHandles:\r\nstatic final int // cached instance of MH.invokeBasic\r\nMH_BASIC_INV = 0, // cached helper for LF.NamedFunction\r\nMH_NF_INV = 1, // uninitialized call site\r\nMH_UNINIT_CS = 2, MH_LIMIT = 3;","field_name":"MH_UNINIT_CS","field_type":"int","full_declaration":"static final int // cached instance of MH.invokeBasic\r\nMH_BASIC_INV = 0int // cached helper for LF.NamedFunction\r\nMH_NF_INV = 1int // uninitialized call site\r\nMH_UNINIT_CS = 2","id":5022},{"comment":"// Indexes into methodHandles:\r\nstatic final int // cached instance of MH.invokeBasic\r\nMH_BASIC_INV = 0, // cached helper for LF.NamedFunction\r\nMH_NF_INV = 1, // uninitialized call site\r\nMH_UNINIT_CS = 2, MH_LIMIT = 3;","field_name":"MH_LIMIT","field_type":"int","full_declaration":"static final int // cached instance of MH.invokeBasic\r\nMH_BASIC_INV = 0int // cached helper for LF.NamedFunction\r\nMH_NF_INV = 1int // uninitialized call site\r\nMH_UNINIT_CS = 2int MH_LIMIT = 3","id":5023},{"comment":"// Cached lambda form information, for basic types only:\r\n@Stable\r\n","field_name":"lambdaForms","field_type":"SoftReference<LambdaForm>[]","full_declaration":"final SoftReference<LambdaForm>[] lambdaForms","id":5024},{"comment":"// Indexes into lambdaForms:\r\nstatic final int // DMH invokeVirtual\r\nLF_INVVIRTUAL = 0, LF_INVSTATIC = 1, LF_INVSPECIAL = 2, LF_NEWINVSPECIAL = 3, LF_INVINTERFACE = 4, // DMH invokeStatic with <clinit> barrier\r\nLF_INVSTATIC_INIT = 5, // LF interpreter\r\nLF_INTERPRET = 6, // BoundMethodHandle\r\nLF_REBIND = 7, // DelegatingMethodHandle\r\nLF_DELEGATE = 8, // Counting DelegatingMethodHandle w/ @DontInline\r\nLF_DELEGATE_BLOCK_INLINING = 9, // invokeExact_MT (for invokehandle)\r\nLF_EX_LINKER = 10, // MHs.invokeExact\r\nLF_EX_INVOKER = 11, // generic invoke_MT (for invokehandle)\r\nLF_GEN_LINKER = 12, // generic MHs.invoke\r\nLF_GEN_INVOKER = 13, // linkToCallSite_CS\r\nLF_CS_LINKER = 14, // linkToCallSite_MH\r\nLF_MH_LINKER = 15, // guardWithCatch (catchException)\r\nLF_GWC = 16, // guardWithTest\r\nLF_GWT = 17, LF_LIMIT = 18;","field_name":"LF_INVVIRTUAL","field_type":"int","full_declaration":"static final int // DMH invokeVirtual\r\nLF_INVVIRTUAL = 0","id":5025},{"comment":"// Indexes into lambdaForms:\r\nstatic final int // DMH invokeVirtual\r\nLF_INVVIRTUAL = 0, LF_INVSTATIC = 1, LF_INVSPECIAL = 2, LF_NEWINVSPECIAL = 3, LF_INVINTERFACE = 4, // DMH invokeStatic with <clinit> barrier\r\nLF_INVSTATIC_INIT = 5, // LF interpreter\r\nLF_INTERPRET = 6, // BoundMethodHandle\r\nLF_REBIND = 7, // DelegatingMethodHandle\r\nLF_DELEGATE = 8, // Counting DelegatingMethodHandle w/ @DontInline\r\nLF_DELEGATE_BLOCK_INLINING = 9, // invokeExact_MT (for invokehandle)\r\nLF_EX_LINKER = 10, // MHs.invokeExact\r\nLF_EX_INVOKER = 11, // generic invoke_MT (for invokehandle)\r\nLF_GEN_LINKER = 12, // generic MHs.invoke\r\nLF_GEN_INVOKER = 13, // linkToCallSite_CS\r\nLF_CS_LINKER = 14, // linkToCallSite_MH\r\nLF_MH_LINKER = 15, // guardWithCatch (catchException)\r\nLF_GWC = 16, // guardWithTest\r\nLF_GWT = 17, LF_LIMIT = 18;","field_name":"LF_INVSTATIC","field_type":"int","full_declaration":"static final int // DMH invokeVirtual\r\nLF_INVVIRTUAL = 0int LF_INVSTATIC = 1","id":5026},{"comment":"// Indexes into lambdaForms:\r\nstatic final int // DMH invokeVirtual\r\nLF_INVVIRTUAL = 0, LF_INVSTATIC = 1, LF_INVSPECIAL = 2, LF_NEWINVSPECIAL = 3, LF_INVINTERFACE = 4, // DMH invokeStatic with <clinit> barrier\r\nLF_INVSTATIC_INIT = 5, // LF interpreter\r\nLF_INTERPRET = 6, // BoundMethodHandle\r\nLF_REBIND = 7, // DelegatingMethodHandle\r\nLF_DELEGATE = 8, // Counting DelegatingMethodHandle w/ @DontInline\r\nLF_DELEGATE_BLOCK_INLINING = 9, // invokeExact_MT (for invokehandle)\r\nLF_EX_LINKER = 10, // MHs.invokeExact\r\nLF_EX_INVOKER = 11, // generic invoke_MT (for invokehandle)\r\nLF_GEN_LINKER = 12, // generic MHs.invoke\r\nLF_GEN_INVOKER = 13, // linkToCallSite_CS\r\nLF_CS_LINKER = 14, // linkToCallSite_MH\r\nLF_MH_LINKER = 15, // guardWithCatch (catchException)\r\nLF_GWC = 16, // guardWithTest\r\nLF_GWT = 17, LF_LIMIT = 18;","field_name":"LF_INVSPECIAL","field_type":"int","full_declaration":"static final int // DMH invokeVirtual\r\nLF_INVVIRTUAL = 0int LF_INVSTATIC = 1int LF_INVSPECIAL = 2","id":5027},{"comment":"// Indexes into lambdaForms:\r\nstatic final int // DMH invokeVirtual\r\nLF_INVVIRTUAL = 0, LF_INVSTATIC = 1, LF_INVSPECIAL = 2, LF_NEWINVSPECIAL = 3, LF_INVINTERFACE = 4, // DMH invokeStatic with <clinit> barrier\r\nLF_INVSTATIC_INIT = 5, // LF interpreter\r\nLF_INTERPRET = 6, // BoundMethodHandle\r\nLF_REBIND = 7, // DelegatingMethodHandle\r\nLF_DELEGATE = 8, // Counting DelegatingMethodHandle w/ @DontInline\r\nLF_DELEGATE_BLOCK_INLINING = 9, // invokeExact_MT (for invokehandle)\r\nLF_EX_LINKER = 10, // MHs.invokeExact\r\nLF_EX_INVOKER = 11, // generic invoke_MT (for invokehandle)\r\nLF_GEN_LINKER = 12, // generic MHs.invoke\r\nLF_GEN_INVOKER = 13, // linkToCallSite_CS\r\nLF_CS_LINKER = 14, // linkToCallSite_MH\r\nLF_MH_LINKER = 15, // guardWithCatch (catchException)\r\nLF_GWC = 16, // guardWithTest\r\nLF_GWT = 17, LF_LIMIT = 18;","field_name":"LF_NEWINVSPECIAL","field_type":"int","full_declaration":"static final int // DMH invokeVirtual\r\nLF_INVVIRTUAL = 0int LF_INVSTATIC = 1int LF_INVSPECIAL = 2int LF_NEWINVSPECIAL = 3","id":5028},{"comment":"// Indexes into lambdaForms:\r\nstatic final int // DMH invokeVirtual\r\nLF_INVVIRTUAL = 0, LF_INVSTATIC = 1, LF_INVSPECIAL = 2, LF_NEWINVSPECIAL = 3, LF_INVINTERFACE = 4, // DMH invokeStatic with <clinit> barrier\r\nLF_INVSTATIC_INIT = 5, // LF interpreter\r\nLF_INTERPRET = 6, // BoundMethodHandle\r\nLF_REBIND = 7, // DelegatingMethodHandle\r\nLF_DELEGATE = 8, // Counting DelegatingMethodHandle w/ @DontInline\r\nLF_DELEGATE_BLOCK_INLINING = 9, // invokeExact_MT (for invokehandle)\r\nLF_EX_LINKER = 10, // MHs.invokeExact\r\nLF_EX_INVOKER = 11, // generic invoke_MT (for invokehandle)\r\nLF_GEN_LINKER = 12, // generic MHs.invoke\r\nLF_GEN_INVOKER = 13, // linkToCallSite_CS\r\nLF_CS_LINKER = 14, // linkToCallSite_MH\r\nLF_MH_LINKER = 15, // guardWithCatch (catchException)\r\nLF_GWC = 16, // guardWithTest\r\nLF_GWT = 17, LF_LIMIT = 18;","field_name":"LF_INVINTERFACE","field_type":"int","full_declaration":"static final int // DMH invokeVirtual\r\nLF_INVVIRTUAL = 0int LF_INVSTATIC = 1int LF_INVSPECIAL = 2int LF_NEWINVSPECIAL = 3int LF_INVINTERFACE = 4","id":5029},{"comment":"// Indexes into lambdaForms:\r\nstatic final int // DMH invokeVirtual\r\nLF_INVVIRTUAL = 0, LF_INVSTATIC = 1, LF_INVSPECIAL = 2, LF_NEWINVSPECIAL = 3, LF_INVINTERFACE = 4, // DMH invokeStatic with <clinit> barrier\r\nLF_INVSTATIC_INIT = 5, // LF interpreter\r\nLF_INTERPRET = 6, // BoundMethodHandle\r\nLF_REBIND = 7, // DelegatingMethodHandle\r\nLF_DELEGATE = 8, // Counting DelegatingMethodHandle w/ @DontInline\r\nLF_DELEGATE_BLOCK_INLINING = 9, // invokeExact_MT (for invokehandle)\r\nLF_EX_LINKER = 10, // MHs.invokeExact\r\nLF_EX_INVOKER = 11, // generic invoke_MT (for invokehandle)\r\nLF_GEN_LINKER = 12, // generic MHs.invoke\r\nLF_GEN_INVOKER = 13, // linkToCallSite_CS\r\nLF_CS_LINKER = 14, // linkToCallSite_MH\r\nLF_MH_LINKER = 15, // guardWithCatch (catchException)\r\nLF_GWC = 16, // guardWithTest\r\nLF_GWT = 17, LF_LIMIT = 18;","field_name":"LF_INVSTATIC_INIT","field_type":"int","full_declaration":"static final int // DMH invokeVirtual\r\nLF_INVVIRTUAL = 0int LF_INVSTATIC = 1int LF_INVSPECIAL = 2int LF_NEWINVSPECIAL = 3int LF_INVINTERFACE = 4int // DMH invokeStatic with <clinit> barrier\r\nLF_INVSTATIC_INIT = 5","id":5030},{"comment":"// Indexes into lambdaForms:\r\nstatic final int // DMH invokeVirtual\r\nLF_INVVIRTUAL = 0, LF_INVSTATIC = 1, LF_INVSPECIAL = 2, LF_NEWINVSPECIAL = 3, LF_INVINTERFACE = 4, // DMH invokeStatic with <clinit> barrier\r\nLF_INVSTATIC_INIT = 5, // LF interpreter\r\nLF_INTERPRET = 6, // BoundMethodHandle\r\nLF_REBIND = 7, // DelegatingMethodHandle\r\nLF_DELEGATE = 8, // Counting DelegatingMethodHandle w/ @DontInline\r\nLF_DELEGATE_BLOCK_INLINING = 9, // invokeExact_MT (for invokehandle)\r\nLF_EX_LINKER = 10, // MHs.invokeExact\r\nLF_EX_INVOKER = 11, // generic invoke_MT (for invokehandle)\r\nLF_GEN_LINKER = 12, // generic MHs.invoke\r\nLF_GEN_INVOKER = 13, // linkToCallSite_CS\r\nLF_CS_LINKER = 14, // linkToCallSite_MH\r\nLF_MH_LINKER = 15, // guardWithCatch (catchException)\r\nLF_GWC = 16, // guardWithTest\r\nLF_GWT = 17, LF_LIMIT = 18;","field_name":"LF_INTERPRET","field_type":"int","full_declaration":"static final int // DMH invokeVirtual\r\nLF_INVVIRTUAL = 0int LF_INVSTATIC = 1int LF_INVSPECIAL = 2int LF_NEWINVSPECIAL = 3int LF_INVINTERFACE = 4int // DMH invokeStatic with <clinit> barrier\r\nLF_INVSTATIC_INIT = 5int // LF interpreter\r\nLF_INTERPRET = 6","id":5031},{"comment":"// Indexes into lambdaForms:\r\nstatic final int // DMH invokeVirtual\r\nLF_INVVIRTUAL = 0, LF_INVSTATIC = 1, LF_INVSPECIAL = 2, LF_NEWINVSPECIAL = 3, LF_INVINTERFACE = 4, // DMH invokeStatic with <clinit> barrier\r\nLF_INVSTATIC_INIT = 5, // LF interpreter\r\nLF_INTERPRET = 6, // BoundMethodHandle\r\nLF_REBIND = 7, // DelegatingMethodHandle\r\nLF_DELEGATE = 8, // Counting DelegatingMethodHandle w/ @DontInline\r\nLF_DELEGATE_BLOCK_INLINING = 9, // invokeExact_MT (for invokehandle)\r\nLF_EX_LINKER = 10, // MHs.invokeExact\r\nLF_EX_INVOKER = 11, // generic invoke_MT (for invokehandle)\r\nLF_GEN_LINKER = 12, // generic MHs.invoke\r\nLF_GEN_INVOKER = 13, // linkToCallSite_CS\r\nLF_CS_LINKER = 14, // linkToCallSite_MH\r\nLF_MH_LINKER = 15, // guardWithCatch (catchException)\r\nLF_GWC = 16, // guardWithTest\r\nLF_GWT = 17, LF_LIMIT = 18;","field_name":"LF_REBIND","field_type":"int","full_declaration":"static final int // DMH invokeVirtual\r\nLF_INVVIRTUAL = 0int LF_INVSTATIC = 1int LF_INVSPECIAL = 2int LF_NEWINVSPECIAL = 3int LF_INVINTERFACE = 4int // DMH invokeStatic with <clinit> barrier\r\nLF_INVSTATIC_INIT = 5int // LF interpreter\r\nLF_INTERPRET = 6int // BoundMethodHandle\r\nLF_REBIND = 7","id":5032},{"comment":"// Indexes into lambdaForms:\r\nstatic final int // DMH invokeVirtual\r\nLF_INVVIRTUAL = 0, LF_INVSTATIC = 1, LF_INVSPECIAL = 2, LF_NEWINVSPECIAL = 3, LF_INVINTERFACE = 4, // DMH invokeStatic with <clinit> barrier\r\nLF_INVSTATIC_INIT = 5, // LF interpreter\r\nLF_INTERPRET = 6, // BoundMethodHandle\r\nLF_REBIND = 7, // DelegatingMethodHandle\r\nLF_DELEGATE = 8, // Counting DelegatingMethodHandle w/ @DontInline\r\nLF_DELEGATE_BLOCK_INLINING = 9, // invokeExact_MT (for invokehandle)\r\nLF_EX_LINKER = 10, // MHs.invokeExact\r\nLF_EX_INVOKER = 11, // generic invoke_MT (for invokehandle)\r\nLF_GEN_LINKER = 12, // generic MHs.invoke\r\nLF_GEN_INVOKER = 13, // linkToCallSite_CS\r\nLF_CS_LINKER = 14, // linkToCallSite_MH\r\nLF_MH_LINKER = 15, // guardWithCatch (catchException)\r\nLF_GWC = 16, // guardWithTest\r\nLF_GWT = 17, LF_LIMIT = 18;","field_name":"LF_DELEGATE","field_type":"int","full_declaration":"static final int // DMH invokeVirtual\r\nLF_INVVIRTUAL = 0int LF_INVSTATIC = 1int LF_INVSPECIAL = 2int LF_NEWINVSPECIAL = 3int LF_INVINTERFACE = 4int // DMH invokeStatic with <clinit> barrier\r\nLF_INVSTATIC_INIT = 5int // LF interpreter\r\nLF_INTERPRET = 6int // BoundMethodHandle\r\nLF_REBIND = 7int // DelegatingMethodHandle\r\nLF_DELEGATE = 8","id":5033},{"comment":"// Indexes into lambdaForms:\r\nstatic final int // DMH invokeVirtual\r\nLF_INVVIRTUAL = 0, LF_INVSTATIC = 1, LF_INVSPECIAL = 2, LF_NEWINVSPECIAL = 3, LF_INVINTERFACE = 4, // DMH invokeStatic with <clinit> barrier\r\nLF_INVSTATIC_INIT = 5, // LF interpreter\r\nLF_INTERPRET = 6, // BoundMethodHandle\r\nLF_REBIND = 7, // DelegatingMethodHandle\r\nLF_DELEGATE = 8, // Counting DelegatingMethodHandle w/ @DontInline\r\nLF_DELEGATE_BLOCK_INLINING = 9, // invokeExact_MT (for invokehandle)\r\nLF_EX_LINKER = 10, // MHs.invokeExact\r\nLF_EX_INVOKER = 11, // generic invoke_MT (for invokehandle)\r\nLF_GEN_LINKER = 12, // generic MHs.invoke\r\nLF_GEN_INVOKER = 13, // linkToCallSite_CS\r\nLF_CS_LINKER = 14, // linkToCallSite_MH\r\nLF_MH_LINKER = 15, // guardWithCatch (catchException)\r\nLF_GWC = 16, // guardWithTest\r\nLF_GWT = 17, LF_LIMIT = 18;","field_name":"LF_DELEGATE_BLOCK_INLINING","field_type":"int","full_declaration":"static final int // DMH invokeVirtual\r\nLF_INVVIRTUAL = 0int LF_INVSTATIC = 1int LF_INVSPECIAL = 2int LF_NEWINVSPECIAL = 3int LF_INVINTERFACE = 4int // DMH invokeStatic with <clinit> barrier\r\nLF_INVSTATIC_INIT = 5int // LF interpreter\r\nLF_INTERPRET = 6int // BoundMethodHandle\r\nLF_REBIND = 7int // DelegatingMethodHandle\r\nLF_DELEGATE = 8int // Counting DelegatingMethodHandle w/ @DontInline\r\nLF_DELEGATE_BLOCK_INLINING = 9","id":5034},{"comment":"// Indexes into lambdaForms:\r\nstatic final int // DMH invokeVirtual\r\nLF_INVVIRTUAL = 0, LF_INVSTATIC = 1, LF_INVSPECIAL = 2, LF_NEWINVSPECIAL = 3, LF_INVINTERFACE = 4, // DMH invokeStatic with <clinit> barrier\r\nLF_INVSTATIC_INIT = 5, // LF interpreter\r\nLF_INTERPRET = 6, // BoundMethodHandle\r\nLF_REBIND = 7, // DelegatingMethodHandle\r\nLF_DELEGATE = 8, // Counting DelegatingMethodHandle w/ @DontInline\r\nLF_DELEGATE_BLOCK_INLINING = 9, // invokeExact_MT (for invokehandle)\r\nLF_EX_LINKER = 10, // MHs.invokeExact\r\nLF_EX_INVOKER = 11, // generic invoke_MT (for invokehandle)\r\nLF_GEN_LINKER = 12, // generic MHs.invoke\r\nLF_GEN_INVOKER = 13, // linkToCallSite_CS\r\nLF_CS_LINKER = 14, // linkToCallSite_MH\r\nLF_MH_LINKER = 15, // guardWithCatch (catchException)\r\nLF_GWC = 16, // guardWithTest\r\nLF_GWT = 17, LF_LIMIT = 18;","field_name":"LF_EX_LINKER","field_type":"int","full_declaration":"static final int // DMH invokeVirtual\r\nLF_INVVIRTUAL = 0int LF_INVSTATIC = 1int LF_INVSPECIAL = 2int LF_NEWINVSPECIAL = 3int LF_INVINTERFACE = 4int // DMH invokeStatic with <clinit> barrier\r\nLF_INVSTATIC_INIT = 5int // LF interpreter\r\nLF_INTERPRET = 6int // BoundMethodHandle\r\nLF_REBIND = 7int // DelegatingMethodHandle\r\nLF_DELEGATE = 8int // Counting DelegatingMethodHandle w/ @DontInline\r\nLF_DELEGATE_BLOCK_INLINING = 9int // invokeExact_MT (for invokehandle)\r\nLF_EX_LINKER = 10","id":5035},{"comment":"// Indexes into lambdaForms:\r\nstatic final int // DMH invokeVirtual\r\nLF_INVVIRTUAL = 0, LF_INVSTATIC = 1, LF_INVSPECIAL = 2, LF_NEWINVSPECIAL = 3, LF_INVINTERFACE = 4, // DMH invokeStatic with <clinit> barrier\r\nLF_INVSTATIC_INIT = 5, // LF interpreter\r\nLF_INTERPRET = 6, // BoundMethodHandle\r\nLF_REBIND = 7, // DelegatingMethodHandle\r\nLF_DELEGATE = 8, // Counting DelegatingMethodHandle w/ @DontInline\r\nLF_DELEGATE_BLOCK_INLINING = 9, // invokeExact_MT (for invokehandle)\r\nLF_EX_LINKER = 10, // MHs.invokeExact\r\nLF_EX_INVOKER = 11, // generic invoke_MT (for invokehandle)\r\nLF_GEN_LINKER = 12, // generic MHs.invoke\r\nLF_GEN_INVOKER = 13, // linkToCallSite_CS\r\nLF_CS_LINKER = 14, // linkToCallSite_MH\r\nLF_MH_LINKER = 15, // guardWithCatch (catchException)\r\nLF_GWC = 16, // guardWithTest\r\nLF_GWT = 17, LF_LIMIT = 18;","field_name":"LF_EX_INVOKER","field_type":"int","full_declaration":"static final int // DMH invokeVirtual\r\nLF_INVVIRTUAL = 0int LF_INVSTATIC = 1int LF_INVSPECIAL = 2int LF_NEWINVSPECIAL = 3int LF_INVINTERFACE = 4int // DMH invokeStatic with <clinit> barrier\r\nLF_INVSTATIC_INIT = 5int // LF interpreter\r\nLF_INTERPRET = 6int // BoundMethodHandle\r\nLF_REBIND = 7int // DelegatingMethodHandle\r\nLF_DELEGATE = 8int // Counting DelegatingMethodHandle w/ @DontInline\r\nLF_DELEGATE_BLOCK_INLINING = 9int // invokeExact_MT (for invokehandle)\r\nLF_EX_LINKER = 10int // MHs.invokeExact\r\nLF_EX_INVOKER = 11","id":5036},{"comment":"// Indexes into lambdaForms:\r\nstatic final int // DMH invokeVirtual\r\nLF_INVVIRTUAL = 0, LF_INVSTATIC = 1, LF_INVSPECIAL = 2, LF_NEWINVSPECIAL = 3, LF_INVINTERFACE = 4, // DMH invokeStatic with <clinit> barrier\r\nLF_INVSTATIC_INIT = 5, // LF interpreter\r\nLF_INTERPRET = 6, // BoundMethodHandle\r\nLF_REBIND = 7, // DelegatingMethodHandle\r\nLF_DELEGATE = 8, // Counting DelegatingMethodHandle w/ @DontInline\r\nLF_DELEGATE_BLOCK_INLINING = 9, // invokeExact_MT (for invokehandle)\r\nLF_EX_LINKER = 10, // MHs.invokeExact\r\nLF_EX_INVOKER = 11, // generic invoke_MT (for invokehandle)\r\nLF_GEN_LINKER = 12, // generic MHs.invoke\r\nLF_GEN_INVOKER = 13, // linkToCallSite_CS\r\nLF_CS_LINKER = 14, // linkToCallSite_MH\r\nLF_MH_LINKER = 15, // guardWithCatch (catchException)\r\nLF_GWC = 16, // guardWithTest\r\nLF_GWT = 17, LF_LIMIT = 18;","field_name":"LF_GEN_LINKER","field_type":"int","full_declaration":"static final int // DMH invokeVirtual\r\nLF_INVVIRTUAL = 0int LF_INVSTATIC = 1int LF_INVSPECIAL = 2int LF_NEWINVSPECIAL = 3int LF_INVINTERFACE = 4int // DMH invokeStatic with <clinit> barrier\r\nLF_INVSTATIC_INIT = 5int // LF interpreter\r\nLF_INTERPRET = 6int // BoundMethodHandle\r\nLF_REBIND = 7int // DelegatingMethodHandle\r\nLF_DELEGATE = 8int // Counting DelegatingMethodHandle w/ @DontInline\r\nLF_DELEGATE_BLOCK_INLINING = 9int // invokeExact_MT (for invokehandle)\r\nLF_EX_LINKER = 10int // MHs.invokeExact\r\nLF_EX_INVOKER = 11int // generic invoke_MT (for invokehandle)\r\nLF_GEN_LINKER = 12","id":5037},{"comment":"// Indexes into lambdaForms:\r\nstatic final int // DMH invokeVirtual\r\nLF_INVVIRTUAL = 0, LF_INVSTATIC = 1, LF_INVSPECIAL = 2, LF_NEWINVSPECIAL = 3, LF_INVINTERFACE = 4, // DMH invokeStatic with <clinit> barrier\r\nLF_INVSTATIC_INIT = 5, // LF interpreter\r\nLF_INTERPRET = 6, // BoundMethodHandle\r\nLF_REBIND = 7, // DelegatingMethodHandle\r\nLF_DELEGATE = 8, // Counting DelegatingMethodHandle w/ @DontInline\r\nLF_DELEGATE_BLOCK_INLINING = 9, // invokeExact_MT (for invokehandle)\r\nLF_EX_LINKER = 10, // MHs.invokeExact\r\nLF_EX_INVOKER = 11, // generic invoke_MT (for invokehandle)\r\nLF_GEN_LINKER = 12, // generic MHs.invoke\r\nLF_GEN_INVOKER = 13, // linkToCallSite_CS\r\nLF_CS_LINKER = 14, // linkToCallSite_MH\r\nLF_MH_LINKER = 15, // guardWithCatch (catchException)\r\nLF_GWC = 16, // guardWithTest\r\nLF_GWT = 17, LF_LIMIT = 18;","field_name":"LF_GEN_INVOKER","field_type":"int","full_declaration":"static final int // DMH invokeVirtual\r\nLF_INVVIRTUAL = 0int LF_INVSTATIC = 1int LF_INVSPECIAL = 2int LF_NEWINVSPECIAL = 3int LF_INVINTERFACE = 4int // DMH invokeStatic with <clinit> barrier\r\nLF_INVSTATIC_INIT = 5int // LF interpreter\r\nLF_INTERPRET = 6int // BoundMethodHandle\r\nLF_REBIND = 7int // DelegatingMethodHandle\r\nLF_DELEGATE = 8int // Counting DelegatingMethodHandle w/ @DontInline\r\nLF_DELEGATE_BLOCK_INLINING = 9int // invokeExact_MT (for invokehandle)\r\nLF_EX_LINKER = 10int // MHs.invokeExact\r\nLF_EX_INVOKER = 11int // generic invoke_MT (for invokehandle)\r\nLF_GEN_LINKER = 12int // generic MHs.invoke\r\nLF_GEN_INVOKER = 13","id":5038},{"comment":"// Indexes into lambdaForms:\r\nstatic final int // DMH invokeVirtual\r\nLF_INVVIRTUAL = 0, LF_INVSTATIC = 1, LF_INVSPECIAL = 2, LF_NEWINVSPECIAL = 3, LF_INVINTERFACE = 4, // DMH invokeStatic with <clinit> barrier\r\nLF_INVSTATIC_INIT = 5, // LF interpreter\r\nLF_INTERPRET = 6, // BoundMethodHandle\r\nLF_REBIND = 7, // DelegatingMethodHandle\r\nLF_DELEGATE = 8, // Counting DelegatingMethodHandle w/ @DontInline\r\nLF_DELEGATE_BLOCK_INLINING = 9, // invokeExact_MT (for invokehandle)\r\nLF_EX_LINKER = 10, // MHs.invokeExact\r\nLF_EX_INVOKER = 11, // generic invoke_MT (for invokehandle)\r\nLF_GEN_LINKER = 12, // generic MHs.invoke\r\nLF_GEN_INVOKER = 13, // linkToCallSite_CS\r\nLF_CS_LINKER = 14, // linkToCallSite_MH\r\nLF_MH_LINKER = 15, // guardWithCatch (catchException)\r\nLF_GWC = 16, // guardWithTest\r\nLF_GWT = 17, LF_LIMIT = 18;","field_name":"LF_CS_LINKER","field_type":"int","full_declaration":"static final int // DMH invokeVirtual\r\nLF_INVVIRTUAL = 0int LF_INVSTATIC = 1int LF_INVSPECIAL = 2int LF_NEWINVSPECIAL = 3int LF_INVINTERFACE = 4int // DMH invokeStatic with <clinit> barrier\r\nLF_INVSTATIC_INIT = 5int // LF interpreter\r\nLF_INTERPRET = 6int // BoundMethodHandle\r\nLF_REBIND = 7int // DelegatingMethodHandle\r\nLF_DELEGATE = 8int // Counting DelegatingMethodHandle w/ @DontInline\r\nLF_DELEGATE_BLOCK_INLINING = 9int // invokeExact_MT (for invokehandle)\r\nLF_EX_LINKER = 10int // MHs.invokeExact\r\nLF_EX_INVOKER = 11int // generic invoke_MT (for invokehandle)\r\nLF_GEN_LINKER = 12int // generic MHs.invoke\r\nLF_GEN_INVOKER = 13int // linkToCallSite_CS\r\nLF_CS_LINKER = 14","id":5039},{"comment":"// Indexes into lambdaForms:\r\nstatic final int // DMH invokeVirtual\r\nLF_INVVIRTUAL = 0, LF_INVSTATIC = 1, LF_INVSPECIAL = 2, LF_NEWINVSPECIAL = 3, LF_INVINTERFACE = 4, // DMH invokeStatic with <clinit> barrier\r\nLF_INVSTATIC_INIT = 5, // LF interpreter\r\nLF_INTERPRET = 6, // BoundMethodHandle\r\nLF_REBIND = 7, // DelegatingMethodHandle\r\nLF_DELEGATE = 8, // Counting DelegatingMethodHandle w/ @DontInline\r\nLF_DELEGATE_BLOCK_INLINING = 9, // invokeExact_MT (for invokehandle)\r\nLF_EX_LINKER = 10, // MHs.invokeExact\r\nLF_EX_INVOKER = 11, // generic invoke_MT (for invokehandle)\r\nLF_GEN_LINKER = 12, // generic MHs.invoke\r\nLF_GEN_INVOKER = 13, // linkToCallSite_CS\r\nLF_CS_LINKER = 14, // linkToCallSite_MH\r\nLF_MH_LINKER = 15, // guardWithCatch (catchException)\r\nLF_GWC = 16, // guardWithTest\r\nLF_GWT = 17, LF_LIMIT = 18;","field_name":"LF_MH_LINKER","field_type":"int","full_declaration":"static final int // DMH invokeVirtual\r\nLF_INVVIRTUAL = 0int LF_INVSTATIC = 1int LF_INVSPECIAL = 2int LF_NEWINVSPECIAL = 3int LF_INVINTERFACE = 4int // DMH invokeStatic with <clinit> barrier\r\nLF_INVSTATIC_INIT = 5int // LF interpreter\r\nLF_INTERPRET = 6int // BoundMethodHandle\r\nLF_REBIND = 7int // DelegatingMethodHandle\r\nLF_DELEGATE = 8int // Counting DelegatingMethodHandle w/ @DontInline\r\nLF_DELEGATE_BLOCK_INLINING = 9int // invokeExact_MT (for invokehandle)\r\nLF_EX_LINKER = 10int // MHs.invokeExact\r\nLF_EX_INVOKER = 11int // generic invoke_MT (for invokehandle)\r\nLF_GEN_LINKER = 12int // generic MHs.invoke\r\nLF_GEN_INVOKER = 13int // linkToCallSite_CS\r\nLF_CS_LINKER = 14int // linkToCallSite_MH\r\nLF_MH_LINKER = 15","id":5040},{"comment":"// Indexes into lambdaForms:\r\nstatic final int // DMH invokeVirtual\r\nLF_INVVIRTUAL = 0, LF_INVSTATIC = 1, LF_INVSPECIAL = 2, LF_NEWINVSPECIAL = 3, LF_INVINTERFACE = 4, // DMH invokeStatic with <clinit> barrier\r\nLF_INVSTATIC_INIT = 5, // LF interpreter\r\nLF_INTERPRET = 6, // BoundMethodHandle\r\nLF_REBIND = 7, // DelegatingMethodHandle\r\nLF_DELEGATE = 8, // Counting DelegatingMethodHandle w/ @DontInline\r\nLF_DELEGATE_BLOCK_INLINING = 9, // invokeExact_MT (for invokehandle)\r\nLF_EX_LINKER = 10, // MHs.invokeExact\r\nLF_EX_INVOKER = 11, // generic invoke_MT (for invokehandle)\r\nLF_GEN_LINKER = 12, // generic MHs.invoke\r\nLF_GEN_INVOKER = 13, // linkToCallSite_CS\r\nLF_CS_LINKER = 14, // linkToCallSite_MH\r\nLF_MH_LINKER = 15, // guardWithCatch (catchException)\r\nLF_GWC = 16, // guardWithTest\r\nLF_GWT = 17, LF_LIMIT = 18;","field_name":"LF_GWC","field_type":"int","full_declaration":"static final int // DMH invokeVirtual\r\nLF_INVVIRTUAL = 0int LF_INVSTATIC = 1int LF_INVSPECIAL = 2int LF_NEWINVSPECIAL = 3int LF_INVINTERFACE = 4int // DMH invokeStatic with <clinit> barrier\r\nLF_INVSTATIC_INIT = 5int // LF interpreter\r\nLF_INTERPRET = 6int // BoundMethodHandle\r\nLF_REBIND = 7int // DelegatingMethodHandle\r\nLF_DELEGATE = 8int // Counting DelegatingMethodHandle w/ @DontInline\r\nLF_DELEGATE_BLOCK_INLINING = 9int // invokeExact_MT (for invokehandle)\r\nLF_EX_LINKER = 10int // MHs.invokeExact\r\nLF_EX_INVOKER = 11int // generic invoke_MT (for invokehandle)\r\nLF_GEN_LINKER = 12int // generic MHs.invoke\r\nLF_GEN_INVOKER = 13int // linkToCallSite_CS\r\nLF_CS_LINKER = 14int // linkToCallSite_MH\r\nLF_MH_LINKER = 15int // guardWithCatch (catchException)\r\nLF_GWC = 16","id":5041},{"comment":"// Indexes into lambdaForms:\r\nstatic final int // DMH invokeVirtual\r\nLF_INVVIRTUAL = 0, LF_INVSTATIC = 1, LF_INVSPECIAL = 2, LF_NEWINVSPECIAL = 3, LF_INVINTERFACE = 4, // DMH invokeStatic with <clinit> barrier\r\nLF_INVSTATIC_INIT = 5, // LF interpreter\r\nLF_INTERPRET = 6, // BoundMethodHandle\r\nLF_REBIND = 7, // DelegatingMethodHandle\r\nLF_DELEGATE = 8, // Counting DelegatingMethodHandle w/ @DontInline\r\nLF_DELEGATE_BLOCK_INLINING = 9, // invokeExact_MT (for invokehandle)\r\nLF_EX_LINKER = 10, // MHs.invokeExact\r\nLF_EX_INVOKER = 11, // generic invoke_MT (for invokehandle)\r\nLF_GEN_LINKER = 12, // generic MHs.invoke\r\nLF_GEN_INVOKER = 13, // linkToCallSite_CS\r\nLF_CS_LINKER = 14, // linkToCallSite_MH\r\nLF_MH_LINKER = 15, // guardWithCatch (catchException)\r\nLF_GWC = 16, // guardWithTest\r\nLF_GWT = 17, LF_LIMIT = 18;","field_name":"LF_GWT","field_type":"int","full_declaration":"static final int // DMH invokeVirtual\r\nLF_INVVIRTUAL = 0int LF_INVSTATIC = 1int LF_INVSPECIAL = 2int LF_NEWINVSPECIAL = 3int LF_INVINTERFACE = 4int // DMH invokeStatic with <clinit> barrier\r\nLF_INVSTATIC_INIT = 5int // LF interpreter\r\nLF_INTERPRET = 6int // BoundMethodHandle\r\nLF_REBIND = 7int // DelegatingMethodHandle\r\nLF_DELEGATE = 8int // Counting DelegatingMethodHandle w/ @DontInline\r\nLF_DELEGATE_BLOCK_INLINING = 9int // invokeExact_MT (for invokehandle)\r\nLF_EX_LINKER = 10int // MHs.invokeExact\r\nLF_EX_INVOKER = 11int // generic invoke_MT (for invokehandle)\r\nLF_GEN_LINKER = 12int // generic MHs.invoke\r\nLF_GEN_INVOKER = 13int // linkToCallSite_CS\r\nLF_CS_LINKER = 14int // linkToCallSite_MH\r\nLF_MH_LINKER = 15int // guardWithCatch (catchException)\r\nLF_GWC = 16int // guardWithTest\r\nLF_GWT = 17","id":5042},{"comment":"// Indexes into lambdaForms:\r\nstatic final int // DMH invokeVirtual\r\nLF_INVVIRTUAL = 0, LF_INVSTATIC = 1, LF_INVSPECIAL = 2, LF_NEWINVSPECIAL = 3, LF_INVINTERFACE = 4, // DMH invokeStatic with <clinit> barrier\r\nLF_INVSTATIC_INIT = 5, // LF interpreter\r\nLF_INTERPRET = 6, // BoundMethodHandle\r\nLF_REBIND = 7, // DelegatingMethodHandle\r\nLF_DELEGATE = 8, // Counting DelegatingMethodHandle w/ @DontInline\r\nLF_DELEGATE_BLOCK_INLINING = 9, // invokeExact_MT (for invokehandle)\r\nLF_EX_LINKER = 10, // MHs.invokeExact\r\nLF_EX_INVOKER = 11, // generic invoke_MT (for invokehandle)\r\nLF_GEN_LINKER = 12, // generic MHs.invoke\r\nLF_GEN_INVOKER = 13, // linkToCallSite_CS\r\nLF_CS_LINKER = 14, // linkToCallSite_MH\r\nLF_MH_LINKER = 15, // guardWithCatch (catchException)\r\nLF_GWC = 16, // guardWithTest\r\nLF_GWT = 17, LF_LIMIT = 18;","field_name":"LF_LIMIT","field_type":"int","full_declaration":"static final int // DMH invokeVirtual\r\nLF_INVVIRTUAL = 0int LF_INVSTATIC = 1int LF_INVSPECIAL = 2int LF_NEWINVSPECIAL = 3int LF_INVINTERFACE = 4int // DMH invokeStatic with <clinit> barrier\r\nLF_INVSTATIC_INIT = 5int // LF interpreter\r\nLF_INTERPRET = 6int // BoundMethodHandle\r\nLF_REBIND = 7int // DelegatingMethodHandle\r\nLF_DELEGATE = 8int // Counting DelegatingMethodHandle w/ @DontInline\r\nLF_DELEGATE_BLOCK_INLINING = 9int // invokeExact_MT (for invokehandle)\r\nLF_EX_LINKER = 10int // MHs.invokeExact\r\nLF_EX_INVOKER = 11int // generic invoke_MT (for invokehandle)\r\nLF_GEN_LINKER = 12int // generic MHs.invoke\r\nLF_GEN_INVOKER = 13int // linkToCallSite_CS\r\nLF_CS_LINKER = 14int // linkToCallSite_MH\r\nLF_MH_LINKER = 15int // guardWithCatch (catchException)\r\nLF_GWC = 16int // guardWithTest\r\nLF_GWT = 17int LF_LIMIT = 18","id":5043},{"comment":"/**\r\n * Codes for {@link #canonicalize(java.lang.Class, int)}.\r\n * ERASE means change every reference to {@code Object}.\r\n * WRAP means convert primitives (including {@code void} to their\r\n * corresponding wrapper types.  UNWRAP means the reverse of WRAP.\r\n * INTS means convert all non-void primitive types to int or long,\r\n * according to size.  LONGS means convert all non-void primitives\r\n * to long, regardless of size.  RAW_RETURN means convert a type\r\n * (assumed to be a return type) to int if it is smaller than an int,\r\n * or if it is void.\r\n */\r\npublic static final int NO_CHANGE = 0, ERASE = 1, WRAP = 2, UNWRAP = 3, INTS = 4, LONGS = 5, RAW_RETURN = 6;","field_name":"NO_CHANGE","field_type":"int","full_declaration":"public static final int NO_CHANGE = 0","id":5044},{"comment":"/**\r\n * Codes for {@link #canonicalize(java.lang.Class, int)}.\r\n * ERASE means change every reference to {@code Object}.\r\n * WRAP means convert primitives (including {@code void} to their\r\n * corresponding wrapper types.  UNWRAP means the reverse of WRAP.\r\n * INTS means convert all non-void primitive types to int or long,\r\n * according to size.  LONGS means convert all non-void primitives\r\n * to long, regardless of size.  RAW_RETURN means convert a type\r\n * (assumed to be a return type) to int if it is smaller than an int,\r\n * or if it is void.\r\n */\r\npublic static final int NO_CHANGE = 0, ERASE = 1, WRAP = 2, UNWRAP = 3, INTS = 4, LONGS = 5, RAW_RETURN = 6;","field_name":"ERASE","field_type":"int","full_declaration":"public static final int NO_CHANGE = 0int ERASE = 1","id":5045},{"comment":"/**\r\n * Codes for {@link #canonicalize(java.lang.Class, int)}.\r\n * ERASE means change every reference to {@code Object}.\r\n * WRAP means convert primitives (including {@code void} to their\r\n * corresponding wrapper types.  UNWRAP means the reverse of WRAP.\r\n * INTS means convert all non-void primitive types to int or long,\r\n * according to size.  LONGS means convert all non-void primitives\r\n * to long, regardless of size.  RAW_RETURN means convert a type\r\n * (assumed to be a return type) to int if it is smaller than an int,\r\n * or if it is void.\r\n */\r\npublic static final int NO_CHANGE = 0, ERASE = 1, WRAP = 2, UNWRAP = 3, INTS = 4, LONGS = 5, RAW_RETURN = 6;","field_name":"WRAP","field_type":"int","full_declaration":"public static final int NO_CHANGE = 0int ERASE = 1int WRAP = 2","id":5046},{"comment":"/**\r\n * Codes for {@link #canonicalize(java.lang.Class, int)}.\r\n * ERASE means change every reference to {@code Object}.\r\n * WRAP means convert primitives (including {@code void} to their\r\n * corresponding wrapper types.  UNWRAP means the reverse of WRAP.\r\n * INTS means convert all non-void primitive types to int or long,\r\n * according to size.  LONGS means convert all non-void primitives\r\n * to long, regardless of size.  RAW_RETURN means convert a type\r\n * (assumed to be a return type) to int if it is smaller than an int,\r\n * or if it is void.\r\n */\r\npublic static final int NO_CHANGE = 0, ERASE = 1, WRAP = 2, UNWRAP = 3, INTS = 4, LONGS = 5, RAW_RETURN = 6;","field_name":"UNWRAP","field_type":"int","full_declaration":"public static final int NO_CHANGE = 0int ERASE = 1int WRAP = 2int UNWRAP = 3","id":5047},{"comment":"/**\r\n * Codes for {@link #canonicalize(java.lang.Class, int)}.\r\n * ERASE means change every reference to {@code Object}.\r\n * WRAP means convert primitives (including {@code void} to their\r\n * corresponding wrapper types.  UNWRAP means the reverse of WRAP.\r\n * INTS means convert all non-void primitive types to int or long,\r\n * according to size.  LONGS means convert all non-void primitives\r\n * to long, regardless of size.  RAW_RETURN means convert a type\r\n * (assumed to be a return type) to int if it is smaller than an int,\r\n * or if it is void.\r\n */\r\npublic static final int NO_CHANGE = 0, ERASE = 1, WRAP = 2, UNWRAP = 3, INTS = 4, LONGS = 5, RAW_RETURN = 6;","field_name":"INTS","field_type":"int","full_declaration":"public static final int NO_CHANGE = 0int ERASE = 1int WRAP = 2int UNWRAP = 3int INTS = 4","id":5048},{"comment":"/**\r\n * Codes for {@link #canonicalize(java.lang.Class, int)}.\r\n * ERASE means change every reference to {@code Object}.\r\n * WRAP means convert primitives (including {@code void} to their\r\n * corresponding wrapper types.  UNWRAP means the reverse of WRAP.\r\n * INTS means convert all non-void primitive types to int or long,\r\n * according to size.  LONGS means convert all non-void primitives\r\n * to long, regardless of size.  RAW_RETURN means convert a type\r\n * (assumed to be a return type) to int if it is smaller than an int,\r\n * or if it is void.\r\n */\r\npublic static final int NO_CHANGE = 0, ERASE = 1, WRAP = 2, UNWRAP = 3, INTS = 4, LONGS = 5, RAW_RETURN = 6;","field_name":"LONGS","field_type":"int","full_declaration":"public static final int NO_CHANGE = 0int ERASE = 1int WRAP = 2int UNWRAP = 3int INTS = 4int LONGS = 5","id":5049},{"comment":"/**\r\n * Codes for {@link #canonicalize(java.lang.Class, int)}.\r\n * ERASE means change every reference to {@code Object}.\r\n * WRAP means convert primitives (including {@code void} to their\r\n * corresponding wrapper types.  UNWRAP means the reverse of WRAP.\r\n * INTS means convert all non-void primitive types to int or long,\r\n * according to size.  LONGS means convert all non-void primitives\r\n * to long, regardless of size.  RAW_RETURN means convert a type\r\n * (assumed to be a return type) to int if it is smaller than an int,\r\n * or if it is void.\r\n */\r\npublic static final int NO_CHANGE = 0, ERASE = 1, WRAP = 2, UNWRAP = 3, INTS = 4, LONGS = 5, RAW_RETURN = 6;","field_name":"RAW_RETURN","field_type":"int","full_declaration":"public static final int NO_CHANGE = 0int ERASE = 1int WRAP = 2int UNWRAP = 3int INTS = 4int LONGS = 5int RAW_RETURN = 6","id":5050},{"comment":"private static final AtomicInteger STORE_BARRIER = new AtomicInteger();","field_name":"STORE_BARRIER","field_type":"java.util.concurrent.atomic.AtomicInteger","full_declaration":"private static final java.util.concurrent.atomic.AtomicInteger STORE_BARRIER = new AtomicInteger()","id":5051},{"comment":"","field_name":"HEX","field_type":"char[]","full_declaration":"private static final char[] HEX = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' }","id":5052},{"comment":"","field_name":"BAD_CHARS","field_type":"char[]","full_declaration":"private static final char[] BAD_CHARS = { '\\\\', ':', '*', '?', '\"', '<', '>', '|' }","id":5053},{"comment":"","field_name":"REPLACEMENT","field_type":"String[]","full_declaration":"private static final String[] REPLACEMENT = { \"%5C\", \"%3A\", \"%2A\", \"%3F\", \"%22\", \"%3C\", \"%3E\", \"%7C\" }","id":5054},{"comment":"private final Path dumpDir;","field_name":"dumpDir","field_type":"java.nio.file.Path","full_declaration":"private final java.nio.file.Path dumpDir","id":5055},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 8025925345765570181L","id":5056},{"comment":"private final Class<?> capturingClass;","field_name":"capturingClass","field_type":"java.lang.Class","full_declaration":"private final java.lang.Class capturingClass","id":5057},{"comment":"private final String functionalInterfaceClass;","field_name":"functionalInterfaceClass","field_type":"java.lang.String","full_declaration":"private final java.lang.String functionalInterfaceClass","id":5058},{"comment":"private final String functionalInterfaceMethodName;","field_name":"functionalInterfaceMethodName","field_type":"java.lang.String","full_declaration":"private final java.lang.String functionalInterfaceMethodName","id":5059},{"comment":"private final String functionalInterfaceMethodSignature;","field_name":"functionalInterfaceMethodSignature","field_type":"java.lang.String","full_declaration":"private final java.lang.String functionalInterfaceMethodSignature","id":5060},{"comment":"private final String implClass;","field_name":"implClass","field_type":"java.lang.String","full_declaration":"private final java.lang.String implClass","id":5061},{"comment":"private final String implMethodName;","field_name":"implMethodName","field_type":"java.lang.String","full_declaration":"private final java.lang.String implMethodName","id":5062},{"comment":"private final String implMethodSignature;","field_name":"implMethodSignature","field_type":"java.lang.String","full_declaration":"private final java.lang.String implMethodSignature","id":5063},{"comment":"","field_name":"implMethodKind","field_type":"int","full_declaration":"private final int implMethodKind","id":5064},{"comment":"private final String instantiatedMethodType;","field_name":"instantiatedMethodType","field_type":"java.lang.String","full_declaration":"private final java.lang.String instantiatedMethodType","id":5065},{"comment":"","field_name":"capturedArgs","field_type":"Object[]","full_declaration":"private final Object[] capturedArgs","id":5066},{"comment":"/*non-public*/\r\nstatic final SpeciesData SPECIES_DATA = SpeciesData.EMPTY;","field_name":"SPECIES_DATA","field_type":"java.lang.invoke.BoundMethodHandle.SpeciesData","full_declaration":"static final java.lang.invoke.BoundMethodHandle.SpeciesData SPECIES_DATA = SpeciesData.EMPTY","id":5067},{"comment":"private static final MethodHandle K_true = MethodHandles.constant(boolean.class, true), K_false = MethodHandles.constant(boolean.class, false);","field_name":"K_true","field_type":"java.lang.invoke.MethodHandle","full_declaration":"private static final java.lang.invoke.MethodHandle K_true = MethodHandles.constant(boolean.class, true)","id":5068},{"comment":"private static final MethodHandle K_true = MethodHandles.constant(boolean.class, true), K_false = MethodHandles.constant(boolean.class, false);","field_name":"K_false","field_type":"java.lang.invoke.MethodHandle","full_declaration":"private static final java.lang.invoke.MethodHandle K_true = MethodHandles.constant(boolean.class, true)java.lang.invoke.MethodHandle K_false = MethodHandles.constant(boolean.class, false)","id":5069},{"comment":"private final MutableCallSite mcs;","field_name":"mcs","field_type":"java.lang.invoke.MutableCallSite","full_declaration":"private final java.lang.invoke.MutableCallSite mcs","id":5070},{"comment":"private final MethodHandle mcsInvoker;","field_name":"mcsInvoker","field_type":"java.lang.invoke.MethodHandle","full_declaration":"private final java.lang.invoke.MethodHandle mcsInvoker","id":5071},{"comment":"","field_name":"NUM_WRAPPERS","field_type":"int","full_declaration":"private static final int NUM_WRAPPERS = Wrapper.values().length","id":5072},{"comment":"private static final String NAME_OBJECT = \"java/lang/Object\";","field_name":"NAME_OBJECT","field_type":"java.lang.String","full_declaration":"private static final java.lang.String NAME_OBJECT = \"java/lang/Object\"","id":5073},{"comment":"private static final String WRAPPER_PREFIX = \"Ljava/lang/\";","field_name":"WRAPPER_PREFIX","field_type":"java.lang.String","full_declaration":"private static final java.lang.String WRAPPER_PREFIX = \"Ljava/lang/\"","id":5074},{"comment":"// Same for all primitives; name of the boxing method\r\nprivate static final String NAME_BOX_METHOD = \"valueOf\";","field_name":"NAME_BOX_METHOD","field_type":"java.lang.String","full_declaration":"private static final java.lang.String NAME_BOX_METHOD = \"valueOf\"","id":5075},{"comment":"// Table of opcodes for widening primitive conversions; NOP = no conversion\r\n","field_name":"wideningOpcodes","field_type":"int[][]","full_declaration":"private static final int[][] wideningOpcodes = new int[NUM_WRAPPERS][NUM_WRAPPERS]","id":5076},{"comment":"","field_name":"FROM_WRAPPER_NAME","field_type":"Wrapper[]","full_declaration":"private static final Wrapper[] FROM_WRAPPER_NAME = new Wrapper[16]","id":5077},{"comment":"// Table of wrappers for primitives, indexed by ASM type sorts\r\n","field_name":"FROM_TYPE_SORT","field_type":"Wrapper[]","full_declaration":"private static final Wrapper[] FROM_TYPE_SORT = new Wrapper[16]","id":5078},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 292L","id":5079},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 3579600108157160122L","id":5080},{"comment":"/**\r\n * A constant holding the minimum value a {@code long} can\r\n * have, -2<sup>63</sup>.\r\n */\r\n@Native\r\n","field_name":"MIN_VALUE","field_type":"long","full_declaration":"public static final long MIN_VALUE = 0x8000000000000000L","id":5081},{"comment":"/**\r\n * A constant holding the maximum value a {@code long} can\r\n * have, 2<sup>63</sup>-1.\r\n */\r\n@Native\r\n","field_name":"MAX_VALUE","field_type":"long","full_declaration":"public static final long MAX_VALUE = 0x7fffffffffffffffL","id":5082},{"comment":"/**\r\n * The {@code Class} instance representing the primitive type\r\n * {@code long}.\r\n *\r\n * @since   JDK1.1\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\npublic static final Class<Long> TYPE = (Class<Long>) Class.getPrimitiveClass(\"long\");","field_name":"TYPE","field_type":"java.lang.Class","full_declaration":"public static final java.lang.Class TYPE = (Class<Long>) Class.getPrimitiveClass(\"long\")","id":5083},{"comment":"/**\r\n * The value of the {@code Long}.\r\n *\r\n * @serial\r\n */\r\n","field_name":"value","field_type":"long","full_declaration":"private final long value","id":5084},{"comment":"// Bit Twiddling\r\n/**\r\n * The number of bits used to represent a {@code long} value in two's\r\n * complement binary form.\r\n *\r\n * @since 1.5\r\n */\r\n@Native\r\n","field_name":"SIZE","field_type":"int","full_declaration":"public static final int SIZE = 64","id":5085},{"comment":"/**\r\n * The number of bytes used to represent a {@code long} value in two's\r\n * complement binary form.\r\n *\r\n * @since 1.8\r\n */\r\n","field_name":"BYTES","field_type":"int","full_declaration":"public static final int BYTES = SIZE / Byte.SIZE","id":5086},{"comment":"/**\r\n * use serialVersionUID from JDK 1.0.2 for interoperability\r\n */\r\n@Native\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 4290774380558885855L","id":5087},{"comment":"","field_name":"cache","field_type":"Long[]","full_declaration":"static final Long[] cache = new Long[-(-128) + 127 + 1]","id":5088},{"comment":"private String className;","field_name":"className","field_type":"java.lang.String","full_declaration":"private java.lang.String className","id":5089},{"comment":"","field_name":"identityHashCode","field_type":"int","full_declaration":"private int identityHashCode","id":5090},{"comment":"/**\r\n * String representation of the\r\n * <tt>ObjectName</tt> for the {@link ClassLoadingMXBean}.\r\n */\r\npublic final static String CLASS_LOADING_MXBEAN_NAME = \"java.lang:type=ClassLoading\";","field_name":"CLASS_LOADING_MXBEAN_NAME","field_type":"java.lang.String","full_declaration":"public final static java.lang.String CLASS_LOADING_MXBEAN_NAME = \"java.lang:type=ClassLoading\"","id":5091},{"comment":"/**\r\n * String representation of the\r\n * <tt>ObjectName</tt> for the {@link CompilationMXBean}.\r\n */\r\npublic final static String COMPILATION_MXBEAN_NAME = \"java.lang:type=Compilation\";","field_name":"COMPILATION_MXBEAN_NAME","field_type":"java.lang.String","full_declaration":"public final static java.lang.String COMPILATION_MXBEAN_NAME = \"java.lang:type=Compilation\"","id":5092},{"comment":"/**\r\n * String representation of the\r\n * <tt>ObjectName</tt> for the {@link MemoryMXBean}.\r\n */\r\npublic final static String MEMORY_MXBEAN_NAME = \"java.lang:type=Memory\";","field_name":"MEMORY_MXBEAN_NAME","field_type":"java.lang.String","full_declaration":"public final static java.lang.String MEMORY_MXBEAN_NAME = \"java.lang:type=Memory\"","id":5093},{"comment":"/**\r\n * String representation of the\r\n * <tt>ObjectName</tt> for the {@link OperatingSystemMXBean}.\r\n */\r\npublic final static String OPERATING_SYSTEM_MXBEAN_NAME = \"java.lang:type=OperatingSystem\";","field_name":"OPERATING_SYSTEM_MXBEAN_NAME","field_type":"java.lang.String","full_declaration":"public final static java.lang.String OPERATING_SYSTEM_MXBEAN_NAME = \"java.lang:type=OperatingSystem\"","id":5094},{"comment":"/**\r\n * String representation of the\r\n * <tt>ObjectName</tt> for the {@link RuntimeMXBean}.\r\n */\r\npublic final static String RUNTIME_MXBEAN_NAME = \"java.lang:type=Runtime\";","field_name":"RUNTIME_MXBEAN_NAME","field_type":"java.lang.String","full_declaration":"public final static java.lang.String RUNTIME_MXBEAN_NAME = \"java.lang:type=Runtime\"","id":5095},{"comment":"/**\r\n * String representation of the\r\n * <tt>ObjectName</tt> for the {@link ThreadMXBean}.\r\n */\r\npublic final static String THREAD_MXBEAN_NAME = \"java.lang:type=Threading\";","field_name":"THREAD_MXBEAN_NAME","field_type":"java.lang.String","full_declaration":"public final static java.lang.String THREAD_MXBEAN_NAME = \"java.lang:type=Threading\"","id":5096},{"comment":"/**\r\n * The domain name and the type key property in\r\n * the <tt>ObjectName</tt> for a {@link GarbageCollectorMXBean}.\r\n * The unique <tt>ObjectName</tt> for a <tt>GarbageCollectorMXBean</tt>\r\n * can be formed by appending this string with\r\n * \"<tt>,name=</tt><i>collector's name</i>\".\r\n */\r\npublic final static String GARBAGE_COLLECTOR_MXBEAN_DOMAIN_TYPE = \"java.lang:type=GarbageCollector\";","field_name":"GARBAGE_COLLECTOR_MXBEAN_DOMAIN_TYPE","field_type":"java.lang.String","full_declaration":"public final static java.lang.String GARBAGE_COLLECTOR_MXBEAN_DOMAIN_TYPE = \"java.lang:type=GarbageCollector\"","id":5097},{"comment":"/**\r\n * The domain name and the type key property in\r\n * the <tt>ObjectName</tt> for a {@link MemoryManagerMXBean}.\r\n * The unique <tt>ObjectName</tt> for a <tt>MemoryManagerMXBean</tt>\r\n * can be formed by appending this string with\r\n * \"<tt>,name=</tt><i>manager's name</i>\".\r\n */\r\npublic final static String MEMORY_MANAGER_MXBEAN_DOMAIN_TYPE = \"java.lang:type=MemoryManager\";","field_name":"MEMORY_MANAGER_MXBEAN_DOMAIN_TYPE","field_type":"java.lang.String","full_declaration":"public final static java.lang.String MEMORY_MANAGER_MXBEAN_DOMAIN_TYPE = \"java.lang:type=MemoryManager\"","id":5098},{"comment":"/**\r\n * The domain name and the type key property in\r\n * the <tt>ObjectName</tt> for a {@link MemoryPoolMXBean}.\r\n * The unique <tt>ObjectName</tt> for a <tt>MemoryPoolMXBean</tt>\r\n * can be formed by appending this string with\r\n * <tt>,name=</tt><i>pool's name</i>.\r\n */\r\npublic final static String MEMORY_POOL_MXBEAN_DOMAIN_TYPE = \"java.lang:type=MemoryPool\";","field_name":"MEMORY_POOL_MXBEAN_DOMAIN_TYPE","field_type":"java.lang.String","full_declaration":"public final static java.lang.String MEMORY_POOL_MXBEAN_DOMAIN_TYPE = \"java.lang:type=MemoryPool\"","id":5099},{"comment":"private static MBeanServer platformMBeanServer;","field_name":"platformMBeanServer","field_type":"javax.management.MBeanServer","full_declaration":"private static javax.management.MBeanServer platformMBeanServer","id":5100},{"comment":"private static final String NOTIF_EMITTER = \"javax.management.NotificationEmitter\";","field_name":"NOTIF_EMITTER","field_type":"java.lang.String","full_declaration":"private static final java.lang.String NOTIF_EMITTER = \"javax.management.NotificationEmitter\"","id":5101},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 1897496590799378737L","id":5102},{"comment":"private final String poolName;","field_name":"poolName","field_type":"java.lang.String","full_declaration":"private final java.lang.String poolName","id":5103},{"comment":"private final MemoryUsage usage;","field_name":"usage","field_type":"java.lang.management.MemoryUsage","full_declaration":"private final java.lang.management.MemoryUsage usage","id":5104},{"comment":"","field_name":"count","field_type":"long","full_declaration":"private final long count","id":5105},{"comment":"/**\r\n * Notification type denoting that\r\n * the memory usage of a memory pool has\r\n * reached or exceeded its\r\n * <a href=\"MemoryPoolMXBean.html#UsageThreshold\"> usage threshold</a> value.\r\n * This notification is emitted by {@link MemoryMXBean}.\r\n * Subsequent crossing of the usage threshold value does not cause\r\n * further notification until the memory usage has returned\r\n * to become less than the usage threshold value.\r\n * The value of this notification type is\r\n * <tt>java.management.memory.threshold.exceeded</tt>.\r\n */\r\npublic static final String MEMORY_THRESHOLD_EXCEEDED = \"java.management.memory.threshold.exceeded\";","field_name":"MEMORY_THRESHOLD_EXCEEDED","field_type":"java.lang.String","full_declaration":"public static final java.lang.String MEMORY_THRESHOLD_EXCEEDED = \"java.management.memory.threshold.exceeded\"","id":5106},{"comment":"/**\r\n * Notification type denoting that\r\n * the memory usage of a memory pool is greater than or equal to its\r\n * <a href=\"MemoryPoolMXBean.html#CollectionThreshold\">\r\n * collection usage threshold</a> after the Java virtual machine\r\n * has expended effort in recycling unused objects in that\r\n * memory pool.\r\n * This notification is emitted by {@link MemoryMXBean}.\r\n * The value of this notification type is\r\n * <tt>java.management.memory.collection.threshold.exceeded</tt>.\r\n */\r\npublic static final String MEMORY_COLLECTION_THRESHOLD_EXCEEDED = \"java.management.memory.collection.threshold.exceeded\";","field_name":"MEMORY_COLLECTION_THRESHOLD_EXCEEDED","field_type":"java.lang.String","full_declaration":"public static final java.lang.String MEMORY_COLLECTION_THRESHOLD_EXCEEDED = \"java.management.memory.collection.threshold.exceeded\"","id":5107},{"comment":"","field_name":"init","field_type":"long","full_declaration":"private final long init","id":5108},{"comment":"","field_name":"used","field_type":"long","full_declaration":"private final long used","id":5109},{"comment":"","field_name":"committed","field_type":"long","full_declaration":"private final long committed","id":5110},{"comment":"","field_name":"max","field_type":"long","full_declaration":"private final long max","id":5111},{"comment":"","field_name":"stackDepth","field_type":"int","full_declaration":"private int stackDepth","id":5112},{"comment":"private StackTraceElement stackFrame;","field_name":"stackFrame","field_type":"java.lang.StackTraceElement","full_declaration":"private java.lang.StackTraceElement stackFrame","id":5113},{"comment":"private String threadName;","field_name":"threadName","field_type":"java.lang.String","full_declaration":"private java.lang.String threadName","id":5114},{"comment":"","field_name":"threadId","field_type":"long","full_declaration":"private long threadId","id":5115},{"comment":"","field_name":"blockedTime","field_type":"long","full_declaration":"private long blockedTime","id":5116},{"comment":"","field_name":"blockedCount","field_type":"long","full_declaration":"private long blockedCount","id":5117},{"comment":"","field_name":"waitedTime","field_type":"long","full_declaration":"private long waitedTime","id":5118},{"comment":"","field_name":"waitedCount","field_type":"long","full_declaration":"private long waitedCount","id":5119},{"comment":"private LockInfo lock;","field_name":"lock","field_type":"java.lang.management.LockInfo","full_declaration":"private java.lang.management.LockInfo lock","id":5120},{"comment":"private String lockName;","field_name":"lockName","field_type":"java.lang.String","full_declaration":"private java.lang.String lockName","id":5121},{"comment":"","field_name":"lockOwnerId","field_type":"long","full_declaration":"private long lockOwnerId","id":5122},{"comment":"private String lockOwnerName;","field_name":"lockOwnerName","field_type":"java.lang.String","full_declaration":"private java.lang.String lockOwnerName","id":5123},{"comment":"","field_name":"inNative","field_type":"boolean","full_declaration":"private boolean inNative","id":5124},{"comment":"","field_name":"suspended","field_type":"boolean","full_declaration":"private boolean suspended","id":5125},{"comment":"private Thread.State threadState;","field_name":"threadState","field_type":"java.lang.Thread.State","full_declaration":"private java.lang.Thread.State threadState","id":5126},{"comment":"","field_name":"stackTrace","field_type":"StackTraceElement[]","full_declaration":"private StackTraceElement[] stackTrace","id":5127},{"comment":"","field_name":"lockedMonitors","field_type":"MonitorInfo[]","full_declaration":"private MonitorInfo[] lockedMonitors","id":5128},{"comment":"","field_name":"lockedSynchronizers","field_type":"LockInfo[]","full_declaration":"private LockInfo[] lockedSynchronizers","id":5129},{"comment":"","field_name":"EMPTY_MONITORS","field_type":"MonitorInfo[]","full_declaration":"private static MonitorInfo[] EMPTY_MONITORS = new MonitorInfo[0]","id":5130},{"comment":"","field_name":"EMPTY_SYNCS","field_type":"LockInfo[]","full_declaration":"private static LockInfo[] EMPTY_SYNCS = new LockInfo[0]","id":5131},{"comment":"","field_name":"MAX_FRAMES","field_type":"int","full_declaration":"private static final int MAX_FRAMES = 8","id":5132},{"comment":"","field_name":"NO_STACK_TRACE","field_type":"StackTraceElement[]","full_declaration":"private static final StackTraceElement[] NO_STACK_TRACE = new StackTraceElement[0]","id":5133},{"comment":"/**\r\n * The {@code double} value that is closer than any other to\r\n * <i>e</i>, the base of the natural logarithms.\r\n */\r\n","field_name":"E","field_type":"double","full_declaration":"public static final double E = 2.7182818284590452354","id":5134},{"comment":"/**\r\n * The {@code double} value that is closer than any other to\r\n * <i>pi</i>, the ratio of the circumference of a circle to its\r\n * diameter.\r\n */\r\n","field_name":"PI","field_type":"double","full_declaration":"public static final double PI = 3.14159265358979323846","id":5135},{"comment":"// Use raw bit-wise conversions on guaranteed non-NaN arguments.\r\n","field_name":"negativeZeroFloatBits","field_type":"long","full_declaration":"private static long negativeZeroFloatBits = Float.floatToRawIntBits(-0.0f)","id":5136},{"comment":"","field_name":"negativeZeroDoubleBits","field_type":"long","full_declaration":"private static long negativeZeroDoubleBits = Double.doubleToRawLongBits(-0.0d)","id":5137},{"comment":"// Constants used in scalb\r\n","field_name":"twoToTheDoubleScaleUp","field_type":"double","full_declaration":"static double twoToTheDoubleScaleUp = powerOfTwoD(512)","id":5138},{"comment":"","field_name":"twoToTheDoubleScaleDown","field_type":"double","full_declaration":"static double twoToTheDoubleScaleDown = powerOfTwoD(-512)","id":5139},{"comment":"static final Random randomNumberGenerator = new Random();","field_name":"randomNumberGenerator","field_type":"java.util.Random","full_declaration":"static final java.util.Random randomNumberGenerator = new Random()","id":5140},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -8960118058596991861L","id":5141},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 9095859863287012458L","id":5142},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -3456430195886129035L","id":5143},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -6143714805279938260L","id":5144},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -3765521442372831335L","id":5145},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 5034388446362600923L","id":5146},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 5162710183389028792L","id":5147},{"comment":"/**\r\n * use serialVersionUID from JDK 1.0.2 for interoperability\r\n */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -8742448824652078965L","id":5148},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"static final long serialVersionUID = -2848938806368998894L","id":5149},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 8228564086184010517L","id":5150},{"comment":"// The map of loaded system packages\r\nprivate static Map<String, Package> pkgs = new HashMap<>(31);","field_name":"pkgs","field_type":"java.util.Map","full_declaration":"private static java.util.Map pkgs = new HashMap<>(31)","id":5151},{"comment":"// Maps each directory or zip file name to its corresponding url\r\nprivate static Map<String, URL> urls = new HashMap<>(10);","field_name":"urls","field_type":"java.util.Map","full_declaration":"private static java.util.Map urls = new HashMap<>(10)","id":5152},{"comment":"// Maps each code source url for a jar file to its manifest\r\nprivate static Map<String, Manifest> mans = new HashMap<>(10);","field_name":"mans","field_type":"java.util.Map","full_declaration":"private static java.util.Map mans = new HashMap<>(10)","id":5153},{"comment":"/*\r\n     * Private storage for the package name and attributes.\r\n     */\r\nprivate final String pkgName;","field_name":"pkgName","field_type":"java.lang.String","full_declaration":"private final java.lang.String pkgName","id":5154},{"comment":"private final String specTitle;","field_name":"specTitle","field_type":"java.lang.String","full_declaration":"private final java.lang.String specTitle","id":5155},{"comment":"private final String specVersion;","field_name":"specVersion","field_type":"java.lang.String","full_declaration":"private final java.lang.String specVersion","id":5156},{"comment":"private final String specVendor;","field_name":"specVendor","field_type":"java.lang.String","full_declaration":"private final java.lang.String specVendor","id":5157},{"comment":"private final String implTitle;","field_name":"implTitle","field_type":"java.lang.String","full_declaration":"private final java.lang.String implTitle","id":5158},{"comment":"private final String implVersion;","field_name":"implVersion","field_type":"java.lang.String","full_declaration":"private final java.lang.String implVersion","id":5159},{"comment":"private final String implVendor;","field_name":"implVendor","field_type":"java.lang.String","full_declaration":"private final java.lang.String implVendor","id":5160},{"comment":"private final URL sealBase;","field_name":"sealBase","field_type":"java.net.URL","full_declaration":"private final java.net.URL sealBase","id":5161},{"comment":"private transient final ClassLoader loader;","field_name":"loader","field_type":"java.lang.ClassLoader","full_declaration":"private transient final java.lang.ClassLoader loader","id":5162},{"comment":"private transient Class<?> packageInfo;","field_name":"packageInfo","field_type":"java.lang.Class","full_declaration":"private transient java.lang.Class packageInfo","id":5163},{"comment":"private List<String> command;","field_name":"command","field_type":"java.util.List","full_declaration":"private java.util.List command","id":5164},{"comment":"private File directory;","field_name":"directory","field_type":"java.io.File","full_declaration":"private java.io.File directory","id":5165},{"comment":"private Map<String, String> environment;","field_name":"environment","field_type":"java.util.Map","full_declaration":"private java.util.Map environment","id":5166},{"comment":"","field_name":"redirectErrorStream","field_type":"boolean","full_declaration":"private boolean redirectErrorStream","id":5167},{"comment":"","field_name":"redirects","field_type":"Redirect[]","full_declaration":"private Redirect[] redirects","id":5168},{"comment":"static final NullInputStream INSTANCE = new NullInputStream();","field_name":"INSTANCE","field_type":"java.lang.ProcessBuilder.NullInputStream","full_declaration":"static final java.lang.ProcessBuilder.NullInputStream INSTANCE = new NullInputStream()","id":5169},{"comment":"static final NullOutputStream INSTANCE = new NullOutputStream();","field_name":"INSTANCE","field_type":"java.lang.ProcessBuilder.NullOutputStream","full_declaration":"static final java.lang.ProcessBuilder.NullOutputStream INSTANCE = new NullOutputStream()","id":5170},{"comment":"/**\r\n * Indicates that subprocess I/O will be connected to the\r\n * current Java process over a pipe.\r\n *\r\n * This is the default handling of subprocess standard I/O.\r\n *\r\n * <p>It will always be true that\r\n *  <pre> {@code\r\n * Redirect.PIPE.file() == null &&\r\n * Redirect.PIPE.type() == Redirect.Type.PIPE\r\n * }</pre>\r\n */\r\npublic static final Redirect PIPE = new Redirect() {\r\n\r\n    public Type type() {\r\n        return Type.PIPE;\r\n    }\r\n\r\n    public String toString() {\r\n        return type().toString();\r\n    }\r\n};","field_name":"PIPE","field_type":"java.lang.ProcessBuilder.Redirect","full_declaration":"public static final java.lang.ProcessBuilder.Redirect PIPE = new Redirect() {\r\n\r\n    public Type type() {\r\n        return Type.PIPE;\r\n    }\r\n\r\n    public String toString() {\r\n        return type().toString();\r\n    }\r\n}","id":5171},{"comment":"/**\r\n * Indicates that subprocess I/O source or destination will be the\r\n * same as those of the current process.  This is the normal\r\n * behavior of most operating system command interpreters (shells).\r\n *\r\n * <p>It will always be true that\r\n *  <pre> {@code\r\n * Redirect.INHERIT.file() == null &&\r\n * Redirect.INHERIT.type() == Redirect.Type.INHERIT\r\n * }</pre>\r\n */\r\npublic static final Redirect INHERIT = new Redirect() {\r\n\r\n    public Type type() {\r\n        return Type.INHERIT;\r\n    }\r\n\r\n    public String toString() {\r\n        return type().toString();\r\n    }\r\n};","field_name":"INHERIT","field_type":"java.lang.ProcessBuilder.Redirect","full_declaration":"public static final java.lang.ProcessBuilder.Redirect INHERIT = new Redirect() {\r\n\r\n    public Type type() {\r\n        return Type.INHERIT;\r\n    }\r\n\r\n    public String toString() {\r\n        return type().toString();\r\n    }\r\n}","id":5172},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -8017839552603542824L","id":5173},{"comment":"// Allow `=' as first char in name, e.g. =C:=C:\\DIR\r\n","field_name":"MIN_NAME_LENGTH","field_type":"int","full_declaration":"static final int MIN_NAME_LENGTH = 1","id":5174},{"comment":"private static final NameComparator nameComparator;","field_name":"nameComparator","field_type":"java.lang.ProcessEnvironment.NameComparator","full_declaration":"private static final java.lang.ProcessEnvironment.NameComparator nameComparator","id":5175},{"comment":"private static final EntryComparator entryComparator;","field_name":"entryComparator","field_type":"java.lang.ProcessEnvironment.EntryComparator","full_declaration":"private static final java.lang.ProcessEnvironment.EntryComparator entryComparator","id":5176},{"comment":"private static final ProcessEnvironment theEnvironment;","field_name":"theEnvironment","field_type":"java.lang.ProcessEnvironment","full_declaration":"private static final java.lang.ProcessEnvironment theEnvironment","id":5177},{"comment":"private static final Map<String, String> theUnmodifiableEnvironment;","field_name":"theUnmodifiableEnvironment","field_type":"java.util.Map","full_declaration":"private static final java.util.Map theUnmodifiableEnvironment","id":5178},{"comment":"private static final Map<String, String> theCaseInsensitiveEnvironment;","field_name":"theCaseInsensitiveEnvironment","field_type":"java.util.Map","full_declaration":"private static final java.util.Map theCaseInsensitiveEnvironment","id":5179},{"comment":"private final Map.Entry<String, String> e;","field_name":"e","field_type":"java.util.Map.Entry","full_declaration":"private final java.util.Map.Entry e","id":5180},{"comment":"private final Set<Map.Entry<String, String>> s;","field_name":"s","field_type":"java.util.Set","full_declaration":"private final java.util.Set s","id":5181},{"comment":"private final Collection<String> c;","field_name":"c","field_type":"java.util.Collection","full_declaration":"private final java.util.Collection c","id":5182},{"comment":"private final Set<String> s;","field_name":"s","field_type":"java.util.Set","full_declaration":"private final java.util.Set s","id":5183},{"comment":"","field_name":"fdAccess","field_type":"sun.misc.JavaIOFileDescriptorAccess","full_declaration":"private static final sun.misc.JavaIOFileDescriptorAccess fdAccess = sun.misc.SharedSecrets.getJavaIOFileDescriptorAccess()","id":5184},{"comment":"","field_name":"VERIFICATION_CMD_BAT","field_type":"int","full_declaration":"private static final int VERIFICATION_CMD_BAT = 0","id":5185},{"comment":"","field_name":"VERIFICATION_WIN32","field_type":"int","full_declaration":"private static final int VERIFICATION_WIN32 = 1","id":5186},{"comment":"","field_name":"VERIFICATION_LEGACY","field_type":"int","full_declaration":"private static final int VERIFICATION_LEGACY = 2","id":5187},{"comment":"","field_name":"ESCAPE_VERIFICATION","field_type":"char[][]","full_declaration":"private static final char[][] ESCAPE_VERIFICATION = { // We guarantee the only command file execution for implicit [cmd.exe] run.\r\n// http://technet.microsoft.com/en-us/library/bb490954.aspx\r\n{ ' ', '\\t', '<', '>', '&', '|', '^' }, { ' ', '\\t', '<', '>' }, { ' ', '\\t' } }","id":5188},{"comment":"","field_name":"handle","field_type":"long","full_declaration":"private long handle = 0","id":5189},{"comment":"private OutputStream stdin_stream;","field_name":"stdin_stream","field_type":"java.io.OutputStream","full_declaration":"private java.io.OutputStream stdin_stream","id":5190},{"comment":"private InputStream stdout_stream;","field_name":"stdout_stream","field_type":"java.io.InputStream","full_declaration":"private java.io.InputStream stdout_stream","id":5191},{"comment":"private InputStream stderr_stream;","field_name":"stderr_stream","field_type":"java.io.InputStream","full_declaration":"private java.io.InputStream stderr_stream","id":5192},{"comment":"","field_name":"STILL_ACTIVE","field_type":"int","full_declaration":"private static final int STILL_ACTIVE = getStillActive()","id":5193},{"comment":"// Escape-support version:\r\n// \"(\\\")((?:\\\\\\\\\\\\1|.)+?)\\\\1|([^\\\\s\\\"]+)\";\r\nprivate static final Pattern PATTERN = Pattern.compile(\"[^\\\\s\\\"]+|\\\"[^\\\"]*\\\"\");","field_name":"PATTERN","field_type":"java.util.regex.Pattern","full_declaration":"private static final java.util.regex.Pattern PATTERN = Pattern.compile(\"[^\\\\s\\\"]+|\\\"[^\\\"]*\\\"\")","id":5194},{"comment":"/* Package-private; must be in\r\n                                                          same package as the Reference\r\n                                                          class */\r\nprivate static ReferenceQueue<Object> queue = new ReferenceQueue<>();","field_name":"queue","field_type":"java.lang.ref.ReferenceQueue","full_declaration":"private static java.lang.ref.ReferenceQueue queue = new ReferenceQueue<>()","id":5195},{"comment":"private static Finalizer unfinalized = null;","field_name":"unfinalized","field_type":"java.lang.ref.Finalizer","full_declaration":"private static java.lang.ref.Finalizer unfinalized = null","id":5196},{"comment":"private static final Object lock = new Object();","field_name":"lock","field_type":"java.lang.Object","full_declaration":"private static final java.lang.Object lock = new Object()","id":5197},{"comment":"private Finalizer next = null, prev = null;","field_name":"next","field_type":"java.lang.ref.Finalizer","full_declaration":"private java.lang.ref.Finalizer next = null","id":5198},{"comment":"private Finalizer next = null, prev = null;","field_name":"prev","field_type":"java.lang.ref.Finalizer","full_declaration":"private java.lang.ref.Finalizer next = nulljava.lang.ref.Finalizer prev = null","id":5199},{"comment":"","field_name":"running","field_type":"boolean","full_declaration":"private volatile boolean running","id":5200},{"comment":"","field_name":"instanceCount","field_type":"int","full_declaration":"private int instanceCount","id":5201},{"comment":"private final String className;","field_name":"className","field_type":"java.lang.String","full_declaration":"private final java.lang.String className","id":5202},{"comment":"/* A Reference instance is in one of four possible internal states:\r\n     *\r\n     *     Active: Subject to special treatment by the garbage collector.  Some\r\n     *     time after the collector detects that the reachability of the\r\n     *     referent has changed to the appropriate state, it changes the\r\n     *     instance's state to either Pending or Inactive, depending upon\r\n     *     whether or not the instance was registered with a queue when it was\r\n     *     created.  In the former case it also adds the instance to the\r\n     *     pending-Reference list.  Newly-created instances are Active.\r\n     *\r\n     *     Pending: An element of the pending-Reference list, waiting to be\r\n     *     enqueued by the Reference-handler thread.  Unregistered instances\r\n     *     are never in this state.\r\n     *\r\n     *     Enqueued: An element of the queue with which the instance was\r\n     *     registered when it was created.  When an instance is removed from\r\n     *     its ReferenceQueue, it is made Inactive.  Unregistered instances are\r\n     *     never in this state.\r\n     *\r\n     *     Inactive: Nothing more to do.  Once an instance becomes Inactive its\r\n     *     state will never change again.\r\n     *\r\n     * The state is encoded in the queue and next fields as follows:\r\n     *\r\n     *     Active: queue = ReferenceQueue with which instance is registered, or\r\n     *     ReferenceQueue.NULL if it was not registered with a queue; next =\r\n     *     null.\r\n     *\r\n     *     Pending: queue = ReferenceQueue with which instance is registered;\r\n     *     next = this\r\n     *\r\n     *     Enqueued: queue = ReferenceQueue.ENQUEUED; next = Following instance\r\n     *     in queue, or this if at end of list.\r\n     *\r\n     *     Inactive: queue = ReferenceQueue.NULL; next = this.\r\n     *\r\n     * With this scheme the collector need only examine the next field in order\r\n     * to determine whether a Reference instance requires special treatment: If\r\n     * the next field is null then the instance is active; if it is non-null,\r\n     * then the collector should treat the instance normally.\r\n     *\r\n     * To ensure that a concurrent collector can discover active Reference\r\n     * objects without interfering with application threads that may apply\r\n     * the enqueue() method to those objects, collectors should link\r\n     * discovered objects through the discovered field. The discovered\r\n     * field is also used for linking Reference objects in the pending list.\r\n     */\r\n","field_name":"referent","field_type":"T","full_declaration":"private T referent","id":5203},{"comment":"/* Treated specially by GC */\r\nvolatile ReferenceQueue<? super T> queue;","field_name":"queue","field_type":"java.lang.ref.ReferenceQueue","full_declaration":"volatile java.lang.ref.ReferenceQueue queue","id":5204},{"comment":"/* When active:   NULL\r\n     *     pending:   this\r\n     *    Enqueued:   next reference in queue (or this if last)\r\n     *    Inactive:   this\r\n     */\r\n@SuppressWarnings(\"rawtypes\")\r\nvolatile Reference next;","field_name":"next","field_type":"java.lang.ref.Reference","full_declaration":"volatile java.lang.ref.Reference next","id":5205},{"comment":"/* When active:   next element in a discovered reference list maintained by GC (or this if last)\r\n     *     pending:   next element in the pending list (or null if last)\r\n     *   otherwise:   NULL\r\n     */\r\ntransient private Reference<T> discovered;","field_name":"discovered","field_type":"java.lang.ref.Reference","full_declaration":"transient private java.lang.ref.Reference discovered","id":5206},{"comment":"private static Lock lock = new Lock();","field_name":"lock","field_type":"java.lang.ref.Reference.Lock","full_declaration":"private static java.lang.ref.Reference.Lock lock = new Lock()","id":5207},{"comment":"/* List of References waiting to be enqueued.  The collector adds\r\n     * References to this list, while the Reference-handler thread removes\r\n     * them.  This list is protected by the above lock object. The\r\n     * list uses the discovered field to link its elements.\r\n     */\r\nprivate static Reference<Object> pending = null;","field_name":"pending","field_type":"java.lang.ref.Reference","full_declaration":"private static java.lang.ref.Reference pending = null","id":5208},{"comment":"static ReferenceQueue<Object> NULL = new Null<>();","field_name":"NULL","field_type":"java.lang.ref.ReferenceQueue","full_declaration":"static java.lang.ref.ReferenceQueue NULL = new Null<>()","id":5209},{"comment":"static ReferenceQueue<Object> ENQUEUED = new Null<>();","field_name":"ENQUEUED","field_type":"java.lang.ref.ReferenceQueue","full_declaration":"static java.lang.ref.ReferenceQueue ENQUEUED = new Null<>()","id":5210},{"comment":"private Lock lock = new Lock();","field_name":"lock","field_type":"java.lang.ref.ReferenceQueue.Lock","full_declaration":"private java.lang.ref.ReferenceQueue.Lock lock = new Lock()","id":5211},{"comment":"private volatile Reference<? extends T> head = null;","field_name":"head","field_type":"java.lang.ref.Reference","full_declaration":"private volatile java.lang.ref.Reference head = null","id":5212},{"comment":"","field_name":"queueLength","field_type":"long","full_declaration":"private long queueLength = 0","id":5213},{"comment":"/**\r\n * Timestamp clock, updated by the garbage collector\r\n */\r\n","field_name":"clock","field_type":"long","full_declaration":"static private long clock","id":5214},{"comment":"/**\r\n * Timestamp updated by each invocation of the get method.  The VM may use\r\n * this field when selecting soft references to be cleared, but it is not\r\n * required to do so.\r\n */\r\n","field_name":"timestamp","field_type":"long","full_declaration":"private long timestamp","id":5215},{"comment":"/**\r\n * The Permission object that is used to check whether a client\r\n * has sufficient privilege to defeat Java language access\r\n * control checks.\r\n */\r\n","field_name":"ACCESS_PERMISSION","field_type":"java.security.Permission","full_declaration":"static final private java.security.Permission ACCESS_PERMISSION = new ReflectPermission(\"suppressAccessChecks\")","id":5216},{"comment":"// Indicates whether language-level access checks are overridden\r\n// by this object. Initializes to \"false\". This field is used by\r\n// Field, Method, and Constructor.\r\n// \r\n// NOTE: for security purposes, this field must not be visible\r\n// outside this package.\r\n","field_name":"override","field_type":"boolean","full_declaration":"boolean override","id":5217},{"comment":"// Reflection factory used by subclasses for creating field,\r\n// method, and constructor accessors. Note that this is called\r\n// very early in the bootstrapping process.\r\nstatic final ReflectionFactory reflectionFactory = AccessController.doPrivileged(new sun.reflect.ReflectionFactory.GetReflectionFactoryAction());","field_name":"reflectionFactory","field_type":"sun.reflect.ReflectionFactory","full_declaration":"static final sun.reflect.ReflectionFactory reflectionFactory = AccessController.doPrivileged(new sun.reflect.ReflectionFactory.GetReflectionFactoryAction())","id":5218},{"comment":"// Shared access checking logic.\r\n// For non-public members or members in package-private classes,\r\n// it is necessary to perform somewhat expensive security checks.\r\n// If the security check succeeds for a given class, it will\r\n// always succeed (it is not affected by the granting or revoking\r\n// of permissions); we speed up the check in the common case by\r\n// remembering the last Class for which the check succeeded.\r\n// \r\n// The simple security check for Constructor is to see if\r\n// the caller has already been seen, verified, and cached.\r\n// (See also Class.newInstance(), which uses a similar method.)\r\n// \r\n// A more complicated security check cache is needed for Method and Field\r\n// The cache can be either null (empty cache), a 2-array of {caller,target},\r\n// or a caller (with target implicitly equal to this.clazz).\r\n// In the 2-array case, the target is always different from the clazz.\r\nvolatile Object securityCheckCache;","field_name":"securityCheckCache","field_type":"java.lang.Object","full_declaration":"volatile java.lang.Object securityCheckCache","id":5219},{"comment":"private Class<T> clazz;","field_name":"clazz","field_type":"java.lang.Class","full_declaration":"private java.lang.Class clazz","id":5220},{"comment":"","field_name":"slot","field_type":"int","full_declaration":"private int slot","id":5221},{"comment":"","field_name":"parameterTypes","field_type":"Class<?>[]","full_declaration":"private Class<?>[] parameterTypes","id":5222},{"comment":"","field_name":"exceptionTypes","field_type":"Class<?>[]","full_declaration":"private Class<?>[] exceptionTypes","id":5223},{"comment":"","field_name":"modifiers","field_type":"int","full_declaration":"private int modifiers","id":5224},{"comment":"// Generics and annotations support\r\nprivate transient String signature;","field_name":"signature","field_type":"java.lang.String","full_declaration":"private transient java.lang.String signature","id":5225},{"comment":"// generic info repository; lazily initialized\r\nprivate transient ConstructorRepository genericInfo;","field_name":"genericInfo","field_type":"sun.reflect.generics.repository.ConstructorRepository","full_declaration":"private transient sun.reflect.generics.repository.ConstructorRepository genericInfo","id":5226},{"comment":"","field_name":"annotations","field_type":"byte[]","full_declaration":"private byte[] annotations","id":5227},{"comment":"","field_name":"parameterAnnotations","field_type":"byte[]","full_declaration":"private byte[] parameterAnnotations","id":5228},{"comment":"private volatile ConstructorAccessor constructorAccessor;","field_name":"constructorAccessor","field_type":"sun.reflect.ConstructorAccessor","full_declaration":"private volatile sun.reflect.ConstructorAccessor constructorAccessor","id":5229},{"comment":"// For sharing of ConstructorAccessors. This branching structure\r\n// is currently only two levels deep (i.e., one root Constructor\r\n// and potentially many Constructor objects pointing to it.)\r\n// \r\n// If this branching structure would ever contain cycles, deadlocks can\r\n// occur in annotation code.\r\nprivate Constructor<T> root;","field_name":"root","field_type":"java.lang.reflect.Constructor","full_declaration":"private java.lang.reflect.Constructor root","id":5230},{"comment":"","field_name":"hasRealParameterData","field_type":"boolean","full_declaration":"private transient volatile boolean hasRealParameterData","id":5231},{"comment":"","field_name":"parameters","field_type":"Parameter[]","full_declaration":"private transient volatile Parameter[] parameters","id":5232},{"comment":"private transient Map<Class<? extends Annotation>, Annotation> declaredAnnotations;","field_name":"declaredAnnotations","field_type":"java.util.Map","full_declaration":"private transient java.util.Map declaredAnnotations","id":5233},{"comment":"private Class<?> clazz;","field_name":"clazz","field_type":"java.lang.Class","full_declaration":"private java.lang.Class clazz","id":5234},{"comment":"","field_name":"slot","field_type":"int","full_declaration":"private int slot","id":5235},{"comment":"// This is guaranteed to be interned by the VM in the 1.4\r\n// reflection implementation\r\nprivate String name;","field_name":"name","field_type":"java.lang.String","full_declaration":"private java.lang.String name","id":5236},{"comment":"private Class<?> type;","field_name":"type","field_type":"java.lang.Class","full_declaration":"private java.lang.Class type","id":5237},{"comment":"","field_name":"modifiers","field_type":"int","full_declaration":"private int modifiers","id":5238},{"comment":"// Generics and annotations support\r\nprivate transient String signature;","field_name":"signature","field_type":"java.lang.String","full_declaration":"private transient java.lang.String signature","id":5239},{"comment":"// generic info repository; lazily initialized\r\nprivate transient FieldRepository genericInfo;","field_name":"genericInfo","field_type":"sun.reflect.generics.repository.FieldRepository","full_declaration":"private transient sun.reflect.generics.repository.FieldRepository genericInfo","id":5240},{"comment":"","field_name":"annotations","field_type":"byte[]","full_declaration":"private byte[] annotations","id":5241},{"comment":"// Cached field accessor created without override\r\nprivate FieldAccessor fieldAccessor;","field_name":"fieldAccessor","field_type":"sun.reflect.FieldAccessor","full_declaration":"private sun.reflect.FieldAccessor fieldAccessor","id":5242},{"comment":"// Cached field accessor created with override\r\nprivate FieldAccessor overrideFieldAccessor;","field_name":"overrideFieldAccessor","field_type":"sun.reflect.FieldAccessor","full_declaration":"private sun.reflect.FieldAccessor overrideFieldAccessor","id":5243},{"comment":"// For sharing of FieldAccessors. This branching structure is\r\n// currently only two levels deep (i.e., one root Field and\r\n// potentially many Field objects pointing to it.)\r\n// \r\n// If this branching structure would ever contain cycles, deadlocks can\r\n// occur in annotation code.\r\nprivate Field root;","field_name":"root","field_type":"java.lang.reflect.Field","full_declaration":"private java.lang.reflect.Field root","id":5244},{"comment":"private transient Map<Class<? extends Annotation>, Annotation> declaredAnnotations;","field_name":"declaredAnnotations","field_type":"java.util.Map","full_declaration":"private transient java.util.Map declaredAnnotations","id":5245},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 6709919147137911034L","id":5246},{"comment":"/**\r\n * Use serialVersionUID from JDK 1.1.X for interoperability\r\n */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 4085088731926701167L","id":5247},{"comment":"/**\r\n * This field holds the target if the\r\n * InvocationTargetException(Throwable target) constructor was\r\n * used to instantiate the object\r\n *\r\n * @serial\r\n */\r\nprivate Throwable target;","field_name":"target","field_type":"java.lang.Throwable","full_declaration":"private java.lang.Throwable target","id":5248},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -5696557788586220964L","id":5249},{"comment":"/**\r\n * Version for serialization.\r\n */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 20130919L","id":5250},{"comment":"/**\r\n * Identifies the set of all public members of a class or interface,\r\n * including inherited members.\r\n */\r\n","field_name":"PUBLIC","field_type":"int","full_declaration":"public static final int PUBLIC = 0","id":5251},{"comment":"/**\r\n * Identifies the set of declared members of a class or interface.\r\n * Inherited members are not included.\r\n */\r\n","field_name":"DECLARED","field_type":"int","full_declaration":"public static final int DECLARED = 1","id":5252},{"comment":"private Class<?> clazz;","field_name":"clazz","field_type":"java.lang.Class","full_declaration":"private java.lang.Class clazz","id":5253},{"comment":"","field_name":"slot","field_type":"int","full_declaration":"private int slot","id":5254},{"comment":"// This is guaranteed to be interned by the VM in the 1.4\r\n// reflection implementation\r\nprivate String name;","field_name":"name","field_type":"java.lang.String","full_declaration":"private java.lang.String name","id":5255},{"comment":"private Class<?> returnType;","field_name":"returnType","field_type":"java.lang.Class","full_declaration":"private java.lang.Class returnType","id":5256},{"comment":"","field_name":"parameterTypes","field_type":"Class<?>[]","full_declaration":"private Class<?>[] parameterTypes","id":5257},{"comment":"","field_name":"exceptionTypes","field_type":"Class<?>[]","full_declaration":"private Class<?>[] exceptionTypes","id":5258},{"comment":"","field_name":"modifiers","field_type":"int","full_declaration":"private int modifiers","id":5259},{"comment":"// Generics and annotations support\r\nprivate transient String signature;","field_name":"signature","field_type":"java.lang.String","full_declaration":"private transient java.lang.String signature","id":5260},{"comment":"// generic info repository; lazily initialized\r\nprivate transient MethodRepository genericInfo;","field_name":"genericInfo","field_type":"sun.reflect.generics.repository.MethodRepository","full_declaration":"private transient sun.reflect.generics.repository.MethodRepository genericInfo","id":5261},{"comment":"","field_name":"annotations","field_type":"byte[]","full_declaration":"private byte[] annotations","id":5262},{"comment":"","field_name":"parameterAnnotations","field_type":"byte[]","full_declaration":"private byte[] parameterAnnotations","id":5263},{"comment":"","field_name":"annotationDefault","field_type":"byte[]","full_declaration":"private byte[] annotationDefault","id":5264},{"comment":"private volatile MethodAccessor methodAccessor;","field_name":"methodAccessor","field_type":"sun.reflect.MethodAccessor","full_declaration":"private volatile sun.reflect.MethodAccessor methodAccessor","id":5265},{"comment":"// For sharing of MethodAccessors. This branching structure is\r\n// currently only two levels deep (i.e., one root Method and\r\n// potentially many Method objects pointing to it.)\r\n// \r\n// If this branching structure would ever contain cycles, deadlocks can\r\n// occur in annotation code.\r\nprivate Method root;","field_name":"root","field_type":"java.lang.reflect.Method","full_declaration":"private java.lang.reflect.Method root","id":5266},{"comment":"/*\r\n     * Access modifier flag constants from tables 4.1, 4.4, 4.5, and 4.7 of\r\n     * <cite>The Java&trade; Virtual Machine Specification</cite>\r\n     */\r\n/**\r\n * The {@code int} value representing the {@code public}\r\n * modifier.\r\n */\r\n","field_name":"PUBLIC","field_type":"int","full_declaration":"public static final int PUBLIC = 0x00000001","id":5267},{"comment":"/**\r\n * The {@code int} value representing the {@code private}\r\n * modifier.\r\n */\r\n","field_name":"PRIVATE","field_type":"int","full_declaration":"public static final int PRIVATE = 0x00000002","id":5268},{"comment":"/**\r\n * The {@code int} value representing the {@code protected}\r\n * modifier.\r\n */\r\n","field_name":"PROTECTED","field_type":"int","full_declaration":"public static final int PROTECTED = 0x00000004","id":5269},{"comment":"/**\r\n * The {@code int} value representing the {@code static}\r\n * modifier.\r\n */\r\n","field_name":"STATIC","field_type":"int","full_declaration":"public static final int STATIC = 0x00000008","id":5270},{"comment":"/**\r\n * The {@code int} value representing the {@code final}\r\n * modifier.\r\n */\r\n","field_name":"FINAL","field_type":"int","full_declaration":"public static final int FINAL = 0x00000010","id":5271},{"comment":"/**\r\n * The {@code int} value representing the {@code synchronized}\r\n * modifier.\r\n */\r\n","field_name":"SYNCHRONIZED","field_type":"int","full_declaration":"public static final int SYNCHRONIZED = 0x00000020","id":5272},{"comment":"/**\r\n * The {@code int} value representing the {@code volatile}\r\n * modifier.\r\n */\r\n","field_name":"VOLATILE","field_type":"int","full_declaration":"public static final int VOLATILE = 0x00000040","id":5273},{"comment":"/**\r\n * The {@code int} value representing the {@code transient}\r\n * modifier.\r\n */\r\n","field_name":"TRANSIENT","field_type":"int","full_declaration":"public static final int TRANSIENT = 0x00000080","id":5274},{"comment":"/**\r\n * The {@code int} value representing the {@code native}\r\n * modifier.\r\n */\r\n","field_name":"NATIVE","field_type":"int","full_declaration":"public static final int NATIVE = 0x00000100","id":5275},{"comment":"/**\r\n * The {@code int} value representing the {@code interface}\r\n * modifier.\r\n */\r\n","field_name":"INTERFACE","field_type":"int","full_declaration":"public static final int INTERFACE = 0x00000200","id":5276},{"comment":"/**\r\n * The {@code int} value representing the {@code abstract}\r\n * modifier.\r\n */\r\n","field_name":"ABSTRACT","field_type":"int","full_declaration":"public static final int ABSTRACT = 0x00000400","id":5277},{"comment":"/**\r\n * The {@code int} value representing the {@code strictfp}\r\n * modifier.\r\n */\r\n","field_name":"STRICT","field_type":"int","full_declaration":"public static final int STRICT = 0x00000800","id":5278},{"comment":"// Bits not (yet) exposed in the public API either because they\r\n// have different meanings for fields and methods and there is no\r\n// way to distinguish between the two in this class, or because\r\n// they are not Java programming language keywords\r\n","field_name":"BRIDGE","field_type":"int","full_declaration":"static final int BRIDGE = 0x00000040","id":5279},{"comment":"","field_name":"VARARGS","field_type":"int","full_declaration":"static final int VARARGS = 0x00000080","id":5280},{"comment":"","field_name":"SYNTHETIC","field_type":"int","full_declaration":"static final int SYNTHETIC = 0x00001000","id":5281},{"comment":"","field_name":"ANNOTATION","field_type":"int","full_declaration":"static final int ANNOTATION = 0x00002000","id":5282},{"comment":"","field_name":"ENUM","field_type":"int","full_declaration":"static final int ENUM = 0x00004000","id":5283},{"comment":"","field_name":"MANDATED","field_type":"int","full_declaration":"static final int MANDATED = 0x00008000","id":5284},{"comment":"// Note on the FOO_MODIFIERS fields and fooModifiers() methods:\r\n// the sets of modifiers are not guaranteed to be constants\r\n// across time and Java SE releases. Therefore, it would not be\r\n// appropriate to expose an external interface to this information\r\n// that would allow the values to be treated as Java-level\r\n// constants since the values could be constant folded and updates\r\n// to the sets of modifiers missed. Thus, the fooModifiers()\r\n// methods return an unchanging values for a given release, but a\r\n// value that can potentially change over time.\r\n/**\r\n * The Java source modifiers that can be applied to a class.\r\n * @jls 8.1.1 Class Modifiers\r\n */\r\n","field_name":"CLASS_MODIFIERS","field_type":"int","full_declaration":"private static final int CLASS_MODIFIERS = Modifier.PUBLIC | Modifier.PROTECTED | Modifier.PRIVATE | Modifier.ABSTRACT | Modifier.STATIC | Modifier.FINAL | Modifier.STRICT","id":5285},{"comment":"/**\r\n * The Java source modifiers that can be applied to an interface.\r\n * @jls 9.1.1 Interface Modifiers\r\n */\r\n","field_name":"INTERFACE_MODIFIERS","field_type":"int","full_declaration":"private static final int INTERFACE_MODIFIERS = Modifier.PUBLIC | Modifier.PROTECTED | Modifier.PRIVATE | Modifier.ABSTRACT | Modifier.STATIC | Modifier.STRICT","id":5286},{"comment":"/**\r\n * The Java source modifiers that can be applied to a constructor.\r\n * @jls 8.8.3 Constructor Modifiers\r\n */\r\n","field_name":"CONSTRUCTOR_MODIFIERS","field_type":"int","full_declaration":"private static final int CONSTRUCTOR_MODIFIERS = Modifier.PUBLIC | Modifier.PROTECTED | Modifier.PRIVATE","id":5287},{"comment":"/**\r\n * The Java source modifiers that can be applied to a method.\r\n * @jls8.4.3  Method Modifiers\r\n */\r\n","field_name":"METHOD_MODIFIERS","field_type":"int","full_declaration":"private static final int METHOD_MODIFIERS = Modifier.PUBLIC | Modifier.PROTECTED | Modifier.PRIVATE | Modifier.ABSTRACT | Modifier.STATIC | Modifier.FINAL | Modifier.SYNCHRONIZED | Modifier.NATIVE | Modifier.STRICT","id":5288},{"comment":"/**\r\n * The Java source modifiers that can be applied to a field.\r\n * @jls 8.3.1  Field Modifiers\r\n */\r\n","field_name":"FIELD_MODIFIERS","field_type":"int","full_declaration":"private static final int FIELD_MODIFIERS = Modifier.PUBLIC | Modifier.PROTECTED | Modifier.PRIVATE | Modifier.STATIC | Modifier.FINAL | Modifier.TRANSIENT | Modifier.VOLATILE","id":5289},{"comment":"/**\r\n * The Java source modifiers that can be applied to a method or constructor parameter.\r\n * @jls 8.4.1 Formal Parameters\r\n */\r\n","field_name":"PARAMETER_MODIFIERS","field_type":"int","full_declaration":"private static final int PARAMETER_MODIFIERS = Modifier.FINAL","id":5290},{"comment":"/**\r\n */\r\n","field_name":"ACCESS_MODIFIERS","field_type":"int","full_declaration":"static final int ACCESS_MODIFIERS = Modifier.PUBLIC | Modifier.PROTECTED | Modifier.PRIVATE","id":5291},{"comment":"private final String name;","field_name":"name","field_type":"java.lang.String","full_declaration":"private final java.lang.String name","id":5292},{"comment":"","field_name":"modifiers","field_type":"int","full_declaration":"private final int modifiers","id":5293},{"comment":"private final Executable executable;","field_name":"executable","field_type":"java.lang.reflect.Executable","full_declaration":"private final java.lang.reflect.Executable executable","id":5294},{"comment":"","field_name":"index","field_type":"int","full_declaration":"private final int index","id":5295},{"comment":"private transient volatile Type parameterTypeCache = null;","field_name":"parameterTypeCache","field_type":"java.lang.reflect.Type","full_declaration":"private transient volatile java.lang.reflect.Type parameterTypeCache = null","id":5296},{"comment":"private transient volatile Class<?> parameterClassCache = null;","field_name":"parameterClassCache","field_type":"java.lang.Class","full_declaration":"private transient volatile java.lang.Class parameterClassCache = null","id":5297},{"comment":"private transient Map<Class<? extends Annotation>, Annotation> declaredAnnotations;","field_name":"declaredAnnotations","field_type":"java.util.Map","full_declaration":"private transient java.util.Map declaredAnnotations","id":5298},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -2222568056686623797L","id":5299},{"comment":"/**\r\n * parameter types of a proxy class constructor\r\n */\r\n","field_name":"constructorParams","field_type":"Class<?>[]","full_declaration":"private static final Class<?>[] constructorParams = { InvocationHandler.class }","id":5300},{"comment":"/**\r\n * a cache of proxy classes\r\n */\r\nprivate static final WeakCache<ClassLoader, Class<?>[], Class<?>> proxyClassCache = new WeakCache<>(new KeyFactory(), new ProxyClassFactory());","field_name":"proxyClassCache","field_type":"java.lang.reflect.WeakCache","full_declaration":"private static final java.lang.reflect.WeakCache proxyClassCache = new WeakCache<>(new KeyFactory(), new ProxyClassFactory())","id":5301},{"comment":"/**\r\n * the invocation handler for this proxy instance.\r\n * @serial\r\n */\r\nprotected InvocationHandler h;","field_name":"h","field_type":"java.lang.reflect.InvocationHandler","full_declaration":"protected java.lang.reflect.InvocationHandler h","id":5302},{"comment":"/*\r\n     * a key used for proxy class with 0 implemented interfaces\r\n     */\r\nprivate static final Object key0 = new Object();","field_name":"key0","field_type":"java.lang.Object","full_declaration":"private static final java.lang.Object key0 = new Object()","id":5303},{"comment":"","field_name":"hash","field_type":"int","full_declaration":"private final int hash","id":5304},{"comment":"","field_name":"hash","field_type":"int","full_declaration":"private final int hash","id":5305},{"comment":"private final WeakReference<Class<?>> ref2;","field_name":"ref2","field_type":"java.lang.ref.WeakReference","full_declaration":"private final java.lang.ref.WeakReference ref2","id":5306},{"comment":"","field_name":"hash","field_type":"int","full_declaration":"private final int hash","id":5307},{"comment":"","field_name":"refs","field_type":"WeakReference<Class<?>>[]","full_declaration":"private final WeakReference<Class<?>>[] refs","id":5308},{"comment":"// prefix for all proxy class names\r\nprivate static final String proxyClassNamePrefix = \"$Proxy\";","field_name":"proxyClassNamePrefix","field_type":"java.lang.String","full_declaration":"private static final java.lang.String proxyClassNamePrefix = \"$Proxy\"","id":5309},{"comment":"// next number to use for generation of unique proxy class names\r\nprivate static final AtomicLong nextUniqueNumber = new AtomicLong();","field_name":"nextUniqueNumber","field_type":"java.util.concurrent.atomic.AtomicLong","full_declaration":"private static final java.util.concurrent.atomic.AtomicLong nextUniqueNumber = new AtomicLong()","id":5310},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 7412737110241507485L","id":5311},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"static final long serialVersionUID = 330127114055056639L","id":5312},{"comment":"/**\r\n * the undeclared checked exception that was thrown\r\n * @serial\r\n */\r\nprivate Throwable undeclaredThrowable;","field_name":"undeclaredThrowable","field_type":"java.lang.Throwable","full_declaration":"private java.lang.Throwable undeclaredThrowable","id":5313},{"comment":"private final ReferenceQueue<K> refQueue = new ReferenceQueue<>();","field_name":"refQueue","field_type":"java.lang.ref.ReferenceQueue","full_declaration":"private final java.lang.ref.ReferenceQueue refQueue = new ReferenceQueue<>()","id":5314},{"comment":"// the key type is Object for supporting null key\r\nprivate final ConcurrentMap<Object, ConcurrentMap<Object, Supplier<V>>> map = new ConcurrentHashMap<>();","field_name":"map","field_type":"java.util.concurrent.ConcurrentMap","full_declaration":"private final java.util.concurrent.ConcurrentMap map = new ConcurrentHashMap<>()","id":5315},{"comment":"private final ConcurrentMap<Supplier<V>, Boolean> reverseMap = new ConcurrentHashMap<>();","field_name":"reverseMap","field_type":"java.util.concurrent.ConcurrentMap","full_declaration":"private final java.util.concurrent.ConcurrentMap reverseMap = new ConcurrentHashMap<>()","id":5316},{"comment":"private final BiFunction<K, P, ?> subKeyFactory;","field_name":"subKeyFactory","field_type":"java.util.function.BiFunction","full_declaration":"private final java.util.function.BiFunction subKeyFactory","id":5317},{"comment":"private final BiFunction<K, P, V> valueFactory;","field_name":"valueFactory","field_type":"java.util.function.BiFunction","full_declaration":"private final java.util.function.BiFunction valueFactory","id":5318},{"comment":"","field_name":"key","field_type":"K","full_declaration":"private final K key","id":5319},{"comment":"","field_name":"parameter","field_type":"P","full_declaration":"private final P parameter","id":5320},{"comment":"private final Object subKey;","field_name":"subKey","field_type":"java.lang.Object","full_declaration":"private final java.lang.Object subKey","id":5321},{"comment":"private final ConcurrentMap<Object, Supplier<V>> valuesMap;","field_name":"valuesMap","field_type":"java.util.concurrent.ConcurrentMap","full_declaration":"private final java.util.concurrent.ConcurrentMap valuesMap","id":5322},{"comment":"","field_name":"value","field_type":"V","full_declaration":"private final V value","id":5323},{"comment":"","field_name":"hash","field_type":"int","full_declaration":"private final int hash","id":5324},{"comment":"// a replacement for null keys\r\nprivate static final Object NULL_KEY = new Object();","field_name":"NULL_KEY","field_type":"java.lang.Object","full_declaration":"private static final java.lang.Object NULL_KEY = new Object()","id":5325},{"comment":"","field_name":"hash","field_type":"int","full_declaration":"private final int hash","id":5326},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"static final long serialVersionUID = 123456789L","id":5327},{"comment":"private static Runtime currentRuntime = new Runtime();","field_name":"currentRuntime","field_type":"java.lang.Runtime","full_declaration":"private static java.lang.Runtime currentRuntime = new Runtime()","id":5328},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"static final long serialVersionUID = -7034897190745766939L","id":5329},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 7399184964622342223L","id":5330},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 6878364983674394167L","id":5331},{"comment":"/**\r\n * This field is <code>true</code> if there is a security check in\r\n * progress; <code>false</code> otherwise.\r\n *\r\n * @deprecated This type of security checking is not recommended.\r\n *  It is recommended that the <code>checkPermission</code>\r\n *  call be used instead.\r\n */\r\n@Deprecated\r\n","field_name":"inCheck","field_type":"boolean","full_declaration":"protected boolean inCheck","id":5332},{"comment":"/*\r\n     * Have we been initialized. Effective against finalizer attacks.\r\n     */\r\n","field_name":"initialized","field_type":"boolean","full_declaration":"private boolean initialized = false","id":5333},{"comment":"/**\r\n * reference to the root thread group, used for the checkAccess\r\n * methods.\r\n */\r\nprivate static ThreadGroup rootGroup = getRootGroup();","field_name":"rootGroup","field_type":"java.lang.ThreadGroup","full_declaration":"private static java.lang.ThreadGroup rootGroup = getRootGroup()","id":5334},{"comment":"/*\r\n     * We have an initial invalid bit (initially false) for the class\r\n     * variables which tell if the cache is valid.  If the underlying\r\n     * java.security.Security property changes via setProperty(), the\r\n     * Security class uses reflection to change the variable and thus\r\n     * invalidate the cache.\r\n     *\r\n     * Locking is handled by synchronization to the\r\n     * packageAccessLock/packageDefinitionLock objects.  They are only\r\n     * used in this class.\r\n     *\r\n     * Note that cache invalidation as a result of the property change\r\n     * happens without using these locks, so there may be a delay between\r\n     * when a thread updates the property and when other threads updates\r\n     * the cache.\r\n     */\r\n","field_name":"packageAccessValid","field_type":"boolean","full_declaration":"private static boolean packageAccessValid = false","id":5335},{"comment":"","field_name":"packageAccess","field_type":"String[]","full_declaration":"private static String[] packageAccess","id":5336},{"comment":"private static final Object packageAccessLock = new Object();","field_name":"packageAccessLock","field_type":"java.lang.Object","full_declaration":"private static final java.lang.Object packageAccessLock = new Object()","id":5337},{"comment":"","field_name":"packageDefinitionValid","field_type":"boolean","full_declaration":"private static boolean packageDefinitionValid = false","id":5338},{"comment":"","field_name":"packageDefinition","field_type":"String[]","full_declaration":"private static String[] packageDefinition","id":5339},{"comment":"private static final Object packageDefinitionLock = new Object();","field_name":"packageDefinitionLock","field_type":"java.lang.Object","full_declaration":"private static final java.lang.Object packageDefinitionLock = new Object()","id":5340},{"comment":"/**\r\n * A constant holding the minimum value a {@code short} can\r\n * have, -2<sup>15</sup>.\r\n */\r\n","field_name":"MIN_VALUE","field_type":"short","full_declaration":"public static final short MIN_VALUE = -32768","id":5341},{"comment":"/**\r\n * A constant holding the maximum value a {@code short} can\r\n * have, 2<sup>15</sup>-1.\r\n */\r\n","field_name":"MAX_VALUE","field_type":"short","full_declaration":"public static final short MAX_VALUE = 32767","id":5342},{"comment":"/**\r\n * The {@code Class} instance representing the primitive type\r\n * {@code short}.\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\npublic static final Class<Short> TYPE = (Class<Short>) Class.getPrimitiveClass(\"short\");","field_name":"TYPE","field_type":"java.lang.Class","full_declaration":"public static final java.lang.Class TYPE = (Class<Short>) Class.getPrimitiveClass(\"short\")","id":5343},{"comment":"/**\r\n * The value of the {@code Short}.\r\n *\r\n * @serial\r\n */\r\n","field_name":"value","field_type":"short","full_declaration":"private final short value","id":5344},{"comment":"/**\r\n * The number of bits used to represent a {@code short} value in two's\r\n * complement binary form.\r\n * @since 1.5\r\n */\r\n","field_name":"SIZE","field_type":"int","full_declaration":"public static final int SIZE = 16","id":5345},{"comment":"/**\r\n * The number of bytes used to represent a {@code short} value in two's\r\n * complement binary form.\r\n *\r\n * @since 1.8\r\n */\r\n","field_name":"BYTES","field_type":"int","full_declaration":"public static final int BYTES = SIZE / Byte.SIZE","id":5346},{"comment":"/**\r\n * use serialVersionUID from JDK 1.1. for interoperability\r\n */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 7515723908773894738L","id":5347},{"comment":"","field_name":"cache","field_type":"Short[]","full_declaration":"static final Short[] cache = new Short[-(-128) + 127 + 1]","id":5348},{"comment":"/* Shutdown state */\r\n","field_name":"RUNNING","field_type":"int","full_declaration":"private static final int RUNNING = 0","id":5349},{"comment":"","field_name":"HOOKS","field_type":"int","full_declaration":"private static final int HOOKS = 1","id":5350},{"comment":"","field_name":"FINALIZERS","field_type":"int","full_declaration":"private static final int FINALIZERS = 2","id":5351},{"comment":"","field_name":"state","field_type":"int","full_declaration":"private static int state = RUNNING","id":5352},{"comment":"/* Should we run all finalizers upon exit? */\r\n","field_name":"runFinalizersOnExit","field_type":"boolean","full_declaration":"private static boolean runFinalizersOnExit = false","id":5353},{"comment":"// The system shutdown hooks are registered with a predefined slot.\r\n// The list of shutdown hooks is as follows:\r\n// (0) Console restore hook\r\n// (1) Application hooks\r\n// (2) DeleteOnExit hook\r\n","field_name":"MAX_SYSTEM_HOOKS","field_type":"int","full_declaration":"private static final int MAX_SYSTEM_HOOKS = 10","id":5354},{"comment":"","field_name":"hooks","field_type":"Runnable[]","full_declaration":"private static final Runnable[] hooks = new Runnable[MAX_SYSTEM_HOOKS]","id":5355},{"comment":"// the index of the currently running shutdown hook to the hooks array\r\n","field_name":"currentRunningHook","field_type":"int","full_declaration":"private static int currentRunningHook = 0","id":5356},{"comment":"private static Object lock = new Lock();","field_name":"lock","field_type":"java.lang.Object","full_declaration":"private static java.lang.Object lock = new Lock()","id":5357},{"comment":"/* Lock object for the native halt method */\r\nprivate static Object haltLock = new Lock();","field_name":"haltLock","field_type":"java.lang.Object","full_declaration":"private static java.lang.Object haltLock = new Lock()","id":5358},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 8609175038441759607L","id":5359},{"comment":"// Normally initialized by VM (public constructor added in 1.5)\r\nprivate String declaringClass;","field_name":"declaringClass","field_type":"java.lang.String","full_declaration":"private java.lang.String declaringClass","id":5360},{"comment":"private String methodName;","field_name":"methodName","field_type":"java.lang.String","full_declaration":"private java.lang.String methodName","id":5361},{"comment":"private String fileName;","field_name":"fileName","field_type":"java.lang.String","full_declaration":"private java.lang.String fileName","id":5362},{"comment":"","field_name":"lineNumber","field_type":"int","full_declaration":"private int lineNumber","id":5363},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 6992337162326171013L","id":5364},{"comment":"/**\r\n * The {@code double} value that is closer than any other to\r\n * <i>e</i>, the base of the natural logarithms.\r\n */\r\n","field_name":"E","field_type":"double","full_declaration":"public static final double E = 2.7182818284590452354","id":5365},{"comment":"/**\r\n * The {@code double} value that is closer than any other to\r\n * <i>pi</i>, the ratio of the circumference of a circle to its\r\n * diameter.\r\n */\r\n","field_name":"PI","field_type":"double","full_declaration":"public static final double PI = 3.14159265358979323846","id":5366},{"comment":"static final Random randomNumberGenerator = new Random();","field_name":"randomNumberGenerator","field_type":"java.util.Random","full_declaration":"static final java.util.Random randomNumberGenerator = new Random()","id":5367},{"comment":"/**\r\n * The value is used for character storage.\r\n */\r\n","field_name":"value","field_type":"char[]","full_declaration":"private final char[] value","id":5368},{"comment":"/**\r\n * Cache the hash code for the string\r\n */\r\n// Default to 0\r\n","field_name":"hash","field_type":"int","full_declaration":"private int hash","id":5369},{"comment":"/**\r\n * use serialVersionUID from JDK 1.0.2 for interoperability\r\n */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -6849794470754667710L","id":5370},{"comment":"/**\r\n * Class String is special cased within the Serialization Stream Protocol.\r\n *\r\n * A String instance is written into an ObjectOutputStream according to\r\n * <a href=\"{@docRoot}/../platform/serialization/spec/output.html\">\r\n * Object Serialization Specification, Section 6.2, \"Stream Elements\"</a>\r\n */\r\n","field_name":"serialPersistentFields","field_type":"ObjectStreamField[]","full_declaration":"private static final ObjectStreamField[] serialPersistentFields = new ObjectStreamField[0]","id":5371},{"comment":"/**\r\n * A Comparator that orders {@code String} objects as by\r\n * {@code compareToIgnoreCase}. This comparator is serializable.\r\n * <p>\r\n * Note that this Comparator does <em>not</em> take locale into account,\r\n * and will result in an unsatisfactory ordering for certain locales.\r\n * The java.text package provides <em>Collators</em> to allow\r\n * locale-sensitive ordering.\r\n *\r\n * @see     java.text.Collator#compare(String, String)\r\n * @since   1.2\r\n */\r\npublic static final Comparator<String> CASE_INSENSITIVE_ORDER = new CaseInsensitiveComparator();","field_name":"CASE_INSENSITIVE_ORDER","field_type":"java.util.Comparator","full_declaration":"public static final java.util.Comparator CASE_INSENSITIVE_ORDER = new CaseInsensitiveComparator()","id":5372},{"comment":"// use serialVersionUID from JDK 1.2.2 for interoperability\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 8575799808933029326L","id":5373},{"comment":"/**\r\n * A cache of the last value returned by toString. Cleared\r\n * whenever the StringBuffer is modified.\r\n */\r\n","field_name":"toStringCache","field_type":"char[]","full_declaration":"private transient char[] toStringCache","id":5374},{"comment":"/**\r\n * use serialVersionUID from JDK 1.0.2 for interoperability\r\n */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"static final long serialVersionUID = 3388685877147921107L","id":5375},{"comment":"/**\r\n * Serializable fields for StringBuffer.\r\n *\r\n * @serialField value  char[]\r\n *              The backing character array of this StringBuffer.\r\n * @serialField count int\r\n *              The number of characters in this StringBuffer.\r\n * @serialField shared  boolean\r\n *              A flag indicating whether the backing array is shared.\r\n *              The value is ignored upon deserialization.\r\n */\r\n","field_name":"serialPersistentFields","field_type":"java.io.ObjectStreamField[]","full_declaration":"private static final java.io.ObjectStreamField[] serialPersistentFields = { new java.io.ObjectStreamField(\"value\", char[].class), new java.io.ObjectStreamField(\"count\", Integer.TYPE), new java.io.ObjectStreamField(\"shared\", Boolean.TYPE) }","id":5376},{"comment":"/**\r\n * use serialVersionUID for interoperability\r\n */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"static final long serialVersionUID = 4383685877147921099L","id":5377},{"comment":"/**\r\n * The cached coders for each thread\r\n */\r\nprivate final static ThreadLocal<SoftReference<StringDecoder>> decoder = new ThreadLocal<>();","field_name":"decoder","field_type":"java.lang.ThreadLocal","full_declaration":"private final static java.lang.ThreadLocal decoder = new ThreadLocal<>()","id":5378},{"comment":"private final static ThreadLocal<SoftReference<StringEncoder>> encoder = new ThreadLocal<>();","field_name":"encoder","field_type":"java.lang.ThreadLocal","full_declaration":"private final static java.lang.ThreadLocal encoder = new ThreadLocal<>()","id":5379},{"comment":"","field_name":"warnUnsupportedCharset","field_type":"boolean","full_declaration":"private static boolean warnUnsupportedCharset = true","id":5380},{"comment":"private final String requestedCharsetName;","field_name":"requestedCharsetName","field_type":"java.lang.String","full_declaration":"private final java.lang.String requestedCharsetName","id":5381},{"comment":"private final Charset cs;","field_name":"cs","field_type":"java.nio.charset.Charset","full_declaration":"private final java.nio.charset.Charset cs","id":5382},{"comment":"private final CharsetDecoder cd;","field_name":"cd","field_type":"java.nio.charset.CharsetDecoder","full_declaration":"private final java.nio.charset.CharsetDecoder cd","id":5383},{"comment":"","field_name":"isTrusted","field_type":"boolean","full_declaration":"private final boolean isTrusted","id":5384},{"comment":"private Charset cs;","field_name":"cs","field_type":"java.nio.charset.Charset","full_declaration":"private java.nio.charset.Charset cs","id":5385},{"comment":"private CharsetEncoder ce;","field_name":"ce","field_type":"java.nio.charset.CharsetEncoder","full_declaration":"private java.nio.charset.CharsetEncoder ce","id":5386},{"comment":"private final String requestedCharsetName;","field_name":"requestedCharsetName","field_type":"java.lang.String","full_declaration":"private final java.lang.String requestedCharsetName","id":5387},{"comment":"","field_name":"isTrusted","field_type":"boolean","full_declaration":"private final boolean isTrusted","id":5388},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -6762910422159637258L","id":5389},{"comment":"/**\r\n * The \"standard\" input stream. This stream is already\r\n * open and ready to supply input data. Typically this stream\r\n * corresponds to keyboard input or another input source specified by\r\n * the host environment or user.\r\n */\r\npublic final static InputStream in = null;","field_name":"in","field_type":"java.io.InputStream","full_declaration":"public final static java.io.InputStream in = null","id":5390},{"comment":"/**\r\n * The \"standard\" output stream. This stream is already\r\n * open and ready to accept output data. Typically this stream\r\n * corresponds to display output or another output destination\r\n * specified by the host environment or user.\r\n * <p>\r\n * For simple stand-alone Java applications, a typical way to write\r\n * a line of output data is:\r\n * <blockquote><pre>\r\n *     System.out.println(data)\r\n * </pre></blockquote>\r\n * <p>\r\n * See the <code>println</code> methods in class <code>PrintStream</code>.\r\n *\r\n * @see     java.io.PrintStream#println()\r\n * @see     java.io.PrintStream#println(boolean)\r\n * @see     java.io.PrintStream#println(char)\r\n * @see     java.io.PrintStream#println(char[])\r\n * @see     java.io.PrintStream#println(double)\r\n * @see     java.io.PrintStream#println(float)\r\n * @see     java.io.PrintStream#println(int)\r\n * @see     java.io.PrintStream#println(long)\r\n * @see     java.io.PrintStream#println(java.lang.Object)\r\n * @see     java.io.PrintStream#println(java.lang.String)\r\n */\r\npublic final static PrintStream out = null;","field_name":"out","field_type":"java.io.PrintStream","full_declaration":"public final static java.io.PrintStream out = null","id":5391},{"comment":"/**\r\n * The \"standard\" error output stream. This stream is already\r\n * open and ready to accept output data.\r\n * <p>\r\n * Typically this stream corresponds to display output or another\r\n * output destination specified by the host environment or user. By\r\n * convention, this output stream is used to display error messages\r\n * or other information that should come to the immediate attention\r\n * of a user even if the principal output stream, the value of the\r\n * variable <code>out</code>, has been redirected to a file or other\r\n * destination that is typically not continuously monitored.\r\n */\r\npublic final static PrintStream err = null;","field_name":"err","field_type":"java.io.PrintStream","full_declaration":"public final static java.io.PrintStream err = null","id":5392},{"comment":"/* The security manager for the system.\r\n     */\r\nprivate static volatile SecurityManager security = null;","field_name":"security","field_type":"java.lang.SecurityManager","full_declaration":"private static volatile java.lang.SecurityManager security = null","id":5393},{"comment":"private static volatile Console cons = null;","field_name":"cons","field_type":"java.io.Console","full_declaration":"private static volatile java.io.Console cons = null","id":5394},{"comment":"/**\r\n * System properties. The following properties are guaranteed to be defined:\r\n * <dl>\r\n * <dt>java.version         <dd>Java version number\r\n * <dt>java.vendor          <dd>Java vendor specific string\r\n * <dt>java.vendor.url      <dd>Java vendor URL\r\n * <dt>java.home            <dd>Java installation directory\r\n * <dt>java.class.version   <dd>Java class version number\r\n * <dt>java.class.path      <dd>Java classpath\r\n * <dt>os.name              <dd>Operating System Name\r\n * <dt>os.arch              <dd>Operating System Architecture\r\n * <dt>os.version           <dd>Operating System Version\r\n * <dt>file.separator       <dd>File separator (\"/\" on Unix)\r\n * <dt>path.separator       <dd>Path separator (\":\" on Unix)\r\n * <dt>line.separator       <dd>Line separator (\"\\n\" on Unix)\r\n * <dt>user.name            <dd>User account name\r\n * <dt>user.home            <dd>User home directory\r\n * <dt>user.dir             <dd>User's current working directory\r\n * </dl>\r\n */\r\nprivate static Properties props;","field_name":"props","field_type":"java.util.Properties","full_declaration":"private static java.util.Properties props","id":5395},{"comment":"private static String lineSeparator;","field_name":"lineSeparator","field_type":"java.lang.String","full_declaration":"private static java.lang.String lineSeparator","id":5396},{"comment":"private static SignalHandler handler = null;","field_name":"handler","field_type":"sun.misc.SignalHandler","full_declaration":"private static sun.misc.SignalHandler handler = null","id":5397},{"comment":"private volatile String name;","field_name":"name","field_type":"java.lang.String","full_declaration":"private volatile java.lang.String name","id":5398},{"comment":"","field_name":"priority","field_type":"int","full_declaration":"private int priority","id":5399},{"comment":"private Thread threadQ;","field_name":"threadQ","field_type":"java.lang.Thread","full_declaration":"private java.lang.Thread threadQ","id":5400},{"comment":"","field_name":"eetop","field_type":"long","full_declaration":"private long eetop","id":5401},{"comment":"/* Whether or not to single_step this thread. */\r\n","field_name":"single_step","field_type":"boolean","full_declaration":"private boolean single_step","id":5402},{"comment":"/* Whether or not the thread is a daemon thread. */\r\n","field_name":"daemon","field_type":"boolean","full_declaration":"private boolean daemon = false","id":5403},{"comment":"/* JVM state */\r\n","field_name":"stillborn","field_type":"boolean","full_declaration":"private boolean stillborn = false","id":5404},{"comment":"/* What will be run. */\r\nprivate Runnable target;","field_name":"target","field_type":"java.lang.Runnable","full_declaration":"private java.lang.Runnable target","id":5405},{"comment":"/* The group of this thread */\r\nprivate ThreadGroup group;","field_name":"group","field_type":"java.lang.ThreadGroup","full_declaration":"private java.lang.ThreadGroup group","id":5406},{"comment":"/* The context ClassLoader for this thread */\r\nprivate ClassLoader contextClassLoader;","field_name":"contextClassLoader","field_type":"java.lang.ClassLoader","full_declaration":"private java.lang.ClassLoader contextClassLoader","id":5407},{"comment":"/* The inherited AccessControlContext of this thread */\r\nprivate AccessControlContext inheritedAccessControlContext;","field_name":"inheritedAccessControlContext","field_type":"java.security.AccessControlContext","full_declaration":"private java.security.AccessControlContext inheritedAccessControlContext","id":5408},{"comment":"/* For autonumbering anonymous threads. */\r\n","field_name":"threadInitNumber","field_type":"int","full_declaration":"private static int threadInitNumber","id":5409},{"comment":"/* ThreadLocal values pertaining to this thread. This map is maintained\r\n     * by the ThreadLocal class. */\r\nThreadLocal.ThreadLocalMap threadLocals = null;","field_name":"threadLocals","field_type":"java.lang.ThreadLocal.ThreadLocalMap","full_declaration":"java.lang.ThreadLocal.ThreadLocalMap threadLocals = null","id":5410},{"comment":"/*\r\n     * InheritableThreadLocal values pertaining to this thread. This map is\r\n     * maintained by the InheritableThreadLocal class.\r\n     */\r\nThreadLocal.ThreadLocalMap inheritableThreadLocals = null;","field_name":"inheritableThreadLocals","field_type":"java.lang.ThreadLocal.ThreadLocalMap","full_declaration":"java.lang.ThreadLocal.ThreadLocalMap inheritableThreadLocals = null","id":5411},{"comment":"/*\r\n     * The requested stack size for this thread, or 0 if the creator did\r\n     * not specify a stack size.  It is up to the VM to do whatever it\r\n     * likes with this number; some VMs will ignore it.\r\n     */\r\n","field_name":"stackSize","field_type":"long","full_declaration":"private long stackSize","id":5412},{"comment":"/*\r\n     * JVM-private state that persists after native thread termination.\r\n     */\r\n","field_name":"nativeParkEventPointer","field_type":"long","full_declaration":"private long nativeParkEventPointer","id":5413},{"comment":"/*\r\n     * Thread ID\r\n     */\r\n","field_name":"tid","field_type":"long","full_declaration":"private long tid","id":5414},{"comment":"/* For generating thread ID */\r\n","field_name":"threadSeqNumber","field_type":"long","full_declaration":"private static long threadSeqNumber","id":5415},{"comment":"/* Java thread status for tools,\r\n     * initialized to indicate thread 'not yet started'\r\n     */\r\n","field_name":"threadStatus","field_type":"int","full_declaration":"private volatile int threadStatus = 0","id":5416},{"comment":"/**\r\n * The argument supplied to the current call to\r\n * java.util.concurrent.locks.LockSupport.park.\r\n * Set by (private) java.util.concurrent.locks.LockSupport.setBlocker\r\n * Accessed using java.util.concurrent.locks.LockSupport.getBlocker\r\n */\r\nvolatile Object parkBlocker;","field_name":"parkBlocker","field_type":"java.lang.Object","full_declaration":"volatile java.lang.Object parkBlocker","id":5417},{"comment":"/* The object in which this thread is blocked in an interruptible I/O\r\n     * operation, if any.  The blocker's interrupt method should be invoked\r\n     * after setting this thread's interrupt status.\r\n     */\r\nprivate volatile Interruptible blocker;","field_name":"blocker","field_type":"sun.nio.ch.Interruptible","full_declaration":"private volatile sun.nio.ch.Interruptible blocker","id":5418},{"comment":"private final Object blockerLock = new Object();","field_name":"blockerLock","field_type":"java.lang.Object","full_declaration":"private final java.lang.Object blockerLock = new Object()","id":5419},{"comment":"/**\r\n * The minimum priority that a thread can have.\r\n */\r\n","field_name":"MIN_PRIORITY","field_type":"int","full_declaration":"public final static int MIN_PRIORITY = 1","id":5420},{"comment":"/**\r\n * The default priority that is assigned to a thread.\r\n */\r\n","field_name":"NORM_PRIORITY","field_type":"int","full_declaration":"public final static int NORM_PRIORITY = 5","id":5421},{"comment":"/**\r\n * The maximum priority that a thread can have.\r\n */\r\n","field_name":"MAX_PRIORITY","field_type":"int","full_declaration":"public final static int MAX_PRIORITY = 10","id":5422},{"comment":"","field_name":"EMPTY_STACK_TRACE","field_type":"StackTraceElement[]","full_declaration":"private static final StackTraceElement[] EMPTY_STACK_TRACE = new StackTraceElement[0]","id":5423},{"comment":"private static final RuntimePermission SUBCLASS_IMPLEMENTATION_PERMISSION = new RuntimePermission(\"enableContextClassLoaderOverride\");","field_name":"SUBCLASS_IMPLEMENTATION_PERMISSION","field_type":"java.lang.RuntimePermission","full_declaration":"private static final java.lang.RuntimePermission SUBCLASS_IMPLEMENTATION_PERMISSION = new RuntimePermission(\"enableContextClassLoaderOverride\")","id":5424},{"comment":"// null unless explicitly set\r\nprivate volatile UncaughtExceptionHandler uncaughtExceptionHandler;","field_name":"uncaughtExceptionHandler","field_type":"java.lang.Thread.UncaughtExceptionHandler","full_declaration":"private volatile java.lang.Thread.UncaughtExceptionHandler uncaughtExceptionHandler","id":5425},{"comment":"// null unless explicitly set\r\nprivate static volatile UncaughtExceptionHandler defaultUncaughtExceptionHandler;","field_name":"defaultUncaughtExceptionHandler","field_type":"java.lang.Thread.UncaughtExceptionHandler","full_declaration":"private static volatile java.lang.Thread.UncaughtExceptionHandler defaultUncaughtExceptionHandler","id":5426},{"comment":"// The following three initially uninitialized fields are exclusively\r\n// managed by class java.util.concurrent.ThreadLocalRandom. These\r\n// fields are used to build the high-performance PRNGs in the\r\n// concurrent code, and we can not risk accidental false sharing.\r\n// Hence, the fields are isolated with @Contended.\r\n/**\r\n * The current seed for a ThreadLocalRandom\r\n */\r\n@sun.misc.Contended(\"tlr\")\r\n","field_name":"threadLocalRandomSeed","field_type":"long","full_declaration":"long threadLocalRandomSeed","id":5427},{"comment":"/**\r\n * Probe hash value; nonzero if threadLocalRandomSeed initialized\r\n */\r\n@sun.misc.Contended(\"tlr\")\r\n","field_name":"threadLocalRandomProbe","field_type":"int","full_declaration":"int threadLocalRandomProbe","id":5428},{"comment":"/**\r\n * Secondary seed isolated from public ThreadLocalRandom sequence\r\n */\r\n@sun.misc.Contended(\"tlr\")\r\n","field_name":"threadLocalRandomSecondarySeed","field_type":"int","full_declaration":"int threadLocalRandomSecondarySeed","id":5429},{"comment":"/**\r\n * cache of subclass security audit results\r\n */\r\nstatic final ConcurrentMap<WeakClassKey, Boolean> subclassAudits = new ConcurrentHashMap<>();","field_name":"subclassAudits","field_type":"java.util.concurrent.ConcurrentMap","full_declaration":"static final java.util.concurrent.ConcurrentMap subclassAudits = new ConcurrentHashMap<>()","id":5430},{"comment":"/**\r\n * queue for WeakReferences to audited subclasses\r\n */\r\nstatic final ReferenceQueue<Class<?>> subclassAuditsQueue = new ReferenceQueue<>();","field_name":"subclassAuditsQueue","field_type":"java.lang.ref.ReferenceQueue","full_declaration":"static final java.lang.ref.ReferenceQueue subclassAuditsQueue = new ReferenceQueue<>()","id":5431},{"comment":"/**\r\n * saved value of the referent's identity hash code, to maintain\r\n * a consistent hash code after the referent has been cleared\r\n */\r\n","field_name":"hash","field_type":"int","full_declaration":"private final int hash","id":5432},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -4417128565033088268L","id":5433},{"comment":"private final ThreadGroup parent;","field_name":"parent","field_type":"java.lang.ThreadGroup","full_declaration":"private final java.lang.ThreadGroup parent","id":5434},{"comment":"String name;","field_name":"name","field_type":"java.lang.String","full_declaration":"java.lang.String name","id":5435},{"comment":"","field_name":"maxPriority","field_type":"int","full_declaration":"int maxPriority","id":5436},{"comment":"","field_name":"destroyed","field_type":"boolean","full_declaration":"boolean destroyed","id":5437},{"comment":"","field_name":"daemon","field_type":"boolean","full_declaration":"boolean daemon","id":5438},{"comment":"","field_name":"vmAllowSuspension","field_type":"boolean","full_declaration":"boolean vmAllowSuspension","id":5439},{"comment":"","field_name":"nUnstartedThreads","field_type":"int","full_declaration":"int nUnstartedThreads = 0","id":5440},{"comment":"","field_name":"nthreads","field_type":"int","full_declaration":"int nthreads","id":5441},{"comment":"","field_name":"threads","field_type":"Thread[]","full_declaration":"Thread[] threads","id":5442},{"comment":"","field_name":"ngroups","field_type":"int","full_declaration":"int ngroups","id":5443},{"comment":"","field_name":"groups","field_type":"ThreadGroup[]","full_declaration":"ThreadGroup[] groups","id":5444},{"comment":"/**\r\n * ThreadLocals rely on per-thread linear-probe hash maps attached\r\n * to each thread (Thread.threadLocals and\r\n * inheritableThreadLocals).  The ThreadLocal objects act as keys,\r\n * searched via threadLocalHashCode.  This is a custom hash code\r\n * (useful only within ThreadLocalMaps) that eliminates collisions\r\n * in the common case where consecutively constructed ThreadLocals\r\n * are used by the same threads, while remaining well-behaved in\r\n * less common cases.\r\n */\r\n","field_name":"threadLocalHashCode","field_type":"int","full_declaration":"private final int threadLocalHashCode = nextHashCode()","id":5445},{"comment":"/**\r\n * The next hash code to be given out. Updated atomically. Starts at\r\n * zero.\r\n */\r\nprivate static AtomicInteger nextHashCode = new AtomicInteger();","field_name":"nextHashCode","field_type":"java.util.concurrent.atomic.AtomicInteger","full_declaration":"private static java.util.concurrent.atomic.AtomicInteger nextHashCode = new AtomicInteger()","id":5446},{"comment":"/**\r\n * The difference between successively generated hash codes - turns\r\n * implicit sequential thread-local IDs into near-optimally spread\r\n * multiplicative hash values for power-of-two-sized tables.\r\n */\r\n","field_name":"HASH_INCREMENT","field_type":"int","full_declaration":"private static final int HASH_INCREMENT = 0x61c88647","id":5447},{"comment":"private final Supplier<? extends T> supplier;","field_name":"supplier","field_type":"java.util.function.Supplier","full_declaration":"private final java.util.function.Supplier supplier","id":5448},{"comment":"/**\r\n * The initial capacity -- MUST be a power of two.\r\n */\r\n","field_name":"INITIAL_CAPACITY","field_type":"int","full_declaration":"private static final int INITIAL_CAPACITY = 16","id":5449},{"comment":"/**\r\n * The table, resized as necessary.\r\n * table.length MUST always be a power of two.\r\n */\r\n","field_name":"table","field_type":"Entry[]","full_declaration":"private Entry[] table","id":5450},{"comment":"/**\r\n * The number of entries in the table.\r\n */\r\n","field_name":"size","field_type":"int","full_declaration":"private int size = 0","id":5451},{"comment":"/**\r\n * The next size value at which to resize.\r\n */\r\n// Default to 0\r\n","field_name":"threshold","field_type":"int","full_declaration":"private int threshold","id":5452},{"comment":"/**\r\n * The value associated with this ThreadLocal.\r\n */\r\nObject value;","field_name":"value","field_type":"java.lang.Object","full_declaration":"java.lang.Object value","id":5453},{"comment":"/**\r\n * use serialVersionUID from JDK 1.0.2 for interoperability\r\n */\r\n","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -3042686055658047285L","id":5454},{"comment":"/**\r\n * Native code saves some indication of the stack backtrace in this slot.\r\n */\r\nprivate transient Object backtrace;","field_name":"backtrace","field_type":"java.lang.Object","full_declaration":"private transient java.lang.Object backtrace","id":5455},{"comment":"/**\r\n * Specific details about the Throwable.  For example, for\r\n * {@code FileNotFoundException}, this contains the name of\r\n * the file that could not be found.\r\n *\r\n * @serial\r\n */\r\nprivate String detailMessage;","field_name":"detailMessage","field_type":"java.lang.String","full_declaration":"private java.lang.String detailMessage","id":5456},{"comment":"/**\r\n * A shared value for an empty stack.\r\n */\r\n","field_name":"UNASSIGNED_STACK","field_type":"StackTraceElement[]","full_declaration":"private static final StackTraceElement[] UNASSIGNED_STACK = new StackTraceElement[0]","id":5457},{"comment":"/*\r\n     * To allow Throwable objects to be made immutable and safely\r\n     * reused by the JVM, such as OutOfMemoryErrors, fields of\r\n     * Throwable that are writable in response to user actions, cause,\r\n     * stackTrace, and suppressedExceptions obey the following\r\n     * protocol:\r\n     *\r\n     * 1) The fields are initialized to a non-null sentinel value\r\n     * which indicates the value has logically not been set.\r\n     *\r\n     * 2) Writing a null to the field indicates further writes\r\n     * are forbidden\r\n     *\r\n     * 3) The sentinel value may be replaced with another non-null\r\n     * value.\r\n     *\r\n     * For example, implementations of the HotSpot JVM have\r\n     * preallocated OutOfMemoryError objects to provide for better\r\n     * diagnosability of that situation.  These objects are created\r\n     * without calling the constructor for that class and the fields\r\n     * in question are initialized to null.  To support this\r\n     * capability, any new fields added to Throwable that require\r\n     * being initialized to a non-null value require a coordinated JVM\r\n     * change.\r\n     */\r\n/**\r\n * The throwable that caused this throwable to get thrown, or null if this\r\n * throwable was not caused by another throwable, or if the causative\r\n * throwable is unknown.  If this field is equal to this throwable itself,\r\n * it indicates that the cause of this throwable has not yet been\r\n * initialized.\r\n *\r\n * @serial\r\n * @since 1.4\r\n */\r\nprivate Throwable cause = this;","field_name":"cause","field_type":"java.lang.Throwable","full_declaration":"private java.lang.Throwable cause = this","id":5458},{"comment":"/**\r\n * The stack trace, as returned by {@link #getStackTrace()}.\r\n *\r\n * The field is initialized to a zero-length array.  A {@code\r\n * null} value of this field indicates subsequent calls to {@link\r\n * #setStackTrace(StackTraceElement[])} and {@link\r\n * #fillInStackTrace()} will be be no-ops.\r\n *\r\n * @serial\r\n * @since 1.4\r\n */\r\n","field_name":"stackTrace","field_type":"StackTraceElement[]","full_declaration":"private StackTraceElement[] stackTrace = UNASSIGNED_STACK","id":5459},{"comment":"// Setting this static field introduces an acceptable\r\n// initialization dependency on a few java.util classes.\r\nprivate static final List<Throwable> SUPPRESSED_SENTINEL = Collections.unmodifiableList(new ArrayList<Throwable>(0));","field_name":"SUPPRESSED_SENTINEL","field_type":"java.util.List","full_declaration":"private static final java.util.List SUPPRESSED_SENTINEL = Collections.unmodifiableList(new ArrayList<Throwable>(0))","id":5460},{"comment":"/**\r\n * The list of suppressed exceptions, as returned by {@link\r\n * #getSuppressed()}.  The list is initialized to a zero-element\r\n * unmodifiable sentinel list.  When a serialized Throwable is\r\n * read in, if the {@code suppressedExceptions} field points to a\r\n * zero-element list, the field is reset to the sentinel value.\r\n *\r\n * @serial\r\n * @since 1.7\r\n */\r\nprivate List<Throwable> suppressedExceptions = SUPPRESSED_SENTINEL;","field_name":"suppressedExceptions","field_type":"java.util.List","full_declaration":"private java.util.List suppressedExceptions = SUPPRESSED_SENTINEL","id":5461},{"comment":"/**\r\n * Message for trying to suppress a null exception.\r\n */\r\nprivate static final String NULL_CAUSE_MESSAGE = \"Cannot suppress a null exception.\";","field_name":"NULL_CAUSE_MESSAGE","field_type":"java.lang.String","full_declaration":"private static final java.lang.String NULL_CAUSE_MESSAGE = \"Cannot suppress a null exception.\"","id":5462},{"comment":"/**\r\n * Message for trying to suppress oneself.\r\n */\r\nprivate static final String SELF_SUPPRESSION_MESSAGE = \"Self-suppression not permitted\";","field_name":"SELF_SUPPRESSION_MESSAGE","field_type":"java.lang.String","full_declaration":"private static final java.lang.String SELF_SUPPRESSION_MESSAGE = \"Self-suppression not permitted\"","id":5463},{"comment":"/**\r\n * Caption  for labeling causative exception stack traces\r\n */\r\nprivate static final String CAUSE_CAPTION = \"Caused by: \";","field_name":"CAUSE_CAPTION","field_type":"java.lang.String","full_declaration":"private static final java.lang.String CAUSE_CAPTION = \"Caused by: \"","id":5464},{"comment":"/**\r\n * Caption for labeling suppressed exception stack traces\r\n */\r\nprivate static final String SUPPRESSED_CAPTION = \"Suppressed: \";","field_name":"SUPPRESSED_CAPTION","field_type":"java.lang.String","full_declaration":"private static final java.lang.String SUPPRESSED_CAPTION = \"Suppressed: \"","id":5465},{"comment":"","field_name":"EMPTY_THROWABLE_ARRAY","field_type":"Throwable[]","full_declaration":"private static final Throwable[] EMPTY_THROWABLE_ARRAY = new Throwable[0]","id":5466},{"comment":"/**\r\n * {@linkplain #setStackTrace(StackTraceElement[]) Setting the\r\n * stack trace} to a one-element array containing this sentinel\r\n * value indicates future attempts to set the stack trace will be\r\n * ignored.  The sentinal is equal to the result of calling:<br>\r\n * {@code new StackTraceElement(\"\", \"\", null, Integer.MIN_VALUE)}\r\n */\r\npublic static final StackTraceElement STACK_TRACE_ELEMENT_SENTINEL = new StackTraceElement(\"\", \"\", null, Integer.MIN_VALUE);","field_name":"STACK_TRACE_ELEMENT_SENTINEL","field_type":"java.lang.StackTraceElement","full_declaration":"public static final java.lang.StackTraceElement STACK_TRACE_ELEMENT_SENTINEL = new StackTraceElement(\"\", \"\", null, Integer.MIN_VALUE)","id":5467},{"comment":"/**\r\n * Sentinel value used in the serial form to indicate an immutable\r\n * stack trace.\r\n */\r\n","field_name":"STACK_TRACE_SENTINEL","field_type":"StackTraceElement[]","full_declaration":"public static final StackTraceElement[] STACK_TRACE_SENTINEL = new StackTraceElement[] { STACK_TRACE_ELEMENT_SENTINEL }","id":5468},{"comment":"private final PrintStream printStream;","field_name":"printStream","field_type":"java.io.PrintStream","full_declaration":"private final java.io.PrintStream printStream","id":5469},{"comment":"private final PrintWriter printWriter;","field_name":"printWriter","field_type":"java.io.PrintWriter","full_declaration":"private final java.io.PrintWriter printWriter","id":5470},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -5101214195716534496L","id":5471},{"comment":"private String typeName;","field_name":"typeName","field_type":"java.lang.String","full_declaration":"private java.lang.String typeName","id":5472},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 2524784860676771849L","id":5473},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -4019343241616879428L","id":5474},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = -7123279212883497373L","id":5475},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"static final long serialVersionUID = -1242599979055084673L","id":5476},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 7001962396098498785L","id":5477},{"comment":"","field_name":"serialVersionUID","field_type":"long","full_declaration":"private static final long serialVersionUID = 4161983926571568670L","id":5478},{"comment":"/**\r\n * The {@code Class} object representing the pseudo-type corresponding to\r\n * the keyword {@code void}.\r\n */\r\n@SuppressWarnings(\"unchecked\")\r\npublic static final Class<Void> TYPE = (Class<Void>) Class.getPrimitiveClass(\"void\");","field_name":"TYPE","field_type":"java.lang.Class","full_declaration":"public static final java.lang.Class TYPE = (Class<Void>) Class.getPrimitiveClass(\"void\")","id":5479}]