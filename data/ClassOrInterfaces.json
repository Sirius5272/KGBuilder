[{"comment":"\n * This helper class provides a utility implementation of the\n * java.beans.beancontext.BeanContext interface.\n * <p>\n * Since this class directly implements the BeanContext interface, the class\n * can, and is intended to be used either by subclassing this implementation,\n * or via ad-hoc delegation of an instance of this class from another.\n * </p>\n *\n * @author Laurence P. G. Cable\n * @since 1.2\n ","description":"","name":"BeanContextSupport","qualified_name":"java.beans.beancontext.BeanContextSupport","type":2},{"comment":"\n * This class implements a character buffer that can be used as an Writer.\n * The buffer automatically grows when data is written to the stream.  The data\n * can be retrieved using toCharArray() and toString().\n * <P>\n * Note: Invoking close() on this class has no effect, and methods\n * of this class can be called after the stream has closed\n * without generating an IOException.\n *\n * @author      Herb Jellinek\n * @since       JDK1.1\n ","description":"","name":"CharArrayWriter","qualified_name":"java.io.CharArrayWriter","type":2},{"comment":"\n * Shared information for a group of method types, which differ\n * only by reference types, and therefore share a common erasure\n * and wrapping.\n * <p>\n * For an empirical discussion of the structure of method types,\n * see <a href=\"http://groups.google.com/group/jvm-languages/browse_thread/thread/ac9308ae74da9b7e/\">\n * the thread \"Avoiding Boxing\" on jvm-languages</a>.\n * There are approximately 2000 distinct erased method types in the JDK.\n * There are a little over 10 times that number of unerased types.\n * No more than half of these are likely to be loaded at once.\n * @author John Rose\n ","description":"","name":"MethodTypeForm","qualified_name":"java.lang.invoke.MethodTypeForm","type":2},{"comment":"\n * A RenderableImage is a common interface for rendering-independent\n * images (a notion which subsumes resolution independence).  That is,\n * images which are described and have operations applied to them\n * independent of any specific rendering of the image.  For example, a\n * RenderableImage can be rotated and cropped in\n * resolution-independent terms.  Then, it can be rendered for various\n * specific contexts, such as a draft preview, a high-quality screen\n * display, or a printer, each in an optimal fashion.\n *\n * <p> A RenderedImage is returned from a RenderableImage via the\n * createRendering() method, which takes a RenderContext.  The\n * RenderContext specifies how the RenderedImage should be\n * constructed.  Note that it is not possible to extract pixels\n * directly from a RenderableImage.\n *\n * <p> The createDefaultRendering() and createScaledRendering() methods are\n * convenience methods that construct an appropriate RenderContext\n * internally.  All of the rendering methods may return a reference to a\n * previously produced rendering.\n ","description":"","name":"RenderableImage","qualified_name":"java.awt.image.renderable.RenderableImage","type":3},{"comment":"\n * Instances of the class {@code Class} represent classes and\n * interfaces in a running Java application.  An enum is a kind of\n * class and an annotation is a kind of interface.  Every array also\n * belongs to a class that is reflected as a {@code Class} object\n * that is shared by all arrays with the same element type and number\n * of dimensions.  The primitive Java types ({@code boolean},\n * {@code byte}, {@code char}, {@code short},\n * {@code int}, {@code long}, {@code float}, and\n * {@code double}), and the keyword {@code void} are also\n * represented as {@code Class} objects.\n *\n * <p> {@code Class} has no public constructor. Instead {@code Class}\n * objects are constructed automatically by the Java Virtual Machine as classes\n * are loaded and by calls to the {@code defineClass} method in the class\n * loader.\n *\n * <p> The following example uses a {@code Class} object to print the\n * class name of an object:\n *\n * <blockquote><pre>\n *     void printClassName(Object obj) {\n *         System.out.println(\"The class of \" + obj +\n *                            \" is \" + obj.getClass().getName());\n *     }\n * </pre></blockquote>\n *\n * <p> It is also possible to get the {@code Class} object for a named\n * type (or for void) using a class literal.  See Section 15.8.2 of\n * <cite>The Java&trade; Language Specification</cite>.\n * For example:\n *\n * <blockquote>\n *     {@code System.out.println(\"The name of class Foo is: \"+Foo.class.getName());}\n * </blockquote>\n *\n * @param <T> the type of the class modeled by this {@code Class}\n * object.  For example, the type of {@code String.class} is {@code\n * Class<String>}.  Use {@code Class<?>} if the class being modeled is\n * unknown.\n *\n * @author  unascribed\n * @see     java.lang.ClassLoader#defineClass(byte[], int, int)\n * @since   JDK1.0\n ","description":"","name":"Class","qualified_name":"java.lang.Class","type":2},{"comment":"\n     * Generation of concrete BMH classes.\n     *\n     * A concrete BMH species is fit for binding a number of values adhering to a\n     * given type pattern. Reference types are erased.\n     *\n     * BMH species are cached by type pattern.\n     *\n     * A BMH species has a number of fields with the concrete (possibly erased) types of\n     * bound values. Setters are provided as an API in BMH. Getters are exposed as MHs,\n     * which can be included as names in lambda forms.\n     ","description":"","name":"Factory","qualified_name":"java.lang.invoke.BoundMethodHandle.Factory","type":2},{"comment":"\n * A <tt>MemoryUsage</tt> object represents a snapshot of memory usage.\n * Instances of the <tt>MemoryUsage</tt> class are usually constructed\n * by methods that are used to obtain memory usage\n * information about individual memory pool of the Java virtual machine or\n * the heap or non-heap memory of the Java virtual machine as a whole.\n *\n * <p> A <tt>MemoryUsage</tt> object contains four values:\n * <table summary=\"Describes the MemoryUsage object content\">\n * <tr>\n * <td valign=top> <tt>init</tt> </td>\n * <td valign=top> represents the initial amount of memory (in bytes) that\n *      the Java virtual machine requests from the operating system\n *      for memory management during startup.  The Java virtual machine\n *      may request additional memory from the operating system and\n *      may also release memory to the system over time.\n *      The value of <tt>init</tt> may be undefined.\n * </td>\n * </tr>\n * <tr>\n * <td valign=top> <tt>used</tt> </td>\n * <td valign=top> represents the amount of memory currently used (in bytes).\n * </td>\n * </tr>\n * <tr>\n * <td valign=top> <tt>committed</tt> </td>\n * <td valign=top> represents the amount of memory (in bytes) that is\n *      guaranteed to be available for use by the Java virtual machine.\n *      The amount of committed memory may change over time (increase\n *      or decrease).  The Java virtual machine may release memory to\n *      the system and <tt>committed</tt> could be less than <tt>init</tt>.\n *      <tt>committed</tt> will always be greater than\n *      or equal to <tt>used</tt>.\n * </td>\n * </tr>\n * <tr>\n * <td valign=top> <tt>max</tt> </td>\n * <td valign=top> represents the maximum amount of memory (in bytes)\n *      that can be used for memory management. Its value may be undefined.\n *      The maximum amount of memory may change over time if defined.\n *      The amount of used and committed memory will always be less than\n *      or equal to <tt>max</tt> if <tt>max</tt> is defined.\n *      A memory allocation may fail if it attempts to increase the\n *      used memory such that <tt>used &gt; committed</tt> even\n *      if <tt>used &lt;= max</tt> would still be true (for example,\n *      when the system is low on virtual memory).\n * </td>\n * </tr>\n * </table>\n *\n * Below is a picture showing an example of a memory pool:\n *\n * <pre>\n *        +----------------------------------------------+\n *        +////////////////           |                  +\n *        +////////////////           |                  +\n *        +----------------------------------------------+\n *\n *        |--------|\n *           init\n *        |---------------|\n *               used\n *        |---------------------------|\n *                  committed\n *        |----------------------------------------------|\n *                            max\n * </pre>\n *\n * <h3>MXBean Mapping</h3>\n * <tt>MemoryUsage</tt> is mapped to a {@link CompositeData CompositeData}\n * with attributes as specified in the {@link #from from} method.\n *\n * @author   Mandy Chung\n * @since   1.5\n ","description":"","name":"MemoryUsage","qualified_name":"java.lang.management.MemoryUsage","type":2},{"comment":"\n * <code>FlavorEvent</code> is used to notify interested parties\n * that available {@link DataFlavor}s have changed in the\n * {@link Clipboard} (the event source).\n *\n * @see FlavorListener\n *\n * @author Alexander Gerasimov\n * @since 1.5\n ","description":"","name":"FlavorEvent","qualified_name":"java.awt.datatransfer.FlavorEvent","type":2},{"comment":"\n     * Provide programmatic access to the persistent fields to be written\n     * to ObjectOutput.\n     *\n     * @since 1.2\n     ","description":"","name":"PutField","qualified_name":"java.io.ObjectOutputStream.PutField","type":2},{"comment":"","description":"","name":"InputMethodDescriptor","qualified_name":"java.awt.im.spi.InputMethodDescriptor","type":3},{"comment":"\n * The {@link ProcessBuilder#start()} and\n * {@link Runtime#exec(String[],String[],File) Runtime.exec}\n * methods create a native process and return an instance of a\n * subclass of {@code Process} that can be used to control the process\n * and obtain information about it.  The class {@code Process}\n * provides methods for performing input from the process, performing\n * output to the process, waiting for the process to complete,\n * checking the exit status of the process, and destroying (killing)\n * the process.\n *\n * <p>The methods that create processes may not work well for special\n * processes on certain native platforms, such as native windowing\n * processes, daemon processes, Win16/DOS processes on Microsoft\n * Windows, or shell scripts.\n *\n * <p>By default, the created subprocess does not have its own terminal\n * or console.  All its standard I/O (i.e. stdin, stdout, stderr)\n * operations will be redirected to the parent process, where they can\n * be accessed via the streams obtained using the methods\n * {@link #getOutputStream()},\n * {@link #getInputStream()}, and\n * {@link #getErrorStream()}.\n * The parent process uses these streams to feed input to and get output\n * from the subprocess.  Because some native platforms only provide\n * limited buffer size for standard input and output streams, failure\n * to promptly write the input stream or read the output stream of\n * the subprocess may cause the subprocess to block, or even deadlock.\n *\n * <p>Where desired, <a href=\"ProcessBuilder.html#redirect-input\">\n * subprocess I/O can also be redirected</a>\n * using methods of the {@link ProcessBuilder} class.\n *\n * <p>The subprocess is not killed when there are no more references to\n * the {@code Process} object, but rather the subprocess\n * continues executing asynchronously.\n *\n * <p>There is no requirement that a process represented by a {@code\n * Process} object execute asynchronously or concurrently with respect\n * to the Java process that owns the {@code Process} object.\n *\n * <p>As of 1.5, {@link ProcessBuilder#start()} is the preferred way\n * to create a {@code Process}.\n *\n * @since   JDK1.0\n ","description":"","name":"Process","qualified_name":"java.lang.Process","type":2},{"comment":"\n * The common interface extended by all annotation types.  Note that an\n * interface that manually extends this one does <i>not</i> define\n * an annotation type.  Also note that this interface does not itself\n * define an annotation type.\n *\n * More information about annotation types can be found in section 9.6 of\n * <cite>The Java&trade; Language Specification</cite>.\n *\n * The {@link java.lang.reflect.AnnotatedElement} interface discusses\n * compatibility concerns when evolving an annotation type from being\n * non-repeatable to being repeatable.\n *\n * @author  Josh Bloch\n * @since   1.5\n ","description":"","name":"Annotation","qualified_name":"java.lang.annotation.Annotation","type":3},{"comment":"\n * A semantic event which indicates that an item was selected or deselected.\n * This high-level event is generated by an ItemSelectable object (such as a\n * List) when an item is selected or deselected by the user.\n * The event is passed to every <code>ItemListener</code> object which\n * registered to receive such events using the component's\n * <code>addItemListener</code> method.\n * <P>\n * The object that implements the <code>ItemListener</code> interface gets\n * this <code>ItemEvent</code> when the event occurs. The listener is\n * spared the details of processing individual mouse movements and mouse\n * clicks, and can instead process a \"meaningful\" (semantic) event like\n * \"item selected\" or \"item deselected\".\n * <p>\n * An unspecified behavior will be caused if the {@code id} parameter\n * of any particular {@code ItemEvent} instance is not\n * in the range from {@code ITEM_FIRST} to {@code ITEM_LAST}.\n * <p>\n * The {@code stateChange} of any {@code ItemEvent} instance takes one of the following\n * values:\n *                     <ul>\n *                     <li> {@code ItemEvent.SELECTED}\n *                     <li> {@code ItemEvent.DESELECTED}\n *                     </ul>\n * Assigning the value different from listed above will cause an unspecified behavior.\n *\n * @author Carl Quinn\n *\n * @see java.awt.ItemSelectable\n * @see ItemListener\n * @see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/itemlistener.html\">Tutorial: Writing an Item Listener</a>\n *\n * @since 1.1\n ","description":"","name":"ItemEvent","qualified_name":"java.awt.event.ItemEvent","type":2},{"comment":" The following class is used as a template for Unsafe.defineAnonymousClass:","description":"","name":"T","qualified_name":"java.lang.invoke.MethodHandleImpl.BindCaller.T","type":2},{"comment":" SystemColor","description":"","name":"java_awt_SystemColor_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_awt_SystemColor_PersistenceDelegate","type":2},{"comment":"\n * A PropertyDescriptor describes one property that a Java Bean\n * exports via a pair of accessor methods.\n ","description":"","name":"PropertyDescriptor","qualified_name":"java.beans.PropertyDescriptor","type":2},{"comment":"\n * This class uses an affine transform to perform a linear mapping from\n * 2D coordinates in the source image or <CODE>Raster</CODE> to 2D coordinates\n * in the destination image or <CODE>Raster</CODE>.\n * The type of interpolation that is used is specified through a constructor,\n * either by a <CODE>RenderingHints</CODE> object or by one of the integer\n * interpolation types defined in this class.\n * <p>\n * If a <CODE>RenderingHints</CODE> object is specified in the constructor, the\n * interpolation hint and the rendering quality hint are used to set\n * the interpolation type for this operation.  The color rendering hint\n * and the dithering hint can be used when color conversion is required.\n * <p>\n * Note that the following constraints have to be met:\n * <ul>\n * <li>The source and destination must be different.\n * <li>For <CODE>Raster</CODE> objects, the number of bands in the source must\n * be equal to the number of bands in the destination.\n * </ul>\n * @see AffineTransform\n * @see BufferedImageFilter\n * @see java.awt.RenderingHints#KEY_INTERPOLATION\n * @see java.awt.RenderingHints#KEY_RENDERING\n * @see java.awt.RenderingHints#KEY_COLOR_RENDERING\n * @see java.awt.RenderingHints#KEY_DITHERING\n ","description":"","name":"AffineTransformOp","qualified_name":"java.awt.image.AffineTransformOp","type":2},{"comment":"","description":"","name":"PipedReader","qualified_name":"java.io.PipedReader","type":2},{"comment":"\n * The splash screen can be displayed at application startup, before the\n * Java Virtual Machine (JVM) starts. The splash screen is displayed as an\n * undecorated window containing an image. You can use GIF, JPEG, or PNG files\n * for the image. Animation is supported for the GIF format, while transparency\n * is supported both for GIF and PNG.  The window is positioned at the center\n * of the screen. The position on multi-monitor systems is not specified. It is\n * platform and implementation dependent.  The splash screen window is closed\n * automatically as soon as the first window is displayed by Swing/AWT (may be\n * also closed manually using the Java API, see below).\n * <P>\n * If your application is packaged in a jar file, you can use the\n * \"SplashScreen-Image\" option in a manifest file to show a splash screen.\n * Place the image in the jar archive and specify the path in the option.\n * The path should not have a leading slash.\n * <BR>\n * For example, in the <code>manifest.mf</code> file:\n * <PRE>\n * Manifest-Version: 1.0\n * Main-Class: Test\n * SplashScreen-Image: filename.gif\n * </PRE>\n * <P>\n * If the Java implementation provides the command-line interface and you run\n * your application by using the command line or a shortcut, use the Java\n * application launcher option to show a splash screen. The Oracle reference\n * implementation allows you to specify the splash screen image location with\n * the {@code -splash:} option.\n * <BR>\n * For example:\n * <PRE>\n * java -splash:filename.gif Test\n * </PRE>\n * The command line interface has higher precedence over the manifest\n * setting.\n * <p>\n * The splash screen will be displayed as faithfully as possible to present the\n * whole splash screen image given the limitations of the target platform and\n * display.\n * <p>\n * It is implied that the specified image is presented on the screen \"as is\",\n * i.e. preserving the exact color values as specified in the image file. Under\n * certain circumstances, though, the presented image may differ, e.g. when\n * applying color dithering to present a 32 bits per pixel (bpp) image on a 16\n * or 8 bpp screen. The native platform display configuration may also affect\n * the colors of the displayed image (e.g.  color profiles, etc.)\n * <p>\n * The {@code SplashScreen} class provides the API for controlling the splash\n * screen. This class may be used to close the splash screen, change the splash\n * screen image, get the splash screen native window position/size, and paint\n * in the splash screen. It cannot be used to create the splash screen. You\n * should use the options provided by the Java implementation for that.\n * <p>\n * This class cannot be instantiated. Only a single instance of this class\n * can exist, and it may be obtained by using the {@link #getSplashScreen()}\n * static method. In case the splash screen has not been created at\n * application startup via the command line or manifest file option,\n * the <code>getSplashScreen</code> method returns <code>null</code>.\n *\n * @author Oleg Semenov\n * @since 1.6\n ","description":"","name":"SplashScreen","qualified_name":"java.awt.SplashScreen","type":2},{"comment":"","description":"","name":"SinglePixelPackedSampleModel","qualified_name":"java.awt.image.SinglePixelPackedSampleModel","type":2},{"comment":"\n * The abstract class {@code Number} is the superclass of platform\n * classes representing numeric values that are convertible to the\n * primitive types {@code byte}, {@code double}, {@code float}, {@code\n * int}, {@code long}, and {@code short}.\n *\n * The specific semantics of the conversion from the numeric value of\n * a particular {@code Number} implementation to a given primitive\n * type is defined by the {@code Number} implementation in question.\n *\n * For platform classes, the conversion is often analogous to a\n * narrowing primitive conversion or a widening primitive conversion\n * as defining in <cite>The Java&trade; Language Specification</cite>\n * for converting between primitive types.  Therefore, conversions may\n * lose information about the overall magnitude of a numeric value, may\n * lose precision, and may even return a result of a different sign\n * than the input.\n *\n * See the documentation of a given {@code Number} implementation for\n * conversion details.\n *\n * @author      Lee Boynton\n * @author      Arthur van Hoff\n * @jls 5.1.2 Widening Primitive Conversions\n * @jls 5.1.3 Narrowing Primitive Conversions\n * @since   JDK1.0\n ","description":"","name":"Number","qualified_name":"java.lang.Number","type":2},{"comment":"\n * The peer interface for {@link TextComponent}.\n *\n * The peer interfaces are intended only for use in porting\n * the AWT. They are not intended for use by application\n * developers, and developers should not implement peers\n * nor invoke any of the peer methods directly on the peer\n * instances.\n ","description":"","name":"TextComponentPeer","qualified_name":"java.awt.peer.TextComponentPeer","type":3},{"comment":"\n * This is a utility class that can be used by beans that support bound\n * properties.  It manages a list of listeners and dispatches\n * {@link PropertyChangeEvent}s to them.  You can use an instance of this class\n * as a member field of your bean and delegate these types of work to it.\n * The {@link PropertyChangeListener} can be registered for all properties\n * or for a property specified by name.\n * <p>\n * Here is an example of {@code PropertyChangeSupport} usage that follows\n * the rules and recommendations laid out in the JavaBeans&trade; specification:\n * <pre>\n * public class MyBean {\n *     private final PropertyChangeSupport pcs = new PropertyChangeSupport(this);\n *\n *     public void addPropertyChangeListener(PropertyChangeListener listener) {\n *         this.pcs.addPropertyChangeListener(listener);\n *     }\n *\n *     public void removePropertyChangeListener(PropertyChangeListener listener) {\n *         this.pcs.removePropertyChangeListener(listener);\n *     }\n *\n *     private String value;\n *\n *     public String getValue() {\n *         return this.value;\n *     }\n *\n *     public void setValue(String newValue) {\n *         String oldValue = this.value;\n *         this.value = newValue;\n *         this.pcs.firePropertyChange(\"value\", oldValue, newValue);\n *     }\n *\n *     [...]\n * }\n * </pre>\n * <p>\n * A {@code PropertyChangeSupport} instance is thread-safe.\n * <p>\n * This class is serializable.  When it is serialized it will save\n * (and restore) any listeners that are themselves serializable.  Any\n * non-serializable listeners will be skipped during serialization.\n *\n * @see VetoableChangeSupport\n ","description":"","name":"PropertyChangeSupport","qualified_name":"java.beans.PropertyChangeSupport","type":2},{"comment":"\n     * An extension of ThreadLocal that obtains its initial value from\n     * the specified {@code Supplier}.\n     ","description":"","name":"SuppliedThreadLocal","qualified_name":"java.lang.ThreadLocal.SuppliedThreadLocal","type":2},{"comment":"","description":"","name":"PushbackReader","qualified_name":"java.io.PushbackReader","type":2},{"comment":"\n     * The <code>Double</code> class defines a point specified in\n     * <code>double</code> precision.\n     * @since 1.2\n     ","description":"","name":"Double","qualified_name":"java.awt.geom.Point2D.Double","type":2},{"comment":" List","description":"","name":"java_awt_List_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_awt_List_PersistenceDelegate","type":2},{"comment":"\n * The <code>GridBagLayout</code> class is a flexible layout\n * manager that aligns components vertically, horizontally or along their\n * baseline without requiring that the components be of the same size.\n * Each <code>GridBagLayout</code> object maintains a dynamic,\n * rectangular grid of cells, with each component occupying\n * one or more cells, called its <em>display area</em>.\n * <p>\n * Each component managed by a <code>GridBagLayout</code> is associated with\n * an instance of {@link GridBagConstraints}.  The constraints object\n * specifies where a component's display area should be located on the grid\n * and how the component should be positioned within its display area.  In\n * addition to its constraints object, the <code>GridBagLayout</code> also\n * considers each component's minimum and preferred sizes in order to\n * determine a component's size.\n * <p>\n * The overall orientation of the grid depends on the container's\n * {@link ComponentOrientation} property.  For horizontal left-to-right\n * orientations, grid coordinate (0,0) is in the upper left corner of the\n * container with x increasing to the right and y increasing downward.  For\n * horizontal right-to-left orientations, grid coordinate (0,0) is in the upper\n * right corner of the container with x increasing to the left and y\n * increasing downward.\n * <p>\n * To use a grid bag layout effectively, you must customize one or more\n * of the <code>GridBagConstraints</code> objects that are associated\n * with its components. You customize a <code>GridBagConstraints</code>\n * object by setting one or more of its instance variables:\n *\n * <dl>\n * <dt>{@link GridBagConstraints#gridx},\n * {@link GridBagConstraints#gridy}\n * <dd>Specifies the cell containing the leading corner of the component's\n * display area, where the cell at the origin of the grid has address\n * <code>gridx&nbsp;=&nbsp;0</code>,\n * <code>gridy&nbsp;=&nbsp;0</code>.  For horizontal left-to-right layout,\n * a component's leading corner is its upper left.  For horizontal\n * right-to-left layout, a component's leading corner is its upper right.\n * Use <code>GridBagConstraints.RELATIVE</code> (the default value)\n * to specify that the component be placed immediately following\n * (along the x axis for <code>gridx</code> or the y axis for\n * <code>gridy</code>) the component that was added to the container\n * just before this component was added.\n * <dt>{@link GridBagConstraints#gridwidth},\n * {@link GridBagConstraints#gridheight}\n * <dd>Specifies the number of cells in a row (for <code>gridwidth</code>)\n * or column (for <code>gridheight</code>)\n * in the component's display area.\n * The default value is 1.\n * Use <code>GridBagConstraints.REMAINDER</code> to specify\n * that the component's display area will be from <code>gridx</code>\n * to the last cell in the row (for <code>gridwidth</code>)\n * or from <code>gridy</code> to the last cell in the column\n * (for <code>gridheight</code>).\n *\n * Use <code>GridBagConstraints.RELATIVE</code> to specify\n * that the component's display area will be from <code>gridx</code>\n * to the next to the last cell in its row (for <code>gridwidth</code>\n * or from <code>gridy</code> to the next to the last cell in its\n * column (for <code>gridheight</code>).\n *\n * <dt>{@link GridBagConstraints#fill}\n * <dd>Used when the component's display area\n * is larger than the component's requested size\n * to determine whether (and how) to resize the component.\n * Possible values are\n * <code>GridBagConstraints.NONE</code> (the default),\n * <code>GridBagConstraints.HORIZONTAL</code>\n * (make the component wide enough to fill its display area\n * horizontally, but don't change its height),\n * <code>GridBagConstraints.VERTICAL</code>\n * (make the component tall enough to fill its display area\n * vertically, but don't change its width), and\n * <code>GridBagConstraints.BOTH</code>\n * (make the component fill its display area entirely).\n * <dt>{@link GridBagConstraints#ipadx},\n * {@link GridBagConstraints#ipady}\n * <dd>Specifies the component's internal padding within the layout,\n * how much to add to the minimum size of the component.\n * The width of the component will be at least its minimum width\n * plus <code>ipadx</code> pixels. Similarly, the height of\n * the component will be at least the minimum height plus\n * <code>ipady</code> pixels.\n * <dt>{@link GridBagConstraints#insets}\n * <dd>Specifies the component's external padding, the minimum\n * amount of space between the component and the edges of its display area.\n * <dt>{@link GridBagConstraints#anchor}\n * <dd>Specifies where the component should be positioned in its display area.\n * There are three kinds of possible values: absolute, orientation-relative,\n * and baseline-relative\n * Orientation relative values are interpreted relative to the container's\n * <code>ComponentOrientation</code> property while absolute values\n * are not.  Baseline relative values are calculated relative to the\n * baseline.  Valid values are:\n *\n * <center><table BORDER=0 WIDTH=800\n *        SUMMARY=\"absolute, relative and baseline values as described above\">\n * <tr>\n * <th><P style=\"text-align:left\">Absolute Values</th>\n * <th><P style=\"text-align:left\">Orientation Relative Values</th>\n * <th><P style=\"text-align:left\">Baseline Relative Values</th>\n * </tr>\n * <tr>\n * <td>\n * <ul style=\"list-style-type:none\">\n * <li><code>GridBagConstraints.NORTH</code></li>\n * <li><code>GridBagConstraints.SOUTH</code></li>\n * <li><code>GridBagConstraints.WEST</code></li>\n * <li><code>GridBagConstraints.EAST</code></li>\n * <li><code>GridBagConstraints.NORTHWEST</code></li>\n * <li><code>GridBagConstraints.NORTHEAST</code></li>\n * <li><code>GridBagConstraints.SOUTHWEST</code></li>\n * <li><code>GridBagConstraints.SOUTHEAST</code></li>\n * <li><code>GridBagConstraints.CENTER</code> (the default)</li>\n * </ul>\n * </td>\n * <td>\n * <ul style=\"list-style-type:none\">\n * <li><code>GridBagConstraints.PAGE_START</code></li>\n * <li><code>GridBagConstraints.PAGE_END</code></li>\n * <li><code>GridBagConstraints.LINE_START</code></li>\n * <li><code>GridBagConstraints.LINE_END</code></li>\n * <li><code>GridBagConstraints.FIRST_LINE_START</code></li>\n * <li><code>GridBagConstraints.FIRST_LINE_END</code></li>\n * <li><code>GridBagConstraints.LAST_LINE_START</code></li>\n * <li><code>GridBagConstraints.LAST_LINE_END</code></li>\n * </ul>\n * </td>\n * <td>\n * <ul style=\"list-style-type:none\">\n * <li><code>GridBagConstraints.BASELINE</code></li>\n * <li><code>GridBagConstraints.BASELINE_LEADING</code></li>\n * <li><code>GridBagConstraints.BASELINE_TRAILING</code></li>\n * <li><code>GridBagConstraints.ABOVE_BASELINE</code></li>\n * <li><code>GridBagConstraints.ABOVE_BASELINE_LEADING</code></li>\n * <li><code>GridBagConstraints.ABOVE_BASELINE_TRAILING</code></li>\n * <li><code>GridBagConstraints.BELOW_BASELINE</code></li>\n * <li><code>GridBagConstraints.BELOW_BASELINE_LEADING</code></li>\n * <li><code>GridBagConstraints.BELOW_BASELINE_TRAILING</code></li>\n * </ul>\n * </td>\n * </tr>\n * </table></center>\n * <dt>{@link GridBagConstraints#weightx},\n * {@link GridBagConstraints#weighty}\n * <dd>Used to determine how to distribute space, which is\n * important for specifying resizing behavior.\n * Unless you specify a weight for at least one component\n * in a row (<code>weightx</code>) and column (<code>weighty</code>),\n * all the components clump together in the center of their container.\n * This is because when the weight is zero (the default),\n * the <code>GridBagLayout</code> object puts any extra space\n * between its grid of cells and the edges of the container.\n * </dl>\n * <p>\n * Each row may have a baseline; the baseline is determined by the\n * components in that row that have a valid baseline and are aligned\n * along the baseline (the component's anchor value is one of {@code\n * BASELINE}, {@code BASELINE_LEADING} or {@code BASELINE_TRAILING}).\n * If none of the components in the row has a valid baseline, the row\n * does not have a baseline.\n * <p>\n * If a component spans rows it is aligned either to the baseline of\n * the start row (if the baseline-resize behavior is {@code\n * CONSTANT_ASCENT}) or the end row (if the baseline-resize behavior\n * is {@code CONSTANT_DESCENT}).  The row that the component is\n * aligned to is called the <em>prevailing row</em>.\n * <p>\n * The following figure shows a baseline layout and includes a\n * component that spans rows:\n * <center><table summary=\"Baseline Layout\">\n * <tr ALIGN=CENTER>\n * <td>\n * <img src=\"doc-files/GridBagLayout-baseline.png\"\n *  alt=\"The following text describes this graphic (Figure 1).\" style=\"float:center\">\n * </td>\n * </table></center>\n * This layout consists of three components:\n * <ul><li>A panel that starts in row 0 and ends in row 1.  The panel\n *   has a baseline-resize behavior of <code>CONSTANT_DESCENT</code> and has\n *   an anchor of <code>BASELINE</code>.  As the baseline-resize behavior\n *   is <code>CONSTANT_DESCENT</code> the prevailing row for the panel is\n *   row 1.\n * <li>Two buttons, each with a baseline-resize behavior of\n *   <code>CENTER_OFFSET</code> and an anchor of <code>BASELINE</code>.\n * </ul>\n * Because the second button and the panel share the same prevailing row,\n * they are both aligned along their baseline.\n * <p>\n * Components positioned using one of the baseline-relative values resize\n * differently than when positioned using an absolute or orientation-relative\n * value.  How components change is dictated by how the baseline of the\n * prevailing row changes.  The baseline is anchored to the\n * bottom of the display area if any components with the same prevailing row\n * have a baseline-resize behavior of <code>CONSTANT_DESCENT</code>,\n * otherwise the baseline is anchored to the top of the display area.\n * The following rules dictate the resize behavior:\n * <ul>\n * <li>Resizable components positioned above the baseline can only\n * grow as tall as the baseline.  For example, if the baseline is at 100\n * and anchored at the top, a resizable component positioned above the\n * baseline can never grow more than 100 units.\n * <li>Similarly, resizable components positioned below the baseline can\n * only grow as high as the difference between the display height and the\n * baseline.\n * <li>Resizable components positioned on the baseline with a\n * baseline-resize behavior of <code>OTHER</code> are only resized if\n * the baseline at the resized size fits within the display area.  If\n * the baseline is such that it does not fit within the display area\n * the component is not resized.\n * <li>Components positioned on the baseline that do not have a\n * baseline-resize behavior of <code>OTHER</code>\n * can only grow as tall as {@code display height - baseline + baseline of component}.\n * </ul>\n * If you position a component along the baseline, but the\n * component does not have a valid baseline, it will be vertically centered\n * in its space.  Similarly if you have positioned a component relative\n * to the baseline and none of the components in the row have a valid\n * baseline the component is vertically centered.\n * <p>\n * The following figures show ten components (all buttons)\n * managed by a grid bag layout.  Figure 2 shows the layout for a horizontal,\n * left-to-right container and Figure 3 shows the layout for a horizontal,\n * right-to-left container.\n *\n * <center><table WIDTH=600 summary=\"layout\">\n * <tr ALIGN=CENTER>\n * <td>\n * <img src=\"doc-files/GridBagLayout-1.gif\" alt=\"The preceding text describes this graphic (Figure 1).\" style=\"float:center; margin: 7px 10px;\">\n * </td>\n * <td>\n * <img src=\"doc-files/GridBagLayout-2.gif\" alt=\"The preceding text describes this graphic (Figure 2).\" style=\"float:center; margin: 7px 10px;\">\n * </td>\n * <tr ALIGN=CENTER>\n * <td>Figure 2: Horizontal, Left-to-Right</td>\n * <td>Figure 3: Horizontal, Right-to-Left</td>\n * </tr>\n * </table></center>\n * <p>\n * Each of the ten components has the <code>fill</code> field\n * of its associated <code>GridBagConstraints</code> object\n * set to <code>GridBagConstraints.BOTH</code>.\n * In addition, the components have the following non-default constraints:\n *\n * <ul>\n * <li>Button1, Button2, Button3: <code>weightx&nbsp;=&nbsp;1.0</code>\n * <li>Button4: <code>weightx&nbsp;=&nbsp;1.0</code>,\n * <code>gridwidth&nbsp;=&nbsp;GridBagConstraints.REMAINDER</code>\n * <li>Button5: <code>gridwidth&nbsp;=&nbsp;GridBagConstraints.REMAINDER</code>\n * <li>Button6: <code>gridwidth&nbsp;=&nbsp;GridBagConstraints.RELATIVE</code>\n * <li>Button7: <code>gridwidth&nbsp;=&nbsp;GridBagConstraints.REMAINDER</code>\n * <li>Button8: <code>gridheight&nbsp;=&nbsp;2</code>,\n * <code>weighty&nbsp;=&nbsp;1.0</code>\n * <li>Button9, Button 10:\n * <code>gridwidth&nbsp;=&nbsp;GridBagConstraints.REMAINDER</code>\n * </ul>\n * <p>\n * Here is the code that implements the example shown above:\n *\n * <hr><blockquote><pre>\n * import java.awt.*;\n * import java.util.*;\n * import java.applet.Applet;\n *\n * public class GridBagEx1 extends Applet {\n *\n *     protected void makebutton(String name,\n *                               GridBagLayout gridbag,\n *                               GridBagConstraints c) {\n *         Button button = new Button(name);\n *         gridbag.setConstraints(button, c);\n *         add(button);\n *     }\n *\n *     public void init() {\n *         GridBagLayout gridbag = new GridBagLayout();\n *         GridBagConstraints c = new GridBagConstraints();\n *\n *         setFont(new Font(\"SansSerif\", Font.PLAIN, 14));\n *         setLayout(gridbag);\n *\n *         c.fill = GridBagConstraints.BOTH;\n *         c.weightx = 1.0;\n *         makebutton(\"Button1\", gridbag, c);\n *         makebutton(\"Button2\", gridbag, c);\n *         makebutton(\"Button3\", gridbag, c);\n *\n *         c.gridwidth = GridBagConstraints.REMAINDER; //end row\n *         makebutton(\"Button4\", gridbag, c);\n *\n *         c.weightx = 0.0;                //reset to the default\n *         makebutton(\"Button5\", gridbag, c); //another row\n *\n *         c.gridwidth = GridBagConstraints.RELATIVE; //next-to-last in row\n *         makebutton(\"Button6\", gridbag, c);\n *\n *         c.gridwidth = GridBagConstraints.REMAINDER; //end row\n *         makebutton(\"Button7\", gridbag, c);\n *\n *         c.gridwidth = 1;                //reset to the default\n *         c.gridheight = 2;\n *         c.weighty = 1.0;\n *         makebutton(\"Button8\", gridbag, c);\n *\n *         c.weighty = 0.0;                //reset to the default\n *         c.gridwidth = GridBagConstraints.REMAINDER; //end row\n *         c.gridheight = 1;               //reset to the default\n *         makebutton(\"Button9\", gridbag, c);\n *         makebutton(\"Button10\", gridbag, c);\n *\n *         setSize(300, 100);\n *     }\n *\n *     public static void main(String args[]) {\n *         Frame f = new Frame(\"GridBag Layout Example\");\n *         GridBagEx1 ex1 = new GridBagEx1();\n *\n *         ex1.init();\n *\n *         f.add(\"Center\", ex1);\n *         f.pack();\n *         f.setSize(f.getPreferredSize());\n *         f.show();\n *     }\n * }\n * </pre></blockquote><hr>\n * <p>\n * @author Doug Stein\n * @author Bill Spitzak (orignial NeWS &amp; OLIT implementation)\n * @see       java.awt.GridBagConstraints\n * @see       java.awt.GridBagLayoutInfo\n * @see       java.awt.ComponentOrientation\n * @since JDK1.0\n ","description":"","name":"GridBagLayout","qualified_name":"java.awt.GridBagLayout","type":2},{"comment":"","description":"","name":"InheritableThreadLocal","qualified_name":"java.lang.InheritableThreadLocal","type":2},{"comment":"\n * In JDK 1.1.1, the pkg private class java.awt.PeerFixer was moved to\n * become an inner class of ScrollPane, which broke serialization\n * for ScrollPane objects using JDK 1.1.\n * Instead of moving it back out here, which would break all JDK 1.1.x\n * releases, we keep PeerFixer in both places. Because of the scoping rules,\n * the PeerFixer that is used in ScrollPane will be the one that is the\n * inner class. This pkg private PeerFixer class below will only be used\n * if the Java 2 platform is used to deserialize ScrollPane objects that were serialized\n * using JDK1.1\n ","description":"","name":"PeerFixer","qualified_name":"java.awt.PeerFixer","type":2},{"comment":"\n * Signals that the class doesn't have a field of a specified name.\n *\n * @author  unascribed\n * @since   JDK1.1\n ","description":"","name":"NoSuchFieldException","qualified_name":"java.lang.NoSuchFieldException","type":2},{"comment":"\n     * Common type of value suppliers that are holding a referent.\n     * The {@link #equals} and {@link #hashCode} of implementations is defined\n     * to compare the referent by identity.\n     ","description":"","name":"Value","qualified_name":"java.lang.reflect.WeakCache.Value","type":3},{"comment":"","description":"","name":"Console","qualified_name":"java.io.Console","type":2},{"comment":"\n * A class which extends the {@code EventListenerProxy}\n * specifically for adding a {@code VetoableChangeListener}\n * with a \"constrained\" property.\n * Instances of this class can be added\n * as {@code VetoableChangeListener}s to a bean\n * which supports firing vetoable change events.\n * <p>\n * If the object has a {@code getVetoableChangeListeners} method\n * then the array returned could be a mixture of {@code VetoableChangeListener}\n * and {@code VetoableChangeListenerProxy} objects.\n *\n * @see java.util.EventListenerProxy\n * @see VetoableChangeSupport#getVetoableChangeListeners\n * @since 1.4\n ","description":"","name":"VetoableChangeListenerProxy","qualified_name":"java.beans.VetoableChangeListenerProxy","type":2},{"comment":"\n * The <code>Ellipse2D</code> class describes an ellipse that is defined\n * by a framing rectangle.\n * <p>\n * This class is only the abstract superclass for all objects which\n * store a 2D ellipse.\n * The actual storage representation of the coordinates is left to\n * the subclass.\n *\n * @author      Jim Graham\n * @since 1.2\n ","description":"","name":"Ellipse2D","qualified_name":"java.awt.geom.Ellipse2D","type":2},{"comment":"\n * A utility class to iterate over the path segments of an ellipse\n * through the PathIterator interface.\n *\n * @author      Jim Graham\n ","description":"","name":"EllipseIterator","qualified_name":"java.awt.geom.EllipseIterator","type":2},{"comment":"","description":"","name":"CharacterDataPrivateUse","qualified_name":"java.lang.CharacterDataPrivateUse","type":2},{"comment":"\n * Thrown by a method invocation on a proxy instance if its invocation\n * handler's {@link InvocationHandler#invoke invoke} method throws a\n * checked exception (a {@code Throwable} that is not assignable\n * to {@code RuntimeException} or {@code Error}) that\n * is not assignable to any of the exception types declared in the\n * {@code throws} clause of the method that was invoked on the\n * proxy instance and dispatched to the invocation handler.\n *\n * <p>An {@code UndeclaredThrowableException} instance contains\n * the undeclared checked exception that was thrown by the invocation\n * handler, and it can be retrieved with the\n * {@code getUndeclaredThrowable()} method.\n * {@code UndeclaredThrowableException} extends\n * {@code RuntimeException}, so it is an unchecked exception\n * that wraps a checked exception.\n *\n * <p>As of release 1.4, this exception has been retrofitted to\n * conform to the general purpose exception-chaining mechanism.  The\n * \"undeclared checked exception that was thrown by the invocation\n * handler\" that may be provided at construction time and accessed via\n * the {@link #getUndeclaredThrowable()} method is now known as the\n * <i>cause</i>, and may be accessed via the {@link\n * Throwable#getCause()} method, as well as the aforementioned \"legacy\n * method.\"\n *\n * @author      Peter Jones\n * @see         InvocationHandler\n * @since       1.3\n ","description":"","name":"UndeclaredThrowableException","qualified_name":"java.lang.reflect.UndeclaredThrowableException","type":2},{"comment":"\n * An asynchronous update interface for receiving notifications about\n * Image information as the Image is constructed.\n *\n * @author      Jim Graham\n ","description":"","name":"ImageObserver","qualified_name":"java.awt.image.ImageObserver","type":3},{"comment":"\n * All items in a menu must belong to the class\n * <code>MenuItem</code>, or one of its subclasses.\n * <p>\n * The default <code>MenuItem</code> object embodies\n * a simple labeled menu item.\n * <p>\n * This picture of a menu bar shows five menu items:\n * <IMG SRC=\"doc-files/MenuBar-1.gif\" alt=\"The following text describes this graphic.\"\n * style=\"float:center; margin: 7px 10px;\">\n * <br style=\"clear:left;\">\n * The first two items are simple menu items, labeled\n * <code>\"Basic\"</code> and <code>\"Simple\"</code>.\n * Following these two items is a separator, which is itself\n * a menu item, created with the label <code>\"-\"</code>.\n * Next is an instance of <code>CheckboxMenuItem</code>\n * labeled <code>\"Check\"</code>. The final menu item is a\n * submenu labeled <code>\"More&nbsp;Examples\"</code>,\n * and this submenu is an instance of <code>Menu</code>.\n * <p>\n * When a menu item is selected, AWT sends an action event to\n * the menu item. Since the event is an\n * instance of <code>ActionEvent</code>, the <code>processEvent</code>\n * method examines the event and passes it along to\n * <code>processActionEvent</code>. The latter method redirects the\n * event to any <code>ActionListener</code> objects that have\n * registered an interest in action events generated by this\n * menu item.\n * <P>\n * Note that the subclass <code>Menu</code> overrides this behavior and\n * does not send any event to the frame until one of its subitems is\n * selected.\n *\n * @author Sami Shaio\n ","description":"","name":"MenuItem","qualified_name":"java.awt.MenuItem","type":2},{"comment":"","description":"","name":"FileNotFoundException","qualified_name":"java.io.FileNotFoundException","type":2},{"comment":"\n * The symbolic, non-executable form of a method handle's invocation semantics.\n * It consists of a series of names.\n * The first N (N=arity) names are parameters,\n * while any remaining names are temporary values.\n * Each temporary specifies the application of a function to some arguments.\n * The functions are method handles, while the arguments are mixes of\n * constant values and local names.\n * The result of the lambda is defined as one of the names, often the last one.\n * <p>\n * Here is an approximate grammar:\n * <blockquote><pre>{@code\n * LambdaForm = \"(\" ArgName* \")=>{\" TempName* Result \"}\"\n * ArgName = \"a\" N \":\" T\n * TempName = \"t\" N \":\" T \"=\" Function \"(\" Argument* \");\"\n * Function = ConstantValue\n * Argument = NameRef | ConstantValue\n * Result = NameRef | \"void\"\n * NameRef = \"a\" N | \"t\" N\n * N = (any whole number)\n * T = \"L\" | \"I\" | \"J\" | \"F\" | \"D\" | \"V\"\n * }</pre></blockquote>\n * Names are numbered consecutively from left to right starting at zero.\n * (The letters are merely a taste of syntax sugar.)\n * Thus, the first temporary (if any) is always numbered N (where N=arity).\n * Every occurrence of a name reference in an argument list must refer to\n * a name previously defined within the same lambda.\n * A lambda has a void result if and only if its result index is -1.\n * If a temporary has the type \"V\", it cannot be the subject of a NameRef,\n * even though possesses a number.\n * Note that all reference types are erased to \"L\", which stands for {@code Object}.\n * All subword types (boolean, byte, short, char) are erased to \"I\" which is {@code int}.\n * The other types stand for the usual primitive types.\n * <p>\n * Function invocation closely follows the static rules of the Java verifier.\n * Arguments and return values must exactly match when their \"Name\" types are\n * considered.\n * Conversions are allowed only if they do not change the erased type.\n * <ul>\n * <li>L = Object: casts are used freely to convert into and out of reference types\n * <li>I = int: subword types are forcibly narrowed when passed as arguments (see {@code explicitCastArguments})\n * <li>J = long: no implicit conversions\n * <li>F = float: no implicit conversions\n * <li>D = double: no implicit conversions\n * <li>V = void: a function result may be void if and only if its Name is of type \"V\"\n * </ul>\n * Although implicit conversions are not allowed, explicit ones can easily be\n * encoded by using temporary expressions which call type-transformed identity functions.\n * <p>\n * Examples:\n * <blockquote><pre>{@code\n * (a0:J)=>{ a0 }\n *     == identity(long)\n * (a0:I)=>{ t1:V = System.out#println(a0); void }\n *     == System.out#println(int)\n * (a0:L)=>{ t1:V = System.out#println(a0); a0 }\n *     == identity, with printing side-effect\n * (a0:L, a1:L)=>{ t2:L = BoundMethodHandle#argument(a0);\n *                 t3:L = BoundMethodHandle#target(a0);\n *                 t4:L = MethodHandle#invoke(t3, t2, a1); t4 }\n *     == general invoker for unary insertArgument combination\n * (a0:L, a1:L)=>{ t2:L = FilterMethodHandle#filter(a0);\n *                 t3:L = MethodHandle#invoke(t2, a1);\n *                 t4:L = FilterMethodHandle#target(a0);\n *                 t5:L = MethodHandle#invoke(t4, t3); t5 }\n *     == general invoker for unary filterArgument combination\n * (a0:L, a1:L)=>{ ...(same as previous example)...\n *                 t5:L = MethodHandle#invoke(t4, t3, a1); t5 }\n *     == general invoker for unary/unary foldArgument combination\n * (a0:L, a1:I)=>{ t2:I = identity(long).asType((int)->long)(a1); t2 }\n *     == invoker for identity method handle which performs i2l\n * (a0:L, a1:L)=>{ t2:L = BoundMethodHandle#argument(a0);\n *                 t3:L = Class#cast(t2,a1); t3 }\n *     == invoker for identity method handle which performs cast\n * }</pre></blockquote>\n * <p>\n * @author John Rose, JSR 292 EG\n ","description":"","name":"LambdaForm","qualified_name":"java.lang.invoke.LambdaForm","type":2},{"comment":"\n * The <code>Polygon</code> class encapsulates a description of a\n * closed, two-dimensional region within a coordinate space. This\n * region is bounded by an arbitrary number of line segments, each of\n * which is one side of the polygon. Internally, a polygon\n * comprises of a list of {@code (x,y)}\n * coordinate pairs, where each pair defines a <i>vertex</i> of the\n * polygon, and two successive pairs are the endpoints of a\n * line that is a side of the polygon. The first and final\n * pairs of {@code (x,y)} points are joined by a line segment\n * that closes the polygon.  This <code>Polygon</code> is defined with\n * an even-odd winding rule.  See\n * {@link java.awt.geom.PathIterator#WIND_EVEN_ODD WIND_EVEN_ODD}\n * for a definition of the even-odd winding rule.\n * This class's hit-testing methods, which include the\n * <code>contains</code>, <code>intersects</code> and <code>inside</code>\n * methods, use the <i>insideness</i> definition described in the\n * {@link Shape} class comments.\n *\n * @author      Sami Shaio\n * @see Shape\n * @author      Herb Jellinek\n * @since       1.0\n ","description":"","name":"Polygon","qualified_name":"java.awt.Polygon","type":2},{"comment":"","description":"","name":"DocumentModalEventFilter","qualified_name":"java.awt.ModalEventFilter.DocumentModalEventFilter","type":2},{"comment":" This subclass represents invokespecial instructions. ","description":"","name":"Special","qualified_name":"java.lang.invoke.DirectMethodHandle.Special","type":2},{"comment":"\n     * This class implements accessibility support for the\n     * <code>Frame</code> class.  It provides an implementation of the\n     * Java Accessibility API appropriate to frame user-interface elements.\n     * @since 1.3\n     ","description":"","name":"AccessibleAWTFrame","qualified_name":"java.awt.Frame.AccessibleAWTFrame","type":2},{"comment":"","description":"","name":"ApplicationShutdownHooks","qualified_name":"java.lang.ApplicationShutdownHooks","type":2},{"comment":"\n * The peer interface for {@link ScrollPane}.\n *\n * The peer interfaces are intended only for use in porting\n * the AWT. They are not intended for use by application\n * developers, and developers should not implement peers\n * nor invoke any of the peer methods directly on the peer\n * instances.\n ","description":"","name":"ScrollPanePeer","qualified_name":"java.awt.peer.ScrollPanePeer","type":3},{"comment":"","description":"","name":"ThreadDeath","qualified_name":"java.lang.ThreadDeath","type":2},{"comment":"\n * An abstract adapter class for receiving container events.\n * The methods in this class are empty. This class exists as\n * convenience for creating listener objects.\n * <P>\n * Extend this class to create a <code>ContainerEvent</code> listener\n * and override the methods for the events of interest. (If you implement the\n * <code>ContainerListener</code> interface, you have to define all of\n * the methods in it. This abstract class defines null methods for them\n * all, so you can only have to define methods for events you care about.)\n * <P>\n * Create a listener object using the extended class and then register it with\n * a component using the component's <code>addContainerListener</code>\n * method. When the container's contents change because a component has\n * been added or removed, the relevant method in the listener object is invoked,\n * and the <code>ContainerEvent</code> is passed to it.\n *\n * @see ContainerEvent\n * @see ContainerListener\n * @see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/containerlistener.html\">Tutorial: Writing a Container Listener</a>\n *\n * @author Amy Fowler\n * @since 1.1\n ","description":"","name":"ContainerAdapter","qualified_name":"java.awt.event.ContainerAdapter","type":2},{"comment":"","description":"","name":"File","qualified_name":"java.io.File","type":2},{"comment":"","description":"","name":"IllegalPathStateException","qualified_name":"java.awt.geom.IllegalPathStateException","type":2},{"comment":"","description":"","name":"ICC_Profile","qualified_name":"java.awt.color.ICC_Profile","type":2},{"comment":"\n * A <code>ParameterBlock</code> encapsulates all the information about sources and\n * parameters (Objects) required by a RenderableImageOp, or other\n * classes that process images.\n *\n * <p> Although it is possible to place arbitrary objects in the\n * source Vector, users of this class may impose semantic constraints\n * such as requiring all sources to be RenderedImages or\n * RenderableImage.  <code>ParameterBlock</code> itself is merely a container and\n * performs no checking on source or parameter types.\n *\n * <p> All parameters in a <code>ParameterBlock</code> are objects; convenience\n * add and set methods are available that take arguments of base type and\n * construct the appropriate subclass of Number (such as\n * Integer or Float).  Corresponding get methods perform a\n * downward cast and have return values of base type; an exception\n * will be thrown if the stored values do not have the correct type.\n * There is no way to distinguish between the results of\n * \"short s; add(s)\" and \"add(new Short(s))\".\n *\n * <p> Note that the get and set methods operate on references.\n * Therefore, one must be careful not to share references between\n * <code>ParameterBlock</code>s when this is inappropriate.  For example, to create\n * a new <code>ParameterBlock</code> that is equal to an old one except for an\n * added source, one might be tempted to write:\n *\n * <pre>\n * ParameterBlock addSource(ParameterBlock pb, RenderableImage im) {\n *     ParameterBlock pb1 = new ParameterBlock(pb.getSources());\n *     pb1.addSource(im);\n *     return pb1;\n * }\n * </pre>\n *\n * <p> This code will have the side effect of altering the original\n * <code>ParameterBlock</code>, since the getSources operation returned a reference\n * to its source Vector.  Both pb and pb1 share their source Vector,\n * and a change in either is visible to both.\n *\n * <p> A correct way to write the addSource function is to clone\n * the source Vector:\n *\n * <pre>\n * ParameterBlock addSource (ParameterBlock pb, RenderableImage im) {\n *     ParameterBlock pb1 = new ParameterBlock(pb.getSources().clone());\n *     pb1.addSource(im);\n *     return pb1;\n * }\n * </pre>\n *\n * <p> The clone method of <code>ParameterBlock</code> has been defined to\n * perform a clone of both the source and parameter Vectors for\n * this reason.  A standard, shallow clone is available as\n * shallowClone.\n *\n * <p> The addSource, setSource, add, and set methods are\n * defined to return 'this' after adding their argument.  This allows\n * use of syntax like:\n *\n * <pre>\n * ParameterBlock pb = new ParameterBlock();\n * op = new RenderableImageOp(\"operation\", pb.add(arg1).add(arg2));\n * </pre>\n * ","description":"","name":"ParameterBlock","qualified_name":"java.awt.image.renderable.ParameterBlock","type":2},{"comment":"\n * The <code>PrinterJob</code> class is the principal class that controls\n * printing. An application calls methods in this class to set up a job,\n * optionally to invoke a print dialog with the user, and then to print\n * the pages of the job.\n ","description":"","name":"PrinterJob","qualified_name":"java.awt.print.PrinterJob","type":2},{"comment":"","description":"","name":"ByteFilter","qualified_name":"java.awt.TexturePaintContext.ByteFilter","type":2},{"comment":"\n * Input method events contain information about text that is being\n * composed using an input method. Whenever the text changes, the\n * input method sends an event. If the text component that's currently\n * using the input method is an active client, the event is dispatched\n * to that component. Otherwise, it is dispatched to a separate\n * composition window.\n *\n * <p>\n * The text included with the input method event consists of two parts:\n * committed text and composed text. Either part may be empty. The two\n * parts together replace any uncommitted composed text sent in previous events,\n * or the currently selected committed text.\n * Committed text should be integrated into the text component's persistent\n * data, it will not be sent again. Composed text may be sent repeatedly,\n * with changes to reflect the user's editing operations. Committed text\n * always precedes composed text.\n *\n * @author JavaSoft Asia/Pacific\n * @since 1.2\n ","description":"","name":"InputMethodEvent","qualified_name":"java.awt.event.InputMethodEvent","type":2},{"comment":"","description":"","name":"ReferenceQueue","qualified_name":"java.lang.ref.ReferenceQueue","type":2},{"comment":"","description":"","name":"DropTargetContext","qualified_name":"java.awt.dnd.DropTargetContext","type":2},{"comment":"","description":"","name":"BeanContextChildSupport","qualified_name":"java.beans.beancontext.BeanContextChildSupport","type":2},{"comment":"\n * The <code>Dimension</code> class encapsulates the width and\n * height of a component (in integer precision) in a single object.\n * The class is\n * associated with certain properties of components. Several methods\n * defined by the <code>Component</code> class and the\n * <code>LayoutManager</code> interface return a\n * <code>Dimension</code> object.\n * <p>\n * Normally the values of <code>width</code>\n * and <code>height</code> are non-negative integers.\n * The constructors that allow you to create a dimension do\n * not prevent you from setting a negative value for these properties.\n * If the value of <code>width</code> or <code>height</code> is\n * negative, the behavior of some methods defined by other objects is\n * undefined.\n *\n * @author      Sami Shaio\n * @author      Arthur van Hoff\n * @see         java.awt.Component\n * @see         java.awt.LayoutManager\n * @since       1.0\n ","description":"","name":"Dimension","qualified_name":"java.awt.Dimension","type":2},{"comment":"\n * The listener interface for receiving text events.\n *\n * The class that is interested in processing a text event\n * implements this interface. The object created with that\n * class is then registered with a component using the\n * component's <code>addTextListener</code> method. When the\n * component's text changes, the listener object's\n * <code>textValueChanged</code> method is invoked.\n *\n * @author Georges Saab\n *\n * @see TextEvent\n *\n * @since 1.1\n ","description":"","name":"TextListener","qualified_name":"java.awt.event.TextListener","type":3},{"comment":"","description":"","name":"ShortCache","qualified_name":"java.lang.Short.ShortCache","type":2},{"comment":"","description":"","name":"DropTargetAutoScroller","qualified_name":"java.awt.dnd.DropTarget.DropTargetAutoScroller","type":2},{"comment":"","description":"","name":"FileSystem","qualified_name":"java.io.FileSystem","type":2},{"comment":"","description":"","name":"FilterReader","qualified_name":"java.io.FilterReader","type":2},{"comment":"\n * A shared superclass for the common functionality of {@link Method}\n * and {@link Constructor}.\n *\n * @since 1.8\n ","description":"","name":"Executable","qualified_name":"java.lang.reflect.Executable","type":2},{"comment":"","description":"","name":"ParameterDescriptor","qualified_name":"java.beans.ParameterDescriptor","type":2},{"comment":"\n * An abstract adapter class for receiving drag source events. The methods in\n * this class are empty. This class exists only as a convenience for creating\n * listener objects.\n * <p>\n * Extend this class to create a <code>DragSourceEvent</code> listener\n * and override the methods for the events of interest. (If you implement the\n * <code>DragSourceListener</code> interface, you have to define all of\n * the methods in it. This abstract class defines null methods for them\n * all, so you only have to define methods for events you care about.)\n * <p>\n * Create a listener object using the extended class and then register it with\n * a <code>DragSource</code>. When the drag enters, moves over, or exits\n * a drop site, when the drop action changes, and when the drag ends, the\n * relevant method in the listener object is invoked, and the\n * <code>DragSourceEvent</code> is passed to it.\n * <p>\n * The drop site is <i>associated with the previous <code>dragEnter()</code>\n * invocation</i> if the latest invocation of <code>dragEnter()</code> on this\n * adapter corresponds to that drop site and is not followed by a\n * <code>dragExit()</code> invocation on this adapter.\n *\n * @see DragSourceEvent\n * @see DragSourceListener\n * @see DragSourceMotionListener\n *\n * @author David Mendenhall\n * @since 1.4\n ","description":"","name":"DragSourceAdapter","qualified_name":"java.awt.dnd.DragSourceAdapter","type":2},{"comment":" Menu","description":"","name":"java_awt_Menu_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_awt_Menu_PersistenceDelegate","type":2},{"comment":"\n * The listener interface for receiving mouse wheel events on a component.\n * (For clicks and other mouse events, use the <code>MouseListener</code>.\n * For mouse movement and drags, use the <code>MouseMotionListener</code>.)\n * <P>\n * The class that is interested in processing a mouse wheel event\n * implements this interface (and all the methods it contains).\n * <P>\n * The listener object created from that class is then registered with a\n * component using the component's <code>addMouseWheelListener</code>\n * method. A mouse wheel event is generated when the mouse wheel is rotated.\n * When a mouse wheel event occurs, that object's <code>mouseWheelMoved</code>\n * method is invoked.\n * <p>\n * For information on how mouse wheel events are dispatched, see\n * the class description for {@link MouseWheelEvent}.\n *\n * @author Brent Christian\n * @see MouseWheelEvent\n * @since 1.4\n ","description":"","name":"MouseWheelListener","qualified_name":"java.awt.event.MouseWheelListener","type":3},{"comment":"\n     * Simple implementation of weak concurrent intern set.\n     *\n     * @param <T> interned type\n     ","description":"","name":"ConcurrentWeakInternSet","qualified_name":"java.lang.invoke.MethodType.ConcurrentWeakInternSet","type":2},{"comment":"\n * VolatileImage is an image which can lose its\n * contents at any time due to circumstances beyond the control of the\n * application (e.g., situations caused by the operating system or by\n * other applications). Because of the potential for hardware acceleration,\n * a VolatileImage object can have significant performance benefits on\n * some platforms.\n * <p>\n * The drawing surface of an image (the memory where the image contents\n * actually reside) can be lost or invalidated, causing the contents of that\n * memory to go away.  The drawing surface thus needs to be restored\n * or recreated and the contents of that surface need to be\n * re-rendered.  VolatileImage provides an interface for\n * allowing the user to detect these problems and fix them\n * when they occur.\n * <p>\n * When a VolatileImage object is created, limited system resources\n * such as video memory (VRAM) may be allocated in order to support\n * the image.\n * When a VolatileImage object is no longer used, it may be\n * garbage-collected and those system resources will be returned,\n * but this process does not happen at guaranteed times.\n * Applications that create many VolatileImage objects (for example,\n * a resizing window may force recreation of its back buffer as the\n * size changes) may run out of optimal system resources for new\n * VolatileImage objects simply because the old objects have not\n * yet been removed from the system.\n * (New VolatileImage objects may still be created, but they\n * may not perform as well as those created in accelerated\n * memory).\n * The flush method may be called at any time to proactively release\n * the resources used by a VolatileImage so that it does not prevent\n * subsequent VolatileImage objects from being accelerated.\n * In this way, applications can have more control over the state\n * of the resources taken up by obsolete VolatileImage objects.\n * <p>\n * This image should not be subclassed directly but should be created\n * by using the {@link java.awt.Component#createVolatileImage(int, int)\n * Component.createVolatileImage} or\n * {@link java.awt.GraphicsConfiguration#createCompatibleVolatileImage(int, int)\n * GraphicsConfiguration.createCompatibleVolatileImage(int, int)} methods.\n * <P>\n * An example of using a VolatileImage object follows:\n * <pre>\n * // image creation\n * VolatileImage vImg = createVolatileImage(w, h);\n *\n *\n * // rendering to the image\n * void renderOffscreen() {\n *      do {\n *          if (vImg.validate(getGraphicsConfiguration()) ==\n *              VolatileImage.IMAGE_INCOMPATIBLE)\n *          {\n *              // old vImg doesn't work with new GraphicsConfig; re-create it\n *              vImg = createVolatileImage(w, h);\n *          }\n *          Graphics2D g = vImg.createGraphics();\n *          //\n *          // miscellaneous rendering commands...\n *          //\n *          g.dispose();\n *      } while (vImg.contentsLost());\n * }\n *\n *\n * // copying from the image (here, gScreen is the Graphics\n * // object for the onscreen window)\n * do {\n *      int returnCode = vImg.validate(getGraphicsConfiguration());\n *      if (returnCode == VolatileImage.IMAGE_RESTORED) {\n *          // Contents need to be restored\n *          renderOffscreen();      // restore contents\n *      } else if (returnCode == VolatileImage.IMAGE_INCOMPATIBLE) {\n *          // old vImg doesn't work with new GraphicsConfig; re-create it\n *          vImg = createVolatileImage(w, h);\n *          renderOffscreen();\n *      }\n *      gScreen.drawImage(vImg, 0, 0, this);\n * } while (vImg.contentsLost());\n * </pre>\n * <P>\n * Note that this class subclasses from the {@link Image} class, which\n * includes methods that take an {@link ImageObserver} parameter for\n * asynchronous notifications as information is received from\n * a potential {@link ImageProducer}.  Since this <code>VolatileImage</code>\n * is not loaded from an asynchronous source, the various methods that take\n * an <code>ImageObserver</code> parameter will behave as if the data has\n * already been obtained from the <code>ImageProducer</code>.\n * Specifically, this means that the return values from such methods\n * will never indicate that the information is not yet available and\n * the <code>ImageObserver</code> used in such methods will never\n * need to be recorded for an asynchronous callback notification.\n * @since 1.4\n ","description":"","name":"VolatileImage","qualified_name":"java.awt.image.VolatileImage","type":2},{"comment":"\n * A <code>ByteArrayInputStream</code> contains\n * an internal buffer that contains bytes that\n * may be read from the stream. An internal\n * counter keeps track of the next byte to\n * be supplied by the <code>read</code> method.\n * <p>\n * Closing a <tt>ByteArrayInputStream</tt> has no effect. The methods in\n * this class can be called after the stream has been closed without\n * generating an <tt>IOException</tt>.\n *\n * @author  Arthur van Hoff\n * @see     java.io.StringBufferInputStream\n * @since   JDK1.0\n ","description":"","name":"ByteArrayInputStream","qualified_name":"java.io.ByteArrayInputStream","type":2},{"comment":"\n * A piped output stream can be connected to a piped input stream\n * to create a communications pipe. The piped output stream is the\n * sending end of the pipe. Typically, data is written to a\n * <code>PipedOutputStream</code> object by one thread and data is\n * read from the connected <code>PipedInputStream</code> by some\n * other thread. Attempting to use both objects from a single thread\n * is not recommended as it may deadlock the thread.\n * The pipe is said to be <a name=BROKEN> <i>broken</i> </a> if a\n * thread that was reading data bytes from the connected piped input\n * stream is no longer alive.\n *\n * @author  James Gosling\n * @see     java.io.PipedInputStream\n * @since   JDK1.0\n ","description":"","name":"PipedOutputStream","qualified_name":"java.io.PipedOutputStream","type":2},{"comment":"\n * The peer interface for {@link Checkbox}.\n *\n * The peer interfaces are intended only for use in porting\n * the AWT. They are not intended for use by application\n * developers, and developers should not implement peers\n * nor invoke any of the peer methods directly on the peer\n * instances.\n ","description":"","name":"CheckboxPeer","qualified_name":"java.awt.peer.CheckboxPeer","type":3},{"comment":"\n * This interface describes single-input/single-output\n * operations performed on <CODE>BufferedImage</CODE> objects.\n * It is implemented by <CODE>AffineTransformOp</CODE>,\n * <CODE>ConvolveOp</CODE>, <CODE>ColorConvertOp</CODE>, <CODE>RescaleOp</CODE>,\n * and <CODE>LookupOp</CODE>.  These objects can be passed into\n * a <CODE>BufferedImageFilter</CODE> to operate on a\n * <CODE>BufferedImage</CODE> in the\n * ImageProducer-ImageFilter-ImageConsumer paradigm.\n * <p>\n * Classes that implement this\n * interface must specify whether or not they allow in-place filtering--\n * filter operations where the source object is equal to the destination\n * object.\n * <p>\n * This interface cannot be used to describe more sophisticated operations\n * such as those that take multiple sources. Note that this restriction also\n * means that the values of the destination pixels prior to the operation are\n * not used as input to the filter operation.\n\n * @see BufferedImage\n * @see BufferedImageFilter\n * @see AffineTransformOp\n * @see BandCombineOp\n * @see ColorConvertOp\n * @see ConvolveOp\n * @see LookupOp\n * @see RescaleOp\n ","description":"","name":"BufferedImageOp","qualified_name":"java.awt.image.BufferedImageOp","type":3},{"comment":"","description":"","name":"ModalEventFilter","qualified_name":"java.awt.ModalEventFilter","type":2},{"comment":"","description":"","name":"DefaultPersistenceDelegate","qualified_name":"java.beans.DefaultPersistenceDelegate","type":2},{"comment":"","description":"","name":"EmptyMap_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_util_Collections.EmptyMap_PersistenceDelegate","type":2},{"comment":"\n * The <code>XMLDecoder</code> class is used to read XML documents\n * created using the <code>XMLEncoder</code> and is used just like\n * the <code>ObjectInputStream</code>. For example, one can use\n * the following fragment to read the first object defined\n * in an XML document written by the <code>XMLEncoder</code>\n * class:\n * <pre>\n *       XMLDecoder d = new XMLDecoder(\n *                          new BufferedInputStream(\n *                              new FileInputStream(\"Test.xml\")));\n *       Object result = d.readObject();\n *       d.close();\n * </pre>\n *\n *<p>\n * For more information you might also want to check out\n * <a\n href=\"http://java.sun.com/products/jfc/tsc/articles/persistence3\">Long Term Persistence of JavaBeans Components: XML Schema</a>,\n * an article in <em>The Swing Connection.</em>\n * @see XMLEncoder\n * @see java.io.ObjectInputStream\n *\n * @since 1.4\n *\n * @author Philip Milne\n ","description":"","name":"XMLDecoder","qualified_name":"java.beans.XMLDecoder","type":2},{"comment":"","description":"","name":"IntegerCache","qualified_name":"java.lang.Integer.IntegerCache","type":2},{"comment":"\n     * A type-safe enumeration of possible multi-page impositions. These\n     * impositions are in compliance with IPP 1.1.\n     * @since 1.3\n     ","description":"","name":"SidesType","qualified_name":"java.awt.JobAttributes.SidesType","type":2},{"comment":"\n     * A type-safe enumeration of possible orientations. These orientations\n     * are in partial compliance with IPP 1.1.\n     * @since 1.3\n     ","description":"","name":"OrientationRequestedType","qualified_name":"java.awt.PageAttributes.OrientationRequestedType","type":2},{"comment":"\n * A <code>SequenceInputStream</code> represents\n * the logical concatenation of other input\n * streams. It starts out with an ordered\n * collection of input streams and reads from\n * the first one until end of file is reached,\n * whereupon it reads from the second one,\n * and so on, until end of file is reached\n * on the last of the contained input streams.\n *\n * @author  Author van Hoff\n * @since   JDK1.0\n ","description":"","name":"SequenceInputStream","qualified_name":"java.io.SequenceInputStream","type":2},{"comment":" Methods","description":"","name":"java_lang_reflect_Method_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_lang_reflect_Method_PersistenceDelegate","type":2},{"comment":" MenuBar","description":"","name":"java_awt_MenuBar_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_awt_MenuBar_PersistenceDelegate","type":2},{"comment":"\n * The native peer interface for {@link KeyboardFocusManager}.\n ","description":"","name":"KeyboardFocusManagerPeer","qualified_name":"java.awt.peer.KeyboardFocusManagerPeer","type":3},{"comment":"\n * Thrown when an application attempts to use {@code null} in a\n * case where an object is required. These include:\n * <ul>\n * <li>Calling the instance method of a {@code null} object.\n * <li>Accessing or modifying the field of a {@code null} object.\n * <li>Taking the length of {@code null} as if it were an array.\n * <li>Accessing or modifying the slots of {@code null} as if it\n *     were an array.\n * <li>Throwing {@code null} as if it were a {@code Throwable}\n *     value.\n * </ul>\n * <p>\n * Applications should throw instances of this class to indicate\n * other illegal uses of the {@code null} object.\n *\n * {@code NullPointerException} objects may be constructed by the\n * virtual machine as if {@linkplain Throwable#Throwable(String,\n * Throwable, boolean, boolean) suppression were disabled and/or the\n * stack trace was not writable}.\n *\n * @author  unascribed\n * @since   JDK1.0\n ","description":"","name":"NullPointerException","qualified_name":"java.lang.NullPointerException","type":2},{"comment":"","description":"","name":"NamedFunction","qualified_name":"java.lang.invoke.LambdaForm.NamedFunction","type":2},{"comment":"\n * This abstract class is the superclass of all classes representing\n * an output stream of bytes. An output stream accepts output bytes\n * and sends them to some sink.\n * <p>\n * Applications that need to define a subclass of\n * <code>OutputStream</code> must always provide at least a method\n * that writes one byte of output.\n *\n * @author  Arthur van Hoff\n * @see     java.io.BufferedOutputStream\n * @see     java.io.ByteArrayOutputStream\n * @see     java.io.DataOutputStream\n * @see     java.io.FilterOutputStream\n * @see     java.io.InputStream\n * @see     java.io.OutputStream#write(int)\n * @since   JDK1.0\n ","description":"","name":"OutputStream","qualified_name":"java.io.OutputStream","type":2},{"comment":"\n * A class representing a rectangular array of pixels.  A Raster\n * encapsulates a DataBuffer that stores the sample values and a\n * SampleModel that describes how to locate a given sample value in a\n * DataBuffer.\n * <p>\n * A Raster defines values for pixels occupying a particular\n * rectangular area of the plane, not necessarily including (0, 0).\n * The rectangle, known as the Raster's bounding rectangle and\n * available by means of the getBounds method, is defined by minX,\n * minY, width, and height values.  The minX and minY values define\n * the coordinate of the upper left corner of the Raster.  References\n * to pixels outside of the bounding rectangle may result in an\n * exception being thrown, or may result in references to unintended\n * elements of the Raster's associated DataBuffer.  It is the user's\n * responsibility to avoid accessing such pixels.\n * <p>\n * A SampleModel describes how samples of a Raster\n * are stored in the primitive array elements of a DataBuffer.\n * Samples may be stored one per data element, as in a\n * PixelInterleavedSampleModel or BandedSampleModel, or packed several to\n * an element, as in a SinglePixelPackedSampleModel or\n * MultiPixelPackedSampleModel.  The SampleModel is also\n * controls whether samples are sign extended, allowing unsigned\n * data to be stored in signed Java data types such as byte, short, and\n * int.\n * <p>\n * Although a Raster may live anywhere in the plane, a SampleModel\n * makes use of a simple coordinate system that starts at (0, 0).  A\n * Raster therefore contains a translation factor that allows pixel\n * locations to be mapped between the Raster's coordinate system and\n * that of the SampleModel.  The translation from the SampleModel\n * coordinate system to that of the Raster may be obtained by the\n * getSampleModelTranslateX and getSampleModelTranslateY methods.\n * <p>\n * A Raster may share a DataBuffer with another Raster either by\n * explicit construction or by the use of the createChild and\n * createTranslatedChild methods.  Rasters created by these methods\n * can return a reference to the Raster they were created from by\n * means of the getParent method.  For a Raster that was not\n * constructed by means of a call to createTranslatedChild or\n * createChild, getParent will return null.\n * <p>\n * The createTranslatedChild method returns a new Raster that\n * shares all of the data of the current Raster, but occupies a\n * bounding rectangle of the same width and height but with a\n * different starting point.  For example, if the parent Raster\n * occupied the region (10, 10) to (100, 100), and the translated\n * Raster was defined to start at (50, 50), then pixel (20, 20) of the\n * parent and pixel (60, 60) of the child occupy the same location in\n * the DataBuffer shared by the two Rasters.  In the first case, (-10,\n * -10) should be added to a pixel coordinate to obtain the\n * corresponding SampleModel coordinate, and in the second case (-50,\n * -50) should be added.\n * <p>\n * The translation between a parent and child Raster may be\n * determined by subtracting the child's sampleModelTranslateX and\n * sampleModelTranslateY values from those of the parent.\n * <p>\n * The createChild method may be used to create a new Raster\n * occupying only a subset of its parent's bounding rectangle\n * (with the same or a translated coordinate system) or\n * with a subset of the bands of its parent.\n * <p>\n * All constructors are protected.  The correct way to create a\n * Raster is to use one of the static create methods defined in this\n * class.  These methods create instances of Raster that use the\n * standard Interleaved, Banded, and Packed SampleModels and that may\n * be processed more efficiently than a Raster created by combining\n * an externally generated SampleModel and DataBuffer.\n * @see java.awt.image.DataBuffer\n * @see java.awt.image.SampleModel\n * @see java.awt.image.PixelInterleavedSampleModel\n * @see java.awt.image.BandedSampleModel\n * @see java.awt.image.SinglePixelPackedSampleModel\n * @see java.awt.image.MultiPixelPackedSampleModel\n ","description":"","name":"Raster","qualified_name":"java.awt.image.Raster","type":2},{"comment":"\n * The <code>List</code> component presents the user with a\n * scrolling list of text items. The list can be set up so that\n * the user can choose either one item or multiple items.\n * <p>\n * For example, the code&nbsp;.&nbsp;.&nbsp;.\n *\n * <hr><blockquote><pre>\n * List lst = new List(4, false);\n * lst.add(\"Mercury\");\n * lst.add(\"Venus\");\n * lst.add(\"Earth\");\n * lst.add(\"JavaSoft\");\n * lst.add(\"Mars\");\n * lst.add(\"Jupiter\");\n * lst.add(\"Saturn\");\n * lst.add(\"Uranus\");\n * lst.add(\"Neptune\");\n * lst.add(\"Pluto\");\n * cnt.add(lst);\n * </pre></blockquote><hr>\n * <p>\n * where <code>cnt</code> is a container, produces the following\n * scrolling list:\n * <p>\n * <img src=\"doc-files/List-1.gif\"\n * alt=\"Shows a list containing: Venus, Earth, JavaSoft, and Mars. Javasoft is selected.\" style=\"float:center; margin: 7px 10px;\">\n * <p>\n * If the List allows multiple selections, then clicking on\n * an item that is already selected deselects it. In the preceding\n * example, only one item from the scrolling list can be selected\n * at a time, since the second argument when creating the new scrolling\n * list is <code>false</code>. If the List does not allow multiple\n * selections, selecting an item causes any other selected item\n * to be deselected.\n * <p>\n * Note that the list in the example shown was created with four visible\n * rows.  Once the list has been created, the number of visible rows\n * cannot be changed.  A default <code>List</code> is created with\n * four rows, so that <code>lst = new List()</code> is equivalent to\n * <code>list = new List(4, false)</code>.\n * <p>\n * Beginning with Java&nbsp;1.1, the Abstract Window Toolkit\n * sends the <code>List</code> object all mouse, keyboard, and focus events\n * that occur over it. (The old AWT event model is being maintained\n * only for backwards compatibility, and its use is discouraged.)\n * <p>\n * When an item is selected or deselected by the user, AWT sends an instance\n * of <code>ItemEvent</code> to the list.\n * When the user double-clicks on an item in a scrolling list,\n * AWT sends an instance of <code>ActionEvent</code> to the\n * list following the item event. AWT also generates an action event\n * when the user presses the return key while an item in the\n * list is selected.\n * <p>\n * If an application wants to perform some action based on an item\n * in this list being selected or activated by the user, it should implement\n * <code>ItemListener</code> or <code>ActionListener</code>\n * as appropriate and register the new listener to receive\n * events from this list.\n * <p>\n * For multiple-selection scrolling lists, it is considered a better\n * user interface to use an external gesture (such as clicking on a\n * button) to trigger the action.\n * @author      Sami Shaio\n * @see         java.awt.event.ItemEvent\n * @see         java.awt.event.ItemListener\n * @see         java.awt.event.ActionEvent\n * @see         java.awt.event.ActionListener\n * @since       JDK1.0\n ","description":"","name":"List","qualified_name":"java.awt.List","type":2},{"comment":" Strings","description":"","name":"java_lang_String_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_lang_String_PersistenceDelegate","type":2},{"comment":"","description":"","name":"PackageInfoProxy","qualified_name":"","type":2},{"comment":"","description":"","name":"GraphicsCallback","qualified_name":"java.awt.GraphicsCallback","type":2},{"comment":"\n * Thrown when an application tries to load in a class through its\n * string name using:\n * <ul>\n * <li>The <code>forName</code> method in class <code>Class</code>.\n * <li>The <code>findSystemClass</code> method in class\n *     <code>ClassLoader</code> .\n * <li>The <code>loadClass</code> method in class <code>ClassLoader</code>.\n * </ul>\n * <p>\n * but no definition for the class with the specified name could be found.\n *\n * <p>As of release 1.4, this exception has been retrofitted to conform to\n * the general purpose exception-chaining mechanism.  The \"optional exception\n * that was raised while loading the class\" that may be provided at\n * construction time and accessed via the {@link #getException()} method is\n * now known as the <i>cause</i>, and may be accessed via the {@link\n * Throwable#getCause()} method, as well as the aforementioned \"legacy method.\"\n *\n * @author  unascribed\n * @see     java.lang.Class#forName(java.lang.String)\n * @see     java.lang.ClassLoader#findSystemClass(java.lang.String)\n * @see     java.lang.ClassLoader#loadClass(java.lang.String, boolean)\n * @since   JDK1.0\n ","description":"","name":"ClassNotFoundException","qualified_name":"java.lang.ClassNotFoundException","type":2},{"comment":"\n * The root event class for all AWT events.\n * This class and its subclasses supercede the original\n * java.awt.Event class.\n * Subclasses of this root AWTEvent class defined outside of the\n * java.awt.event package should define event ID values greater than\n * the value defined by RESERVED_ID_MAX.\n * <p>\n * The event masks defined in this class are needed by Component subclasses\n * which are using Component.enableEvents() to select for event types not\n * selected by registered listeners. If a listener is registered on a\n * component, the appropriate event mask is already set internally by the\n * component.\n * <p>\n * The masks are also used to specify to which types of events an\n * AWTEventListener should listen. The masks are bitwise-ORed together\n * and passed to Toolkit.addAWTEventListener.\n *\n * @see Component#enableEvents\n * @see Toolkit#addAWTEventListener\n *\n * @see java.awt.event.ActionEvent\n * @see java.awt.event.AdjustmentEvent\n * @see java.awt.event.ComponentEvent\n * @see java.awt.event.ContainerEvent\n * @see java.awt.event.FocusEvent\n * @see java.awt.event.InputMethodEvent\n * @see java.awt.event.InvocationEvent\n * @see java.awt.event.ItemEvent\n * @see java.awt.event.HierarchyEvent\n * @see java.awt.event.KeyEvent\n * @see java.awt.event.MouseEvent\n * @see java.awt.event.MouseWheelEvent\n * @see java.awt.event.PaintEvent\n * @see java.awt.event.TextEvent\n * @see java.awt.event.WindowEvent\n *\n * @author Carl Quinn\n * @author Amy Fowler\n * @since 1.1\n ","description":"","name":"AWTEvent","qualified_name":"java.awt.AWTEvent","type":2},{"comment":" REMIND: dynamically generate these?","description":"","name":"FieldReflector","qualified_name":"java.io.ObjectStreamClass.FieldReflector","type":2},{"comment":"","description":"","name":"CursorDisposer","qualified_name":"java.awt.Cursor.CursorDisposer","type":2},{"comment":"\n * A <code>TextArea</code> object is a multi-line region\n * that displays text. It can be set to allow editing or\n * to be read-only.\n * <p>\n * The following image shows the appearance of a text area:\n * <p>\n * <img src=\"doc-files/TextArea-1.gif\" alt=\"A TextArea showing the word 'Hello!'\"\n * style=\"float:center; margin: 7px 10px;\">\n * <p>\n * This text area could be created by the following line of code:\n *\n * <hr><blockquote><pre>\n * new TextArea(\"Hello\", 5, 40);\n * </pre></blockquote><hr>\n * <p>\n * @author      Sami Shaio\n * @since       JDK1.0\n ","description":"","name":"TextArea","qualified_name":"java.awt.TextArea","type":2},{"comment":"\n * A {@code Window} object is a top-level window with no borders and no\n * menubar.\n * The default layout for a window is {@code BorderLayout}.\n * <p>\n * A window must have either a frame, dialog, or another window defined as its\n * owner when it's constructed.\n * <p>\n * In a multi-screen environment, you can create a {@code Window}\n * on a different screen device by constructing the {@code Window}\n * with {@link #Window(Window, GraphicsConfiguration)}.  The\n * {@code GraphicsConfiguration} object is one of the\n * {@code GraphicsConfiguration} objects of the target screen device.\n * <p>\n * In a virtual device multi-screen environment in which the desktop\n * area could span multiple physical screen devices, the bounds of all\n * configurations are relative to the virtual device coordinate system.\n * The origin of the virtual-coordinate system is at the upper left-hand\n * corner of the primary physical screen.  Depending on the location of\n * the primary screen in the virtual device, negative coordinates are\n * possible, as shown in the following figure.\n * <p>\n * <img src=\"doc-files/MultiScreen.gif\"\n * alt=\"Diagram shows virtual device containing 4 physical screens. Primary physical screen shows coords (0,0), other screen shows (-80,-100).\"\n * style=\"float:center; margin: 7px 10px;\">\n * <p>\n * In such an environment, when calling {@code setLocation},\n * you must pass a virtual coordinate to this method.  Similarly,\n * calling {@code getLocationOnScreen} on a {@code Window} returns\n * virtual device coordinates.  Call the {@code getBounds} method\n * of a {@code GraphicsConfiguration} to find its origin in the virtual\n * coordinate system.\n * <p>\n * The following code sets the location of a {@code Window}\n * at (10, 10) relative to the origin of the physical screen\n * of the corresponding {@code GraphicsConfiguration}.  If the\n * bounds of the {@code GraphicsConfiguration} is not taken\n * into account, the {@code Window} location would be set\n * at (10, 10) relative to the virtual-coordinate system and would appear\n * on the primary physical screen, which might be different from the\n * physical screen of the specified {@code GraphicsConfiguration}.\n *\n * <pre>\n *      Window w = new Window(Window owner, GraphicsConfiguration gc);\n *      Rectangle bounds = gc.getBounds();\n *      w.setLocation(10 + bounds.x, 10 + bounds.y);\n * </pre>\n *\n * <p>\n * Note: the location and size of top-level windows (including\n * {@code Window}s, {@code Frame}s, and {@code Dialog}s)\n * are under the control of the desktop's window management system.\n * Calls to {@code setLocation}, {@code setSize}, and\n * {@code setBounds} are requests (not directives) which are\n * forwarded to the window management system.  Every effort will be\n * made to honor such requests.  However, in some cases the window\n * management system may ignore such requests, or modify the requested\n * geometry in order to place and size the {@code Window} in a way\n * that more closely matches the desktop settings.\n * <p>\n * Due to the asynchronous nature of native event handling, the results\n * returned by {@code getBounds}, {@code getLocation},\n * {@code getLocationOnScreen}, and {@code getSize} might not\n * reflect the actual geometry of the Window on screen until the last\n * request has been processed.  During the processing of subsequent\n * requests these values might change accordingly while the window\n * management system fulfills the requests.\n * <p>\n * An application may set the size and location of an invisible\n * {@code Window} arbitrarily, but the window management system may\n * subsequently change its size and/or location when the\n * {@code Window} is made visible. One or more {@code ComponentEvent}s\n * will be generated to indicate the new geometry.\n * <p>\n * Windows are capable of generating the following WindowEvents:\n * WindowOpened, WindowClosed, WindowGainedFocus, WindowLostFocus.\n *\n * @author      Sami Shaio\n * @author      Arthur van Hoff\n * @see WindowEvent\n * @see #addWindowListener\n * @see java.awt.BorderLayout\n * @since       JDK1.0\n ","description":"","name":"Window","qualified_name":"java.awt.Window","type":2},{"comment":"","description":"","name":"PrintHeavyweightComponentsCallback","qualified_name":"java.awt.GraphicsCallback.PrintHeavyweightComponentsCallback","type":2},{"comment":"","description":"","name":"PropertyVetoException","qualified_name":"java.beans.PropertyVetoException","type":2},{"comment":"","description":"","name":"DropTargetDragEvent","qualified_name":"java.awt.dnd.DropTargetDragEvent","type":2},{"comment":"","description":"","name":"AWTTreeLock","qualified_name":"java.awt.Component.AWTTreeLock","type":2},{"comment":"","description":"","name":"EventFilter","qualified_name":"java.awt.EventFilter","type":3},{"comment":"\n * The peer interface for {@link SystemTray}. This doesn't need to be\n * implemented if {@link SystemTray#isSupported()} returns false.\n ","description":"","name":"SystemTrayPeer","qualified_name":"java.awt.peer.SystemTrayPeer","type":3},{"comment":"\n     * Interface for handlers invoked when a <tt>Thread</tt> abruptly\n     * terminates due to an uncaught exception.\n     * <p>When a thread is about to terminate due to an uncaught exception\n     * the Java Virtual Machine will query the thread for its\n     * <tt>UncaughtExceptionHandler</tt> using\n     * {@link #getUncaughtExceptionHandler} and will invoke the handler's\n     * <tt>uncaughtException</tt> method, passing the thread and the\n     * exception as arguments.\n     * If a thread has not had its <tt>UncaughtExceptionHandler</tt>\n     * explicitly set, then its <tt>ThreadGroup</tt> object acts as its\n     * <tt>UncaughtExceptionHandler</tt>. If the <tt>ThreadGroup</tt> object\n     * has no\n     * special requirements for dealing with the exception, it can forward\n     * the invocation to the {@linkplain #getDefaultUncaughtExceptionHandler\n     * default uncaught exception handler}.\n     *\n     * @see #setDefaultUncaughtExceptionHandler\n     * @see #setUncaughtExceptionHandler\n     * @see ThreadGroup#uncaughtException\n     * @since 1.5\n     ","description":"","name":"UncaughtExceptionHandler","qualified_name":"java.lang.Thread.UncaughtExceptionHandler","type":3},{"comment":"\n * Thrown when an application tries to create an instance of a class\n * using the {@code newInstance} method in class\n * {@code Class}, but the specified class object cannot be\n * instantiated.  The instantiation can fail for a variety of\n * reasons including but not limited to:\n *\n * <ul>\n * <li> the class object represents an abstract class, an interface,\n *      an array class, a primitive type, or {@code void}\n * <li> the class has no nullary constructor\n *</ul>\n *\n * @author  unascribed\n * @see     java.lang.Class#newInstance()\n * @since   JDK1.0\n ","description":"","name":"InstantiationException","qualified_name":"java.lang.InstantiationException","type":2},{"comment":"","description":"","name":"String","qualified_name":"java.lang.String","type":2},{"comment":"\n * Class to manage the dispatching of MouseEvents to the lightweight descendants\n * and SunDropTargetEvents to both lightweight and heavyweight descendants\n * contained by a native container.\n *\n * NOTE: the class name is not appropriate anymore, but we cannot change it\n * because we must keep serialization compatibility.\n *\n * @author Timothy Prinzing\n ","description":"","name":"LightweightDispatcher","qualified_name":"java.awt.LightweightDispatcher","type":2},{"comment":"\n * The class implements a buffered output stream. By setting up such\n * an output stream, an application can write bytes to the underlying\n * output stream without necessarily causing a call to the underlying\n * system for each byte written.\n *\n * @author  Arthur van Hoff\n * @since   JDK1.0\n ","description":"","name":"BufferedOutputStream","qualified_name":"java.io.BufferedOutputStream","type":2},{"comment":" One binding of a value to a class via a ClassValue.\n     *  States are:<ul>\n     *  <li> promise if value == Entry.this\n     *  <li> else dead if version == null\n     *  <li> else stale if version != classValue.version\n     *  <li> else live </ul>\n     *  Promises are never put into the cache; they only live in the\n     *  backing map while a computeValue call is in flight.\n     *  Once an entry goes stale, it can be reset at any time\n     *  into the dead state.\n     ","description":"","name":"Entry","qualified_name":"java.lang.ClassValue.Entry","type":2},{"comment":"","description":"","name":"EmptySet_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_util_Collections.EmptySet_PersistenceDelegate","type":2},{"comment":"","description":"","name":"SynchronizedSortedMap_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_util_Collections.SynchronizedSortedMap_PersistenceDelegate","type":2},{"comment":"non-public","description":"","name":"MethodHandleImpl","qualified_name":"java.lang.invoke.MethodHandleImpl","type":2},{"comment":"","description":"","name":"DesktopPropertyChangeSupport","qualified_name":"java.awt.Toolkit.DesktopPropertyChangeSupport","type":2},{"comment":"","description":"","name":"Int","qualified_name":"java.awt.TexturePaintContext.Int","type":2},{"comment":"\n *\n * The {@code Byte} class wraps a value of primitive type {@code byte}\n * in an object.  An object of type {@code Byte} contains a single\n * field whose type is {@code byte}.\n *\n * <p>In addition, this class provides several methods for converting\n * a {@code byte} to a {@code String} and a {@code String} to a {@code\n * byte}, as well as other constants and methods useful when dealing\n * with a {@code byte}.\n *\n * @author  Nakul Saraiya\n * @author  Joseph D. Darcy\n * @see     java.lang.Number\n * @since   JDK1.1\n ","description":"","name":"Byte","qualified_name":"java.lang.Byte","type":2},{"comment":"\n     * Default GetField implementation.\n     ","description":"","name":"GetFieldImpl","qualified_name":"java.io.ObjectInputStream.GetFieldImpl","type":2},{"comment":"\n * This class extends <CODE>DataBuffer</CODE> and stores data internally as\n * shorts.  Values stored in the short array(s) of this <CODE>DataBuffer</CODE>\n * are treated as unsigned values.\n * <p>\n * <a name=\"optimizations\">\n * Note that some implementations may function more efficiently\n * if they can maintain control over how the data for an image is\n * stored.\n * For example, optimizations such as caching an image in video\n * memory require that the implementation track all modifications\n * to that data.\n * Other implementations may operate better if they can store the\n * data in locations other than a Java array.\n * To maintain optimum compatibility with various optimizations\n * it is best to avoid constructors and methods which expose the\n * underlying storage as a Java array as noted below in the\n * documentation for those methods.\n * </a>\n ","description":"","name":"DataBufferUShort","qualified_name":"java.awt.image.DataBufferUShort","type":2},{"comment":"","description":"","name":"LockInfo","qualified_name":"java.lang.management.LockInfo","type":2},{"comment":"","description":"","name":"Encoder","qualified_name":"java.beans.Encoder","type":2},{"comment":"","description":"","name":"TextLineMetrics","qualified_name":"java.awt.font.TextLine.TextLineMetrics","type":2},{"comment":"\n     * The <code>Double</code> class defines a rectangle specified in\n     * double coordinates.\n     * @since 1.2\n     ","description":"","name":"Double","qualified_name":"java.awt.geom.Rectangle2D.Double","type":2},{"comment":"\n * ContextualRenderedImageFactory provides an interface for the\n * functionality that may differ between instances of\n * RenderableImageOp.  Thus different operations on RenderableImages\n * may be performed by a single class such as RenderedImageOp through\n * the use of multiple instances of ContextualRenderedImageFactory.\n * The name ContextualRenderedImageFactory is commonly shortened to\n * \"CRIF.\"\n *\n * <p> All operations that are to be used in a rendering-independent\n * chain must implement ContextualRenderedImageFactory.\n *\n * <p> Classes that implement this interface must provide a\n * constructor with no arguments.\n ","description":"","name":"ContextualRenderedImageFactory","qualified_name":"java.awt.image.renderable.ContextualRenderedImageFactory","type":3},{"comment":"\n * An {@code Error} is a subclass of {@code Throwable}\n * that indicates serious problems that a reasonable application\n * should not try to catch. Most such errors are abnormal conditions.\n * The {@code ThreadDeath} error, though a \"normal\" condition,\n * is also a subclass of {@code Error} because most applications\n * should not try to catch it.\n * <p>\n * A method is not required to declare in its {@code throws}\n * clause any subclasses of {@code Error} that might be thrown\n * during the execution of the method but not caught, since these\n * errors are abnormal conditions that should never occur.\n *\n * That is, {@code Error} and its subclasses are regarded as unchecked\n * exceptions for the purposes of compile-time checking of exceptions.\n *\n * @author  Frank Yellin\n * @see     java.lang.ThreadDeath\n * @jls 11.2 Compile-Time Checking of Exceptions\n * @since   JDK1.0\n ","description":"","name":"Error","qualified_name":"java.lang.Error","type":2},{"comment":"","description":"","name":"DragSourceMotionListener","qualified_name":"java.awt.dnd.DragSourceMotionListener","type":3},{"comment":"\n * Thrown to indicate that the requested operation is not supported.<p>\n *\n * This class is a member of the\n * <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n * Java Collections Framework</a>.\n *\n * @author  Josh Bloch\n * @since   1.2\n ","description":"","name":"UnsupportedOperationException","qualified_name":"java.lang.UnsupportedOperationException","type":2},{"comment":"","description":"","name":"CloneNotSupportedException","qualified_name":"java.lang.CloneNotSupportedException","type":2},{"comment":"","description":"","name":"StringCoding","qualified_name":"java.lang.StringCoding","type":2},{"comment":"\n * The listener interface for receiving item events.\n * The class that is interested in processing an item event\n * implements this interface. The object created with that\n * class is then registered with a component using the\n * component's <code>addItemListener</code> method. When an\n * item-selection event occurs, the listener object's\n * <code>itemStateChanged</code> method is invoked.\n *\n * @author Amy Fowler\n *\n * @see java.awt.ItemSelectable\n * @see ItemEvent\n * @see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/itemlistener.html\">Tutorial: Writing an Item Listener</a>\n *\n * @since 1.1\n ","description":"","name":"ItemListener","qualified_name":"java.awt.event.ItemListener","type":3},{"comment":"","description":"","name":"PrintStream","qualified_name":"java.io.PrintStream","type":2},{"comment":"\n * The <code>TextComponent</code> class is the superclass of\n * any component that allows the editing of some text.\n * <p>\n * A text component embodies a string of text.  The\n * <code>TextComponent</code> class defines a set of methods\n * that determine whether or not this text is editable. If the\n * component is editable, it defines another set of methods\n * that supports a text insertion caret.\n * <p>\n * In addition, the class defines methods that are used\n * to maintain a current <em>selection</em> from the text.\n * The text selection, a substring of the component's text,\n * is the target of editing operations. It is also referred\n * to as the <em>selected text</em>.\n *\n * @author      Sami Shaio\n * @author      Arthur van Hoff\n * @since       JDK1.0\n ","description":"","name":"TextComponent","qualified_name":"java.awt.TextComponent","type":2},{"comment":"\n * The JVM interface for the method handles package is all here.\n * This is an interface internal and private to an implementation of JSR 292.\n * <em>This class is not part of the JSR 292 standard.</em>\n * @author jrose\n ","description":"","name":"MethodHandleNatives","qualified_name":"java.lang.invoke.MethodHandleNatives","type":2},{"comment":"\n     * An optimized {@link Value} used to look-up the value in\n     * {@link WeakCache#containsValue} method so that we are not\n     * constructing the whole {@link CacheValue} just to look-up the referent.\n     ","description":"","name":"LookupValue","qualified_name":"java.lang.reflect.WeakCache.LookupValue","type":2},{"comment":"\n * Signals that an AWT component is not in an appropriate state for\n * the requested operation.\n *\n * @author      Jonni Kanerva\n ","description":"","name":"IllegalComponentStateException","qualified_name":"java.awt.IllegalComponentStateException","type":2},{"comment":"\n * The Character Encoding is not supported.\n *\n * @author  Asmus Freytag\n * @since   JDK1.1\n ","description":"","name":"UnsupportedEncodingException","qualified_name":"java.io.UnsupportedEncodingException","type":2},{"comment":"\n * The management interface for the garbage collection of\n * the Java virtual machine.  Garbage collection is the process\n * that the Java virtual machine uses to find and reclaim unreachable\n * objects to free up memory space.  A garbage collector is one type of\n * {@link MemoryManagerMXBean memory manager}.\n *\n * <p> A Java virtual machine may have one or more instances of\n * the implementation class of this interface.\n * An instance implementing this interface is\n * an <a href=\"ManagementFactory.html#MXBean\">MXBean</a>\n * that can be obtained by calling\n * the {@link ManagementFactory#getGarbageCollectorMXBeans} method or\n * from the {@link ManagementFactory#getPlatformMBeanServer\n * platform <tt>MBeanServer</tt>} method.\n *\n * <p>The <tt>ObjectName</tt> for uniquely identifying the MXBean for\n * a garbage collector within an MBeanServer is:\n * <blockquote>\n *   {@link ManagementFactory#GARBAGE_COLLECTOR_MXBEAN_DOMAIN_TYPE\n *    <tt>java.lang:type=GarbageCollector</tt>}<tt>,name=</tt><i>collector's name</i>\n * </blockquote>\n *\n * It can be obtained by calling the\n * {@link PlatformManagedObject#getObjectName} method.\n *\n * A platform usually includes additional platform-dependent information\n * specific to a garbage collection algorithm for monitoring.\n *\n * @see ManagementFactory#getPlatformMXBeans(Class)\n * @see MemoryMXBean\n *\n * @see <a href=\"../../../javax/management/package-summary.html\">\n *      JMX Specification.</a>\n * @see <a href=\"package-summary.html#examples\">\n *      Ways to Access MXBeans</a>\n *\n * @author  Mandy Chung\n * @since   1.5\n ","description":"","name":"GarbageCollectorMXBean","qualified_name":"java.lang.management.GarbageCollectorMXBean","type":3},{"comment":"","description":"","name":"ValueData","qualified_name":"java.beans.XMLEncoder.ValueData","type":2},{"comment":"\n * This class implements a filter for the set of interface methods that\n * are used to deliver data from an ImageProducer to an ImageConsumer.\n * It is meant to be used in conjunction with a FilteredImageSource\n * object to produce filtered versions of existing images.  It is a\n * base class that provides the calls needed to implement a \"Null filter\"\n * which has no effect on the data being passed through.  Filters should\n * subclass this class and override the methods which deal with the\n * data that needs to be filtered and modify it as necessary.\n *\n * @see FilteredImageSource\n * @see ImageConsumer\n *\n * @author      Jim Graham\n ","description":"","name":"ImageFilter","qualified_name":"java.awt.image.ImageFilter","type":2},{"comment":"","description":"","name":"Shutdown","qualified_name":"java.lang.Shutdown","type":2},{"comment":"\n * Thrown when the \"verifier\" detects that a class file,\n * though well formed, contains some sort of internal inconsistency\n * or security problem.\n *\n * @author  unascribed\n * @since   JDK1.0\n ","description":"","name":"VerifyError","qualified_name":"java.lang.VerifyError","type":2},{"comment":"","description":"","name":"WindowDisposerRecord","qualified_name":"java.awt.Window.WindowDisposerRecord","type":2},{"comment":"","description":"","name":"CheckedCollection_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_util_Collections.CheckedCollection_PersistenceDelegate","type":2},{"comment":"\n * A KeyEventDispatcher cooperates with the current KeyboardFocusManager in the\n * targeting and dispatching of all KeyEvents. KeyEventDispatchers registered\n * with the current KeyboardFocusManager will receive KeyEvents before they are\n * dispatched to their targets, allowing each KeyEventDispatcher to retarget\n * the event, consume it, dispatch the event itself, or make other changes.\n * <p>\n * Note that KeyboardFocusManager itself implements KeyEventDispatcher. By\n * default, the current KeyboardFocusManager will be the sink for all KeyEvents\n * not dispatched by the registered KeyEventDispatchers. The current\n * KeyboardFocusManager cannot be completely deregistered as a\n * KeyEventDispatcher. However, if a KeyEventDispatcher reports that it\n * dispatched the KeyEvent, regardless of whether it actually did so, the\n * KeyboardFocusManager will take no further action with regard to the\n * KeyEvent. (While it is possible for client code to register the current\n * KeyboardFocusManager as a KeyEventDispatcher one or more times, this is\n * usually unnecessary and not recommended.)\n *\n * @author David Mendenhall\n *\n * @see KeyboardFocusManager#addKeyEventDispatcher\n * @see KeyboardFocusManager#removeKeyEventDispatcher\n * @since 1.4\n ","description":"","name":"KeyEventDispatcher","qualified_name":"java.awt.KeyEventDispatcher","type":3},{"comment":"\n     * The <code>Float</code> class defines a point specified in float\n     * precision.\n     * @since 1.2\n     ","description":"","name":"Float","qualified_name":"java.awt.geom.Point2D.Float","type":2},{"comment":"","description":"","name":"GlyphVector","qualified_name":"java.awt.font.GlyphVector","type":2},{"comment":" Collection","description":"","name":"java_util_Collection_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_util_Collection_PersistenceDelegate","type":2},{"comment":"\n * The <code>TextAttribute</code> class defines attribute keys and\n * attribute values used for text rendering.\n * <p>\n * <code>TextAttribute</code> instances are used as attribute keys to\n * identify attributes in\n * {@link java.awt.Font Font},\n * {@link java.awt.font.TextLayout TextLayout},\n * {@link java.text.AttributedCharacterIterator AttributedCharacterIterator},\n * and other classes handling text attributes. Other constants defined\n * in this class can be used as attribute values.\n * <p>\n * For each text attribute, the documentation provides:\n * <UL>\n *   <LI>the type of its value,\n *   <LI>the relevant predefined constants, if any\n *   <LI>the default effect if the attribute is absent\n *   <LI>the valid values if there are limitations\n *   <LI>a description of the effect.\n * </UL>\n * <p>\n * <H3>Values</H3>\n * <UL>\n *   <LI>The values of attributes must always be immutable.\n *   <LI>Where value limitations are given, any value outside of that\n *   set is reserved for future use; the value will be treated as\n *   the default.\n *   <LI>The value <code>null</code> is treated the same as the\n *   default value and results in the default behavior.\n *   <li>If the value is not of the proper type, the attribute\n *   will be ignored.\n *   <li>The identity of the value does not matter, only the actual\n *   value.  For example, <code>TextAttribute.WEIGHT_BOLD</code> and\n *   <code>new Float(2.0)</code>\n *   indicate the same <code>WEIGHT</code>.\n *   <li>Attribute values of type <code>Number</code> (used for\n *   <code>WEIGHT</code>, <code>WIDTH</code>, <code>POSTURE</code>,\n *   <code>SIZE</code>, <code>JUSTIFICATION</code>, and\n *   <code>TRACKING</code>) can vary along their natural range and are\n *   not restricted to the predefined constants.\n *   <code>Number.floatValue()</code> is used to get the actual value\n *   from the <code>Number</code>.\n *   <li>The values for <code>WEIGHT</code>, <code>WIDTH</code>, and\n *   <code>POSTURE</code> are interpolated by the system, which\n *   can select the 'nearest available' font or use other techniques to\n *   approximate the user's request.\n *\n * </UL>\n *\n * <h4>Summary of attributes</h4>\n * <p>\n * <table style=\"float:center\" border=\"0\" cellspacing=\"0\" cellpadding=\"2\" width=\"%95\"\n *     summary=\"Key, value type, principal constants, and default value\n *     behavior of all TextAttributes\">\n * <tr style=\"background-color:#ccccff\">\n * <th valign=\"TOP\" align=\"CENTER\">Key</th>\n * <th valign=\"TOP\" align=\"CENTER\">Value Type</th>\n * <th valign=\"TOP\" align=\"CENTER\">Principal Constants</th>\n * <th valign=\"TOP\" align=\"CENTER\">Default Value</th>\n * </tr>\n * <tr>\n * <td valign=\"TOP\">{@link #FAMILY}</td>\n * <td valign=\"TOP\">String</td>\n * <td valign=\"TOP\">See Font {@link java.awt.Font#DIALOG DIALOG},\n * {@link java.awt.Font#DIALOG_INPUT DIALOG_INPUT},<br> {@link java.awt.Font#SERIF SERIF},\n * {@link java.awt.Font#SANS_SERIF SANS_SERIF}, and {@link java.awt.Font#MONOSPACED MONOSPACED}.\n * </td>\n * <td valign=\"TOP\">\"Default\" (use platform default)</td>\n * </tr>\n * <tr style=\"background-color:#eeeeff\">\n * <td valign=\"TOP\">{@link #WEIGHT}</td>\n * <td valign=\"TOP\">Number</td>\n * <td valign=\"TOP\">WEIGHT_REGULAR, WEIGHT_BOLD</td>\n * <td valign=\"TOP\">WEIGHT_REGULAR</td>\n * </tr>\n * <tr>\n * <td valign=\"TOP\">{@link #WIDTH}</td>\n * <td valign=\"TOP\">Number</td>\n * <td valign=\"TOP\">WIDTH_CONDENSED, WIDTH_REGULAR,<br>WIDTH_EXTENDED</td>\n * <td valign=\"TOP\">WIDTH_REGULAR</td>\n * </tr>\n * <tr style=\"background-color:#eeeeff\">\n * <td valign=\"TOP\">{@link #POSTURE}</td>\n * <td valign=\"TOP\">Number</td>\n * <td valign=\"TOP\">POSTURE_REGULAR, POSTURE_OBLIQUE</td>\n * <td valign=\"TOP\">POSTURE_REGULAR</td>\n * </tr>\n * <tr>\n * <td valign=\"TOP\">{@link #SIZE}</td>\n * <td valign=\"TOP\">Number</td>\n * <td valign=\"TOP\">none</td>\n * <td valign=\"TOP\">12.0</td>\n * </tr>\n * <tr style=\"background-color:#eeeeff\">\n * <td valign=\"TOP\">{@link #TRANSFORM}</td>\n * <td valign=\"TOP\">{@link TransformAttribute}</td>\n * <td valign=\"TOP\">See TransformAttribute {@link TransformAttribute#IDENTITY IDENTITY}</td>\n * <td valign=\"TOP\">TransformAttribute.IDENTITY</td>\n * </tr>\n * <tr>\n * <td valign=\"TOP\">{@link #SUPERSCRIPT}</td>\n * <td valign=\"TOP\">Integer</td>\n * <td valign=\"TOP\">SUPERSCRIPT_SUPER, SUPERSCRIPT_SUB</td>\n * <td valign=\"TOP\">0 (use the standard glyphs and metrics)</td>\n * </tr>\n * <tr style=\"background-color:#eeeeff\">\n * <td valign=\"TOP\">{@link #FONT}</td>\n * <td valign=\"TOP\">{@link java.awt.Font}</td>\n * <td valign=\"TOP\">none</td>\n * <td valign=\"TOP\">null (do not override font resolution)</td>\n * </tr>\n * <tr>\n * <td valign=\"TOP\">{@link #CHAR_REPLACEMENT}</td>\n * <td valign=\"TOP\">{@link GraphicAttribute}</td>\n * <td valign=\"TOP\">none</td>\n * <td valign=\"TOP\">null (draw text using font glyphs)</td>\n * </tr>\n * <tr style=\"background-color:#eeeeff\">\n * <td valign=\"TOP\">{@link #FOREGROUND}</td>\n * <td valign=\"TOP\">{@link java.awt.Paint}</td>\n * <td valign=\"TOP\">none</td>\n * <td valign=\"TOP\">null (use current graphics paint)</td>\n * </tr>\n * <tr>\n * <td valign=\"TOP\">{@link #BACKGROUND}</td>\n * <td valign=\"TOP\">{@link java.awt.Paint}</td>\n * <td valign=\"TOP\">none</td>\n * <td valign=\"TOP\">null (do not render background)</td>\n * </tr>\n * <tr style=\"background-color:#eeeeff\">\n * <td valign=\"TOP\">{@link #UNDERLINE}</td>\n * <td valign=\"TOP\">Integer</td>\n * <td valign=\"TOP\">UNDERLINE_ON</td>\n * <td valign=\"TOP\">-1 (do not render underline)</td>\n * </tr>\n * <tr>\n * <td valign=\"TOP\">{@link #STRIKETHROUGH}</td>\n * <td valign=\"TOP\">Boolean</td>\n * <td valign=\"TOP\">STRIKETHROUGH_ON</td>\n * <td valign=\"TOP\">false (do not render strikethrough)</td>\n * </tr>\n * <tr style=\"background-color:#eeeeff\">\n * <td valign=\"TOP\">{@link #RUN_DIRECTION}</td>\n * <td valign=\"TOP\">Boolean</td>\n * <td valign=\"TOP\">RUN_DIRECTION_LTR<br>RUN_DIRECTION_RTL</td>\n * <td valign=\"TOP\">null (use {@link java.text.Bidi} standard default)</td>\n * </tr>\n * <tr>\n * <td valign=\"TOP\">{@link #BIDI_EMBEDDING}</td>\n * <td valign=\"TOP\">Integer</td>\n * <td valign=\"TOP\">none</td>\n * <td valign=\"TOP\">0 (use base line direction)</td>\n * </tr>\n * <tr style=\"background-color:#eeeeff\">\n * <td valign=\"TOP\">{@link #JUSTIFICATION}</td>\n * <td valign=\"TOP\">Number</td>\n * <td valign=\"TOP\">JUSTIFICATION_FULL</td>\n * <td valign=\"TOP\">JUSTIFICATION_FULL</td>\n * </tr>\n * <tr>\n * <td valign=\"TOP\">{@link #INPUT_METHOD_HIGHLIGHT}</td>\n * <td valign=\"TOP\">{@link java.awt.im.InputMethodHighlight},<br>{@link java.text.Annotation}</td>\n * <td valign=\"TOP\">(see class)</td>\n * <td valign=\"TOP\">null (do not apply input highlighting)</td>\n * </tr>\n * <tr style=\"background-color:#eeeeff\">\n * <td valign=\"TOP\">{@link #INPUT_METHOD_UNDERLINE}</td>\n * <td valign=\"TOP\">Integer</td>\n * <td valign=\"TOP\">UNDERLINE_LOW_ONE_PIXEL,<br>UNDERLINE_LOW_TWO_PIXEL</td>\n * <td valign=\"TOP\">-1 (do not render underline)</td>\n * </tr>\n * <tr>\n * <td valign=\"TOP\">{@link #SWAP_COLORS}</td>\n * <td valign=\"TOP\">Boolean</td>\n * <td valign=\"TOP\">SWAP_COLORS_ON</td>\n * <td valign=\"TOP\">false (do not swap colors)</td>\n * </tr>\n * <tr style=\"background-color:#eeeeff\">\n * <td valign=\"TOP\">{@link #NUMERIC_SHAPING}</td>\n * <td valign=\"TOP\">{@link java.awt.font.NumericShaper}</td>\n * <td valign=\"TOP\">none</td>\n * <td valign=\"TOP\">null (do not shape digits)</td>\n * </tr>\n * <tr>\n * <td valign=\"TOP\">{@link #KERNING}</td>\n * <td valign=\"TOP\">Integer</td>\n * <td valign=\"TOP\">KERNING_ON</td>\n * <td valign=\"TOP\">0 (do not request kerning)</td>\n * </tr>\n * <tr style=\"background-color:#eeeeff\">\n * <td valign=\"TOP\">{@link #LIGATURES}</td>\n * <td valign=\"TOP\">Integer</td>\n * <td valign=\"TOP\">LIGATURES_ON</td>\n * <td valign=\"TOP\">0 (do not form optional ligatures)</td>\n * </tr>\n * <tr>\n * <td valign=\"TOP\">{@link #TRACKING}</td>\n * <td valign=\"TOP\">Number</td>\n * <td valign=\"TOP\">TRACKING_LOOSE, TRACKING_TIGHT</td>\n * <td valign=\"TOP\">0 (do not add tracking)</td>\n * </tr>\n * </table>\n *\n * @see java.awt.Font\n * @see java.awt.font.TextLayout\n * @see java.text.AttributedCharacterIterator\n ","description":"","name":"TextAttribute","qualified_name":"java.awt.font.TextAttribute","type":2},{"comment":"\n * An event which executes the <code>run()</code> method on a <code>Runnable\n * </code> when dispatched by the AWT event dispatcher thread. This class can\n * be used as a reference implementation of <code>ActiveEvent</code> rather\n * than declaring a new class and defining <code>dispatch()</code>.<p>\n *\n * Instances of this class are placed on the <code>EventQueue</code> by calls\n * to <code>invokeLater</code> and <code>invokeAndWait</code>. Client code\n * can use this fact to write replacement functions for <code>invokeLater\n * </code> and <code>invokeAndWait</code> without writing special-case code\n * in any <code>AWTEventListener</code> objects.\n * <p>\n * An unspecified behavior will be caused if the {@code id} parameter\n * of any particular {@code InvocationEvent} instance is not\n * in the range from {@code INVOCATION_FIRST} to {@code INVOCATION_LAST}.\n *\n * @author      Fred Ecks\n * @author      David Mendenhall\n *\n * @see         java.awt.ActiveEvent\n * @see         java.awt.EventQueue#invokeLater\n * @see         java.awt.EventQueue#invokeAndWait\n * @see         AWTEventListener\n *\n * @since       1.2\n ","description":"","name":"InvocationEvent","qualified_name":"java.awt.event.InvocationEvent","type":2},{"comment":"\n     * Encapsulates the set of parallel capable loader types.\n     ","description":"","name":"ParallelLoaders","qualified_name":"java.lang.ClassLoader.ParallelLoaders","type":2},{"comment":" Fields","description":"","name":"java_lang_reflect_Field_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_lang_reflect_Field_PersistenceDelegate","type":2},{"comment":"","description":"","name":"CheckedRandomAccessList_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_util_Collections.CheckedRandomAccessList_PersistenceDelegate","type":2},{"comment":"","description":"","name":"Version","qualified_name":"java.lang.ClassValue.Version","type":2},{"comment":"\n     * A factory {@link Supplier} that implements the lazy synchronized\n     * construction of the value and installment of it into the cache.\n     ","description":"","name":"Factory","qualified_name":"java.lang.reflect.WeakCache.Factory","type":2},{"comment":"\n     * This class implements accessibility support for the\n     * {@code Window} class.  It provides an implementation of the\n     * Java Accessibility API appropriate to window user-interface elements.\n     * @since 1.3\n     ","description":"","name":"AccessibleAWTWindow","qualified_name":"java.awt.Window.AccessibleAWTWindow","type":2},{"comment":"","description":"","name":"CompositeContext","qualified_name":"java.awt.CompositeContext","type":3},{"comment":"\n * An <code>Expression</code> object represents a primitive expression\n * in which a single method is applied to a target and a set of\n * arguments to return a result - as in <code>\"a.getFoo()\"</code>.\n * <p>\n * In addition to the properties of the super class, the\n * <code>Expression</code> object provides a <em>value</em> which\n * is the object returned when this expression is evaluated.\n * The return value is typically not provided by the caller and\n * is instead computed by dynamically finding the method and invoking\n * it when the first call to <code>getValue</code> is made.\n *\n * @see #getValue\n * @see #setValue\n *\n * @since 1.4\n *\n * @author Philip Milne\n ","description":"","name":"Expression","qualified_name":"java.beans.Expression","type":2},{"comment":"\n * The {@code Short} class wraps a value of primitive type {@code\n * short} in an object.  An object of type {@code Short} contains a\n * single field whose type is {@code short}.\n *\n * <p>In addition, this class provides several methods for converting\n * a {@code short} to a {@code String} and a {@code String} to a\n * {@code short}, as well as other constants and methods useful when\n * dealing with a {@code short}.\n *\n * @author  Nakul Saraiya\n * @author  Joseph D. Darcy\n * @see     java.lang.Number\n * @since   JDK1.1\n ","description":"","name":"Short","qualified_name":"java.lang.Short","type":2},{"comment":"\n * A <tt>Flushable</tt> is a destination of data that can be flushed.  The\n * flush method is invoked to write any buffered output to the underlying\n * stream.\n *\n * @since 1.5\n ","description":"","name":"Flushable","qualified_name":"java.io.Flushable","type":3},{"comment":"","description":"","name":"MediaEntry","qualified_name":"java.awt.MediaEntry","type":2},{"comment":"\n * The listener interface for receiving keyboard focus events on\n * a component.\n * The class that is interested in processing a focus event\n * either implements this interface (and all the methods it\n * contains) or extends the abstract <code>FocusAdapter</code> class\n * (overriding only the methods of interest).\n * The listener object created from that class is then registered with a\n * component using the component's <code>addFocusListener</code>\n * method. When the component gains or loses the keyboard focus,\n * the relevant method in the listener object\n * is invoked, and the <code>FocusEvent</code> is passed to it.\n *\n * @see FocusAdapter\n * @see FocusEvent\n * @see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/focuslistener.html\">Tutorial: Writing a Focus Listener</a>\n *\n * @author Carl Quinn\n * @since 1.1\n ","description":"","name":"FocusListener","qualified_name":"java.awt.event.FocusListener","type":3},{"comment":"\n * A utility class to iterate over the path segments of a rectangle\n * through the PathIterator interface.\n *\n * @author      Jim Graham\n ","description":"","name":"RectIterator","qualified_name":"java.awt.geom.RectIterator","type":2},{"comment":"\n * A wrapping tag for a nested AWTEvent which indicates that the event was\n * sent from another AppContext. The destination AppContext should handle the\n * event even if it is currently blocked waiting for a SequencedEvent or\n * another SentEvent to be handled.\n *\n * @author David Mendenhall\n ","description":"","name":"SentEvent","qualified_name":"java.awt.SentEvent","type":2},{"comment":"\n * Thrown to indicate that code has attempted to call a method handle\n * via the wrong method type.  As with the bytecode representation of\n * normal Java method calls, method handle calls are strongly typed\n * to a specific type descriptor associated with a call site.\n * <p>\n * This exception may also be thrown when two method handles are\n * composed, and the system detects that their types cannot be\n * matched up correctly.  This amounts to an early evaluation\n * of the type mismatch, at method handle construction time,\n * instead of when the mismatched method handle is called.\n *\n * @author John Rose, JSR 292 EG\n * @since 1.7\n ","description":"","name":"WrongMethodTypeException","qualified_name":"java.lang.invoke.WrongMethodTypeException","type":2},{"comment":" Container","description":"","name":"java_awt_Container_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_awt_Container_PersistenceDelegate","type":2},{"comment":"\n     * This class implements accessibility support for the\n     * <code>TextComponent</code> class.  It provides an implementation of the\n     * Java Accessibility API appropriate to text component user-interface\n     * elements.\n     * @since 1.3\n     ","description":"","name":"AccessibleAWTTextComponent","qualified_name":"java.awt.TextComponent.AccessibleAWTTextComponent","type":2},{"comment":"\n     * A line segment specified with float coordinates.\n     * @since 1.2\n     ","description":"","name":"Float","qualified_name":"java.awt.geom.Line2D.Float","type":2},{"comment":"","description":"","name":"CheckedSortedSet_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_util_Collections.CheckedSortedSet_PersistenceDelegate","type":2},{"comment":"\n     * A task that returns the MXBeans for a component.\n     ","description":"","name":"MXBeanFetcher","qualified_name":"java.lang.management.PlatformComponent.MXBeanFetcher","type":3},{"comment":"\n     * This class implements accessibility support for the\n     * <code>Choice</code> class.  It provides an implementation of the\n     * Java Accessibility API appropriate to choice user-interface elements.\n     * @since 1.3\n     ","description":"","name":"AccessibleAWTChoice","qualified_name":"java.awt.Choice.AccessibleAWTChoice","type":2},{"comment":"","description":"","name":"PrinterGraphics","qualified_name":"java.awt.print.PrinterGraphics","type":3},{"comment":"\n * The {@code Integer} class wraps a value of the primitive type\n * {@code int} in an object. An object of type {@code Integer}\n * contains a single field whose type is {@code int}.\n *\n * <p>In addition, this class provides several methods for converting\n * an {@code int} to a {@code String} and a {@code String} to an\n * {@code int}, as well as other constants and methods useful when\n * dealing with an {@code int}.\n *\n * <p>Implementation note: The implementations of the \"bit twiddling\"\n * methods (such as {@link #highestOneBit(int) highestOneBit} and\n * {@link #numberOfTrailingZeros(int) numberOfTrailingZeros}) are\n * based on material from Henry S. Warren, Jr.'s <i>Hacker's\n * Delight</i>, (Addison Wesley, 2002).\n *\n * @author  Lee Boynton\n * @author  Arthur van Hoff\n * @author  Josh Bloch\n * @author  Joseph D. Darcy\n * @since JDK1.0\n ","description":"","name":"Integer","qualified_name":"java.lang.Integer","type":2},{"comment":"\n * The management interface for a buffer pool, for example a pool of\n * {@link java.nio.ByteBuffer#allocateDirect direct} or {@link\n * java.nio.MappedByteBuffer mapped} buffers.\n *\n * <p> A class implementing this interface is an\n * {@link javax.management.MXBean}. A Java\n * virtual machine has one or more implementations of this interface. The {@link\n * java.lang.management.ManagementFactory#getPlatformMXBeans getPlatformMXBeans}\n * method can be used to obtain the list of {@code BufferPoolMXBean} objects\n * representing the management interfaces for pools of buffers as follows:\n * <pre>\n *     List&lt;BufferPoolMXBean&gt; pools = ManagementFactory.getPlatformMXBeans(BufferPoolMXBean.class);\n * </pre>\n *\n * <p> The management interfaces are also registered with the platform {@link\n * javax.management.MBeanServer MBeanServer}. The {@link\n * javax.management.ObjectName ObjectName} that uniquely identifies the\n * management interface within the {@code MBeanServer} takes the form:\n * <pre>\n *     java.nio:type=BufferPool,name=<i>pool name</i>\n * </pre>\n * where <em>pool name</em> is the {@link #getName name} of the buffer pool.\n *\n * @since   1.7\n ","description":"","name":"BufferPoolMXBean","qualified_name":"java.lang.management.BufferPoolMXBean","type":3},{"comment":"","description":"","name":"Visibility","qualified_name":"java.beans.Visibility","type":3},{"comment":"\n     * Provide access to the persistent fields read from the input stream.\n     ","description":"","name":"GetField","qualified_name":"java.io.ObjectInputStream.GetField","type":2},{"comment":"\n * This interface corresponds to an applet's environment: the\n * document containing the applet and the other applets in the same\n * document.\n * <p>\n * The methods in this interface can be used by an applet to obtain\n * information about its environment.\n *\n * @author      Arthur van Hoff\n * @since       JDK1.0\n ","description":"","name":"AppletContext","qualified_name":"java.applet.AppletContext","type":3},{"comment":"\n * Thrown when the Java Virtual Machine attempts to read a class\n * file and determines that the file is malformed or otherwise cannot\n * be interpreted as a class file.\n *\n * @author  unascribed\n * @since   JDK1.0\n ","description":"","name":"ClassFormatError","qualified_name":"java.lang.ClassFormatError","type":2},{"comment":"\n * Thrown to indicate that an {@code invokedynamic} instruction has\n * failed to find its bootstrap method,\n * or the bootstrap method has failed to provide a\n * {@linkplain java.lang.invoke.CallSite call site} with a {@linkplain java.lang.invoke.CallSite#getTarget target}\n * of the correct {@linkplain java.lang.invoke.MethodHandle#type method type}.\n *\n * @author John Rose, JSR 292 EG\n * @since 1.7\n ","description":"","name":"BootstrapMethodError","qualified_name":"java.lang.BootstrapMethodError","type":2},{"comment":"","description":"","name":"PaintContext","qualified_name":"java.awt.PaintContext","type":3},{"comment":"","description":"","name":"NumericShaper","qualified_name":"java.awt.font.NumericShaper","type":2},{"comment":"\n     * Defines a policy for determining the strong caret location.\n     * This class contains one method, <code>getStrongCaret</code>, which\n     * is used to specify the policy that determines the strong caret in\n     * dual-caret text.  The strong caret is used to move the caret to the\n     * left or right. Instances of this class can be passed to\n     * <code>getCaretShapes</code>, <code>getNextLeftHit</code> and\n     * <code>getNextRightHit</code> to customize strong caret\n     * selection.\n     * <p>\n     * To specify alternate caret policies, subclass <code>CaretPolicy</code>\n     * and override <code>getStrongCaret</code>.  <code>getStrongCaret</code>\n     * should inspect the two <code>TextHitInfo</code> arguments and choose\n     * one of them as the strong caret.\n     * <p>\n     * Most clients do not need to use this class.\n     ","description":"","name":"CaretPolicy","qualified_name":"java.awt.font.TextLayout.CaretPolicy","type":2},{"comment":"","description":"","name":"CharSequence","qualified_name":"java.lang.CharSequence","type":3},{"comment":"\n     * This class implements accessibility support for the\n     * <code>Panel</code> class.  It provides an implementation of the\n     * Java Accessibility API appropriate to panel user-interface elements.\n     * @since 1.3\n     ","description":"","name":"AccessibleAWTPanel","qualified_name":"java.awt.Panel.AccessibleAWTPanel","type":2},{"comment":"","description":"","name":"CheckedEntry","qualified_name":"java.lang.ProcessEnvironment.CheckedEntry","type":2},{"comment":"","description":"","name":"WrappedPrintWriter","qualified_name":"java.lang.Throwable.WrappedPrintWriter","type":2},{"comment":"\n * EventDispatchThread is a package-private AWT class which takes\n * events off the EventQueue and dispatches them to the appropriate\n * AWT components.\n *\n * The Thread starts a \"permanent\" event pump with a call to\n * pumpEvents(Conditional) in its run() method. Event handlers can choose to\n * block this event pump at any time, but should start a new pump (<b>not</b>\n * a new EventDispatchThread) by again calling pumpEvents(Conditional). This\n * secondary event pump will exit automatically as soon as the Condtional\n * evaluate()s to false and an additional Event is pumped and dispatched.\n *\n * @author Tom Ball\n * @author Amy Fowler\n * @author Fred Ecks\n * @author David Mendenhall\n *\n * @since 1.1\n ","description":"","name":"EventDispatchThread","qualified_name":"java.awt.EventDispatchThread","type":2},{"comment":"\n * The peer interface for {@link Dialog}. This adds a couple of dialog specific\n * features to the {@link WindowPeer} interface.\n *\n * The peer interfaces are intended only for use in porting\n * the AWT. They are not intended for use by application\n * developers, and developers should not implement peers\n * nor invoke any of the peer methods directly on the peer\n * instances.\n ","description":"","name":"DialogPeer","qualified_name":"java.awt.peer.DialogPeer","type":3},{"comment":"\n * The <code>System</code> class contains several useful class fields\n * and methods. It cannot be instantiated.\n *\n * <p>Among the facilities provided by the <code>System</code> class\n * are standard input, standard output, and error output streams;\n * access to externally defined properties and environment\n * variables; a means of loading files and libraries; and a utility\n * method for quickly copying a portion of an array.\n *\n * @author  unascribed\n * @since   JDK1.0\n ","description":"","name":"System","qualified_name":"java.lang.System","type":2},{"comment":"\n         * Fire <code>PropertyChange</code> listener, if one is registered,\n         * when children are added or removed.\n         * @since 1.3\n         ","description":"","name":"AccessibleContainerHandler","qualified_name":"java.awt.Container.AccessibleAWTContainer.AccessibleContainerHandler","type":2},{"comment":"\n * The peer interface for {@link TexTArea}.\n *\n * The peer interfaces are intended only for use in porting\n * the AWT. They are not intended for use by application\n * developers, and developers should not implement peers\n * nor invoke any of the peer methods directly on the peer\n * instances.\n ","description":"","name":"TextAreaPeer","qualified_name":"java.awt.peer.TextAreaPeer","type":3},{"comment":"\n     * This class implements accessibility support for the\n     * <code>Button</code> class.  It provides an implementation of the\n     * Java Accessibility API appropriate to button user-interface elements.\n     * @since 1.3\n     ","description":"","name":"AccessibleAWTButton","qualified_name":"java.awt.Button.AccessibleAWTButton","type":2},{"comment":"\n        * This class implements accessibility support for\n        * List children.  It provides an implementation of the\n        * Java Accessibility API appropriate to list children\n        * user-interface elements.\n        * @since 1.3\n        ","description":"","name":"AccessibleAWTListChild","qualified_name":"java.awt.List.AccessibleAWTList.AccessibleAWTListChild","type":2},{"comment":"","description":"","name":"FilePermissionCollection","qualified_name":"java.io.FilePermissionCollection","type":2},{"comment":"\n     * Input stream supporting single-byte peek operations.\n     ","description":"","name":"PeekInputStream","qualified_name":"java.io.ObjectInputStream.PeekInputStream","type":2},{"comment":"\n * Peer interface for {@link MouseInfo}. This is used to get some additional\n * information about the mouse.\n *\n * The peer interfaces are intended only for use in porting\n * the AWT. They are not intended for use by application\n * developers, and developers should not implement peers\n * nor invoke any of the peer methods directly on the peer\n * instances.\n ","description":"","name":"MouseInfoPeer","qualified_name":"java.awt.peer.MouseInfoPeer","type":3},{"comment":"\n     * A cubic parametric curve segment specified with\n     * {@code float} coordinates.\n     * @since 1.2\n     ","description":"","name":"Float","qualified_name":"java.awt.geom.CubicCurve2D.Float","type":2},{"comment":"\n * Thrown to indicate that an assertion has failed.\n *\n * <p>The seven one-argument public constructors provided by this\n * class ensure that the assertion error returned by the invocation:\n * <pre>\n *     new AssertionError(<i>expression</i>)\n * </pre>\n * has as its detail message the <i>string conversion</i> of\n * <i>expression</i> (as defined in section 15.18.1.1 of\n * <cite>The Java&trade; Language Specification</cite>),\n * regardless of the type of <i>expression</i>.\n *\n * @since   1.4\n ","description":"","name":"AssertionError","qualified_name":"java.lang.AssertionError","type":2},{"comment":"\n * The <code>ColorModel</code> abstract class encapsulates the\n * methods for translating a pixel value to color components\n * (for example, red, green, and blue) and an alpha component.\n * In order to render an image to the screen, a printer, or another\n * image, pixel values must be converted to color and alpha components.\n * As arguments to or return values from methods of this class,\n * pixels are represented as 32-bit ints or as arrays of primitive types.\n * The number, order, and interpretation of color components for a\n * <code>ColorModel</code> is specified by its <code>ColorSpace</code>.\n * A <code>ColorModel</code> used with pixel data that does not include\n * alpha information treats all pixels as opaque, which is an alpha\n * value of 1.0.\n * <p>\n * This <code>ColorModel</code> class supports two representations of\n * pixel values.  A pixel value can be a single 32-bit int or an\n * array of primitive types.  The Java(tm) Platform 1.0 and 1.1 APIs\n * represented pixels as single <code>byte</code> or single\n * <code>int</code> values.  For purposes of the <code>ColorModel</code>\n * class, pixel value arguments were passed as ints.  The Java(tm) 2\n * Platform API introduced additional classes for representing images.\n * With {@link BufferedImage} or {@link RenderedImage}\n * objects, based on {@link Raster} and {@link SampleModel} classes, pixel\n * values might not be conveniently representable as a single int.\n * Consequently, <code>ColorModel</code> now has methods that accept\n * pixel values represented as arrays of primitive types.  The primitive\n * type used by a particular <code>ColorModel</code> object is called its\n * transfer type.\n * <p>\n * <code>ColorModel</code> objects used with images for which pixel values\n * are not conveniently representable as a single int throw an\n * {@link IllegalArgumentException} when methods taking a single int pixel\n * argument are called.  Subclasses of <code>ColorModel</code> must\n * specify the conditions under which this occurs.  This does not\n * occur with {@link DirectColorModel} or {@link IndexColorModel} objects.\n * <p>\n * Currently, the transfer types supported by the Java 2D(tm) API are\n * DataBuffer.TYPE_BYTE, DataBuffer.TYPE_USHORT, DataBuffer.TYPE_INT,\n * DataBuffer.TYPE_SHORT, DataBuffer.TYPE_FLOAT, and DataBuffer.TYPE_DOUBLE.\n * Most rendering operations will perform much faster when using ColorModels\n * and images based on the first three of these types.  In addition, some\n * image filtering operations are not supported for ColorModels and\n * images based on the latter three types.\n * The transfer type for a particular <code>ColorModel</code> object is\n * specified when the object is created, either explicitly or by default.\n * All subclasses of <code>ColorModel</code> must specify what the\n * possible transfer types are and how the number of elements in the\n * primitive arrays representing pixels is determined.\n * <p>\n * For <code>BufferedImages</code>, the transfer type of its\n * <code>Raster</code> and of the <code>Raster</code> object's\n * <code>SampleModel</code> (available from the\n * <code>getTransferType</code> methods of these classes) must match that\n * of the <code>ColorModel</code>.  The number of elements in an array\n * representing a pixel for the <code>Raster</code> and\n * <code>SampleModel</code> (available from the\n * <code>getNumDataElements</code> methods of these classes) must match\n * that of the <code>ColorModel</code>.\n * <p>\n * The algorithm used to convert from pixel values to color and alpha\n * components varies by subclass.  For example, there is not necessarily\n * a one-to-one correspondence between samples obtained from the\n * <code>SampleModel</code> of a <code>BufferedImage</code> object's\n * <code>Raster</code> and color/alpha components.  Even when\n * there is such a correspondence, the number of bits in a sample is not\n * necessarily the same as the number of bits in the corresponding color/alpha\n * component.  Each subclass must specify how the translation from\n * pixel values to color/alpha components is done.\n * <p>\n * Methods in the <code>ColorModel</code> class use two different\n * representations of color and alpha components - a normalized form\n * and an unnormalized form.  In the normalized form, each component is a\n * <code>float</code> value between some minimum and maximum values.  For\n * the alpha component, the minimum is 0.0 and the maximum is 1.0.  For\n * color components the minimum and maximum values for each component can\n * be obtained from the <code>ColorSpace</code> object.  These values\n * will often be 0.0 and 1.0 (e.g. normalized component values for the\n * default sRGB color space range from 0.0 to 1.0), but some color spaces\n * have component values with different upper and lower limits.  These\n * limits can be obtained using the <code>getMinValue</code> and\n * <code>getMaxValue</code> methods of the <code>ColorSpace</code>\n * class.  Normalized color component values are not premultiplied.\n * All <code>ColorModels</code> must support the normalized form.\n * <p>\n * In the unnormalized\n * form, each component is an unsigned integral value between 0 and\n * 2<sup>n</sup> - 1, where n is the number of significant bits for a\n * particular component.  If pixel values for a particular\n * <code>ColorModel</code> represent color samples premultiplied by\n * the alpha sample, unnormalized color component values are\n * also premultiplied.  The unnormalized form is used only with instances\n * of <code>ColorModel</code> whose <code>ColorSpace</code> has minimum\n * component values of 0.0 for all components and maximum values of\n * 1.0 for all components.\n * The unnormalized form for color and alpha components can be a convenient\n * representation for <code>ColorModels</code> whose normalized component\n * values all lie\n * between 0.0 and 1.0.  In such cases the integral value 0 maps to 0.0 and\n * the value 2<sup>n</sup> - 1 maps to 1.0.  In other cases, such as\n * when the normalized component values can be either negative or positive,\n * the unnormalized form is not convenient.  Such <code>ColorModel</code>\n * objects throw an {@link IllegalArgumentException} when methods involving\n * an unnormalized argument are called.  Subclasses of <code>ColorModel</code>\n * must specify the conditions under which this occurs.\n *\n * @see IndexColorModel\n * @see ComponentColorModel\n * @see PackedColorModel\n * @see DirectColorModel\n * @see java.awt.Image\n * @see BufferedImage\n * @see RenderedImage\n * @see java.awt.color.ColorSpace\n * @see SampleModel\n * @see Raster\n * @see DataBuffer\n ","description":"","name":"ColorModel","qualified_name":"java.awt.image.ColorModel","type":2},{"comment":"","description":"","name":"GenericBeanInfo","qualified_name":"java.beans.GenericBeanInfo","type":2},{"comment":" This subclass allows a wrapped method handle to be re-associated with an arbitrary member name. ","description":"","name":"WrappedMember","qualified_name":"java.lang.invoke.MethodHandleImpl.WrappedMember","type":2},{"comment":"","description":"","name":"DragSourceListener","qualified_name":"java.awt.dnd.DragSourceListener","type":3},{"comment":"\n * A container class which implements automatic horizontal and/or\n * vertical scrolling for a single child component.  The display\n * policy for the scrollbars can be set to:\n * <OL>\n * <LI>as needed: scrollbars created and shown only when needed by scrollpane\n * <LI>always: scrollbars created and always shown by the scrollpane\n * <LI>never: scrollbars never created or shown by the scrollpane\n * </OL>\n * <P>\n * The state of the horizontal and vertical scrollbars is represented\n * by two <code>ScrollPaneAdjustable</code> objects (one for each\n * dimension) which implement the <code>Adjustable</code> interface.\n * The API provides methods to access those objects such that the\n * attributes on the Adjustable object (such as unitIncrement, value,\n * etc.) can be manipulated.\n * <P>\n * Certain adjustable properties (minimum, maximum, blockIncrement,\n * and visibleAmount) are set internally by the scrollpane in accordance\n * with the geometry of the scrollpane and its child and these should\n * not be set by programs using the scrollpane.\n * <P>\n * If the scrollbar display policy is defined as \"never\", then the\n * scrollpane can still be programmatically scrolled using the\n * setScrollPosition() method and the scrollpane will move and clip\n * the child's contents appropriately.  This policy is useful if the\n * program needs to create and manage its own adjustable controls.\n * <P>\n * The placement of the scrollbars is controlled by platform-specific\n * properties set by the user outside of the program.\n * <P>\n * The initial size of this container is set to 100x100, but can\n * be reset using setSize().\n * <P>\n * Scrolling with the wheel on a wheel-equipped mouse is enabled by default.\n * This can be disabled using <code>setWheelScrollingEnabled</code>.\n * Wheel scrolling can be customized by setting the block and\n * unit increment of the horizontal and vertical Adjustables.\n * For information on how mouse wheel events are dispatched, see\n * the class description for {@link MouseWheelEvent}.\n * <P>\n * Insets are used to define any space used by scrollbars and any\n * borders created by the scroll pane. getInsets() can be used\n * to get the current value for the insets.  If the value of\n * scrollbarsAlwaysVisible is false, then the value of the insets\n * will change dynamically depending on whether the scrollbars are\n * currently visible or not.\n *\n * @author      Tom Ball\n * @author      Amy Fowler\n * @author      Tim Prinzing\n ","description":"","name":"ScrollPane","qualified_name":"java.awt.ScrollPane","type":2},{"comment":" This subclass handles static field references. ","description":"","name":"StaticAccessor","qualified_name":"java.lang.invoke.DirectMethodHandle.StaticAccessor","type":2},{"comment":"","description":"","name":"TextMeasurer","qualified_name":"java.awt.font.TextMeasurer","type":2},{"comment":"\n * A class to encapsulate symbolic colors representing the color of\n * native GUI objects on a system.  For systems which support the dynamic\n * update of the system colors (when the user changes the colors)\n * the actual RGB values of these symbolic colors will also change\n * dynamically.  In order to compare the \"current\" RGB value of a\n * <code>SystemColor</code> object with a non-symbolic Color object,\n * <code>getRGB</code> should be used rather than <code>equals</code>.\n * <p>\n * Note that the way in which these system colors are applied to GUI objects\n * may vary slightly from platform to platform since GUI objects may be\n * rendered differently on each platform.\n * <p>\n * System color values may also be available through the <code>getDesktopProperty</code>\n * method on <code>java.awt.Toolkit</code>.\n *\n * @see Toolkit#getDesktopProperty\n *\n * @author      Carl Quinn\n * @author      Amy Fowler\n ","description":"","name":"SystemColor","qualified_name":"java.awt.SystemColor","type":2},{"comment":"\n * A {@code MutableCallSite} is a {@link CallSite} whose target variable\n * behaves like an ordinary field.\n * An {@code invokedynamic} instruction linked to a {@code MutableCallSite} delegates\n * all calls to the site's current target.\n * The {@linkplain CallSite#dynamicInvoker dynamic invoker} of a mutable call site\n * also delegates each call to the site's current target.\n * <p>\n * Here is an example of a mutable call site which introduces a\n * state variable into a method handle chain.\n * <!-- JavaDocExamplesTest.testMutableCallSite -->\n * <blockquote><pre>{@code\nMutableCallSite name = new MutableCallSite(MethodType.methodType(String.class));\nMethodHandle MH_name = name.dynamicInvoker();\nMethodType MT_str1 = MethodType.methodType(String.class);\nMethodHandle MH_upcase = MethodHandles.lookup()\n    .findVirtual(String.class, \"toUpperCase\", MT_str1);\nMethodHandle worker1 = MethodHandles.filterReturnValue(MH_name, MH_upcase);\nname.setTarget(MethodHandles.constant(String.class, \"Rocky\"));\nassertEquals(\"ROCKY\", (String) worker1.invokeExact());\nname.setTarget(MethodHandles.constant(String.class, \"Fred\"));\nassertEquals(\"FRED\", (String) worker1.invokeExact());\n// (mutation can be continued indefinitely)\n * }</pre></blockquote>\n * <p>\n * The same call site may be used in several places at once.\n * <blockquote><pre>{@code\nMethodType MT_str2 = MethodType.methodType(String.class, String.class);\nMethodHandle MH_cat = lookup().findVirtual(String.class,\n  \"concat\", methodType(String.class, String.class));\nMethodHandle MH_dear = MethodHandles.insertArguments(MH_cat, 1, \", dear?\");\nMethodHandle worker2 = MethodHandles.filterReturnValue(MH_name, MH_dear);\nassertEquals(\"Fred, dear?\", (String) worker2.invokeExact());\nname.setTarget(MethodHandles.constant(String.class, \"Wilma\"));\nassertEquals(\"WILMA\", (String) worker1.invokeExact());\nassertEquals(\"Wilma, dear?\", (String) worker2.invokeExact());\n * }</pre></blockquote>\n * <p>\n * <em>Non-synchronization of target values:</em>\n * A write to a mutable call site's target does not force other threads\n * to become aware of the updated value.  Threads which do not perform\n * suitable synchronization actions relative to the updated call site\n * may cache the old target value and delay their use of the new target\n * value indefinitely.\n * (This is a normal consequence of the Java Memory Model as applied\n * to object fields.)\n * <p>\n * The {@link #syncAll syncAll} operation provides a way to force threads\n * to accept a new target value, even if there is no other synchronization.\n * <p>\n * For target values which will be frequently updated, consider using\n * a {@linkplain VolatileCallSite volatile call site} instead.\n * @author John Rose, JSR 292 EG\n ","description":"","name":"MutableCallSite","qualified_name":"java.lang.invoke.MutableCallSite","type":2},{"comment":"\n * The <code>AudioClip</code> interface is a simple abstraction for\n * playing a sound clip. Multiple <code>AudioClip</code> items can be\n * playing at the same time, and the resulting sound is mixed\n * together to produce a composite.\n *\n * @author      Arthur van Hoff\n * @since       JDK1.0\n ","description":"","name":"AudioClip","qualified_name":"java.applet.AudioClip","type":3},{"comment":"\n * This class consists exclusively of static methods that help adapt\n * method handles to other JVM types, such as interfaces.\n ","description":"","name":"MethodHandleProxies","qualified_name":"java.lang.invoke.MethodHandleProxies","type":2},{"comment":"\n     * Inner class of PopupMenu used to provide default support for\n     * accessibility.  This class is not meant to be used directly by\n     * application developers, but is instead meant only to be\n     * subclassed by menu component developers.\n     * <p>\n     * The class used to obtain the accessible role for this object.\n     * @since 1.3\n     ","description":"","name":"AccessibleAWTPopupMenu","qualified_name":"java.awt.PopupMenu.AccessibleAWTPopupMenu","type":2},{"comment":"","description":"","name":"TextHitInfo","qualified_name":"java.awt.font.TextHitInfo","type":2},{"comment":"","description":"","name":"LineMetrics","qualified_name":"java.awt.font.LineMetrics","type":2},{"comment":"\n     * Separate class to defer initialization of logging until needed.\n     ","description":"","name":"Logging","qualified_name":"java.io.ObjectInputStream.Logging","type":2},{"comment":"","description":"","name":"MouseInfo","qualified_name":"java.awt.MouseInfo","type":2},{"comment":"\n * This is the superclass for Paints which use a multiple color\n * gradient to fill in their raster.  It provides storage for variables and\n * enumerated values common to\n * {@code LinearGradientPaint} and {@code RadialGradientPaint}.\n *\n * @author Nicholas Talian, Vincent Hardy, Jim Graham, Jerry Evans\n * @since 1.6\n ","description":"","name":"MultipleGradientPaint","qualified_name":"java.awt.MultipleGradientPaint","type":2},{"comment":"\n * This class allows an application to create an input stream in\n * which the bytes read are supplied by the contents of a string.\n * Applications can also read bytes from a byte array by using a\n * <code>ByteArrayInputStream</code>.\n * <p>\n * Only the low eight bits of each character in the string are used by\n * this class.\n *\n * @author     Arthur van Hoff\n * @see        java.io.ByteArrayInputStream\n * @see        java.io.StringReader\n * @since      JDK1.0\n * @deprecated This class does not properly convert characters into bytes.  As\n *             of JDK&nbsp;1.1, the preferred way to create a stream from a\n *             string is via the <code>StringReader</code> class.\n ","description":"","name":"StringBufferInputStream","qualified_name":"java.io.StringBufferInputStream","type":2},{"comment":"\n * The Boolean class wraps a value of the primitive type\n * {@code boolean} in an object. An object of type\n * {@code Boolean} contains a single field whose type is\n * {@code boolean}.\n * <p>\n * In addition, this class provides many methods for\n * converting a {@code boolean} to a {@code String} and a\n * {@code String} to a {@code boolean}, as well as other\n * constants and methods useful when dealing with a\n * {@code boolean}.\n *\n * @author  Arthur van Hoff\n * @since   JDK1.0\n ","description":"","name":"Boolean","qualified_name":"java.lang.Boolean","type":2},{"comment":"\n * A class that implements a mechanism to transfer data using\n * cut/copy/paste operations.\n * <p>\n * {@link FlavorListener}s may be registered on an instance of the\n * Clipboard class to be notified about changes to the set of\n * {@link DataFlavor}s available on this clipboard (see\n * {@link #addFlavorListener}).\n *\n * @see java.awt.Toolkit#getSystemClipboard\n * @see java.awt.Toolkit#getSystemSelection\n *\n * @author      Amy Fowler\n * @author      Alexander Gerasimov\n ","description":"","name":"Clipboard","qualified_name":"java.awt.datatransfer.Clipboard","type":2},{"comment":"\n     * Stack to keep debug information about the state of the\n     * serialization process, for embedding in exception messages.\n     ","description":"","name":"DebugTraceInfoStack","qualified_name":"java.io.ObjectOutputStream.DebugTraceInfoStack","type":2},{"comment":"\n * Signals that the requested data is not supported in this flavor.\n * @see Transferable#getTransferData\n *\n * @author      Amy Fowler\n ","description":"","name":"UnsupportedFlavorException","qualified_name":"java.awt.datatransfer.UnsupportedFlavorException","type":2},{"comment":"\n * The RenderedImageFactory interface (often abbreviated RIF) is\n * intended to be implemented by classes that wish to act as factories\n * to produce different renderings, for example by executing a series\n * of BufferedImageOps on a set of sources, depending on a specific\n * set of parameters, properties, and rendering hints.\n ","description":"","name":"RenderedImageFactory","qualified_name":"java.awt.image.renderable.RenderedImageFactory","type":3},{"comment":"\n * Thrown if an application tries to create an array with negative size.\n *\n * @author  unascribed\n * @since   JDK1.0\n ","description":"","name":"NegativeArraySizeException","qualified_name":"java.lang.NegativeArraySizeException","type":2},{"comment":"\n * The {@code LinearGradientPaint} class provides a way to fill\n * a {@link java.awt.Shape} with a linear color gradient pattern.  The user\n * may specify two or more gradient colors, and this paint will provide an\n * interpolation between each color.  The user also specifies start and end\n * points which define where in user space the color gradient should begin\n * and end.\n * <p>\n * The user must provide an array of floats specifying how to distribute the\n * colors along the gradient.  These values should range from 0.0 to 1.0 and\n * act like keyframes along the gradient (they mark where the gradient should\n * be exactly a particular color).\n * <p>\n * In the event that the user does not set the first keyframe value equal\n * to 0 and/or the last keyframe value equal to 1, keyframes will be created\n * at these positions and the first and last colors will be replicated there.\n * So, if a user specifies the following arrays to construct a gradient:<br>\n * <pre>\n *     {Color.BLUE, Color.RED}, {.3f, .7f}\n * </pre>\n * this will be converted to a gradient with the following keyframes:<br>\n * <pre>\n *     {Color.BLUE, Color.BLUE, Color.RED, Color.RED}, {0f, .3f, .7f, 1f}\n * </pre>\n *\n * <p>\n * The user may also select what action the {@code LinearGradientPaint} object\n * takes when it is filling the space outside the start and end points by\n * setting {@code CycleMethod} to either {@code REFLECTION} or {@code REPEAT}.\n * The distances between any two colors in any of the reflected or repeated\n * copies of the gradient are the same as the distance between those same two\n * colors between the start and end points.\n * Note that some minor variations in distances may occur due to sampling at\n * the granularity of a pixel.\n * If no cycle method is specified, {@code NO_CYCLE} will be chosen by\n * default, which means the endpoint colors will be used to fill the\n * remaining area.\n * <p>\n * The colorSpace parameter allows the user to specify in which colorspace\n * the interpolation should be performed, default sRGB or linearized RGB.\n *\n * <p>\n * The following code demonstrates typical usage of\n * {@code LinearGradientPaint}:\n * <pre>\n *     Point2D start = new Point2D.Float(0, 0);\n *     Point2D end = new Point2D.Float(50, 50);\n *     float[] dist = {0.0f, 0.2f, 1.0f};\n *     Color[] colors = {Color.RED, Color.WHITE, Color.BLUE};\n *     LinearGradientPaint p =\n *         new LinearGradientPaint(start, end, dist, colors);\n * </pre>\n * <p>\n * This code will create a {@code LinearGradientPaint} which interpolates\n * between red and white for the first 20% of the gradient and between white\n * and blue for the remaining 80%.\n *\n * <p>\n * This image demonstrates the example code above for each\n * of the three cycle methods:\n * <center>\n * <img src = \"doc-files/LinearGradientPaint.png\"\n * alt=\"image showing the output of the example code\">\n * </center>\n *\n * @see java.awt.Paint\n * @see java.awt.Graphics2D#setPaint\n * @author Nicholas Talian, Vincent Hardy, Jim Graham, Jerry Evans\n * @since 1.6\n ","description":"","name":"LinearGradientPaint","qualified_name":"java.awt.LinearGradientPaint","type":2},{"comment":" Working storage for an LF that is being transformed.\n *  Similarly to a StringBuffer, the editing can take place in multiple steps.\n ","description":"","name":"LambdaFormBuffer","qualified_name":"java.lang.invoke.LambdaFormBuffer","type":2},{"comment":"","description":"","name":"Caches","qualified_name":"java.io.ObjectStreamClass.Caches","type":2},{"comment":"\n * A check box is a graphical component that can be in either an\n * \"on\" (<code>true</code>) or \"off\" (<code>false</code>) state.\n * Clicking on a check box changes its state from\n * \"on\" to \"off,\" or from \"off\" to \"on.\"\n * <p>\n * The following code example creates a set of check boxes in\n * a grid layout:\n *\n * <hr><blockquote><pre>\n * setLayout(new GridLayout(3, 1));\n * add(new Checkbox(\"one\", null, true));\n * add(new Checkbox(\"two\"));\n * add(new Checkbox(\"three\"));\n * </pre></blockquote><hr>\n * <p>\n * This image depicts the check boxes and grid layout\n * created by this code example:\n * <p>\n * <img src=\"doc-files/Checkbox-1.gif\" alt=\"The following context describes the graphic.\"\n * style=\"float:center; margin: 7px 10px;\">\n * <p>\n * The button labeled <code>one</code> is in the \"on\" state, and the\n * other two are in the \"off\" state. In this example, which uses the\n * <code>GridLayout</code> class, the states of the three check\n * boxes are set independently.\n * <p>\n * Alternatively, several check boxes can be grouped together under\n * the control of a single object, using the\n * <code>CheckboxGroup</code> class.\n * In a check box group, at most one button can be in the \"on\"\n * state at any given time. Clicking on a check box to turn it on\n * forces any other check box in the same group that is on\n * into the \"off\" state.\n *\n * @author      Sami Shaio\n * @see         java.awt.GridLayout\n * @see         java.awt.CheckboxGroup\n * @since       JDK1.0\n ","description":"","name":"Checkbox","qualified_name":"java.awt.Checkbox","type":2},{"comment":"\n * Signals that a sync operation has failed.\n *\n * @author  Ken Arnold\n * @see     java.io.FileDescriptor#sync\n * @see     java.io.IOException\n * @since   JDK1.1\n ","description":"","name":"SyncFailedException","qualified_name":"java.io.SyncFailedException","type":2},{"comment":"","description":"","name":"DragGestureRecognizer","qualified_name":"java.awt.dnd.DragGestureRecognizer","type":2},{"comment":"","description":"","name":"java_util_Hashtable_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_util_Hashtable_PersistenceDelegate","type":2},{"comment":"\n * <code>RectangularShape</code> is the base class for a number of\n * {@link Shape} objects whose geometry is defined by a rectangular frame.\n * This class does not directly specify any specific geometry by\n * itself, but merely provides manipulation methods inherited by\n * a whole category of <code>Shape</code> objects.\n * The manipulation methods provided by this class can be used to\n * query and modify the rectangular frame, which provides a reference\n * for the subclasses to define their geometry.\n *\n * @author      Jim Graham\n * @since 1.2\n ","description":"","name":"RectangularShape","qualified_name":"java.awt.geom.RectangularShape","type":2},{"comment":"","description":"","name":"UnmodifiableSet_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_util_Collections.UnmodifiableSet_PersistenceDelegate","type":2},{"comment":"\n     * A quadratic parametric curve segment specified with\n     * {@code float} coordinates.\n     *\n     * @since 1.2\n     ","description":"","name":"Float","qualified_name":"java.awt.geom.QuadCurve2D.Float","type":2},{"comment":"\n * This class performs an arbitrary linear combination of the bands\n * in a <CODE>Raster</CODE>, using a specified matrix.\n * <p>\n * The width of the matrix must be equal to the number of bands in the\n * source <CODE>Raster</CODE>, optionally plus one.  If there is one more\n * column in the matrix than the number of bands, there is an implied 1 at the\n * end of the vector of band samples representing a pixel.  The height\n * of the matrix must be equal to the number of bands in the destination.\n * <p>\n * For example, a 3-banded <CODE>Raster</CODE> might have the following\n * transformation applied to each pixel in order to invert the second band of\n * the <CODE>Raster</CODE>.\n * <pre>\n *   [ 1.0   0.0   0.0    0.0  ]     [ b1 ]\n *   [ 0.0  -1.0   0.0  255.0  ]  x  [ b2 ]\n *   [ 0.0   0.0   1.0    0.0  ]     [ b3 ]\n *                                   [ 1 ]\n * </pre>\n *\n * <p>\n * Note that the source and destination can be the same object.\n ","description":"","name":"BandCombineOp","qualified_name":"java.awt.image.BandCombineOp","type":2},{"comment":"\n * The <code>IndexColorModel</code> class is a <code>ColorModel</code>\n * class that works with pixel values consisting of a\n * single sample that is an index into a fixed colormap in the default\n * sRGB color space.  The colormap specifies red, green, blue, and\n * optional alpha components corresponding to each index.  All components\n * are represented in the colormap as 8-bit unsigned integral values.\n * Some constructors allow the caller to specify \"holes\" in the colormap\n * by indicating which colormap entries are valid and which represent\n * unusable colors via the bits set in a <code>BigInteger</code> object.\n * This color model is similar to an X11 PseudoColor visual.\n * <p>\n * Some constructors provide a means to specify an alpha component\n * for each pixel in the colormap, while others either provide no\n * such means or, in some cases, a flag to indicate whether the\n * colormap data contains alpha values.  If no alpha is supplied to\n * the constructor, an opaque alpha component (alpha = 1.0) is\n * assumed for each entry.\n * An optional transparent pixel value can be supplied that indicates a\n * pixel to be made completely transparent, regardless of any alpha\n * component supplied or assumed for that pixel value.\n * Note that the color components in the colormap of an\n * <code>IndexColorModel</code> objects are never pre-multiplied with\n * the alpha components.\n * <p>\n * <a name=\"transparency\">\n * The transparency of an <code>IndexColorModel</code> object is\n * determined by examining the alpha components of the colors in the\n * colormap and choosing the most specific value after considering\n * the optional alpha values and any transparent index specified.\n * The transparency value is <code>Transparency.OPAQUE</code>\n * only if all valid colors in\n * the colormap are opaque and there is no valid transparent pixel.\n * If all valid colors\n * in the colormap are either completely opaque (alpha = 1.0) or\n * completely transparent (alpha = 0.0), which typically occurs when\n * a valid transparent pixel is specified,\n * the value is <code>Transparency.BITMASK</code>.\n * Otherwise, the value is <code>Transparency.TRANSLUCENT</code>, indicating\n * that some valid color has an alpha component that is\n * neither completely transparent nor completely opaque\n * (0.0 &lt; alpha &lt; 1.0).\n * </a>\n *\n * <p>\n * If an <code>IndexColorModel</code> object has\n * a transparency value of <code>Transparency.OPAQUE</code>,\n * then the <code>hasAlpha</code>\n * and <code>getNumComponents</code> methods\n * (both inherited from <code>ColorModel</code>)\n * return false and 3, respectively.\n * For any other transparency value,\n * <code>hasAlpha</code> returns true\n * and <code>getNumComponents</code> returns 4.\n *\n * <p>\n * <a name=\"index_values\">\n * The values used to index into the colormap are taken from the least\n * significant <em>n</em> bits of pixel representations where\n * <em>n</em> is based on the pixel size specified in the constructor.\n * For pixel sizes smaller than 8 bits, <em>n</em> is rounded up to a\n * power of two (3 becomes 4 and 5,6,7 become 8).\n * For pixel sizes between 8 and 16 bits, <em>n</em> is equal to the\n * pixel size.\n * Pixel sizes larger than 16 bits are not supported by this class.\n * Higher order bits beyond <em>n</em> are ignored in pixel representations.\n * Index values greater than or equal to the map size, but less than\n * 2<sup><em>n</em></sup>, are undefined and return 0 for all color and\n * alpha components.\n * </a>\n * <p>\n * For those methods that use a primitive array pixel representation of\n * type <code>transferType</code>, the array length is always one.\n * The transfer types supported are <code>DataBuffer.TYPE_BYTE</code> and\n * <code>DataBuffer.TYPE_USHORT</code>.  A single int pixel\n * representation is valid for all objects of this class, since it is\n * always possible to represent pixel values used with this class in a\n * single int.  Therefore, methods that use this representation do\n * not throw an <code>IllegalArgumentException</code> due to an invalid\n * pixel value.\n * <p>\n * Many of the methods in this class are final.  The reason for\n * this is that the underlying native graphics code makes assumptions\n * about the layout and operation of this class and those assumptions\n * are reflected in the implementations of the methods here that are\n * marked final.  You can subclass this class for other reasons, but\n * you cannot override or modify the behaviour of those methods.\n *\n * @see ColorModel\n * @see ColorSpace\n * @see DataBuffer\n *\n ","description":"","name":"IndexColorModel","qualified_name":"java.awt.image.IndexColorModel","type":2},{"comment":"","description":"","name":"SoftCache","qualified_name":"java.awt.datatransfer.SystemFlavorMap.SoftCache","type":2},{"comment":"non-public","description":"","name":"BoundMethodHandle","qualified_name":"java.lang.invoke.BoundMethodHandle","type":2},{"comment":"\n * The <code>Kernel</code> class defines a matrix that describes how a\n * specified pixel and its surrounding pixels affect the value\n * computed for the pixel's position in the output image of a filtering\n * operation.  The X origin and Y origin indicate the kernel matrix element\n * that corresponds to the pixel position for which an output value is\n * being computed.\n *\n * @see ConvolveOp\n ","description":"","name":"Kernel","qualified_name":"java.awt.image.Kernel","type":2},{"comment":"\n     * This class implements accessibility support for the\n     * <code>ScrollPane</code> class.  It provides an implementation of the\n     * Java Accessibility API appropriate to scroll pane user-interface\n     * elements.\n     * @since 1.3\n     ","description":"","name":"AccessibleAWTScrollPane","qualified_name":"java.awt.ScrollPane.AccessibleAWTScrollPane","type":2},{"comment":"\n * This is a place-holder class.  Some HotSpot implementations need to see it.\n ","description":"","name":"InvokeDynamic","qualified_name":"java.lang.invoke.InvokeDynamic","type":2},{"comment":"\n     * A special type of SentEvent which updates a counter in the target\n     * KeyboardFocusManager if it is an instance of\n     * DefaultKeyboardFocusManager.\n     ","description":"","name":"DefaultKeyboardFocusManagerSentEvent","qualified_name":"java.awt.DefaultKeyboardFocusManager.DefaultKeyboardFocusManagerSentEvent","type":2},{"comment":"\n * Signals that one of the ObjectStreamExceptions was thrown during a\n * write operation.  Thrown during a read operation when one of the\n * ObjectStreamExceptions was thrown during a write operation.  The\n * exception that terminated the write can be found in the detail\n * field. The stream is reset to it's initial state and all references\n * to objects already deserialized are discarded.\n *\n * <p>As of release 1.4, this exception has been retrofitted to conform to\n * the general purpose exception-chaining mechanism.  The \"exception causing\n * the abort\" that is provided at construction time and\n * accessed via the public {@link #detail} field is now known as the\n * <i>cause</i>, and may be accessed via the {@link Throwable#getCause()}\n * method, as well as the aforementioned \"legacy field.\"\n *\n * @author  unascribed\n * @since   JDK1.1\n ","description":"","name":"WriteAbortedException","qualified_name":"java.io.WriteAbortedException","type":2},{"comment":"\n     * A quadratic parametric curve segment specified with\n     * {@code double} coordinates.\n     *\n     * @since 1.2\n     ","description":"","name":"Double","qualified_name":"java.awt.geom.QuadCurve2D.Double","type":2},{"comment":"","description":"","name":"GradientPaintContext","qualified_name":"java.awt.GradientPaintContext","type":2},{"comment":"\n * A low-level event which indicates that a component moved, changed\n * size, or changed visibility (also, the root class for the other\n * component-level events).\n * <P>\n * Component events are provided for notification purposes ONLY;\n * The AWT will automatically handle component moves and resizes\n * internally so that GUI layout works properly regardless of\n * whether a program is receiving these events or not.\n * <P>\n * In addition to serving as the base class for other component-related\n * events (InputEvent, FocusEvent, WindowEvent, ContainerEvent),\n * this class defines the events that indicate changes in\n * a component's size, position, or visibility.\n * <P>\n * This low-level event is generated by a component object (such as a\n * List) when the component is moved, resized, rendered invisible, or made\n * visible again. The event is passed to every <code>ComponentListener</code>\n * or <code>ComponentAdapter</code> object which registered to receive such\n * events using the component's <code>addComponentListener</code> method.\n * (<code>ComponentAdapter</code> objects implement the\n * <code>ComponentListener</code> interface.) Each such listener object\n * gets this <code>ComponentEvent</code> when the event occurs.\n * <p>\n * An unspecified behavior will be caused if the {@code id} parameter\n * of any particular {@code ComponentEvent} instance is not\n * in the range from {@code COMPONENT_FIRST} to {@code COMPONENT_LAST}.\n *\n * @see ComponentAdapter\n * @see ComponentListener\n * @see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/componentlistener.html\">Tutorial: Writing a Component Listener</a>\n *\n * @author Carl Quinn\n * @since 1.1\n ","description":"","name":"ComponentEvent","qualified_name":"java.awt.event.ComponentEvent","type":2},{"comment":"","description":"","name":"Entry","qualified_name":"java.io.ExpiringCache.Entry","type":2},{"comment":"\n * The {@code Character} class wraps a value of the primitive\n * type {@code char} in an object. An object of class\n * {@code Character} contains a single field whose type is\n * {@code char}.\n * <p>\n * In addition, this class provides a large number of static methods for\n * determining a character's category (lowercase letter, digit, etc.)\n * and for converting characters from uppercase to lowercase and vice\n * versa.\n *\n * <h3><a id=\"conformance\">Unicode Conformance</a></h3>\n * <p>\n * The fields and methods of class {@code Character} are defined in terms\n * of character information from the Unicode Standard, specifically the\n * <i>UnicodeData</i> file that is part of the Unicode Character Database.\n * This file specifies properties including name and category for every\n * assigned Unicode code point or character range. The file is available\n * from the Unicode Consortium at\n * <a href=\"http://www.unicode.org\">http://www.unicode.org</a>.\n * <p>\n * The Java SE 8 Platform uses character information from version 6.2\n * of the Unicode Standard, with two extensions. First, the Java SE 8 Platform\n * allows an implementation of class {@code Character} to use the Japanese Era\n * code point, {@code U+32FF}, from the first version of the Unicode Standard\n * after 6.2 that assigns the code point. Second, in recognition of the fact\n * that new currencies appear frequently, the Java SE 8 Platform allows an\n * implementation of class {@code Character} to use the Currency Symbols\n * block from version 10.0 of the Unicode Standard. Consequently, the\n * behavior of fields and methods of class {@code Character} may vary across\n * implementations of the Java SE 8 Platform when processing the aforementioned\n * code points ( outside of version 6.2 ), except for the following methods\n * that define Java identifiers:\n * {@link #isJavaIdentifierStart(int)}, {@link #isJavaIdentifierStart(char)},\n * {@link #isJavaIdentifierPart(int)}, and {@link #isJavaIdentifierPart(char)}.\n * Code points in Java identifiers must be drawn from version 6.2 of\n * the Unicode Standard.\n *\n * <h3><a name=\"unicode\">Unicode Character Representations</a></h3>\n *\n * <p>The {@code char} data type (and therefore the value that a\n * {@code Character} object encapsulates) are based on the\n * original Unicode specification, which defined characters as\n * fixed-width 16-bit entities. The Unicode Standard has since been\n * changed to allow for characters whose representation requires more\n * than 16 bits.  The range of legal <em>code point</em>s is now\n * U+0000 to U+10FFFF, known as <em>Unicode scalar value</em>.\n * (Refer to the <a\n * href=\"http://www.unicode.org/reports/tr27/#notation\"><i>\n * definition</i></a> of the U+<i>n</i> notation in the Unicode\n * Standard.)\n *\n * <p><a name=\"BMP\">The set of characters from U+0000 to U+FFFF</a> is\n * sometimes referred to as the <em>Basic Multilingual Plane (BMP)</em>.\n * <a name=\"supplementary\">Characters</a> whose code points are greater\n * than U+FFFF are called <em>supplementary character</em>s.  The Java\n * platform uses the UTF-16 representation in {@code char} arrays and\n * in the {@code String} and {@code StringBuffer} classes. In\n * this representation, supplementary characters are represented as a pair\n * of {@code char} values, the first from the <em>high-surrogates</em>\n * range, (&#92;uD800-&#92;uDBFF), the second from the\n * <em>low-surrogates</em> range (&#92;uDC00-&#92;uDFFF).\n *\n * <p>A {@code char} value, therefore, represents Basic\n * Multilingual Plane (BMP) code points, including the surrogate\n * code points, or code units of the UTF-16 encoding. An\n * {@code int} value represents all Unicode code points,\n * including supplementary code points. The lower (least significant)\n * 21 bits of {@code int} are used to represent Unicode code\n * points and the upper (most significant) 11 bits must be zero.\n * Unless otherwise specified, the behavior with respect to\n * supplementary characters and surrogate {@code char} values is\n * as follows:\n *\n * <ul>\n * <li>The methods that only accept a {@code char} value cannot support\n * supplementary characters. They treat {@code char} values from the\n * surrogate ranges as undefined characters. For example,\n * {@code Character.isLetter('\\u005CuD840')} returns {@code false}, even though\n * this specific value if followed by any low-surrogate value in a string\n * would represent a letter.\n *\n * <li>The methods that accept an {@code int} value support all\n * Unicode characters, including supplementary characters. For\n * example, {@code Character.isLetter(0x2F81A)} returns\n * {@code true} because the code point value represents a letter\n * (a CJK ideograph).\n * </ul>\n *\n * <p>In the Java SE API documentation, <em>Unicode code point</em> is\n * used for character values in the range between U+0000 and U+10FFFF,\n * and <em>Unicode code unit</em> is used for 16-bit\n * {@code char} values that are code units of the <em>UTF-16</em>\n * encoding. For more information on Unicode terminology, refer to the\n * <a href=\"http://www.unicode.org/glossary/\">Unicode Glossary</a>.\n *\n * @author  Lee Boynton\n * @author  Guy Steele\n * @author  Akira Tanaka\n * @author  Martin Buchholz\n * @author  Ulf Zibis\n * @since   1.0\n ","description":"","name":"Character","qualified_name":"java.lang.Character","type":2},{"comment":"\n * Final references, used to implement finalization\n ","description":"","name":"FinalReference","qualified_name":"java.lang.ref.FinalReference","type":2},{"comment":" DefaultMutableTreeNode","description":"","name":"javax_swing_tree_DefaultMutableTreeNode_PersistenceDelegate","qualified_name":"java.beans.MetaData.javax_swing_tree_DefaultMutableTreeNode_PersistenceDelegate","type":2},{"comment":"\n * Thrown when a stack overflow occurs because an application\n * recurses too deeply.\n *\n * @author unascribed\n * @since   JDK1.0\n ","description":"","name":"StackOverflowError","qualified_name":"java.lang.StackOverflowError","type":2},{"comment":"\n * Subclasses of {@code LinkageError} indicate that a class has\n * some dependency on another class; however, the latter class has\n * incompatibly changed after the compilation of the former class.\n *\n *\n * @author  Frank Yellin\n * @since   JDK1.0\n ","description":"","name":"LinkageError","qualified_name":"java.lang.LinkageError","type":2},{"comment":" -- Decoding --","description":"","name":"StringDecoder","qualified_name":"java.lang.StringCoding.StringDecoder","type":2},{"comment":"","description":"","name":"InputStreamReader","qualified_name":"java.io.InputStreamReader","type":2},{"comment":"\n * The listener interface for receiving mouse motion events on a component.\n * (For clicks and other mouse events, use the <code>MouseListener</code>.)\n * <P>\n * The class that is interested in processing a mouse motion event\n * either implements this interface (and all the methods it\n * contains) or extends the abstract <code>MouseMotionAdapter</code> class\n * (overriding only the methods of interest).\n * <P>\n * The listener object created from that class is then registered with a\n * component using the component's <code>addMouseMotionListener</code>\n * method. A mouse motion event is generated when the mouse is moved\n * or dragged. (Many such events will be generated). When a mouse motion event\n * occurs, the relevant method in the listener object is invoked, and\n * the <code>MouseEvent</code> is passed to it.\n *\n * @author Amy Fowler\n *\n * @see MouseMotionAdapter\n * @see MouseEvent\n * @see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/mousemotionlistener.html\">Tutorial: Writing a Mouse Motion Listener</a>\n *\n * @since 1.1\n ","description":"","name":"MouseMotionListener","qualified_name":"java.awt.event.MouseMotionListener","type":3},{"comment":"\n * The AccessibleObject class is the base class for Field, Method and\n * Constructor objects.  It provides the ability to flag a reflected\n * object as suppressing default Java language access control checks\n * when it is used.  The access checks--for public, default (package)\n * access, protected, and private members--are performed when Fields,\n * Methods or Constructors are used to set or get fields, to invoke\n * methods, or to create and initialize new instances of classes,\n * respectively.\n *\n * <p>Setting the {@code accessible} flag in a reflected object\n * permits sophisticated applications with sufficient privilege, such\n * as Java Object Serialization or other persistence mechanisms, to\n * manipulate objects in a manner that would normally be prohibited.\n *\n * <p>By default, a reflected object is <em>not</em> accessible.\n *\n * @see Field\n * @see Method\n * @see Constructor\n * @see ReflectPermission\n *\n * @since 1.2\n ","description":"","name":"AccessibleObject","qualified_name":"java.lang.reflect.AccessibleObject","type":2},{"comment":"\n * The listener interface for receiving action events.\n * The class that is interested in processing an action event\n * implements this interface, and the object created with that\n * class is registered with a component, using the component's\n * <code>addActionListener</code> method. When the action event\n * occurs, that object's <code>actionPerformed</code> method is\n * invoked.\n *\n * @see ActionEvent\n * @see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/actionlistener.html\">How to Write an Action Listener</a>\n *\n * @author Carl Quinn\n * @since 1.1\n ","description":"","name":"ActionListener","qualified_name":"java.awt.event.ActionListener","type":3},{"comment":"","description":"","name":"InputMethodContext","qualified_name":"java.awt.im.spi.InputMethodContext","type":3},{"comment":"","description":"","name":"PropertyEditorManager","qualified_name":"java.beans.PropertyEditorManager","type":2},{"comment":"\n * An event which indicates that a mouse action occurred in a component.\n * A mouse action is considered to occur in a particular component if and only\n * if the mouse cursor is over the unobscured part of the component's bounds\n * when the action happens.\n * For lightweight components, such as Swing's components, mouse events\n * are only dispatched to the component if the mouse event type has been\n * enabled on the component. A mouse event type is enabled by adding the\n * appropriate mouse-based {@code EventListener} to the component\n * ({@link MouseListener} or {@link MouseMotionListener}), or by invoking\n * {@link Component#enableEvents(long)} with the appropriate mask parameter\n * ({@code AWTEvent.MOUSE_EVENT_MASK} or {@code AWTEvent.MOUSE_MOTION_EVENT_MASK}).\n * If the mouse event type has not been enabled on the component, the\n * corresponding mouse events are dispatched to the first ancestor that\n * has enabled the mouse event type.\n *<p>\n * For example, if a {@code MouseListener} has been added to a component, or\n * {@code enableEvents(AWTEvent.MOUSE_EVENT_MASK)} has been invoked, then all\n * the events defined by {@code MouseListener} are dispatched to the component.\n * On the other hand, if a {@code MouseMotionListener} has not been added and\n * {@code enableEvents} has not been invoked with\n * {@code AWTEvent.MOUSE_MOTION_EVENT_MASK}, then mouse motion events are not\n * dispatched to the component. Instead the mouse motion events are\n * dispatched to the first ancestors that has enabled mouse motion\n * events.\n * <P>\n * This low-level event is generated by a component object for:\n * <ul>\n * <li>Mouse Events\n *     <ul>\n *     <li>a mouse button is pressed\n *     <li>a mouse button is released\n *     <li>a mouse button is clicked (pressed and released)\n *     <li>the mouse cursor enters the unobscured part of component's geometry\n *     <li>the mouse cursor exits the unobscured part of component's geometry\n *     </ul>\n * <li> Mouse Motion Events\n *     <ul>\n *     <li>the mouse is moved\n *     <li>the mouse is dragged\n *     </ul>\n * </ul>\n * <P>\n * A <code>MouseEvent</code> object is passed to every\n * <code>MouseListener</code>\n * or <code>MouseAdapter</code> object which is registered to receive\n * the \"interesting\" mouse events using the component's\n * <code>addMouseListener</code> method.\n * (<code>MouseAdapter</code> objects implement the\n * <code>MouseListener</code> interface.) Each such listener object\n * gets a <code>MouseEvent</code> containing the mouse event.\n * <P>\n * A <code>MouseEvent</code> object is also passed to every\n * <code>MouseMotionListener</code> or\n * <code>MouseMotionAdapter</code> object which is registered to receive\n * mouse motion events using the component's\n * <code>addMouseMotionListener</code>\n * method. (<code>MouseMotionAdapter</code> objects implement the\n * <code>MouseMotionListener</code> interface.) Each such listener object\n * gets a <code>MouseEvent</code> containing the mouse motion event.\n * <P>\n * When a mouse button is clicked, events are generated and sent to the\n * registered <code>MouseListener</code>s.\n * The state of modal keys can be retrieved using {@link InputEvent#getModifiers}\n * and {@link InputEvent#getModifiersEx}.\n * The button mask returned by {@link InputEvent#getModifiers} reflects\n * only the button that changed state, not the current state of all buttons.\n * (Note: Due to overlap in the values of ALT_MASK/BUTTON2_MASK and\n * META_MASK/BUTTON3_MASK, this is not always true for mouse events involving\n * modifier keys).\n * To get the state of all buttons and modifier keys, use\n * {@link InputEvent#getModifiersEx}.\n * The button which has changed state is returned by {@link MouseEvent#getButton}\n * <P>\n * For example, if the first mouse button is pressed, events are sent in the\n * following order:\n * <PRE>\n *    <b   >id           </b   >   <b   >modifiers   </b   > <b   >button </b   >\n *    <code>MOUSE_PRESSED</code>:  <code>BUTTON1_MASK</code> <code>BUTTON1</code>\n *    <code>MOUSE_RELEASED</code>: <code>BUTTON1_MASK</code> <code>BUTTON1</code>\n *    <code>MOUSE_CLICKED</code>:  <code>BUTTON1_MASK</code> <code>BUTTON1</code>\n * </PRE>\n * When multiple mouse buttons are pressed, each press, release, and click\n * results in a separate event.\n * <P>\n * For example, if the user presses <b>button 1</b> followed by\n * <b>button 2</b>, and then releases them in the same order,\n * the following sequence of events is generated:\n * <PRE>\n *    <b   >id           </b   >   <b   >modifiers   </b   > <b   >button </b   >\n *    <code>MOUSE_PRESSED</code>:  <code>BUTTON1_MASK</code> <code>BUTTON1</code>\n *    <code>MOUSE_PRESSED</code>:  <code>BUTTON2_MASK</code> <code>BUTTON2</code>\n *    <code>MOUSE_RELEASED</code>: <code>BUTTON1_MASK</code> <code>BUTTON1</code>\n *    <code>MOUSE_CLICKED</code>:  <code>BUTTON1_MASK</code> <code>BUTTON1</code>\n *    <code>MOUSE_RELEASED</code>: <code>BUTTON2_MASK</code> <code>BUTTON2</code>\n *    <code>MOUSE_CLICKED</code>:  <code>BUTTON2_MASK</code> <code>BUTTON2</code>\n * </PRE>\n * If <b>button 2</b> is released first, the\n * <code>MOUSE_RELEASED</code>/<code>MOUSE_CLICKED</code> pair\n * for <code>BUTTON2_MASK</code> arrives first,\n * followed by the pair for <code>BUTTON1_MASK</code>.\n * <p>\n * Some extra mouse buttons are added to extend the standard set of buttons\n * represented by the following constants:{@code BUTTON1}, {@code BUTTON2}, and {@code BUTTON3}.\n * Extra buttons have no assigned {@code BUTTONx}\n * constants as well as their button masks have no assigned {@code BUTTONx_DOWN_MASK}\n * constants. Nevertheless, ordinal numbers starting from 4 may be\n * used as button numbers (button ids). Values obtained by the\n * {@link InputEvent#getMaskForButton(int) getMaskForButton(button)} method may be used\n * as button masks.\n * <p>\n * {@code MOUSE_DRAGGED} events are delivered to the {@code Component}\n * in which the mouse button was pressed until the mouse button is released\n * (regardless of whether the mouse position is within the bounds of the\n * {@code Component}).  Due to platform-dependent Drag&amp;Drop implementations,\n * {@code MOUSE_DRAGGED} events may not be delivered during a native\n * Drag&amp;Drop operation.\n *\n * In a multi-screen environment mouse drag events are delivered to the\n * <code>Component</code> even if the mouse position is outside the bounds of the\n * <code>GraphicsConfiguration</code> associated with that\n * <code>Component</code>. However, the reported position for mouse drag events\n * in this case may differ from the actual mouse position:\n * <ul>\n * <li>In a multi-screen environment without a virtual device:\n * <br>\n * The reported coordinates for mouse drag events are clipped to fit within the\n * bounds of the <code>GraphicsConfiguration</code> associated with\n * the <code>Component</code>.\n * <li>In a multi-screen environment with a virtual device:\n * <br>\n * The reported coordinates for mouse drag events are clipped to fit within the\n * bounds of the virtual device associated with the <code>Component</code>.\n * </ul>\n * <p>\n * An unspecified behavior will be caused if the {@code id} parameter\n * of any particular {@code MouseEvent} instance is not\n * in the range from {@code MOUSE_FIRST} to {@code MOUSE_LAST}-1\n * ({@code MOUSE_WHEEL} is not acceptable).\n *\n * @author Carl Quinn\n *\n * @see MouseAdapter\n * @see MouseListener\n * @see MouseMotionAdapter\n * @see MouseMotionListener\n * @see MouseWheelListener\n * @see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/mouselistener.html\">Tutorial: Writing a Mouse Listener</a>\n * @see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/mousemotionlistener.html\">Tutorial: Writing a Mouse Motion Listener</a>\n *\n * @since 1.1\n ","description":"","name":"MouseEvent","qualified_name":"java.awt.event.MouseEvent","type":2},{"comment":"\n * The <code>Pageable</code> implementation represents a set of\n * pages to be printed. The <code>Pageable</code> object returns\n * the total number of pages in the set as well as the\n * {@link PageFormat} and {@link Printable} for a specified page.\n * @see java.awt.print.PageFormat\n * @see java.awt.print.Printable\n ","description":"","name":"Pageable","qualified_name":"java.awt.print.Pageable","type":3},{"comment":"\n * The management interface for the memory system of\n * the Java virtual machine.\n *\n * <p> A Java virtual machine has a single instance of the implementation\n * class of this interface.  This instance implementing this interface is\n * an <a href=\"ManagementFactory.html#MXBean\">MXBean</a>\n * that can be obtained by calling\n * the {@link ManagementFactory#getMemoryMXBean} method or\n * from the {@link ManagementFactory#getPlatformMBeanServer\n * platform <tt>MBeanServer</tt>} method.\n *\n * <p>The <tt>ObjectName</tt> for uniquely identifying the MXBean for\n * the memory system within an MBeanServer is:\n * <blockquote>\n *    {@link ManagementFactory#MEMORY_MXBEAN_NAME\n *           <tt>java.lang:type=Memory</tt>}\n * </blockquote>\n *\n * It can be obtained by calling the\n * {@link PlatformManagedObject#getObjectName} method.\n *\n * <h3> Memory </h3>\n * The memory system of the Java virtual machine manages\n * the following kinds of memory:\n *\n * <h3> 1. Heap </h3>\n * The Java virtual machine has a <i>heap</i> that is the runtime\n * data area from which memory for all class instances and arrays\n * are allocated.  It is created at the Java virtual machine start-up.\n * Heap memory for objects is reclaimed by an automatic memory management\n * system which is known as a <i>garbage collector</i>.\n *\n * <p>The heap may be of a fixed size or may be expanded and shrunk.\n * The memory for the heap does not need to be contiguous.\n *\n * <h3> 2. Non-Heap Memory</h3>\n * The Java virtual machine manages memory other than the heap\n * (referred as <i>non-heap memory</i>).\n *\n * <p> The Java virtual machine has a <i>method area</i> that is shared\n * among all threads.\n * The method area belongs to non-heap memory.  It stores per-class structures\n * such as a runtime constant pool, field and method data, and the code for\n * methods and constructors.  It is created at the Java virtual machine\n * start-up.\n *\n * <p> The method area is logically part of the heap but a Java virtual\n * machine implementation may choose not to either garbage collect\n * or compact it.  Similar to the heap, the method area may be of a\n * fixed size or may be expanded and shrunk.  The memory for the\n * method area does not need to be contiguous.\n *\n * <p>In addition to the method area, a Java virtual machine\n * implementation may require memory for internal processing or\n * optimization which also belongs to non-heap memory.\n * For example, the JIT compiler requires memory for storing the native\n * machine code translated from the Java virtual machine code for\n * high performance.\n *\n * <h3>Memory Pools and Memory Managers</h3>\n * {@link MemoryPoolMXBean Memory pools} and\n * {@link MemoryManagerMXBean memory managers} are the abstract entities\n * that monitor and manage the memory system\n * of the Java virtual machine.\n *\n * <p>A memory pool represents a memory area that the Java virtual machine\n * manages.  The Java virtual machine has at least one memory pool\n * and it may create or remove memory pools during execution.\n * A memory pool can belong to either the heap or the non-heap memory.\n *\n * <p>A memory manager is responsible for managing one or more memory pools.\n * The garbage collector is one type of memory manager responsible\n * for reclaiming memory occupied by unreachable objects.  A Java virtual\n * machine may have one or more memory managers.   It may\n * add or remove memory managers during execution.\n * A memory pool can be managed by more than one memory manager.\n *\n * <h3>Memory Usage Monitoring</h3>\n *\n * Memory usage is a very important monitoring attribute for the memory system.\n * The memory usage, for example, could indicate:\n * <ul>\n *   <li>the memory usage of an application,</li>\n *   <li>the workload being imposed on the automatic memory management system,</li>\n *   <li>potential memory leakage.</li>\n * </ul>\n *\n * <p>\n * The memory usage can be monitored in three ways:\n * <ul>\n *   <li>Polling</li>\n *   <li>Usage Threshold Notification</li>\n *   <li>Collection Usage Threshold Notification</li>\n * </ul>\n *\n * Details are specified in the {@link MemoryPoolMXBean} interface.\n *\n * <p>The memory usage monitoring mechanism is intended for load-balancing\n * or workload distribution use.  For example, an application would stop\n * receiving any new workload when its memory usage exceeds a\n * certain threshold. It is not intended for an application to detect\n * and recover from a low memory condition.\n *\n * <h3>Notifications</h3>\n *\n * <p>This <tt>MemoryMXBean</tt> is a\n * {@link javax.management.NotificationEmitter NotificationEmitter}\n * that emits two types of memory {@link javax.management.Notification\n * notifications} if any one of the memory pools\n * supports a <a href=\"MemoryPoolMXBean.html#UsageThreshold\">usage threshold</a>\n * or a <a href=\"MemoryPoolMXBean.html#CollectionThreshold\">collection usage\n * threshold</a> which can be determined by calling the\n * {@link MemoryPoolMXBean#isUsageThresholdSupported} and\n * {@link MemoryPoolMXBean#isCollectionUsageThresholdSupported} methods.\n * <ul>\n *   <li>{@link MemoryNotificationInfo#MEMORY_THRESHOLD_EXCEEDED\n *       usage threshold exceeded notification} - for notifying that\n *       the memory usage of a memory pool is increased and has reached\n *       or exceeded its\n *       <a href=\"MemoryPoolMXBean.html#UsageThreshold\"> usage threshold</a> value.\n *       </li>\n *   <li>{@link MemoryNotificationInfo#MEMORY_COLLECTION_THRESHOLD_EXCEEDED\n *       collection usage threshold exceeded notification} - for notifying that\n *       the memory usage of a memory pool is greater than or equal to its\n *       <a href=\"MemoryPoolMXBean.html#CollectionThreshold\">\n *       collection usage threshold</a> after the Java virtual machine\n *       has expended effort in recycling unused objects in that\n *       memory pool.</li>\n * </ul>\n *\n * <p>\n * The notification emitted is a {@link javax.management.Notification}\n * instance whose {@link javax.management.Notification#setUserData\n * user data} is set to a {@link CompositeData CompositeData}\n * that represents a {@link MemoryNotificationInfo} object\n * containing information about the memory pool when the notification\n * was constructed. The <tt>CompositeData</tt> contains the attributes\n * as described in {@link MemoryNotificationInfo#from\n * MemoryNotificationInfo}.\n *\n * <hr>\n * <h3>NotificationEmitter</h3>\n * The <tt>MemoryMXBean</tt> object returned by\n * {@link ManagementFactory#getMemoryMXBean} implements\n * the {@link javax.management.NotificationEmitter NotificationEmitter}\n * interface that allows a listener to be registered within the\n * <tt>MemoryMXBean</tt> as a notification listener.\n *\n * Below is an example code that registers a <tt>MyListener</tt> to handle\n * notification emitted by the <tt>MemoryMXBean</tt>.\n *\n * <blockquote><pre>\n * class MyListener implements javax.management.NotificationListener {\n *     public void handleNotification(Notification notif, Object handback) {\n *         // handle notification\n *         ....\n *     }\n * }\n *\n * MemoryMXBean mbean = ManagementFactory.getMemoryMXBean();\n * NotificationEmitter emitter = (NotificationEmitter) mbean;\n * MyListener listener = new MyListener();\n * emitter.addNotificationListener(listener, null, null);\n * </pre></blockquote>\n *\n * @see ManagementFactory#getPlatformMXBeans(Class)\n * @see <a href=\"../../../javax/management/package-summary.html\">\n *      JMX Specification.</a>\n * @see <a href=\"package-summary.html#examples\">\n *      Ways to Access MXBeans</a>\n *\n * @author  Mandy Chung\n * @since   1.5\n ","description":"","name":"MemoryMXBean","qualified_name":"java.lang.management.MemoryMXBean","type":3},{"comment":"","description":"","name":"GraphicsEnvironment","qualified_name":"java.awt.GraphicsEnvironment","type":2},{"comment":"","description":"","name":"PhantomReference","qualified_name":"java.lang.ref.PhantomReference","type":2},{"comment":"\n     * A line segment specified with double coordinates.\n     * @since 1.2\n     ","description":"","name":"Double","qualified_name":"java.awt.geom.Line2D.Double","type":2},{"comment":"\n * Implementing this interface allows an object to be the target of\n * the \"for-each loop\" statement. See\n * <strong>\n * <a href=\"{@docRoot}/../technotes/guides/language/foreach.html\">For-each Loop</a>\n * </strong>\n *\n * @param <T> the type of elements returned by the iterator\n *\n * @since 1.5\n * @jls 14.14.2 The enhanced for statement\n ","description":"","name":"Iterable","qualified_name":"java.lang.Iterable","type":3},{"comment":" MenuShortcut","description":"","name":"java_awt_MenuShortcut_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_awt_MenuShortcut_PersistenceDelegate","type":2},{"comment":"","description":"","name":"ClassFileTransformer","qualified_name":"java.lang.instrument.ClassFileTransformer","type":3},{"comment":"\n * The <code>Stroke</code> interface allows a\n * {@link Graphics2D} object to obtain a {@link Shape} that is the\n * decorated outline, or stylistic representation of the outline,\n * of the specified <code>Shape</code>.\n * Stroking a <code>Shape</code> is like tracing its outline with a\n * marking pen of the appropriate size and shape.\n * The area where the pen would place ink is the area enclosed by the\n * outline <code>Shape</code>.\n * <p>\n * The methods of the <code>Graphics2D</code> interface that use the\n * outline <code>Shape</code> returned by a <code>Stroke</code> object\n * include <code>draw</code> and any other methods that are\n * implemented in terms of that method, such as\n * <code>drawLine</code>, <code>drawRect</code>,\n * <code>drawRoundRect</code>, <code>drawOval</code>,\n * <code>drawArc</code>, <code>drawPolyline</code>,\n * and <code>drawPolygon</code>.\n * <p>\n * The objects of the classes implementing <code>Stroke</code>\n * must be read-only because <code>Graphics2D</code> does not\n * clone these objects either when they are set as an attribute\n * with the <code>setStroke</code> method or when the\n * <code>Graphics2D</code> object is itself cloned.\n * If a <code>Stroke</code> object is modified after it is set in\n * the <code>Graphics2D</code> context then the behavior\n * of subsequent rendering would be undefined.\n * @see BasicStroke\n * @see Graphics2D#setStroke\n ","description":"","name":"Stroke","qualified_name":"java.awt.Stroke","type":3},{"comment":"","description":"","name":"DragSourceContext","qualified_name":"java.awt.dnd.DragSourceContext","type":2},{"comment":"","description":"","name":"BeanContextChildComponentProxy","qualified_name":"java.beans.beancontext.BeanContextChildComponentProxy","type":3},{"comment":"\n * Lazily associate a computed value with (potentially) every type.\n * For example, if a dynamic language needs to construct a message dispatch\n * table for each class encountered at a message send call site,\n * it can use a {@code ClassValue} to cache information needed to\n * perform the message send quickly, for each class encountered.\n * @author John Rose, JSR 292 EG\n * @since 1.7\n ","description":"","name":"ClassValue","qualified_name":"java.lang.ClassValue","type":2},{"comment":"\n * A common interface for all entities that declare type variables.\n *\n * @since 1.5\n ","description":"","name":"GenericDeclaration","qualified_name":"java.lang.reflect.GenericDeclaration","type":3},{"comment":"","description":"","name":"PaintAllCallback","qualified_name":"java.awt.GraphicsCallback.PaintAllCallback","type":2},{"comment":"\n * The interface for objects which can produce the image data for Images.\n * Each image contains an ImageProducer which is used to reconstruct\n * the image whenever it is needed, for example, when a new size of the\n * Image is scaled, or when the width or height of the Image is being\n * requested.\n *\n * @see ImageConsumer\n *\n * @author      Jim Graham\n ","description":"","name":"ImageProducer","qualified_name":"java.awt.image.ImageProducer","type":3},{"comment":"\n * The peer interface for {@link Label}.\n *\n * The peer interfaces are intended only for use in porting\n * the AWT. They are not intended for use by application\n * developers, and developers should not implement peers\n * nor invoke any of the peer methods directly on the peer\n * instances.\n ","description":"","name":"LabelPeer","qualified_name":"java.awt.peer.LabelPeer","type":3},{"comment":"","description":"","name":"Species_L","qualified_name":"java.lang.invoke.BoundMethodHandle.Species_L","type":2},{"comment":"\n * An event which indicates that a keystroke occurred in a component.\n * <p>\n * This low-level event is generated by a component object (such as a text\n * field) when a key is pressed, released, or typed.\n * The event is passed to every <code>KeyListener</code>\n * or <code>KeyAdapter</code> object which registered to receive such\n * events using the component's <code>addKeyListener</code> method.\n * (<code>KeyAdapter</code> objects implement the\n * <code>KeyListener</code> interface.)  Each such listener object\n * gets this <code>KeyEvent</code> when the event occurs.\n * <p>\n * <em>\"Key typed\" events</em> are higher-level and generally do not depend on\n * the platform or keyboard layout.  They are generated when a Unicode character\n * is entered, and are the preferred way to find out about character input.\n * In the simplest case, a key typed event is produced by a single key press\n * (e.g., 'a').  Often, however, characters are produced by series of key\n * presses (e.g., 'shift' + 'a'), and the mapping from key pressed events to\n * key typed events may be many-to-one or many-to-many.  Key releases are not\n * usually necessary to generate a key typed event, but there are some cases\n * where the key typed event is not generated until a key is released (e.g.,\n * entering ASCII sequences via the Alt-Numpad method in Windows).\n * No key typed events are generated for keys that don't generate Unicode\n * characters (e.g., action keys, modifier keys, etc.).\n * <p>\n * The getKeyChar method always returns a valid Unicode character or\n * CHAR_UNDEFINED.  Character input is reported by KEY_TYPED events:\n * KEY_PRESSED and KEY_RELEASED events are not necessarily associated\n * with character input.  Therefore, the result of the getKeyChar method\n * is guaranteed to be meaningful only for KEY_TYPED events.\n * <p>\n * For key pressed and key released events, the getKeyCode method returns\n * the event's keyCode.  For key typed events, the getKeyCode method\n * always returns {@code VK_UNDEFINED}. The {@code getExtendedKeyCode} method\n * may also be used with many international keyboard layouts.\n *\n * <p>\n * <em>\"Key pressed\" and \"key released\" events</em> are lower-level and depend\n * on the platform and keyboard layout. They are generated whenever a key is\n * pressed or released, and are the only way to find out about keys that don't\n * generate character input (e.g., action keys, modifier keys, etc.). The key\n * being pressed or released is indicated by the {@code getKeyCode} and {@code getExtendedKeyCode}\n * methods, which return a virtual key code.\n *\n * <p>\n * <em>Virtual key codes</em> are used to report which keyboard key has\n * been pressed, rather than a character generated by the combination\n * of one or more keystrokes (such as \"A\", which comes from shift and \"a\").\n *\n * <p>\n * For example, pressing the Shift key will cause a KEY_PRESSED event\n * with a VK_SHIFT keyCode, while pressing the 'a' key will result in\n * a VK_A keyCode.  After the 'a' key is released, a KEY_RELEASED event\n * will be fired with VK_A. Separately, a KEY_TYPED event with a keyChar\n * value of 'A' is generated.\n *\n * <p>\n * Pressing and releasing a key on the keyboard results in the generating\n * the following key events (in order):\n * <PRE>\n *    {@code KEY_PRESSED}\n *    {@code KEY_TYPED} (is only generated if a valid Unicode character could be generated.)\n *    {@code KEY_RELEASED}\n * </PRE>\n *\n * But in some cases (e.g. auto-repeat or input method is activated) the order\n * could be different (and platform dependent).\n *\n * <p>\n * Notes:\n * <ul>\n * <li>Key combinations which do not result in Unicode characters, such as action\n * keys like F1 and the HELP key, do not generate KEY_TYPED events.\n * <li>Not all keyboards or systems are capable of generating all\n * virtual key codes.  No attempt is made in Java to generate these keys\n * artificially.\n * <li>Virtual key codes do not identify a physical key: they depend on the\n * platform and keyboard layout. For example, the key that generates VK_Q\n * when using a U.S. keyboard layout will generate VK_A when using a French\n * keyboard layout.\n * <li>The key that generates {@code VK_Q} when using a U.S. keyboard layout also\n * generates a unique code for Russian or Hebrew layout. There is no a\n * {@code VK_} constant for these and many other codes in various layouts. These codes\n * may be obtained by using {@code getExtendedKeyCode} and are used whenever\n * a {@code VK_} constant is used.\n * <li>Not all characters have a keycode associated with them.  For example,\n * there is no keycode for the question mark because there is no keyboard\n * for which it appears on the primary layer.\n * <li>In order to support the platform-independent handling of action keys,\n * the Java platform uses a few additional virtual key constants for functions\n * that would otherwise have to be recognized by interpreting virtual key codes\n * and modifiers. For example, for Japanese Windows keyboards, VK_ALL_CANDIDATES\n * is returned instead of VK_CONVERT with the ALT modifier.\n * <li>As specified in <a href=\"../doc-files/FocusSpec.html\">Focus Specification</a>\n * key events are dispatched to the focus owner by default.\n * </ul>\n *\n * <p>\n * WARNING: Aside from those keys that are defined by the Java language\n * (VK_ENTER, VK_BACK_SPACE, and VK_TAB), do not rely on the values of the VK_\n * constants.  Sun reserves the right to change these values as needed\n * to accommodate a wider range of keyboards in the future.\n * <p>\n * An unspecified behavior will be caused if the {@code id} parameter\n * of any particular {@code KeyEvent} instance is not\n * in the range from {@code KEY_FIRST} to {@code KEY_LAST}.\n *\n * @author Carl Quinn\n * @author Amy Fowler\n * @author Norbert Lindenberg\n *\n * @see KeyAdapter\n * @see KeyListener\n * @see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/keylistener.html\">Tutorial: Writing a Key Listener</a>\n *\n * @since 1.1\n ","description":"","name":"KeyEvent","qualified_name":"java.awt.event.KeyEvent","type":2},{"comment":"\n * Serialization's descriptor for classes.  It contains the name and\n * serialVersionUID of the class.  The ObjectStreamClass for a specific class\n * loaded in this Java VM can be found/created using the lookup method.\n *\n * <p>The algorithm to compute the SerialVersionUID is described in\n * <a href=\"../../../platform/serialization/spec/class.html#4100\">Object\n * Serialization Specification, Section 4.6, Stream Unique Identifiers</a>.\n *\n * @author      Mike Warres\n * @author      Roger Riggs\n * @see ObjectStreamField\n * @see <a href=\"../../../platform/serialization/spec/class.html\">Object Serialization Specification, Section 4, Class Descriptors</a>\n * @since   JDK1.1\n ","description":"","name":"ObjectStreamClass","qualified_name":"java.io.ObjectStreamClass","type":2},{"comment":"","description":"","name":"DropTargetEventTargetFilter","qualified_name":"java.awt.Container.DropTargetEventTargetFilter","type":2},{"comment":"\n * Conditional is used by the EventDispatchThread's message pumps to\n * determine if a given pump should continue to run, or should instead exit\n * and yield control to the parent pump.\n *\n * @author David Mendenhall\n ","description":"","name":"Conditional","qualified_name":"java.awt.Conditional","type":3},{"comment":"\n * The {@code ThreadGroupContext} is an application-dependent\n * context referenced by the specific {@link ThreadGroup}.\n * This is a replacement for the {@link sun.awt.AppContext}.\n *\n * @author  Sergey Malenkov\n ","description":"","name":"ThreadGroupContext","qualified_name":"java.beans.ThreadGroupContext","type":2},{"comment":"\n * A <code>Statement</code> object represents a primitive statement\n * in which a single method is applied to a target and\n * a set of arguments - as in <code>\"a.setFoo(b)\"</code>.\n * Note that where this example uses names\n * to denote the target and its argument, a statement\n * object does not require a name space and is constructed with\n * the values themselves.\n * The statement object associates the named method\n * with its environment as a simple set of values:\n * the target and an array of argument values.\n *\n * @since 1.4\n *\n * @author Philip Milne\n ","description":"","name":"Statement","qualified_name":"java.beans.Statement","type":2},{"comment":"\n * The security manager is a class that allows\n * applications to implement a security policy. It allows an\n * application to determine, before performing a possibly unsafe or\n * sensitive operation, what the operation is and whether\n * it is being attempted in a security context that allows the\n * operation to be performed. The\n * application can allow or disallow the operation.\n * <p>\n * The <code>SecurityManager</code> class contains many methods with\n * names that begin with the word <code>check</code>. These methods\n * are called by various methods in the Java libraries before those\n * methods perform certain potentially sensitive operations. The\n * invocation of such a <code>check</code> method typically looks like this:\n * <blockquote><pre>\n *     SecurityManager security = System.getSecurityManager();\n *     if (security != null) {\n *         security.check<i>XXX</i>(argument, &nbsp;.&nbsp;.&nbsp;.&nbsp;);\n *     }\n * </pre></blockquote>\n * <p>\n * The security manager is thereby given an opportunity to prevent\n * completion of the operation by throwing an exception. A security\n * manager routine simply returns if the operation is permitted, but\n * throws a <code>SecurityException</code> if the operation is not\n * permitted. The only exception to this convention is\n * <code>checkTopLevelWindow</code>, which returns a\n * <code>boolean</code> value.\n * <p>\n * The current security manager is set by the\n * <code>setSecurityManager</code> method in class\n * <code>System</code>. The current security manager is obtained\n * by the <code>getSecurityManager</code> method.\n * <p>\n * The special method\n * {@link SecurityManager#checkPermission(java.security.Permission)}\n * determines whether an access request indicated by a specified\n * permission should be granted or denied. The\n * default implementation calls\n *\n * <pre>\n *   AccessController.checkPermission(perm);\n * </pre>\n *\n * <p>\n * If a requested access is allowed,\n * <code>checkPermission</code> returns quietly. If denied, a\n * <code>SecurityException</code> is thrown.\n * <p>\n * As of Java 2 SDK v1.2, the default implementation of each of the other\n * <code>check</code> methods in <code>SecurityManager</code> is to\n * call the <code>SecurityManager checkPermission</code> method\n * to determine if the calling thread has permission to perform the requested\n * operation.\n * <p>\n * Note that the <code>checkPermission</code> method with\n * just a single permission argument always performs security checks\n * within the context of the currently executing thread.\n * Sometimes a security check that should be made within a given context\n * will actually need to be done from within a\n * <i>different</i> context (for example, from within a worker thread).\n * The {@link SecurityManager#getSecurityContext getSecurityContext} method\n * and the {@link SecurityManager#checkPermission(java.security.Permission,\n * java.lang.Object) checkPermission}\n * method that includes a context argument are provided\n * for this situation. The\n * <code>getSecurityContext</code> method returns a \"snapshot\"\n * of the current calling context. (The default implementation\n * returns an AccessControlContext object.) A sample call is\n * the following:\n *\n * <pre>\n *   Object context = null;\n *   SecurityManager sm = System.getSecurityManager();\n *   if (sm != null) context = sm.getSecurityContext();\n * </pre>\n *\n * <p>\n * The <code>checkPermission</code> method\n * that takes a context object in addition to a permission\n * makes access decisions based on that context,\n * rather than on that of the current execution thread.\n * Code within a different context can thus call that method,\n * passing the permission and the\n * previously-saved context object. A sample call, using the\n * SecurityManager <code>sm</code> obtained as in the previous example,\n * is the following:\n *\n * <pre>\n *   if (sm != null) sm.checkPermission(permission, context);\n * </pre>\n *\n * <p>Permissions fall into these categories: File, Socket, Net,\n * Security, Runtime, Property, AWT, Reflect, and Serializable.\n * The classes managing these various\n * permission categories are <code>java.io.FilePermission</code>,\n * <code>java.net.SocketPermission</code>,\n * <code>java.net.NetPermission</code>,\n * <code>java.security.SecurityPermission</code>,\n * <code>java.lang.RuntimePermission</code>,\n * <code>java.util.PropertyPermission</code>,\n * <code>java.awt.AWTPermission</code>,\n * <code>java.lang.reflect.ReflectPermission</code>, and\n * <code>java.io.SerializablePermission</code>.\n *\n * <p>All but the first two (FilePermission and SocketPermission) are\n * subclasses of <code>java.security.BasicPermission</code>, which itself\n * is an abstract subclass of the\n * top-level class for permissions, which is\n * <code>java.security.Permission</code>. BasicPermission defines the\n * functionality needed for all permissions that contain a name\n * that follows the hierarchical property naming convention\n * (for example, \"exitVM\", \"setFactory\", \"queuePrintJob\", etc).\n * An asterisk\n * may appear at the end of the name, following a \".\", or by itself, to\n * signify a wildcard match. For example: \"a.*\" or \"*\" is valid,\n * \"*a\" or \"a*b\" is not valid.\n *\n * <p>FilePermission and SocketPermission are subclasses of the\n * top-level class for permissions\n * (<code>java.security.Permission</code>). Classes like these\n * that have a more complicated name syntax than that used by\n * BasicPermission subclass directly from Permission rather than from\n * BasicPermission. For example,\n * for a <code>java.io.FilePermission</code> object, the permission name is\n * the path name of a file (or directory).\n *\n * <p>Some of the permission classes have an \"actions\" list that tells\n * the actions that are permitted for the object.  For example,\n * for a <code>java.io.FilePermission</code> object, the actions list\n * (such as \"read, write\") specifies which actions are granted for the\n * specified file (or for files in the specified directory).\n *\n * <p>Other permission classes are for \"named\" permissions -\n * ones that contain a name but no actions list; you either have the\n * named permission or you don't.\n *\n * <p>Note: There is also a <code>java.security.AllPermission</code>\n * permission that implies all permissions. It exists to simplify the work\n * of system administrators who might need to perform multiple\n * tasks that require all (or numerous) permissions.\n * <p>\n * See <a href =\"../../../technotes/guides/security/permissions.html\">\n * Permissions in the JDK</a> for permission-related information.\n * This document includes, for example, a table listing the various SecurityManager\n * <code>check</code> methods and the permission(s) the default\n * implementation of each such method requires.\n * It also contains a table of all the version 1.2 methods\n * that require permissions, and for each such method tells\n * which permission it requires.\n * <p>\n * For more information about <code>SecurityManager</code> changes made in\n * the JDK and advice regarding porting of 1.1-style security managers,\n * see the <a href=\"../../../technotes/guides/security/index.html\">security documentation</a>.\n *\n * @author  Arthur van Hoff\n * @author  Roland Schemers\n *\n * @see     java.lang.ClassLoader\n * @see     java.lang.SecurityException\n * @see     java.lang.SecurityManager#checkTopLevelWindow(java.lang.Object)\n *  checkTopLevelWindow\n * @see     java.lang.System#getSecurityManager() getSecurityManager\n * @see     java.lang.System#setSecurityManager(java.lang.SecurityManager)\n *  setSecurityManager\n * @see     java.security.AccessController AccessController\n * @see     java.security.AccessControlContext AccessControlContext\n * @see     java.security.AccessControlException AccessControlException\n * @see     java.security.Permission\n * @see     java.security.BasicPermission\n * @see     java.io.FilePermission\n * @see     java.net.SocketPermission\n * @see     java.util.PropertyPermission\n * @see     java.lang.RuntimePermission\n * @see     java.awt.AWTPermission\n * @see     java.security.Policy Policy\n * @see     java.security.SecurityPermission SecurityPermission\n * @see     java.security.ProtectionDomain\n *\n * @since   JDK1.0\n ","description":"","name":"SecurityManager","qualified_name":"java.lang.SecurityManager","type":2},{"comment":"\n * The persistence delegate for <CODE>java.util.EnumSet</CODE> classes.\n *\n * @author Sergey A. Malenkov\n ","description":"","name":"java_util_EnumSet_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_util_EnumSet_PersistenceDelegate","type":2},{"comment":"","description":"","name":"HeavyweightFocusRequest","qualified_name":"java.awt.KeyboardFocusManager.HeavyweightFocusRequest","type":2},{"comment":"\n * A <tt>Readable</tt> is a source of characters. Characters from\n * a <tt>Readable</tt> are made available to callers of the read\n * method via a {@link java.nio.CharBuffer CharBuffer}.\n *\n * @since 1.5\n ","description":"","name":"Readable","qualified_name":"java.lang.Readable","type":3},{"comment":"","description":"","name":"TexturePaintContext","qualified_name":"java.awt.TexturePaintContext","type":2},{"comment":"\n * A filter for abstract pathnames.\n *\n * <p> Instances of this interface may be passed to the <code>{@link\n * File#listFiles(java.io.FileFilter) listFiles(FileFilter)}</code> method\n * of the <code>{@link java.io.File}</code> class.\n *\n * @since 1.2\n ","description":"","name":"FileFilter","qualified_name":"java.io.FileFilter","type":3},{"comment":"","description":"","name":"BeanContextContainerProxy","qualified_name":"java.beans.beancontext.BeanContextContainerProxy","type":3},{"comment":"\n * Thrown when {@link java.lang.reflect.Executable#getParameters the\n * java.lang.reflect package} attempts to read method parameters from\n * a class file and determines that one or more parameters are\n * malformed.\n *\n * <p>The following is a list of conditions under which this exception\n * can be thrown:\n * <ul>\n * <li> The number of parameters (parameter_count) is wrong for the method\n * <li> A constant pool index is out of bounds.\n * <li> A constant pool index does not refer to a UTF-8 entry\n * <li> A parameter's name is \"\", or contains an illegal character\n * <li> The flags field contains an illegal flag (something other than\n *     FINAL, SYNTHETIC, or MANDATED)\n * </ul>\n *\n * See {@link java.lang.reflect.Executable#getParameters} for more\n * information.\n *\n * @see java.lang.reflect.Executable#getParameters\n * @since 1.8\n ","description":"","name":"MalformedParametersException","qualified_name":"java.lang.reflect.MalformedParametersException","type":2},{"comment":"\n * A <em>component</em> is an object having a graphical representation\n * that can be displayed on the screen and that can interact with the\n * user. Examples of components are the buttons, checkboxes, and scrollbars\n * of a typical graphical user interface. <p>\n * The <code>Component</code> class is the abstract superclass of\n * the nonmenu-related Abstract Window Toolkit components. Class\n * <code>Component</code> can also be extended directly to create a\n * lightweight component. A lightweight component is a component that is\n * not associated with a native window. On the contrary, a heavyweight\n * component is associated with a native window. The {@link #isLightweight()}\n * method may be used to distinguish between the two kinds of the components.\n * <p>\n * Lightweight and heavyweight components may be mixed in a single component\n * hierarchy. However, for correct operating of such a mixed hierarchy of\n * components, the whole hierarchy must be valid. When the hierarchy gets\n * invalidated, like after changing the bounds of components, or\n * adding/removing components to/from containers, the whole hierarchy must be\n * validated afterwards by means of the {@link Container#validate()} method\n * invoked on the top-most invalid container of the hierarchy.\n *\n * <h3>Serialization</h3>\n * It is important to note that only AWT listeners which conform\n * to the <code>Serializable</code> protocol will be saved when\n * the object is stored.  If an AWT object has listeners that\n * aren't marked serializable, they will be dropped at\n * <code>writeObject</code> time.  Developers will need, as always,\n * to consider the implications of making an object serializable.\n * One situation to watch out for is this:\n * <pre>\n *    import java.awt.*;\n *    import java.awt.event.*;\n *    import java.io.Serializable;\n *\n *    class MyApp implements ActionListener, Serializable\n *    {\n *        BigObjectThatShouldNotBeSerializedWithAButton bigOne;\n *        Button aButton = new Button();\n *\n *        MyApp()\n *        {\n *            // Oops, now aButton has a listener with a reference\n *            // to bigOne!\n *            aButton.addActionListener(this);\n *        }\n *\n *        public void actionPerformed(ActionEvent e)\n *        {\n *            System.out.println(\"Hello There\");\n *        }\n *    }\n * </pre>\n * In this example, serializing <code>aButton</code> by itself\n * will cause <code>MyApp</code> and everything it refers to\n * to be serialized as well.  The problem is that the listener\n * is serializable by coincidence, not by design.  To separate\n * the decisions about <code>MyApp</code> and the\n * <code>ActionListener</code> being serializable one can use a\n * nested class, as in the following example:\n * <pre>\n *    import java.awt.*;\n *    import java.awt.event.*;\n *    import java.io.Serializable;\n *\n *    class MyApp implements java.io.Serializable\n *    {\n *         BigObjectThatShouldNotBeSerializedWithAButton bigOne;\n *         Button aButton = new Button();\n *\n *         static class MyActionListener implements ActionListener\n *         {\n *             public void actionPerformed(ActionEvent e)\n *             {\n *                 System.out.println(\"Hello There\");\n *             }\n *         }\n *\n *         MyApp()\n *         {\n *             aButton.addActionListener(new MyActionListener());\n *         }\n *    }\n * </pre>\n * <p>\n * <b>Note</b>: For more information on the paint mechanisms utilitized\n * by AWT and Swing, including information on how to write the most\n * efficient painting code, see\n * <a href=\"http://www.oracle.com/technetwork/java/painting-140037.html\">Painting in AWT and Swing</a>.\n * <p>\n * For details on the focus subsystem, see\n * <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/misc/focus.html\">\n * How to Use the Focus Subsystem</a>,\n * a section in <em>The Java Tutorial</em>, and the\n * <a href=\"../../java/awt/doc-files/FocusSpec.html\">Focus Specification</a>\n * for more information.\n *\n * @author      Arthur van Hoff\n * @author      Sami Shaio\n ","description":"","name":"Component","qualified_name":"java.awt.Component","type":2},{"comment":"\n * The {@code GridBagLayoutInfo} is an utility class for\n * {@code GridBagLayout} layout manager.\n * It stores align, size and baseline parameters for every component within a container.\n * <p>\n * @see       java.awt.GridBagLayout\n * @see       java.awt.GridBagConstraints\n * @since 1.6\n ","description":"","name":"GridBagLayoutInfo","qualified_name":"java.awt.GridBagLayoutInfo","type":2},{"comment":"","description":"","name":"FinalizerHistogram","qualified_name":"java.lang.ref.FinalizerHistogram","type":2},{"comment":"\n * The <code>Printable</code> interface is implemented\n * by the <code>print</code> methods of the current\n * page painter, which is called by the printing\n * system to render a page.  When building a\n * {@link Pageable}, pairs of {@link PageFormat}\n * instances and instances that implement\n * this interface are used to describe each page. The\n * instance implementing <code>Printable</code> is called to\n * print the page's graphics.\n * <p>\n * A <code>Printable(..)</code> may be set on a <code>PrinterJob</code>.\n * When the client subsequently initiates printing by calling\n * <code>PrinterJob.print(..)</code> control\n * <p>\n * is handed to the printing system until all pages have been printed.\n * It does this by calling <code>Printable.print(..)</code> until\n * all pages in the document have been printed.\n * In using the <code>Printable</code> interface the printing\n * commits to image the contents of a page whenever\n * requested by the printing system.\n * <p>\n * The parameters to <code>Printable.print(..)</code> include a\n * <code>PageFormat</code> which describes the printable area of\n * the page, needed for calculating the contents that will fit the\n * page, and the page index, which specifies the zero-based print\n * stream index of the requested page.\n * <p>\n * For correct printing behaviour, the following points should be\n * observed:\n * <ul>\n * <li> The printing system may request a page index more than once.\n * On each occasion equal PageFormat parameters will be supplied.\n *\n * <li>The printing system will call <code>Printable.print(..)</code>\n * with page indexes which increase monotonically, although as noted above,\n * the <code>Printable</code> should expect multiple calls for a page index\n * and that page indexes may be skipped, when page ranges are specified\n * by the client, or by a user through a print dialog.\n *\n * <li>If multiple collated copies of a document are requested, and the\n * printer cannot natively support this, then the document may be imaged\n * multiple times. Printing will start each copy from the lowest print\n * stream page index page.\n *\n * <li>With the exception of re-imaging an entire document for multiple\n * collated copies, the increasing page index order means that when\n * page N is requested if a client needs to calculate page break position,\n * it may safely discard any state related to pages &lt; N, and make current\n * that for page N. \"State\" usually is just the calculated position in the\n * document that corresponds to the start of the page.\n *\n * <li>When called by the printing system the <code>Printable</code> must\n * inspect and honour the supplied PageFormat parameter as well as the\n * page index.  The format of the page to be drawn is specified by the\n * supplied PageFormat. The size, orientation and imageable area of the page\n * is therefore already determined and rendering must be within this\n * imageable area.\n * This is key to correct printing behaviour, and it has the\n * implication that the client has the responsibility of tracking\n * what content belongs on the specified page.\n *\n * <li>When the <code>Printable</code> is obtained from a client-supplied\n * <code>Pageable</code> then the client may provide different PageFormats\n * for each page index. Calculations of page breaks must account for this.\n * </ul>\n * <p>\n * @see java.awt.print.Pageable\n * @see java.awt.print.PageFormat\n * @see java.awt.print.PrinterJob\n ","description":"","name":"Printable","qualified_name":"java.awt.print.Printable","type":3},{"comment":" A description of a cached transform, possibly associated with the result of the transform.\n     *  The logical content is a sequence of byte values, starting with a Kind.ordinal value.\n     *  The sequence is unterminated, ending with an indefinite number of zero bytes.\n     *  Sequences that are simple (short enough and with small enough values) pack into a 64-bit long.\n     ","description":"","name":"Transform","qualified_name":"java.lang.invoke.LambdaFormEditor.Transform","type":2},{"comment":"\n * A mechanism for ensuring that a series of AWTEvents are executed in a\n * precise order, even across multiple AppContexts. The nested events will be\n * dispatched in the order in which their wrapping SequencedEvents were\n * constructed. The only exception to this rule is if the peer of the target of\n * the nested event was destroyed (with a call to Component.removeNotify)\n * before the wrapping SequencedEvent was able to be dispatched. In this case,\n * the nested event is never dispatched.\n *\n * @author David Mendenhall\n ","description":"","name":"SequencedEvent","qualified_name":"java.awt.SequencedEvent","type":2},{"comment":"\n * Constants written into the Object Serialization Stream.\n *\n * @author  unascribed\n * @since JDK 1.1\n ","description":"","name":"ObjectStreamConstants","qualified_name":"java.io.ObjectStreamConstants","type":3},{"comment":"\n * A KeyEventPostProcessor cooperates with the current KeyboardFocusManager\n * in the final resolution of all unconsumed KeyEvents. KeyEventPostProcessors\n * registered with the current KeyboardFocusManager will receive KeyEvents\n * after the KeyEvents have been dispatched to and handled by their targets.\n * KeyEvents that would have been otherwise discarded because no Component in\n * the application currently owns the focus will also be forwarded to\n * registered KeyEventPostProcessors. This will allow applications to implement\n * features that require global KeyEvent post-handling, such as menu shortcuts.\n * <p>\n * Note that the KeyboardFocusManager itself implements KeyEventPostProcessor.\n * By default, the current KeyboardFocusManager will be the final\n * KeyEventPostProcessor in the chain. The current KeyboardFocusManager cannot\n * be completely deregistered as a KeyEventPostProcessor. However, if a\n * KeyEventPostProcessor reports that no further post-processing of the\n * KeyEvent should take place, the AWT will consider the event fully handled\n * and will take no additional action with regard to the event. (While it is\n * possible for client code to register the current KeyboardFocusManager as\n * a KeyEventPostProcessor one or more times, this is usually unnecessary and\n * not recommended.)\n *\n * @author David Mendenhall\n *\n * @see KeyboardFocusManager#addKeyEventPostProcessor\n * @see KeyboardFocusManager#removeKeyEventPostProcessor\n * @since 1.4\n ","description":"","name":"KeyEventPostProcessor","qualified_name":"java.awt.KeyEventPostProcessor","type":3},{"comment":"\n     * Default PutField implementation.\n     ","description":"","name":"PutFieldImpl","qualified_name":"java.io.ObjectOutputStream.PutFieldImpl","type":2},{"comment":"\n * An ImageFilter class for scaling images using a simple area averaging\n * algorithm that produces smoother results than the nearest neighbor\n * algorithm.\n * <p>This class extends the basic ImageFilter Class to scale an existing\n * image and provide a source for a new image containing the resampled\n * image.  The pixels in the source image are blended to produce pixels\n * for an image of the specified size.  The blending process is analogous\n * to scaling up the source image to a multiple of the destination size\n * using pixel replication and then scaling it back down to the destination\n * size by simply averaging all the pixels in the supersized image that\n * fall within a given pixel of the destination image.  If the data from\n * the source is not delivered in TopDownLeftRight order then the filter\n * will back off to a simple pixel replication behavior and utilize the\n * requestTopDownLeftRightResend() method to refilter the pixels in a\n * better way at the end.\n * <p>It is meant to be used in conjunction with a FilteredImageSource\n * object to produce scaled versions of existing images.  Due to\n * implementation dependencies, there may be differences in pixel values\n * of an image filtered on different platforms.\n *\n * @see FilteredImageSource\n * @see ReplicateScaleFilter\n * @see ImageFilter\n *\n * @author      Jim Graham\n ","description":"","name":"AreaAveragingScaleFilter","qualified_name":"java.awt.image.AreaAveragingScaleFilter","type":2},{"comment":"","description":"","name":"MethodArray","qualified_name":"java.lang.Class.MethodArray","type":2},{"comment":"","description":"","name":"DropTargetPeer","qualified_name":"java.awt.dnd.peer.DropTargetPeer","type":3},{"comment":" reflection data that might get invalidated when JVM TI RedefineClasses() is called","description":"","name":"ReflectionData","qualified_name":"java.lang.Class.ReflectionData","type":2},{"comment":"\n * This is a utility class for <code>String.toLowerCase()</code> and\n * <code>String.toUpperCase()</code>, that handles special casing with\n * conditions.  In other words, it handles the mappings with conditions\n * that are defined in\n * <a href=\"http://www.unicode.org/Public/UNIDATA/SpecialCasing.txt\">Special\n * Casing Properties</a> file.\n * <p>\n * Note that the unconditional case mappings (including 1:M mappings)\n * are handled in <code>Character.toLower/UpperCase()</code>.\n ","description":"","name":"ConditionalSpecialCasing","qualified_name":"java.lang.ConditionalSpecialCasing","type":2},{"comment":"\n * The peer interface for {@link PopupMenu}.\n *\n * The peer interfaces are intended only for use in porting\n * the AWT. They are not intended for use by application\n * developers, and developers should not implement peers\n * nor invoke any of the peer methods directly on the peer\n * instances.\n ","description":"","name":"PopupMenuPeer","qualified_name":"java.awt.peer.PopupMenuPeer","type":3},{"comment":"\n * A <code>PushbackInputStream</code> adds\n * functionality to another input stream, namely\n * the  ability to \"push back\" or \"unread\"\n * one byte. This is useful in situations where\n * it is  convenient for a fragment of code\n * to read an indefinite number of data bytes\n * that  are delimited by a particular byte\n * value; after reading the terminating byte,\n * the  code fragment can \"unread\" it, so that\n * the next read operation on the input stream\n * will reread the byte that was pushed back.\n * For example, bytes representing the  characters\n * constituting an identifier might be terminated\n * by a byte representing an  operator character;\n * a method whose job is to read just an identifier\n * can read until it  sees the operator and\n * then push the operator back to be re-read.\n *\n * @author  David Connelly\n * @author  Jonathan Payne\n * @since   JDK1.0\n ","description":"","name":"PushbackInputStream","qualified_name":"java.io.PushbackInputStream","type":2},{"comment":"\n * {@code RuntimeException} is the superclass of those\n * exceptions that can be thrown during the normal operation of the\n * Java Virtual Machine.\n *\n * <p>{@code RuntimeException} and its subclasses are <em>unchecked\n * exceptions</em>.  Unchecked exceptions do <em>not</em> need to be\n * declared in a method or constructor's {@code throws} clause if they\n * can be thrown by the execution of the method or constructor and\n * propagate outside the method or constructor boundary.\n *\n * @author  Frank Yellin\n * @jls 11.2 Compile-Time Checking of Exceptions\n * @since   JDK1.0\n ","description":"","name":"RuntimeException","qualified_name":"java.lang.RuntimeException","type":2},{"comment":"\n * This class exists to wrap one or more data arrays.  Each data array in\n * the DataBuffer is referred to as a bank.  Accessor methods for getting\n * and setting elements of the DataBuffer's banks exist with and without\n * a bank specifier.  The methods without a bank specifier use the default 0th\n * bank.  The DataBuffer can optionally take an offset per bank, so that\n * data in an existing array can be used even if the interesting data\n * doesn't start at array location zero.  Getting or setting the 0th\n * element of a bank, uses the (0+offset)th element of the array.  The\n * size field specifies how much of the data array is available for\n * use.  Size + offset for a given bank should never be greater\n * than the length of the associated data array.  The data type of\n * a data buffer indicates the type of the data array(s) and may also\n * indicate additional semantics, e.g. storing unsigned 8-bit data\n * in elements of a byte array.  The data type may be TYPE_UNDEFINED\n * or one of the types defined below.  Other types may be added in\n * the future.  Generally, an object of class DataBuffer will be cast down\n * to one of its data type specific subclasses to access data type specific\n * methods for improved performance.  Currently, the Java 2D(tm) API\n * image classes use TYPE_BYTE, TYPE_USHORT, TYPE_INT, TYPE_SHORT,\n * TYPE_FLOAT, and TYPE_DOUBLE DataBuffers to store image data.\n * @see java.awt.image.Raster\n * @see java.awt.image.SampleModel\n ","description":"","name":"DataBuffer","qualified_name":"java.awt.image.DataBuffer","type":2},{"comment":"\n * Thrown to indicate that an attempt has been made to store the\n * wrong type of object into an array of objects. For example, the\n * following code generates an <code>ArrayStoreException</code>:\n * <blockquote><pre>\n *     Object x[] = new String[3];\n *     x[0] = new Integer(0);\n * </pre></blockquote>\n *\n * @author  unascribed\n * @since   JDK1.0\n ","description":"","name":"ArrayStoreException","qualified_name":"java.lang.ArrayStoreException","type":2},{"comment":"\n     * The <code>Float</code> class defines a rectangle specified in float\n     * coordinates.\n     * @since 1.2\n     ","description":"","name":"Float","qualified_name":"java.awt.geom.Rectangle2D.Float","type":2},{"comment":" DefaultListModel","description":"","name":"javax_swing_DefaultListModel_PersistenceDelegate","qualified_name":"java.beans.MetaData.javax_swing_DefaultListModel_PersistenceDelegate","type":2},{"comment":"","description":"","name":"CopyIterator","qualified_name":"java.awt.geom.Path2D.Double.CopyIterator","type":2},{"comment":"","description":"","name":"BCSIterator","qualified_name":"java.beans.beancontext.BeanContextSupport.BCSIterator","type":2},{"comment":"\n * This interface imposes a total ordering on the objects of each class that\n * implements it.  This ordering is referred to as the class's <i>natural\n * ordering</i>, and the class's <tt>compareTo</tt> method is referred to as\n * its <i>natural comparison method</i>.<p>\n *\n * Lists (and arrays) of objects that implement this interface can be sorted\n * automatically by {@link Collections#sort(List) Collections.sort} (and\n * {@link Arrays#sort(Object[]) Arrays.sort}).  Objects that implement this\n * interface can be used as keys in a {@linkplain SortedMap sorted map} or as\n * elements in a {@linkplain SortedSet sorted set}, without the need to\n * specify a {@linkplain Comparator comparator}.<p>\n *\n * The natural ordering for a class <tt>C</tt> is said to be <i>consistent\n * with equals</i> if and only if <tt>e1.compareTo(e2) == 0</tt> has\n * the same boolean value as <tt>e1.equals(e2)</tt> for every\n * <tt>e1</tt> and <tt>e2</tt> of class <tt>C</tt>.  Note that <tt>null</tt>\n * is not an instance of any class, and <tt>e.compareTo(null)</tt> should\n * throw a <tt>NullPointerException</tt> even though <tt>e.equals(null)</tt>\n * returns <tt>false</tt>.<p>\n *\n * It is strongly recommended (though not required) that natural orderings be\n * consistent with equals.  This is so because sorted sets (and sorted maps)\n * without explicit comparators behave \"strangely\" when they are used with\n * elements (or keys) whose natural ordering is inconsistent with equals.  In\n * particular, such a sorted set (or sorted map) violates the general contract\n * for set (or map), which is defined in terms of the <tt>equals</tt>\n * method.<p>\n *\n * For example, if one adds two keys <tt>a</tt> and <tt>b</tt> such that\n * {@code (!a.equals(b) && a.compareTo(b) == 0)} to a sorted\n * set that does not use an explicit comparator, the second <tt>add</tt>\n * operation returns false (and the size of the sorted set does not increase)\n * because <tt>a</tt> and <tt>b</tt> are equivalent from the sorted set's\n * perspective.<p>\n *\n * Virtually all Java core classes that implement <tt>Comparable</tt> have natural\n * orderings that are consistent with equals.  One exception is\n * <tt>java.math.BigDecimal</tt>, whose natural ordering equates\n * <tt>BigDecimal</tt> objects with equal values and different precisions\n * (such as 4.0 and 4.00).<p>\n *\n * For the mathematically inclined, the <i>relation</i> that defines\n * the natural ordering on a given class C is:<pre>\n *       {(x, y) such that x.compareTo(y) &lt;= 0}.\n * </pre> The <i>quotient</i> for this total order is: <pre>\n *       {(x, y) such that x.compareTo(y) == 0}.\n * </pre>\n *\n * It follows immediately from the contract for <tt>compareTo</tt> that the\n * quotient is an <i>equivalence relation</i> on <tt>C</tt>, and that the\n * natural ordering is a <i>total order</i> on <tt>C</tt>.  When we say that a\n * class's natural ordering is <i>consistent with equals</i>, we mean that the\n * quotient for the natural ordering is the equivalence relation defined by\n * the class's {@link Object#equals(Object) equals(Object)} method:<pre>\n *     {(x, y) such that x.equals(y)}. </pre><p>\n *\n * This interface is a member of the\n * <a href=\"{@docRoot}/../technotes/guides/collections/index.html\">\n * Java Collections Framework</a>.\n *\n * @param <T> the type of objects that this object may be compared to\n *\n * @author  Josh Bloch\n * @see java.util.Comparator\n * @since 1.2\n ","description":"","name":"Comparable","qualified_name":"java.lang.Comparable","type":3},{"comment":"\n * <code>Panel</code> is the simplest container class. A panel\n * provides space in which an application can attach any other\n * component, including other panels.\n * <p>\n * The default layout manager for a panel is the\n * <code>FlowLayout</code> layout manager.\n *\n * @author      Sami Shaio\n * @see     java.awt.FlowLayout\n * @since   JDK1.0\n ","description":"","name":"Panel","qualified_name":"java.awt.Panel","type":2},{"comment":"\n * Thrown when the Java Virtual Machine detects a circularity in the\n * superclass hierarchy of a class being loaded.\n *\n * @author     unascribed\n * @since      JDK1.0\n ","description":"","name":"ClassCircularityError","qualified_name":"java.lang.ClassCircularityError","type":2},{"comment":"\n * A class implements the <code>Cloneable</code> interface to\n * indicate to the {@link java.lang.Object#clone()} method that it\n * is legal for that method to make a\n * field-for-field copy of instances of that class.\n * <p>\n * Invoking Object's clone method on an instance that does not implement the\n * <code>Cloneable</code> interface results in the exception\n * <code>CloneNotSupportedException</code> being thrown.\n * <p>\n * By convention, classes that implement this interface should override\n * <tt>Object.clone</tt> (which is protected) with a public method.\n * See {@link java.lang.Object#clone()} for details on overriding this\n * method.\n * <p>\n * Note that this interface does <i>not</i> contain the <tt>clone</tt> method.\n * Therefore, it is not possible to clone an object merely by virtue of the\n * fact that it implements this interface.  Even if the clone method is invoked\n * reflectively, there is no guarantee that it will succeed.\n *\n * @author  unascribed\n * @see     java.lang.CloneNotSupportedException\n * @see     java.lang.Object#clone()\n * @since   JDK1.0\n ","description":"","name":"Cloneable","qualified_name":"java.lang.Cloneable","type":3},{"comment":"","description":"","name":"ByteCache","qualified_name":"java.lang.Byte.ByteCache","type":2},{"comment":"\n * The peer interface for {@link Canvas}.\n *\n * The peer interfaces are intended only for use in porting\n * the AWT. They are not intended for use by application\n * developers, and developers should not implement peers\n * nor invoke any of the peer methods directly on the peer\n * instances.\n ","description":"","name":"CanvasPeer","qualified_name":"java.awt.peer.CanvasPeer","type":3},{"comment":"","description":"","name":"NullPersistenceDelegate","qualified_name":"java.beans.MetaData.NullPersistenceDelegate","type":2},{"comment":"\n * Thrown when control information that was read from an object stream\n * violates internal consistency checks.\n *\n * @author  unascribed\n * @since   JDK1.1\n ","description":"","name":"StreamCorruptedException","qualified_name":"java.io.StreamCorruptedException","type":2},{"comment":"","description":"","name":"FinalizerThread","qualified_name":"java.lang.ref.Finalizer.FinalizerThread","type":2},{"comment":"\n * This interface describes single-input/single-output\n * operations performed on Raster objects.  It is implemented by such\n * classes as AffineTransformOp, ConvolveOp, and LookupOp.  The Source\n * and Destination objects must contain the appropriate number\n * of bands for the particular classes implementing this interface.\n * Otherwise, an exception is thrown.  This interface cannot be used to\n * describe more sophisticated Ops such as ones that take multiple sources.\n * Each class implementing this interface will specify whether or not it\n * will allow an in-place filtering operation (i.e. source object equal\n * to the destination object).  Note that the restriction to single-input\n * operations means that the values of destination pixels prior to the\n * operation are not used as input to the filter operation.\n * @see AffineTransformOp\n * @see BandCombineOp\n * @see ColorConvertOp\n * @see ConvolveOp\n * @see LookupOp\n * @see RescaleOp\n ","description":"","name":"RasterOp","qualified_name":"java.awt.image.RasterOp","type":3},{"comment":"","description":"","name":"FilePermission","qualified_name":"java.io.FilePermission","type":2},{"comment":"\n * The <code>AffineTransform</code> class represents a 2D affine transform\n * that performs a linear mapping from 2D coordinates to other 2D\n * coordinates that preserves the \"straightness\" and\n * \"parallelness\" of lines.  Affine transformations can be constructed\n * using sequences of translations, scales, flips, rotations, and shears.\n * <p>\n * Such a coordinate transformation can be represented by a 3 row by\n * 3 column matrix with an implied last row of [ 0 0 1 ].  This matrix\n * transforms source coordinates {@code (x,y)} into\n * destination coordinates {@code (x',y')} by considering\n * them to be a column vector and multiplying the coordinate vector\n * by the matrix according to the following process:\n * <pre>\n *      [ x']   [  m00  m01  m02  ] [ x ]   [ m00x + m01y + m02 ]\n *      [ y'] = [  m10  m11  m12  ] [ y ] = [ m10x + m11y + m12 ]\n *      [ 1 ]   [   0    0    1   ] [ 1 ]   [         1         ]\n * </pre>\n * <h3><a name=\"quadrantapproximation\">Handling 90-Degree Rotations</a></h3>\n * <p>\n * In some variations of the <code>rotate</code> methods in the\n * <code>AffineTransform</code> class, a double-precision argument\n * specifies the angle of rotation in radians.\n * These methods have special handling for rotations of approximately\n * 90 degrees (including multiples such as 180, 270, and 360 degrees),\n * so that the common case of quadrant rotation is handled more\n * efficiently.\n * This special handling can cause angles very close to multiples of\n * 90 degrees to be treated as if they were exact multiples of\n * 90 degrees.\n * For small multiples of 90 degrees the range of angles treated\n * as a quadrant rotation is approximately 0.00000121 degrees wide.\n * This section explains why such special care is needed and how\n * it is implemented.\n * <p>\n * Since 90 degrees is represented as <code>PI/2</code> in radians,\n * and since PI is a transcendental (and therefore irrational) number,\n * it is not possible to exactly represent a multiple of 90 degrees as\n * an exact double precision value measured in radians.\n * As a result it is theoretically impossible to describe quadrant\n * rotations (90, 180, 270 or 360 degrees) using these values.\n * Double precision floating point values can get very close to\n * non-zero multiples of <code>PI/2</code> but never close enough\n * for the sine or cosine to be exactly 0.0, 1.0 or -1.0.\n * The implementations of <code>Math.sin()</code> and\n * <code>Math.cos()</code> correspondingly never return 0.0\n * for any case other than <code>Math.sin(0.0)</code>.\n * These same implementations do, however, return exactly 1.0 and\n * -1.0 for some range of numbers around each multiple of 90\n * degrees since the correct answer is so close to 1.0 or -1.0 that\n * the double precision significand cannot represent the difference\n * as accurately as it can for numbers that are near 0.0.\n * <p>\n * The net result of these issues is that if the\n * <code>Math.sin()</code> and <code>Math.cos()</code> methods\n * are used to directly generate the values for the matrix modifications\n * during these radian-based rotation operations then the resulting\n * transform is never strictly classifiable as a quadrant rotation\n * even for a simple case like <code>rotate(Math.PI/2.0)</code>,\n * due to minor variations in the matrix caused by the non-0.0 values\n * obtained for the sine and cosine.\n * If these transforms are not classified as quadrant rotations then\n * subsequent code which attempts to optimize further operations based\n * upon the type of the transform will be relegated to its most general\n * implementation.\n * <p>\n * Because quadrant rotations are fairly common,\n * this class should handle these cases reasonably quickly, both in\n * applying the rotations to the transform and in applying the resulting\n * transform to the coordinates.\n * To facilitate this optimal handling, the methods which take an angle\n * of rotation measured in radians attempt to detect angles that are\n * intended to be quadrant rotations and treat them as such.\n * These methods therefore treat an angle <em>theta</em> as a quadrant\n * rotation if either <code>Math.sin(<em>theta</em>)</code> or\n * <code>Math.cos(<em>theta</em>)</code> returns exactly 1.0 or -1.0.\n * As a rule of thumb, this property holds true for a range of\n * approximately 0.0000000211 radians (or 0.00000121 degrees) around\n * small multiples of <code>Math.PI/2.0</code>.\n *\n * @author Jim Graham\n * @since 1.2\n ","description":"","name":"AffineTransform","qualified_name":"java.awt.geom.AffineTransform","type":2},{"comment":"\n * This class contains constant values representing\n * the type of action(s) to be performed by a Drag and Drop operation.\n * @since 1.2\n ","description":"","name":"DnDConstants","qualified_name":"java.awt.dnd.DnDConstants","type":2},{"comment":"","description":"","name":"BeanContextEvent","qualified_name":"java.beans.beancontext.BeanContextEvent","type":2},{"comment":"","description":"","name":"PeerPaintCallback","qualified_name":"java.awt.GraphicsCallback.PeerPaintCallback","type":2},{"comment":"\n * A <code>FileInputStream</code> obtains input bytes\n * from a file in a file system. What files\n * are  available depends on the host environment.\n *\n * <p><code>FileInputStream</code> is meant for reading streams of raw bytes\n * such as image data. For reading streams of characters, consider using\n * <code>FileReader</code>.\n *\n * @author  Arthur van Hoff\n * @see     java.io.File\n * @see     java.io.FileDescriptor\n * @see     java.io.FileOutputStream\n * @see     java.nio.file.Files#newInputStream\n * @since   JDK1.0\n ","description":"","name":"FileInputStream","qualified_name":"java.io.FileInputStream","type":2},{"comment":"","description":"","name":"LightweightFocusRequest","qualified_name":"java.awt.KeyboardFocusManager.LightweightFocusRequest","type":2},{"comment":"\n * This class is the superclass of all classes that filter output\n * streams. These streams sit on top of an already existing output\n * stream (the <i>underlying</i> output stream) which it uses as its\n * basic sink of data, but possibly transforming the data along the\n * way or providing additional functionality.\n * <p>\n * The class <code>FilterOutputStream</code> itself simply overrides\n * all methods of <code>OutputStream</code> with versions that pass\n * all requests to the underlying output stream. Subclasses of\n * <code>FilterOutputStream</code> may further override some of these\n * methods as well as provide additional methods and fields.\n *\n * @author  Jonathan Payne\n * @since   JDK1.0\n ","description":"","name":"FilterOutputStream","qualified_name":"java.io.FilterOutputStream","type":2},{"comment":"\n * The listener interface for receiving component events.\n * The class that is interested in processing a component event\n * either implements this interface (and all the methods it\n * contains) or extends the abstract <code>ComponentAdapter</code> class\n * (overriding only the methods of interest).\n * The listener object created from that class is then registered with a\n * component using the component's <code>addComponentListener</code>\n * method. When the component's size, location, or visibility\n * changes, the relevant method in the listener object is invoked,\n * and the <code>ComponentEvent</code> is passed to it.\n * <P>\n * Component events are provided for notification purposes ONLY;\n * The AWT will automatically handle component moves and resizes\n * internally so that GUI layout works properly regardless of\n * whether a program registers a <code>ComponentListener</code> or not.\n *\n * @see ComponentAdapter\n * @see ComponentEvent\n * @see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/componentlistener.html\">Tutorial: Writing a Component Listener</a>\n *\n * @author Carl Quinn\n * @since 1.1\n ","description":"","name":"ComponentListener","qualified_name":"java.awt.event.ComponentListener","type":3},{"comment":"\n * Thrown if the Java Virtual Machine cannot find an appropriate\n * native-language definition of a method declared <code>native</code>.\n *\n * @author unascribed\n * @see     java.lang.Runtime\n * @since   JDK1.0\n ","description":"","name":"UnsatisfiedLinkError","qualified_name":"java.lang.UnsatisfiedLinkError","type":2},{"comment":"\n * Type is the common superinterface for all types in the Java\n * programming language. These include raw types, parameterized types,\n * array types, type variables and primitive types.\n *\n * @since 1.5\n ","description":"","name":"Type","qualified_name":"java.lang.reflect.Type","type":3},{"comment":"\n * The {@code Desktop} class allows a Java application to launch\n * associated applications registered on the native desktop to handle\n * a {@link java.net.URI} or a file.\n *\n * <p> Supported operations include:\n * <ul>\n *   <li>launching the user-default browser to show a specified\n *       URI;</li>\n *   <li>launching the user-default mail client with an optional\n *       {@code mailto} URI;</li>\n *   <li>launching a registered application to open, edit or print a\n *       specified file.</li>\n * </ul>\n *\n * <p> This class provides methods corresponding to these\n * operations. The methods look for the associated application\n * registered on the current platform, and launch it to handle a URI\n * or file. If there is no associated application or the associated\n * application fails to be launched, an exception is thrown.\n *\n * <p> An application is registered to a URI or file type; for\n * example, the {@code \"sxi\"} file extension is typically registered\n * to StarOffice.  The mechanism of registering, accessing, and\n * launching the associated application is platform-dependent.\n *\n * <p> Each operation is an action type represented by the {@link\n * Desktop.Action} class.\n *\n * <p> Note: when some action is invoked and the associated\n * application is executed, it will be executed on the same system as\n * the one on which the Java application was launched.\n *\n * @since 1.6\n * @author Armin Chen\n * @author George Zhang\n ","description":"","name":"Desktop","qualified_name":"java.awt.Desktop","type":2},{"comment":"","description":"","name":"UnmodifiableSortedMap_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_util_Collections.UnmodifiableSortedMap_PersistenceDelegate","type":2},{"comment":"","description":"","name":"DragGestureEvent","qualified_name":"java.awt.dnd.DragGestureEvent","type":2},{"comment":"","description":"","name":"CodePointIterator","qualified_name":"","type":2},{"comment":"\n     * A type-safe enumeration of the possible back buffer contents after\n     * page-flipping\n     * @since 1.4\n     ","description":"","name":"FlipContents","qualified_name":"java.awt.BufferCapabilities.FlipContents","type":2},{"comment":"\n * A class that implements a menu which can be dynamically popped up\n * at a specified position within a component.\n * <p>\n * As the inheritance hierarchy implies, a <code>PopupMenu</code>\n *  can be used anywhere a <code>Menu</code> can be used.\n * However, if you use a <code>PopupMenu</code> like a <code>Menu</code>\n * (e.g., you add it to a <code>MenuBar</code>), then you <b>cannot</b>\n * call <code>show</code> on that <code>PopupMenu</code>.\n *\n * @author      Amy Fowler\n ","description":"","name":"PopupMenu","qualified_name":"java.awt.PopupMenu","type":2},{"comment":"","description":"","name":"SimpleBeanInfo","qualified_name":"java.beans.SimpleBeanInfo","type":2},{"comment":"\n * <b>NOTE:</b> The <code>Event</code> class is obsolete and is\n * available only for backwards compatibility.  It has been replaced\n * by the <code>AWTEvent</code> class and its subclasses.\n * <p>\n * <code>Event</code> is a platform-independent class that\n * encapsulates events from the platform's Graphical User\n * Interface in the Java&nbsp;1.0 event model. In Java&nbsp;1.1\n * and later versions, the <code>Event</code> class is maintained\n * only for backwards compatibility. The information in this\n * class description is provided to assist programmers in\n * converting Java&nbsp;1.0 programs to the new event model.\n * <p>\n * In the Java&nbsp;1.0 event model, an event contains an\n * {@link Event#id} field\n * that indicates what type of event it is and which other\n * <code>Event</code> variables are relevant for the event.\n * <p>\n * For keyboard events, {@link Event#key}\n * contains a value indicating which key was activated, and\n * {@link Event#modifiers} contains the\n * modifiers for that event.  For the KEY_PRESS and KEY_RELEASE\n * event ids, the value of <code>key</code> is the unicode\n * character code for the key. For KEY_ACTION and\n * KEY_ACTION_RELEASE, the value of <code>key</code> is\n * one of the defined action-key identifiers in the\n * <code>Event</code> class (<code>PGUP</code>,\n * <code>PGDN</code>, <code>F1</code>, <code>F2</code>, etc).\n *\n * @author     Sami Shaio\n * @since      JDK1.0\n ","description":"","name":"Event","qualified_name":"java.awt.Event","type":2},{"comment":"\n * The <code>RasterFormatException</code> is thrown if there is\n * invalid layout information in the {@link Raster}.\n ","description":"","name":"RasterFormatException","qualified_name":"java.awt.image.RasterFormatException","type":2},{"comment":"\n * Thrown to indicate that a program has attempted to access an element of\n * an annotation whose type has changed after the annotation was compiled\n * (or serialized).\n * This exception can be thrown by the {@linkplain\n * java.lang.reflect.AnnotatedElement API used to read annotations\n * reflectively}.\n *\n * @author  Josh Bloch\n * @see     java.lang.reflect.AnnotatedElement\n * @since 1.5\n ","description":"","name":"AnnotationTypeMismatchException","qualified_name":"java.lang.annotation.AnnotationTypeMismatchException","type":2},{"comment":"\n * The interface for objects expressing interest in image data through\n * the ImageProducer interfaces.  When a consumer is added to an image\n * producer, the producer delivers all of the data about the image\n * using the method calls defined in this interface.\n *\n * @see ImageProducer\n *\n * @author      Jim Graham\n ","description":"","name":"ImageConsumer","qualified_name":"java.awt.image.ImageConsumer","type":3},{"comment":"","description":"","name":"CharIterator","qualified_name":"","type":2},{"comment":"\n     * Private class to perform sub-region blitting.  Swing will use\n     * this subclass via the SubRegionShowable interface in order to\n     * copy only the area changed during a repaint.\n     * See javax.swing.BufferStrategyPaintManager.\n     ","description":"","name":"BltSubRegionBufferStrategy","qualified_name":"java.awt.Component.BltSubRegionBufferStrategy","type":2},{"comment":"\n     * Represents a source of subprocess input or a destination of\n     * subprocess output.\n     *\n     * Each {@code Redirect} instance is one of the following:\n     *\n     * <ul>\n     * <li>the special value {@link #PIPE Redirect.PIPE}\n     * <li>the special value {@link #INHERIT Redirect.INHERIT}\n     * <li>a redirection to read from a file, created by an invocation of\n     *     {@link Redirect#from Redirect.from(File)}\n     * <li>a redirection to write to a file,  created by an invocation of\n     *     {@link Redirect#to Redirect.to(File)}\n     * <li>a redirection to append to a file, created by an invocation of\n     *     {@link Redirect#appendTo Redirect.appendTo(File)}\n     * </ul>\n     *\n     * <p>Each of the above categories has an associated unique\n     * {@link Type Type}.\n     *\n     * @since 1.7\n     ","description":"","name":"Redirect","qualified_name":"java.lang.ProcessBuilder.Redirect","type":2},{"comment":"\n * A data input stream lets an application read primitive Java data\n * types from an underlying input stream in a machine-independent\n * way. An application uses a data output stream to write data that\n * can later be read by a data input stream.\n * <p>\n * DataInputStream is not necessarily safe for multithreaded access.\n * Thread safety is optional and is the responsibility of users of\n * methods in this class.\n *\n * @author  Arthur van Hoff\n * @see     java.io.DataOutputStream\n * @since   JDK1.0\n ","description":"","name":"DataInputStream","qualified_name":"java.io.DataInputStream","type":2},{"comment":"","description":"","name":"WeakReference","qualified_name":"java.lang.ref.WeakReference","type":2},{"comment":"","description":"","name":"CMMException","qualified_name":"java.awt.color.CMMException","type":2},{"comment":"\n * LambdaConversionException\n ","description":"","name":"LambdaConversionException","qualified_name":"java.lang.invoke.LambdaConversionException","type":2},{"comment":"\n * Helper class used by InnerClassLambdaMetafactory to log generated classes\n *\n * @implNote\n * <p> Because this class is called by LambdaMetafactory, make use\n * of lambda lead to recursive calls cause stack overflow.\n ","description":"","name":"ProxyClassesDumper","qualified_name":"java.lang.invoke.ProxyClassesDumper","type":2},{"comment":"","description":"","name":"TextJustifier","qualified_name":"java.awt.font.TextJustifier","type":2},{"comment":"\n * <code>EventQueue</code> is a platform-independent class\n * that queues events, both from the underlying peer classes\n * and from trusted application classes.\n * <p>\n * It encapsulates asynchronous event dispatch machinery which\n * extracts events from the queue and dispatches them by calling\n * {@link #dispatchEvent(AWTEvent) dispatchEvent(AWTEvent)} method\n * on this <code>EventQueue</code> with the event to be dispatched\n * as an argument.  The particular behavior of this machinery is\n * implementation-dependent.  The only requirements are that events\n * which were actually enqueued to this queue (note that events\n * being posted to the <code>EventQueue</code> can be coalesced)\n * are dispatched:\n * <dl>\n *   <dt> Sequentially.\n *   <dd> That is, it is not permitted that several events from\n *        this queue are dispatched simultaneously.\n *   <dt> In the same order as they are enqueued.\n *   <dd> That is, if <code>AWTEvent</code>&nbsp;A is enqueued\n *        to the <code>EventQueue</code> before\n *        <code>AWTEvent</code>&nbsp;B then event B will not be\n *        dispatched before event A.\n * </dl>\n * <p>\n * Some browsers partition applets in different code bases into\n * separate contexts, and establish walls between these contexts.\n * In such a scenario, there will be one <code>EventQueue</code>\n * per context. Other browsers place all applets into the same\n * context, implying that there will be only a single, global\n * <code>EventQueue</code> for all applets. This behavior is\n * implementation-dependent.  Consult your browser's documentation\n * for more information.\n * <p>\n * For information on the threading issues of the event dispatch\n * machinery, see <a href=\"doc-files/AWTThreadIssues.html#Autoshutdown\"\n * >AWT Threading Issues</a>.\n *\n * @author Thomas Ball\n * @author Fred Ecks\n * @author David Mendenhall\n *\n * @since       1.1\n ","description":"","name":"EventQueue","qualified_name":"java.awt.EventQueue","type":2},{"comment":"\n * TypeVariable is the common superinterface for type variables of kinds.\n * A type variable is created the first time it is needed by a reflective\n * method, as specified in this package.  If a type variable t is referenced\n * by a type (i.e, class, interface or annotation type) T, and T is declared\n * by the nth enclosing class of T (see JLS 8.1.2), then the creation of t\n * requires the resolution (see JVMS 5) of the ith enclosing class of T,\n * for i = 0 to n, inclusive. Creating a type variable must not cause the\n * creation of its bounds. Repeated creation of a type variable has no effect.\n *\n * <p>Multiple objects may be instantiated at run-time to\n * represent a given type variable. Even though a type variable is\n * created only once, this does not imply any requirement to cache\n * instances representing the type variable. However, all instances\n * representing a type variable must be equal() to each other.\n * As a consequence, users of type variables must not rely on the identity\n * of instances of classes implementing this interface.\n *\n * @param <D> the type of generic declaration that declared the\n * underlying type variable.\n *\n * @since 1.5\n ","description":"","name":"TypeVariable","qualified_name":"java.lang.reflect.TypeVariable","type":3},{"comment":"","description":"","name":"PipedWriter","qualified_name":"java.io.PipedWriter","type":2},{"comment":"\n * An interface for events that know how to dispatch themselves.\n * By implementing this interface an event can be placed upon the event\n * queue and its <code>dispatch()</code> method will be called when the event\n * is dispatched, using the <code>EventDispatchThread</code>.\n * <p>\n * This is a very useful mechanism for avoiding deadlocks. If\n * a thread is executing in a critical section (i.e., it has entered\n * one or more monitors), calling other synchronized code may\n * cause deadlocks. To avoid the potential deadlocks, an\n * <code>ActiveEvent</code> can be created to run the second section of\n * code at later time. If there is contention on the monitor,\n * the second thread will simply block until the first thread\n * has finished its work and exited its monitors.\n * <p>\n * For security reasons, it is often desirable to use an <code>ActiveEvent</code>\n * to avoid calling untrusted code from a critical thread. For\n * instance, peer implementations can use this facility to avoid\n * making calls into user code from a system thread. Doing so avoids\n * potential deadlocks and denial-of-service attacks.\n *\n * @author  Timothy Prinzing\n * @since   1.2\n ","description":"","name":"ActiveEvent","qualified_name":"java.awt.ActiveEvent","type":3},{"comment":"\n * A FlavorMap which relaxes the traditional 1-to-1 restriction of a Map. A\n * flavor is permitted to map to any number of natives, and likewise a native\n * is permitted to map to any number of flavors. FlavorTables need not be\n * symmetric, but typically are.\n *\n * @author David Mendenhall\n *\n * @since 1.4\n ","description":"","name":"FlavorTable","qualified_name":"java.awt.datatransfer.FlavorTable","type":3},{"comment":"\n     * The <code>Float</code> class defines an ellipse specified\n     * in <code>float</code> precision.\n     * @since 1.2\n     ","description":"","name":"Float","qualified_name":"java.awt.geom.Ellipse2D.Float","type":2},{"comment":"\n * Thrown when the Java Virtual Machine attempts to read a class\n * file and determines that the major and minor version numbers\n * in the file are not supported.\n *\n * @since   1.2\n ","description":"","name":"UnsupportedClassVersionError","qualified_name":"java.lang.UnsupportedClassVersionError","type":2},{"comment":"\n * Thrown when the annotation parser attempts to read an annotation\n * from a class file and determines that the annotation is malformed.\n * This error can be thrown by the {@linkplain\n * java.lang.reflect.AnnotatedElement API used to read annotations\n * reflectively}.\n *\n * @author  Josh Bloch\n * @see     java.lang.reflect.AnnotatedElement\n * @since   1.5\n ","description":"","name":"AnnotationFormatError","qualified_name":"java.lang.annotation.AnnotationFormatError","type":2},{"comment":"","description":"","name":"ArrayPersistenceDelegate","qualified_name":"java.beans.MetaData.ArrayPersistenceDelegate","type":2},{"comment":"","description":"","name":"UnmodifiableCollection_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_util_Collections.UnmodifiableCollection_PersistenceDelegate","type":2},{"comment":"\n * {@code Package} objects contain version information\n * about the implementation and specification of a Java package.\n * This versioning information is retrieved and made available\n * by the {@link ClassLoader} instance that\n * loaded the class(es).  Typically, it is stored in the manifest that is\n * distributed with the classes.\n *\n * <p>The set of classes that make up the package may implement a\n * particular specification and if so the specification title, version number,\n * and vendor strings identify that specification.\n * An application can ask if the package is\n * compatible with a particular version, see the {@link\n * #isCompatibleWith isCompatibleWith}\n * method for details.\n *\n * <p>Specification version numbers use a syntax that consists of nonnegative\n * decimal integers separated by periods \".\", for example \"2.0\" or\n * \"1.2.3.4.5.6.7\".  This allows an extensible number to be used to represent\n * major, minor, micro, etc. versions.  The version specification is described\n * by the following formal grammar:\n * <blockquote>\n * <dl>\n * <dt><i>SpecificationVersion:</i>\n * <dd><i>Digits RefinedVersion<sub>opt</sub></i>\n\n * <dt><i>RefinedVersion:</i>\n * <dd>{@code .} <i>Digits</i>\n * <dd>{@code .} <i>Digits RefinedVersion</i>\n *\n * <dt><i>Digits:</i>\n * <dd><i>Digit</i>\n * <dd><i>Digits</i>\n *\n * <dt><i>Digit:</i>\n * <dd>any character for which {@link Character#isDigit} returns {@code true},\n * e.g. 0, 1, 2, ...\n * </dl>\n * </blockquote>\n *\n * <p>The implementation title, version, and vendor strings identify an\n * implementation and are made available conveniently to enable accurate\n * reporting of the packages involved when a problem occurs. The contents\n * all three implementation strings are vendor specific. The\n * implementation version strings have no specified syntax and should\n * only be compared for equality with desired version identifiers.\n *\n * <p>Within each {@code ClassLoader} instance all classes from the same\n * java package have the same Package object.  The static methods allow a package\n * to be found by name or the set of all packages known to the current class\n * loader to be found.\n *\n * @see ClassLoader#definePackage\n ","description":"","name":"Package","qualified_name":"java.lang.Package","type":2},{"comment":"\n     * Holder class to defer initializing sentinel objects only used\n     * for serialization.\n     ","description":"","name":"SentinelHolder","qualified_name":"java.lang.Throwable.SentinelHolder","type":2},{"comment":"\n * <p>\n * This event type is used by the\n * <code>BeanContextServiceRevokedListener</code> in order to\n * identify the service being revoked.\n * </p>\n ","description":"","name":"BeanContextServiceRevokedEvent","qualified_name":"java.beans.beancontext.BeanContextServiceRevokedEvent","type":2},{"comment":"\n * This class represents a check box that can be included in a menu.\n * Selecting the check box in the menu changes its state from\n * \"on\" to \"off\" or from \"off\" to \"on.\"\n * <p>\n * The following picture depicts a menu which contains an instance\n * of <code>CheckBoxMenuItem</code>:\n * <p>\n * <img src=\"doc-files/MenuBar-1.gif\"\n * alt=\"Menu labeled Examples, containing items Basic, Simple, Check, and More Examples. The Check item is a CheckBoxMenuItem instance, in the off state.\"\n * style=\"float:center; margin: 7px 10px;\">\n * <p>\n * The item labeled <code>Check</code> shows a check box menu item\n * in its \"off\" state.\n * <p>\n * When a check box menu item is selected, AWT sends an item event to\n * the item. Since the event is an instance of <code>ItemEvent</code>,\n * the <code>processEvent</code> method examines the event and passes\n * it along to <code>processItemEvent</code>. The latter method redirects\n * the event to any <code>ItemListener</code> objects that have\n * registered an interest in item events generated by this menu item.\n *\n * @author      Sami Shaio\n * @see         java.awt.event.ItemEvent\n * @see         java.awt.event.ItemListener\n * @since       JDK1.0\n ","description":"","name":"CheckboxMenuItem","qualified_name":"java.awt.CheckboxMenuItem","type":2},{"comment":"\n * An object to which <tt>char</tt> sequences and values can be appended.  The\n * <tt>Appendable</tt> interface must be implemented by any class whose\n * instances are intended to receive formatted output from a {@link\n * java.util.Formatter}.\n *\n * <p> The characters to be appended should be valid Unicode characters as\n * described in <a href=\"Character.html#unicode\">Unicode Character\n * Representation</a>.  Note that supplementary characters may be composed of\n * multiple 16-bit <tt>char</tt> values.\n *\n * <p> Appendables are not necessarily safe for multithreaded access.  Thread\n * safety is the responsibility of classes that extend and implement this\n * interface.\n *\n * <p> Since this interface may be implemented by existing classes\n * with different styles of error handling there is no guarantee that\n * errors will be propagated to the invoker.\n *\n * @since 1.5\n ","description":"","name":"Appendable","qualified_name":"java.lang.Appendable","type":3},{"comment":"\n * A data output stream lets an application write primitive Java data\n * types to an output stream in a portable way. An application can\n * then use a data input stream to read the data back in.\n *\n * @author  unascribed\n * @see     java.io.DataInputStream\n * @since   JDK1.0\n ","description":"","name":"DataOutputStream","qualified_name":"java.io.DataOutputStream","type":2},{"comment":"\n  * An interface for objects that wish to be informed when tiles\n  * of a WritableRenderedImage become modifiable by some writer via\n  * a call to getWritableTile, and when they become unmodifiable via\n  * the last call to releaseWritableTile.\n  *\n  * @see WritableRenderedImage\n  *\n  * @author Thomas DeWeese\n  * @author Daniel Rice\n  ","description":"","name":"TileObserver","qualified_name":"java.awt.image.TileObserver","type":3},{"comment":"","description":"","name":"BeanContextMembershipListener","qualified_name":"java.beans.beancontext.BeanContextMembershipListener","type":3},{"comment":"\n * An abstract adapter class for receiving window events.\n * The methods in this class are empty. This class exists as\n * convenience for creating listener objects.\n * <P>\n * Extend this class to create a <code>WindowEvent</code> listener\n * and override the methods for the events of interest. (If you implement the\n * <code>WindowListener</code> interface, you have to define all of\n * the methods in it. This abstract class defines null methods for them\n * all, so you can only have to define methods for events you care about.)\n * <P>\n * Create a listener object using the extended class and then register it with\n * a Window using the window's <code>addWindowListener</code>\n * method. When the window's status changes by virtue of being opened,\n * closed, activated or deactivated, iconified or deiconified,\n * the relevant method in the listener\n * object is invoked, and the <code>WindowEvent</code> is passed to it.\n *\n * @see WindowEvent\n * @see WindowListener\n * @see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/windowlistener.html\">Tutorial: Writing a Window Listener</a>\n *\n * @author Carl Quinn\n * @author Amy Fowler\n * @author David Mendenhall\n * @since 1.1\n ","description":"","name":"WindowAdapter","qualified_name":"java.awt.event.WindowAdapter","type":2},{"comment":"\n * A <code>FilterInputStream</code> contains\n * some other input stream, which it uses as\n * its  basic source of data, possibly transforming\n * the data along the way or providing  additional\n * functionality. The class <code>FilterInputStream</code>\n * itself simply overrides all  methods of\n * <code>InputStream</code> with versions that\n * pass all requests to the contained  input\n * stream. Subclasses of <code>FilterInputStream</code>\n * may further override some of  these methods\n * and may also provide additional methods\n * and fields.\n *\n * @author  Jonathan Payne\n * @since   JDK1.0\n ","description":"","name":"FilterInputStream","qualified_name":"java.io.FilterInputStream","type":2},{"comment":"\n     *  Weak key for Class objects.\n     *\n     *","description":"","name":"WeakClassKey","qualified_name":"java.io.ObjectStreamClass.WeakClassKey","type":2},{"comment":"","description":"","name":"BCSSServiceProvider","qualified_name":"java.beans.beancontext.BeanContextServicesSupport.BCSSServiceProvider","type":2},{"comment":"\n * The listener interface for receiving window state events.\n * <p>\n * The class that is interested in processing a window state event\n * either implements this interface (and all the methods it contains)\n * or extends the abstract <code>WindowAdapter</code> class\n * (overriding only the methods of interest).\n * <p>\n * The listener object created from that class is then registered with\n * a window using the <code>Window</code>'s\n * <code>addWindowStateListener</code> method.  When the window's\n * state changes by virtue of being iconified, maximized etc., the\n * <code>windowStateChanged</code> method in the listener object is\n * invoked, and the <code>WindowEvent</code> is passed to it.\n *\n * @see java.awt.event.WindowAdapter\n * @see java.awt.event.WindowEvent\n *\n * @since 1.4\n ","description":"","name":"WindowStateListener","qualified_name":"java.awt.event.WindowStateListener","type":3},{"comment":"\n     * This class generates a method body which calls the lambda implementation\n     * method, converting arguments, as needed.\n     ","description":"","name":"ForwardingMethodGenerator","qualified_name":"java.lang.invoke.InnerClassLambdaMetafactory.ForwardingMethodGenerator","type":2},{"comment":"","description":"","name":"ProcessEnvironment","qualified_name":"java.lang.ProcessEnvironment","type":2},{"comment":"\n * The <code>QuadCurve2D</code> class defines a quadratic parametric curve\n * segment in {@code (x,y)} coordinate space.\n * <p>\n * This class is only the abstract superclass for all objects that\n * store a 2D quadratic curve segment.\n * The actual storage representation of the coordinates is left to\n * the subclass.\n *\n * @author      Jim Graham\n * @since 1.2\n ","description":"","name":"QuadCurve2D","qualified_name":"java.awt.geom.QuadCurve2D","type":2},{"comment":"","description":"","name":"MultiPixelPackedSampleModel","qualified_name":"java.awt.image.MultiPixelPackedSampleModel","type":2},{"comment":"\n     * This is a proxy capabilities class used when a FlipBufferStrategy\n     * is created instead of the requested Blit strategy.\n     *\n     * @see sun.java2d.SunGraphicsEnvironment#isFlipStrategyPreferred(ComponentPeer)\n     ","description":"","name":"ProxyCapabilities","qualified_name":"java.awt.Component.ProxyCapabilities","type":2},{"comment":"\n * An ObjectInputStream deserializes primitive data and objects previously\n * written using an ObjectOutputStream.\n *\n * <p>ObjectOutputStream and ObjectInputStream can provide an application with\n * persistent storage for graphs of objects when used with a FileOutputStream\n * and FileInputStream respectively.  ObjectInputStream is used to recover\n * those objects previously serialized. Other uses include passing objects\n * between hosts using a socket stream or for marshaling and unmarshaling\n * arguments and parameters in a remote communication system.\n *\n * <p>ObjectInputStream ensures that the types of all objects in the graph\n * created from the stream match the classes present in the Java Virtual\n * Machine.  Classes are loaded as required using the standard mechanisms.\n *\n * <p>Only objects that support the java.io.Serializable or\n * java.io.Externalizable interface can be read from streams.\n *\n * <p>The method <code>readObject</code> is used to read an object from the\n * stream.  Java's safe casting should be used to get the desired type.  In\n * Java, strings and arrays are objects and are treated as objects during\n * serialization. When read they need to be cast to the expected type.\n *\n * <p>Primitive data types can be read from the stream using the appropriate\n * method on DataInput.\n *\n * <p>The default deserialization mechanism for objects restores the contents\n * of each field to the value and type it had when it was written.  Fields\n * declared as transient or static are ignored by the deserialization process.\n * References to other objects cause those objects to be read from the stream\n * as necessary.  Graphs of objects are restored correctly using a reference\n * sharing mechanism.  New objects are always allocated when deserializing,\n * which prevents existing objects from being overwritten.\n *\n * <p>Reading an object is analogous to running the constructors of a new\n * object.  Memory is allocated for the object and initialized to zero (NULL).\n * No-arg constructors are invoked for the non-serializable classes and then\n * the fields of the serializable classes are restored from the stream starting\n * with the serializable class closest to java.lang.object and finishing with\n * the object's most specific class.\n *\n * <p>For example to read from a stream as written by the example in\n * ObjectOutputStream:\n * <br>\n * <pre>\n *      FileInputStream fis = new FileInputStream(\"t.tmp\");\n *      ObjectInputStream ois = new ObjectInputStream(fis);\n *\n *      int i = ois.readInt();\n *      String today = (String) ois.readObject();\n *      Date date = (Date) ois.readObject();\n *\n *      ois.close();\n * </pre>\n *\n * <p>Classes control how they are serialized by implementing either the\n * java.io.Serializable or java.io.Externalizable interfaces.\n *\n * <p>Implementing the Serializable interface allows object serialization to\n * save and restore the entire state of the object and it allows classes to\n * evolve between the time the stream is written and the time it is read.  It\n * automatically traverses references between objects, saving and restoring\n * entire graphs.\n *\n * <p>Serializable classes that require special handling during the\n * serialization and deserialization process should implement the following\n * methods:\n *\n * <pre>\n * private void writeObject(java.io.ObjectOutputStream stream)\n *     throws IOException;\n * private void readObject(java.io.ObjectInputStream stream)\n *     throws IOException, ClassNotFoundException;\n * private void readObjectNoData()\n *     throws ObjectStreamException;\n * </pre>\n *\n * <p>The readObject method is responsible for reading and restoring the state\n * of the object for its particular class using data written to the stream by\n * the corresponding writeObject method.  The method does not need to concern\n * itself with the state belonging to its superclasses or subclasses.  State is\n * restored by reading data from the ObjectInputStream for the individual\n * fields and making assignments to the appropriate fields of the object.\n * Reading primitive data types is supported by DataInput.\n *\n * <p>Any attempt to read object data which exceeds the boundaries of the\n * custom data written by the corresponding writeObject method will cause an\n * OptionalDataException to be thrown with an eof field value of true.\n * Non-object reads which exceed the end of the allotted data will reflect the\n * end of data in the same way that they would indicate the end of the stream:\n * bytewise reads will return -1 as the byte read or number of bytes read, and\n * primitive reads will throw EOFExceptions.  If there is no corresponding\n * writeObject method, then the end of default serialized data marks the end of\n * the allotted data.\n *\n * <p>Primitive and object read calls issued from within a readExternal method\n * behave in the same manner--if the stream is already positioned at the end of\n * data written by the corresponding writeExternal method, object reads will\n * throw OptionalDataExceptions with eof set to true, bytewise reads will\n * return -1, and primitive reads will throw EOFExceptions.  Note that this\n * behavior does not hold for streams written with the old\n * <code>ObjectStreamConstants.PROTOCOL_VERSION_1</code> protocol, in which the\n * end of data written by writeExternal methods is not demarcated, and hence\n * cannot be detected.\n *\n * <p>The readObjectNoData method is responsible for initializing the state of\n * the object for its particular class in the event that the serialization\n * stream does not list the given class as a superclass of the object being\n * deserialized.  This may occur in cases where the receiving party uses a\n * different version of the deserialized instance's class than the sending\n * party, and the receiver's version extends classes that are not extended by\n * the sender's version.  This may also occur if the serialization stream has\n * been tampered; hence, readObjectNoData is useful for initializing\n * deserialized objects properly despite a \"hostile\" or incomplete source\n * stream.\n *\n * <p>Serialization does not read or assign values to the fields of any object\n * that does not implement the java.io.Serializable interface.  Subclasses of\n * Objects that are not serializable can be serializable. In this case the\n * non-serializable class must have a no-arg constructor to allow its fields to\n * be initialized.  In this case it is the responsibility of the subclass to\n * save and restore the state of the non-serializable class. It is frequently\n * the case that the fields of that class are accessible (public, package, or\n * protected) or that there are get and set methods that can be used to restore\n * the state.\n *\n * <p>Any exception that occurs while deserializing an object will be caught by\n * the ObjectInputStream and abort the reading process.\n *\n * <p>Implementing the Externalizable interface allows the object to assume\n * complete control over the contents and format of the object's serialized\n * form.  The methods of the Externalizable interface, writeExternal and\n * readExternal, are called to save and restore the objects state.  When\n * implemented by a class they can write and read their own state using all of\n * the methods of ObjectOutput and ObjectInput.  It is the responsibility of\n * the objects to handle any versioning that occurs.\n *\n * <p>Enum constants are deserialized differently than ordinary serializable or\n * externalizable objects.  The serialized form of an enum constant consists\n * solely of its name; field values of the constant are not transmitted.  To\n * deserialize an enum constant, ObjectInputStream reads the constant name from\n * the stream; the deserialized constant is then obtained by calling the static\n * method <code>Enum.valueOf(Class, String)</code> with the enum constant's\n * base type and the received constant name as arguments.  Like other\n * serializable or externalizable objects, enum constants can function as the\n * targets of back references appearing subsequently in the serialization\n * stream.  The process by which enum constants are deserialized cannot be\n * customized: any class-specific readObject, readObjectNoData, and readResolve\n * methods defined by enum types are ignored during deserialization.\n * Similarly, any serialPersistentFields or serialVersionUID field declarations\n * are also ignored--all enum types have a fixed serialVersionUID of 0L.\n *\n * @author      Mike Warres\n * @author      Roger Riggs\n * @see java.io.DataInput\n * @see java.io.ObjectOutputStream\n * @see java.io.Serializable\n * @see <a href=\"../../../platform/serialization/spec/input.html\"> Object Serialization Specification, Section 3, Object Input Classes</a>\n * @since   JDK1.1\n ","description":"","name":"ObjectInputStream","qualified_name":"java.io.ObjectInputStream","type":2},{"comment":"\n * An abstract adapter class for receiving mouse events.\n * The methods in this class are empty. This class exists as\n * convenience for creating listener objects.\n * <P>\n * Mouse events let you track when a mouse is pressed, released, clicked,\n * moved, dragged, when it enters a component, when it exits and\n * when a mouse wheel is moved.\n * <P>\n * Extend this class to create a {@code MouseEvent}\n * (including drag and motion events) or/and {@code MouseWheelEvent}\n * listener and override the methods for the events of interest. (If you implement the\n * {@code MouseListener},\n * {@code MouseMotionListener}\n * interface, you have to define all of\n * the methods in it. This abstract class defines null methods for them\n * all, so you can only have to define methods for events you care about.)\n * <P>\n * Create a listener object using the extended class and then register it with\n * a component using the component's {@code addMouseListener}\n * {@code addMouseMotionListener}, {@code addMouseWheelListener}\n * methods.\n * The relevant method in the listener object is invoked  and the {@code MouseEvent}\n * or {@code MouseWheelEvent}  is passed to it in following cases:\n * <ul>\n * <li>when a mouse button is pressed, released, or clicked (pressed and  released)\n * <li>when the mouse cursor enters or exits the component\n * <li>when the mouse wheel rotated, or mouse moved or dragged\n * </ul>\n *\n * @author Carl Quinn\n * @author Andrei Dmitriev\n *\n * @see MouseEvent\n * @see MouseWheelEvent\n * @see MouseListener\n * @see MouseMotionListener\n * @see MouseWheelListener\n * @see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/mouselistener.html\">Tutorial: Writing a Mouse Listener</a>\n *\n * @since 1.1\n ","description":"","name":"MouseAdapter","qualified_name":"java.awt.event.MouseAdapter","type":2},{"comment":"\n  * The ComponentOrientation class encapsulates the language-sensitive\n  * orientation that is to be used to order the elements of a component\n  * or of text. It is used to reflect the differences in this ordering\n  * between Western alphabets, Middle Eastern (such as Hebrew), and Far\n  * Eastern (such as Japanese).\n  * <p>\n  * Fundamentally, this governs items (such as characters) which are laid out\n  * in lines, with the lines then laid out in a block. This also applies\n  * to items in a widget: for example, in a check box where the box is\n  * positioned relative to the text.\n  * <p>\n  * There are four different orientations used in modern languages\n  * as in the following table.<br>\n  * <pre>\n  * LT          RT          TL          TR\n  * A B C       C B A       A D G       G D A\n  * D E F       F E D       B E H       H E B\n  * G H I       I H G       C F I       I F C\n  * </pre><br>\n  * (In the header, the two-letter abbreviation represents the item direction\n  * in the first letter, and the line direction in the second. For example,\n  * LT means \"items left-to-right, lines top-to-bottom\",\n  * TL means \"items top-to-bottom, lines left-to-right\", and so on.)\n  * <p>\n  * The orientations are:\n  * <ul>\n  * <li>LT - Western Europe (optional for Japanese, Chinese, Korean)\n  * <li>RT - Middle East (Arabic, Hebrew)\n  * <li>TR - Japanese, Chinese, Korean\n  * <li>TL - Mongolian\n  * </ul>\n  * Components whose view and controller code depends on orientation\n  * should use the <code>isLeftToRight()</code> and\n  * <code>isHorizontal()</code> methods to\n  * determine their behavior. They should not include switch-like\n  * code that keys off of the constants, such as:\n  * <pre>\n  * if (orientation == LEFT_TO_RIGHT) {\n  *   ...\n  * } else if (orientation == RIGHT_TO_LEFT) {\n  *   ...\n  * } else {\n  *   // Oops\n  * }\n  * </pre>\n  * This is unsafe, since more constants may be added in the future and\n  * since it is not guaranteed that orientation objects will be unique.\n  ","description":"","name":"ComponentOrientation","qualified_name":"java.awt.ComponentOrientation","type":2},{"comment":"","description":"","name":"DisplayMode","qualified_name":"java.awt.DisplayMode","type":2},{"comment":"","description":"","name":"StrictMath","qualified_name":"java.lang.StrictMath","type":2},{"comment":"\n * The persistence delegate for <CODE>java.util.EnumMap</CODE> classes.\n *\n * @author Sergey A. Malenkov\n ","description":"","name":"java_util_EnumMap_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_util_EnumMap_PersistenceDelegate","type":2},{"comment":"","description":"","name":"DragGestureListener","qualified_name":"java.awt.dnd.DragGestureListener","type":3},{"comment":"\n     * A family of character subsets representing the character blocks in the\n     * Unicode specification. Character blocks generally define characters\n     * used for a specific script or purpose. A character is contained by\n     * at most one Unicode block.\n     *\n     * @since 1.2\n     ","description":"","name":"UnicodeBlock","qualified_name":"java.lang.Character.UnicodeBlock","type":2},{"comment":"","description":"","name":"ReflectAccess","qualified_name":"java.lang.reflect.ReflectAccess","type":2},{"comment":" The locking strategy for this code is to try to lock only one level of the\n * tree wherever possible, but otherwise to lock from the bottom up.\n * That is, from child thread groups to parents.\n * This has the advantage of limiting the number of locks that need to be held\n * and in particular avoids having to grab the lock for the root thread group,\n * (or a global lock) which would be a source of contention on a\n * multi-processor system with many thread groups.\n * This policy often leads to taking a snapshot of the state of a thread group\n * and working off of that snapshot, rather than holding the thread group locked\n * while we work on the children.\n ","description":"","name":"ThreadGroup","qualified_name":"java.lang.ThreadGroup","type":2},{"comment":"\n * Defines an interface for classes that know how to layout Containers\n * based on a layout constraints object.\n *\n * This interface extends the LayoutManager interface to deal with layouts\n * explicitly in terms of constraint objects that specify how and where\n * components should be added to the layout.\n * <p>\n * This minimal extension to LayoutManager is intended for tool\n * providers who wish to the creation of constraint-based layouts.\n * It does not yet provide full, general support for custom\n * constraint-based layout managers.\n *\n * @see LayoutManager\n * @see Container\n *\n * @author      Jonni Kanerva\n ","description":"","name":"LayoutManager2","qualified_name":"java.awt.LayoutManager2","type":3},{"comment":"\n * This <code>Line2D</code> represents a line segment in {@code (x,y)}\n * coordinate space.  This class, like all of the Java 2D API, uses a\n * default coordinate system called <i>user space</i> in which the y-axis\n * values increase downward and x-axis values increase to the right.  For\n * more information on the user space coordinate system, see the\n * <a href=\"https://docs.oracle.com/javase/1.3/docs/guide/2d/spec/j2d-intro.fm2.html#61857\">\n * Coordinate Systems</a> section of the Java 2D Programmer's Guide.\n * <p>\n * This class is only the abstract superclass for all objects that\n * store a 2D line segment.\n * The actual storage representation of the coordinates is left to\n * the subclass.\n *\n * @author      Jim Graham\n * @since 1.2\n ","description":"","name":"Line2D","qualified_name":"java.awt.geom.Line2D","type":2},{"comment":"non-public","description":"","name":"Factory","qualified_name":"java.lang.invoke.MemberName.Factory","type":2},{"comment":"","description":"","name":"LongCache","qualified_name":"java.lang.Long.LongCache","type":2},{"comment":" There is an opportunity to check them against the JVM's idea of them.","description":"","name":"Constants","qualified_name":"java.lang.invoke.MethodHandleNatives.Constants","type":2},{"comment":"\n * The <code>Font</code> class represents fonts, which are used to\n * render text in a visible way.\n * A font provides the information needed to map sequences of\n * <em>characters</em> to sequences of <em>glyphs</em>\n * and to render sequences of glyphs on <code>Graphics</code> and\n * <code>Component</code> objects.\n *\n * <h3>Characters and Glyphs</h3>\n *\n * A <em>character</em> is a symbol that represents an item such as a letter,\n * a digit, or punctuation in an abstract way. For example, <code>'g'</code>,\n * LATIN SMALL LETTER G, is a character.\n * <p>\n * A <em>glyph</em> is a shape used to render a character or a sequence of\n * characters. In simple writing systems, such as Latin, typically one glyph\n * represents one character. In general, however, characters and glyphs do not\n * have one-to-one correspondence. For example, the character '&aacute;'\n * LATIN SMALL LETTER A WITH ACUTE, can be represented by\n * two glyphs: one for 'a' and one for '&acute;'. On the other hand, the\n * two-character string \"fi\" can be represented by a single glyph, an\n * \"fi\" ligature. In complex writing systems, such as Arabic or the South\n * and South-East Asian writing systems, the relationship between characters\n * and glyphs can be more complicated and involve context-dependent selection\n * of glyphs as well as glyph reordering.\n *\n * A font encapsulates the collection of glyphs needed to render a selected set\n * of characters as well as the tables needed to map sequences of characters to\n * corresponding sequences of glyphs.\n *\n * <h3>Physical and Logical Fonts</h3>\n *\n * The Java Platform distinguishes between two kinds of fonts:\n * <em>physical</em> fonts and <em>logical</em> fonts.\n * <p>\n * <em>Physical</em> fonts are the actual font libraries containing glyph data\n * and tables to map from character sequences to glyph sequences, using a font\n * technology such as TrueType or PostScript Type 1.\n * All implementations of the Java Platform must support TrueType fonts;\n * support for other font technologies is implementation dependent.\n * Physical fonts may use names such as Helvetica, Palatino, HonMincho, or\n * any number of other font names.\n * Typically, each physical font supports only a limited set of writing\n * systems, for example, only Latin characters or only Japanese and Basic\n * Latin.\n * The set of available physical fonts varies between configurations.\n * Applications that require specific fonts can bundle them and instantiate\n * them using the {@link #createFont createFont} method.\n * <p>\n * <em>Logical</em> fonts are the five font families defined by the Java\n * platform which must be supported by any Java runtime environment:\n * Serif, SansSerif, Monospaced, Dialog, and DialogInput.\n * These logical fonts are not actual font libraries. Instead, the logical\n * font names are mapped to physical fonts by the Java runtime environment.\n * The mapping is implementation and usually locale dependent, so the look\n * and the metrics provided by them vary.\n * Typically, each logical font name maps to several physical fonts in order to\n * cover a large range of characters.\n * <p>\n * Peered AWT components, such as {@link Label Label} and\n * {@link TextField TextField}, can only use logical fonts.\n * <p>\n * For a discussion of the relative advantages and disadvantages of using\n * physical or logical fonts, see the\n * <a href=\"http://www.oracle.com/technetwork/java/javase/tech/faq-jsp-138165.html\">Internationalization FAQ</a>\n * document.\n *\n * <h3>Font Faces and Names</h3>\n *\n * A <code>Font</code>\n * can have many faces, such as heavy, medium, oblique, gothic and\n * regular. All of these faces have similar typographic design.\n * <p>\n * There are three different names that you can get from a\n * <code>Font</code> object.  The <em>logical font name</em> is simply the\n * name that was used to construct the font.\n * The <em>font face name</em>, or just <em>font name</em> for\n * short, is the name of a particular font face, like Helvetica Bold. The\n * <em>family name</em> is the name of the font family that determines the\n * typographic design across several faces, like Helvetica.\n * <p>\n * The <code>Font</code> class represents an instance of a font face from\n * a collection of  font faces that are present in the system resources\n * of the host system.  As examples, Arial Bold and Courier Bold Italic\n * are font faces.  There can be several <code>Font</code> objects\n * associated with a font face, each differing in size, style, transform\n * and font features.\n * <p>\n * The {@link GraphicsEnvironment#getAllFonts() getAllFonts} method\n * of the <code>GraphicsEnvironment</code> class returns an\n * array of all font faces available in the system. These font faces are\n * returned as <code>Font</code> objects with a size of 1, identity\n * transform and default font features. These\n * base fonts can then be used to derive new <code>Font</code> objects\n * with varying sizes, styles, transforms and font features via the\n * <code>deriveFont</code> methods in this class.\n *\n * <h3>Font and TextAttribute</h3>\n *\n * <p><code>Font</code> supports most\n * <code>TextAttribute</code>s.  This makes some operations, such as\n * rendering underlined text, convenient since it is not\n * necessary to explicitly construct a <code>TextLayout</code> object.\n * Attributes can be set on a Font by constructing or deriving it\n * using a <code>Map</code> of <code>TextAttribute</code> values.\n *\n * <p>The values of some <code>TextAttributes</code> are not\n * serializable, and therefore attempting to serialize an instance of\n * <code>Font</code> that has such values will not serialize them.\n * This means a Font deserialized from such a stream will not compare\n * equal to the original Font that contained the non-serializable\n * attributes.  This should very rarely pose a problem\n * since these attributes are typically used only in special\n * circumstances and are unlikely to be serialized.\n *\n * <ul>\n * <li><code>FOREGROUND</code> and <code>BACKGROUND</code> use\n * <code>Paint</code> values. The subclass <code>Color</code> is\n * serializable, while <code>GradientPaint</code> and\n * <code>TexturePaint</code> are not.</li>\n * <li><code>CHAR_REPLACEMENT</code> uses\n * <code>GraphicAttribute</code> values.  The subclasses\n * <code>ShapeGraphicAttribute</code> and\n * <code>ImageGraphicAttribute</code> are not serializable.</li>\n * <li><code>INPUT_METHOD_HIGHLIGHT</code> uses\n * <code>InputMethodHighlight</code> values, which are\n * not serializable.  See {@link java.awt.im.InputMethodHighlight}.</li>\n * </ul>\n *\n * <p>Clients who create custom subclasses of <code>Paint</code> and\n * <code>GraphicAttribute</code> can make them serializable and\n * avoid this problem.  Clients who use input method highlights can\n * convert these to the platform-specific attributes for that\n * highlight on the current platform and set them on the Font as\n * a workaround.\n *\n * <p>The <code>Map</code>-based constructor and\n * <code>deriveFont</code> APIs ignore the FONT attribute, and it is\n * not retained by the Font; the static {@link #getFont} method should\n * be used if the FONT attribute might be present.  See {@link\n * java.awt.font.TextAttribute#FONT} for more information.</p>\n *\n * <p>Several attributes will cause additional rendering overhead\n * and potentially invoke layout.  If a <code>Font</code> has such\n * attributes, the <code>{@link #hasLayoutAttributes()}</code> method\n * will return true.</p>\n *\n * <p>Note: Font rotations can cause text baselines to be rotated.  In\n * order to account for this (rare) possibility, font APIs are\n * specified to return metrics and take parameters 'in\n * baseline-relative coordinates'.  This maps the 'x' coordinate to\n * the advance along the baseline, (positive x is forward along the\n * baseline), and the 'y' coordinate to a distance along the\n * perpendicular to the baseline at 'x' (positive y is 90 degrees\n * clockwise from the baseline vector).  APIs for which this is\n * especially important are called out as having 'baseline-relative\n * coordinates.'\n ","description":"","name":"Font","qualified_name":"java.awt.Font","type":2},{"comment":"\n * This abstract class defines a lookup table object.  ByteLookupTable\n * and ShortLookupTable are subclasses, which\n * contain byte and short data, respectively.  A lookup table\n * contains data arrays for one or more bands (or components) of an image\n * (for example, separate arrays for R, G, and B),\n * and it contains an offset which will be subtracted from the\n * input values before indexing into the arrays.  This allows an array\n * smaller than the native data size to be provided for a\n * constrained input.  If there is only one array in the lookup\n * table, it will be applied to all bands.  All arrays must be the\n * same size.\n *\n * @see ByteLookupTable\n * @see ShortLookupTable\n * @see LookupOp\n ","description":"","name":"LookupTable","qualified_name":"java.awt.image.LookupTable","type":2},{"comment":"","description":"","name":"DropTargetEvent","qualified_name":"java.awt.dnd.DropTargetEvent","type":2},{"comment":"","description":"","name":"Callback","qualified_name":"java.io.ObjectInputStream.ValidationList.Callback","type":2},{"comment":"\n * The listener interface for receiving\n * <code>BeanContextServiceAvailableEvent</code> objects.\n * A class that is interested in processing a\n * <code>BeanContextServiceAvailableEvent</code> implements this interface.\n ","description":"","name":"BeanContextServicesListener","qualified_name":"java.beans.beancontext.BeanContextServicesListener","type":3},{"comment":"","description":"","name":"BCSChild","qualified_name":"java.beans.beancontext.BeanContextSupport.BCSChild","type":2},{"comment":"\n * This class is an implementation of the ImageProducer interface which\n * uses an array to produce pixel values for an Image.  Here is an example\n * which calculates a 100x100 image representing a fade from black to blue\n * along the X axis and a fade from black to red along the Y axis:\n * <pre>{@code\n *\n *      int w = 100;\n *      int h = 100;\n *      int pix[] = new int[w * h];\n *      int index = 0;\n *      for (int y = 0; y < h; y++) {\n *          int red = (y * 255) / (h - 1);\n *          for (int x = 0; x < w; x++) {\n *              int blue = (x * 255) / (w - 1);\n *              pix[index++] = (255 << 24) | (red << 16) | blue;\n *          }\n *      }\n *      Image img = createImage(new MemoryImageSource(w, h, pix, 0, w));\n *\n * }</pre>\n * The MemoryImageSource is also capable of managing a memory image which\n * varies over time to allow animation or custom rendering.  Here is an\n * example showing how to set up the animation source and signal changes\n * in the data (adapted from the MemoryAnimationSourceDemo by Garth Dickie):\n * <pre>{@code\n *\n *      int pixels[];\n *      MemoryImageSource source;\n *\n *      public void init() {\n *          int width = 50;\n *          int height = 50;\n *          int size = width * height;\n *          pixels = new int[size];\n *\n *          int value = getBackground().getRGB();\n *          for (int i = 0; i < size; i++) {\n *              pixels[i] = value;\n *          }\n *\n *          source = new MemoryImageSource(width, height, pixels, 0, width);\n *          source.setAnimated(true);\n *          image = createImage(source);\n *      }\n *\n *      public void run() {\n *          Thread me = Thread.currentThread( );\n *          me.setPriority(Thread.MIN_PRIORITY);\n *\n *          while (true) {\n *              try {\n *                  Thread.sleep(10);\n *              } catch( InterruptedException e ) {\n *                  return;\n *              }\n *\n *              // Modify the values in the pixels array at (x, y, w, h)\n *\n *              // Send the new data to the interested ImageConsumers\n *              source.newPixels(x, y, w, h);\n *          }\n *      }\n *\n * }</pre>\n *\n * @see ImageProducer\n *\n * @author      Jim Graham\n * @author      Animation capabilities inspired by the\n *              MemoryAnimationSource class written by Garth Dickie\n ","description":"","name":"MemoryImageSource","qualified_name":"java.awt.image.MemoryImageSource","type":2},{"comment":"\n * An abstract adapter class for receiving component events.\n * The methods in this class are empty. This class exists as\n * convenience for creating listener objects.\n * <P>\n * Extend this class to create a <code>ComponentEvent</code> listener\n * and override the methods for the events of interest. (If you implement the\n * <code>ComponentListener</code> interface, you have to define all of\n * the methods in it. This abstract class defines null methods for them\n * all, so you can only have to define methods for events you care about.)\n * <P>\n * Create a listener object using your class and then register it with a\n * component using the component's <code>addComponentListener</code>\n * method. When the component's size, location, or visibility\n * changes, the relevant method in the listener object is invoked,\n * and the <code>ComponentEvent</code> is passed to it.\n *\n * @see ComponentEvent\n * @see ComponentListener\n * @see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/componentlistener.html\">Tutorial: Writing a Component Listener</a>\n *\n * @author Carl Quinn\n * @since 1.1\n ","description":"","name":"ComponentAdapter","qualified_name":"java.awt.event.ComponentAdapter","type":2},{"comment":"","description":"","name":"FontAccessImpl","qualified_name":"java.awt.Font.FontAccessImpl","type":2},{"comment":"\n * An ObjectOutputStream writes primitive data types and graphs of Java objects\n * to an OutputStream.  The objects can be read (reconstituted) using an\n * ObjectInputStream.  Persistent storage of objects can be accomplished by\n * using a file for the stream.  If the stream is a network socket stream, the\n * objects can be reconstituted on another host or in another process.\n *\n * <p>Only objects that support the java.io.Serializable interface can be\n * written to streams.  The class of each serializable object is encoded\n * including the class name and signature of the class, the values of the\n * object's fields and arrays, and the closure of any other objects referenced\n * from the initial objects.\n *\n * <p>The method writeObject is used to write an object to the stream.  Any\n * object, including Strings and arrays, is written with writeObject. Multiple\n * objects or primitives can be written to the stream.  The objects must be\n * read back from the corresponding ObjectInputstream with the same types and\n * in the same order as they were written.\n *\n * <p>Primitive data types can also be written to the stream using the\n * appropriate methods from DataOutput. Strings can also be written using the\n * writeUTF method.\n *\n * <p>The default serialization mechanism for an object writes the class of the\n * object, the class signature, and the values of all non-transient and\n * non-static fields.  References to other objects (except in transient or\n * static fields) cause those objects to be written also. Multiple references\n * to a single object are encoded using a reference sharing mechanism so that\n * graphs of objects can be restored to the same shape as when the original was\n * written.\n *\n * <p>For example to write an object that can be read by the example in\n * ObjectInputStream:\n * <br>\n * <pre>\n *      FileOutputStream fos = new FileOutputStream(\"t.tmp\");\n *      ObjectOutputStream oos = new ObjectOutputStream(fos);\n *\n *      oos.writeInt(12345);\n *      oos.writeObject(\"Today\");\n *      oos.writeObject(new Date());\n *\n *      oos.close();\n * </pre>\n *\n * <p>Classes that require special handling during the serialization and\n * deserialization process must implement special methods with these exact\n * signatures:\n * <br>\n * <pre>\n * private void readObject(java.io.ObjectInputStream stream)\n *     throws IOException, ClassNotFoundException;\n * private void writeObject(java.io.ObjectOutputStream stream)\n *     throws IOException\n * private void readObjectNoData()\n *     throws ObjectStreamException;\n * </pre>\n *\n * <p>The writeObject method is responsible for writing the state of the object\n * for its particular class so that the corresponding readObject method can\n * restore it.  The method does not need to concern itself with the state\n * belonging to the object's superclasses or subclasses.  State is saved by\n * writing the individual fields to the ObjectOutputStream using the\n * writeObject method or by using the methods for primitive data types\n * supported by DataOutput.\n *\n * <p>Serialization does not write out the fields of any object that does not\n * implement the java.io.Serializable interface.  Subclasses of Objects that\n * are not serializable can be serializable. In this case the non-serializable\n * class must have a no-arg constructor to allow its fields to be initialized.\n * In this case it is the responsibility of the subclass to save and restore\n * the state of the non-serializable class. It is frequently the case that the\n * fields of that class are accessible (public, package, or protected) or that\n * there are get and set methods that can be used to restore the state.\n *\n * <p>Serialization of an object can be prevented by implementing writeObject\n * and readObject methods that throw the NotSerializableException.  The\n * exception will be caught by the ObjectOutputStream and abort the\n * serialization process.\n *\n * <p>Implementing the Externalizable interface allows the object to assume\n * complete control over the contents and format of the object's serialized\n * form.  The methods of the Externalizable interface, writeExternal and\n * readExternal, are called to save and restore the objects state.  When\n * implemented by a class they can write and read their own state using all of\n * the methods of ObjectOutput and ObjectInput.  It is the responsibility of\n * the objects to handle any versioning that occurs.\n *\n * <p>Enum constants are serialized differently than ordinary serializable or\n * externalizable objects.  The serialized form of an enum constant consists\n * solely of its name; field values of the constant are not transmitted.  To\n * serialize an enum constant, ObjectOutputStream writes the string returned by\n * the constant's name method.  Like other serializable or externalizable\n * objects, enum constants can function as the targets of back references\n * appearing subsequently in the serialization stream.  The process by which\n * enum constants are serialized cannot be customized; any class-specific\n * writeObject and writeReplace methods defined by enum types are ignored\n * during serialization.  Similarly, any serialPersistentFields or\n * serialVersionUID field declarations are also ignored--all enum types have a\n * fixed serialVersionUID of 0L.\n *\n * <p>Primitive data, excluding serializable fields and externalizable data, is\n * written to the ObjectOutputStream in block-data records. A block data record\n * is composed of a header and data. The block data header consists of a marker\n * and the number of bytes to follow the header.  Consecutive primitive data\n * writes are merged into one block-data record.  The blocking factor used for\n * a block-data record will be 1024 bytes.  Each block-data record will be\n * filled up to 1024 bytes, or be written whenever there is a termination of\n * block-data mode.  Calls to the ObjectOutputStream methods writeObject,\n * defaultWriteObject and writeFields initially terminate any existing\n * block-data record.\n *\n * @author      Mike Warres\n * @author      Roger Riggs\n * @see java.io.DataOutput\n * @see java.io.ObjectInputStream\n * @see java.io.Serializable\n * @see java.io.Externalizable\n * @see <a href=\"../../../platform/serialization/spec/output.html\">Object Serialization Specification, Section 2, Object Output Classes</a>\n * @since       JDK1.1\n ","description":"","name":"ObjectOutputStream","qualified_name":"java.io.ObjectOutputStream","type":2},{"comment":"\n * A utility class which generates unique names for object instances.\n * The name will be a concatenation of the unqualified class name\n * and an instance number.\n * <p>\n * For example, if the first object instance javax.swing.JButton\n * is passed into <code>instanceName</code> then the returned\n * string identifier will be &quot;JButton0&quot;.\n *\n * @author Philip Milne\n ","description":"","name":"NameGenerator","qualified_name":"java.beans.NameGenerator","type":2},{"comment":"\n * The listener interface for receiving window events.\n * The class that is interested in processing a window event\n * either implements this interface (and all the methods it\n * contains) or extends the abstract <code>WindowAdapter</code> class\n * (overriding only the methods of interest).\n * The listener object created from that class is then registered with a\n * Window using the window's <code>addWindowListener</code>\n * method. When the window's status changes by virtue of being opened,\n * closed, activated or deactivated, iconified or deiconified,\n * the relevant method in the listener object is invoked, and the\n * <code>WindowEvent</code> is passed to it.\n *\n * @author Carl Quinn\n *\n * @see WindowAdapter\n * @see WindowEvent\n * @see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/windowlistener.html\">Tutorial: How to Write Window Listeners</a>\n *\n * @since 1.1\n ","description":"","name":"WindowListener","qualified_name":"java.awt.event.WindowListener","type":3},{"comment":"\n * This is a utility class that can be used by beans that support constrained\n * properties.  It manages a list of listeners and dispatches\n * {@link PropertyChangeEvent}s to them.  You can use an instance of this class\n * as a member field of your bean and delegate these types of work to it.\n * The {@link VetoableChangeListener} can be registered for all properties\n * or for a property specified by name.\n * <p>\n * Here is an example of {@code VetoableChangeSupport} usage that follows\n * the rules and recommendations laid out in the JavaBeans&trade; specification:\n * <pre>{@code\n * public class MyBean {\n *     private final VetoableChangeSupport vcs = new VetoableChangeSupport(this);\n *\n *     public void addVetoableChangeListener(VetoableChangeListener listener) {\n *         this.vcs.addVetoableChangeListener(listener);\n *     }\n *\n *     public void removeVetoableChangeListener(VetoableChangeListener listener) {\n *         this.vcs.removeVetoableChangeListener(listener);\n *     }\n *\n *     private String value;\n *\n *     public String getValue() {\n *         return this.value;\n *     }\n *\n *     public void setValue(String newValue) throws PropertyVetoException {\n *         String oldValue = this.value;\n *         this.vcs.fireVetoableChange(\"value\", oldValue, newValue);\n *         this.value = newValue;\n *     }\n *\n *     [...]\n * }\n * }</pre>\n * <p>\n * A {@code VetoableChangeSupport} instance is thread-safe.\n * <p>\n * This class is serializable.  When it is serialized it will save\n * (and restore) any listeners that are themselves serializable.  Any\n * non-serializable listeners will be skipped during serialization.\n *\n * @see PropertyChangeSupport\n ","description":"","name":"VetoableChangeSupport","qualified_name":"java.beans.VetoableChangeSupport","type":2},{"comment":"","description":"","name":"CharacterCache","qualified_name":"java.lang.Character.CharacterCache","type":2},{"comment":"\n * A symbolic reference obtained by cracking a direct method handle\n * into its consitutent symbolic parts.\n * To crack a direct method handle, call {@link Lookup#revealDirect Lookup.revealDirect}.\n * <h1><a name=\"directmh\"></a>Direct Method Handles</h1>\n * A <em>direct method handle</em> represents a method, constructor, or field without\n * any intervening argument bindings or other transformations.\n * The method, constructor, or field referred to by a direct method handle is called\n * its <em>underlying member</em>.\n * Direct method handles may be obtained in any of these ways:\n * <ul>\n * <li>By executing an {@code ldc} instruction on a {@code CONSTANT_MethodHandle} constant.\n *     (See the Java Virtual Machine Specification, sections 4.4.8 and 5.4.3.)\n * <li>By calling one of the <a href=\"MethodHandles.Lookup.html#lookups\">Lookup Factory Methods</a>,\n *     such as {@link Lookup#findVirtual Lookup.findVirtual},\n *     to resolve a symbolic reference into a method handle.\n *     A symbolic reference consists of a class, name string, and type.\n * <li>By calling the factory method {@link Lookup#unreflect Lookup.unreflect}\n *     or {@link Lookup#unreflectSpecial Lookup.unreflectSpecial}\n *     to convert a {@link Method} into a method handle.\n * <li>By calling the factory method {@link Lookup#unreflectConstructor Lookup.unreflectConstructor}\n *     to convert a {@link Constructor} into a method handle.\n * <li>By calling the factory method {@link Lookup#unreflectGetter Lookup.unreflectGetter}\n *     or {@link Lookup#unreflectSetter Lookup.unreflectSetter}\n *     to convert a {@link Field} into a method handle.\n * </ul>\n *\n * <h1>Restrictions on Cracking</h1>\n * Given a suitable {@code Lookup} object, it is possible to crack any direct method handle\n * to recover a symbolic reference for the underlying method, constructor, or field.\n * Cracking must be done via a {@code Lookup} object equivalent to that which created\n * the target method handle, or which has enough access permissions to recreate\n * an equivalent method handle.\n * <p>\n * If the underlying method is <a href=\"MethodHandles.Lookup.html#callsens\">caller sensitive</a>,\n * the direct method handle will have been \"bound\" to a particular caller class, the\n * {@linkplain java.lang.invoke.MethodHandles.Lookup#lookupClass() lookup class}\n * of the lookup object used to create it.\n * Cracking this method handle with a different lookup class will fail\n * even if the underlying method is public (like {@code Class.forName}).\n * <p>\n * The requirement of lookup object matching provides a \"fast fail\" behavior\n * for programs which may otherwise trust erroneous revelation of a method\n * handle with symbolic information (or caller binding) from an unexpected scope.\n * Use {@link java.lang.invoke.MethodHandles#reflectAs} to override this limitation.\n *\n * <h1><a name=\"refkinds\"></a>Reference kinds</h1>\n * The <a href=\"MethodHandles.Lookup.html#lookups\">Lookup Factory Methods</a>\n * correspond to all major use cases for methods, constructors, and fields.\n * These use cases may be distinguished using small integers as follows:\n * <table border=1 cellpadding=5 summary=\"reference kinds\">\n * <tr><th>reference kind</th><th>descriptive name</th><th>scope</th><th>member</th><th>behavior</th></tr>\n * <tr>\n *     <td>{@code 1}</td><td>{@code REF_getField}</td><td>{@code class}</td>\n *     <td>{@code FT f;}</td><td>{@code (T) this.f;}</td>\n * </tr>\n * <tr>\n *     <td>{@code 2}</td><td>{@code REF_getStatic}</td><td>{@code class} or {@code interface}</td>\n *     <td>{@code static}<br>{@code FT f;}</td><td>{@code (T) C.f;}</td>\n * </tr>\n * <tr>\n *     <td>{@code 3}</td><td>{@code REF_putField}</td><td>{@code class}</td>\n *     <td>{@code FT f;}</td><td>{@code this.f = x;}</td>\n * </tr>\n * <tr>\n *     <td>{@code 4}</td><td>{@code REF_putStatic}</td><td>{@code class}</td>\n *     <td>{@code static}<br>{@code FT f;}</td><td>{@code C.f = arg;}</td>\n * </tr>\n * <tr>\n *     <td>{@code 5}</td><td>{@code REF_invokeVirtual}</td><td>{@code class}</td>\n *     <td>{@code T m(A*);}</td><td>{@code (T) this.m(arg*);}</td>\n * </tr>\n * <tr>\n *     <td>{@code 6}</td><td>{@code REF_invokeStatic}</td><td>{@code class} or {@code interface}</td>\n *     <td>{@code static}<br>{@code T m(A*);}</td><td>{@code (T) C.m(arg*);}</td>\n * </tr>\n * <tr>\n *     <td>{@code 7}</td><td>{@code REF_invokeSpecial}</td><td>{@code class} or {@code interface}</td>\n *     <td>{@code T m(A*);}</td><td>{@code (T) super.m(arg*);}</td>\n * </tr>\n * <tr>\n *     <td>{@code 8}</td><td>{@code REF_newInvokeSpecial}</td><td>{@code class}</td>\n *     <td>{@code C(A*);}</td><td>{@code new C(arg*);}</td>\n * </tr>\n * <tr>\n *     <td>{@code 9}</td><td>{@code REF_invokeInterface}</td><td>{@code interface}</td>\n *     <td>{@code T m(A*);}</td><td>{@code (T) this.m(arg*);}</td>\n * </tr>\n * </table>\n * @since 1.8\n ","description":"","name":"MethodHandleInfo","qualified_name":"java.lang.invoke.MethodHandleInfo","type":3},{"comment":" This subclass represents invokeinterface instructions. ","description":"","name":"Interface","qualified_name":"java.lang.invoke.DirectMethodHandle.Interface","type":2},{"comment":"\n * Thrown when an exceptional arithmetic condition has occurred. For\n * example, an integer \"divide by zero\" throws an\n * instance of this class.\n *\n * {@code ArithmeticException} objects may be constructed by the\n * virtual machine as if {@linkplain Throwable#Throwable(String,\n * Throwable, boolean, boolean) suppression were disabled and/or the\n * stack trace was not writable}.\n *\n * @author  unascribed\n * @since   JDK1.0\n ","description":"","name":"ArithmeticException","qualified_name":"java.lang.ArithmeticException","type":2},{"comment":"\n * {@code InvocationHandler} is the interface implemented by\n * the <i>invocation handler</i> of a proxy instance.\n *\n * <p>Each proxy instance has an associated invocation handler.\n * When a method is invoked on a proxy instance, the method\n * invocation is encoded and dispatched to the {@code invoke}\n * method of its invocation handler.\n *\n * @author      Peter Jones\n * @see         Proxy\n * @since       1.3\n ","description":"","name":"InvocationHandler","qualified_name":"java.lang.reflect.InvocationHandler","type":3},{"comment":"\n * A FocusTraversalPolicy that determines traversal order based on the order\n * of child Components in a Container. From a particular focus cycle root, the\n * policy makes a pre-order traversal of the Component hierarchy, and traverses\n * a Container's children according to the ordering of the array returned by\n * <code>Container.getComponents()</code>. Portions of the hierarchy that are\n * not visible and displayable will not be searched.\n * <p>\n * If client code has explicitly set the focusability of a Component by either\n * overriding <code>Component.isFocusTraversable()</code> or\n * <code>Component.isFocusable()</code>, or by calling\n * <code>Component.setFocusable()</code>, then a DefaultFocusTraversalPolicy\n * behaves exactly like a ContainerOrderFocusTraversalPolicy. If, however, the\n * Component is relying on default focusability, then a\n * DefaultFocusTraversalPolicy will reject all Components with non-focusable\n * peers. This is the default FocusTraversalPolicy for all AWT Containers.\n * <p>\n * The focusability of a peer is implementation-dependent. Sun recommends that\n * all implementations for a particular native platform construct peers with\n * the same focusability. The recommendations for Windows and Unix are that\n * Canvases, Labels, Panels, Scrollbars, ScrollPanes, Windows, and lightweight\n * Components have non-focusable peers, and all other Components have focusable\n * peers. These recommendations are used in the Sun AWT implementations. Note\n * that the focusability of a Component's peer is different from, and does not\n * impact, the focusability of the Component itself.\n * <p>\n * Please see\n * <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/misc/focus.html\">\n * How to Use the Focus Subsystem</a>,\n * a section in <em>The Java Tutorial</em>, and the\n * <a href=\"../../java/awt/doc-files/FocusSpec.html\">Focus Specification</a>\n * for more information.\n *\n * @author David Mendenhall\n *\n * @see Container#getComponents\n * @see Component#isFocusable\n * @see Component#setFocusable\n * @since 1.4\n ","description":"","name":"DefaultFocusTraversalPolicy","qualified_name":"java.awt.DefaultFocusTraversalPolicy","type":2},{"comment":"\n * The KeyboardFocusManager is responsible for managing the active and focused\n * Windows, and the current focus owner. The focus owner is defined as the\n * Component in an application that will typically receive all KeyEvents\n * generated by the user. The focused Window is the Window that is, or\n * contains, the focus owner. Only a Frame or a Dialog can be the active\n * Window. The native windowing system may denote the active Window or its\n * children with special decorations, such as a highlighted title bar. The\n * active Window is always either the focused Window, or the first Frame or\n * Dialog that is an owner of the focused Window.\n * <p>\n * The KeyboardFocusManager is both a centralized location for client code to\n * query for the focus owner and initiate focus changes, and an event\n * dispatcher for all FocusEvents, WindowEvents related to focus, and\n * KeyEvents.\n * <p>\n * Some browsers partition applets in different code bases into separate\n * contexts, and establish walls between these contexts. In such a scenario,\n * there will be one KeyboardFocusManager per context. Other browsers place all\n * applets into the same context, implying that there will be only a single,\n * global KeyboardFocusManager for all applets. This behavior is\n * implementation-dependent. Consult your browser's documentation for more\n * information. No matter how many contexts there may be, however, there can\n * never be more than one focus owner, focused Window, or active Window, per\n * ClassLoader.\n * <p>\n * Please see\n * <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/misc/focus.html\">\n * How to Use the Focus Subsystem</a>,\n * a section in <em>The Java Tutorial</em>, and the\n * <a href=\"../../java/awt/doc-files/FocusSpec.html\">Focus Specification</a>\n * for more information.\n *\n * @author David Mendenhall\n *\n * @see Window\n * @see Frame\n * @see Dialog\n * @see java.awt.event.FocusEvent\n * @see java.awt.event.WindowEvent\n * @see java.awt.event.KeyEvent\n * @since 1.4\n ","description":"","name":"KeyboardFocusManager","qualified_name":"java.awt.KeyboardFocusManager","type":2},{"comment":"","description":"","name":"AttributeValue","qualified_name":"java.awt.AttributeValue","type":2},{"comment":"\n * The <code>GridLayout</code> class is a layout manager that\n * lays out a container's components in a rectangular grid.\n * The container is divided into equal-sized rectangles,\n * and one component is placed in each rectangle.\n * For example, the following is an applet that lays out six buttons\n * into three rows and two columns:\n *\n * <hr><blockquote>\n * <pre>\n * import java.awt.*;\n * import java.applet.Applet;\n * public class ButtonGrid extends Applet {\n *     public void init() {\n *         setLayout(new GridLayout(3,2));\n *         add(new Button(\"1\"));\n *         add(new Button(\"2\"));\n *         add(new Button(\"3\"));\n *         add(new Button(\"4\"));\n *         add(new Button(\"5\"));\n *         add(new Button(\"6\"));\n *     }\n * }\n * </pre></blockquote><hr>\n * <p>\n * If the container's <code>ComponentOrientation</code> property is horizontal\n * and left-to-right, the above example produces the output shown in Figure 1.\n * If the container's <code>ComponentOrientation</code> property is horizontal\n * and right-to-left, the example produces the output shown in Figure 2.\n *\n * <table style=\"float:center\" WIDTH=600 summary=\"layout\">\n * <tr ALIGN=CENTER>\n * <td><img SRC=\"doc-files/GridLayout-1.gif\"\n *      alt=\"Shows 6 buttons in rows of 2. Row 1 shows buttons 1 then 2.\n * Row 2 shows buttons 3 then 4. Row 3 shows buttons 5 then 6.\">\n * </td>\n *\n * <td ALIGN=CENTER><img SRC=\"doc-files/GridLayout-2.gif\"\n *                   alt=\"Shows 6 buttons in rows of 2. Row 1 shows buttons 2 then 1.\n * Row 2 shows buttons 4 then 3. Row 3 shows buttons 6 then 5.\">\n * </td>\n * </tr>\n *\n * <tr ALIGN=CENTER>\n * <td>Figure 1: Horizontal, Left-to-Right</td>\n *\n * <td>Figure 2: Horizontal, Right-to-Left</td>\n * </tr>\n * </table>\n * <p>\n * When both the number of rows and the number of columns have\n * been set to non-zero values, either by a constructor or\n * by the <tt>setRows</tt> and <tt>setColumns</tt> methods, the number of\n * columns specified is ignored.  Instead, the number of\n * columns is determined from the specified number of rows\n * and the total number of components in the layout. So, for\n * example, if three rows and two columns have been specified\n * and nine components are added to the layout, they will\n * be displayed as three rows of three columns.  Specifying\n * the number of columns affects the layout only when the\n * number of rows is set to zero.\n *\n * @author  Arthur van Hoff\n * @since   JDK1.0\n ","description":"","name":"GridLayout","qualified_name":"java.awt.GridLayout","type":2},{"comment":"","description":"","name":"BCSSProxyServiceProvider","qualified_name":"java.beans.beancontext.BeanContextServicesSupport.BCSSProxyServiceProvider","type":2},{"comment":"\n * The <code>Point2D</code> class defines a point representing a location\n * in {@code (x,y)} coordinate space.\n * <p>\n * This class is only the abstract superclass for all objects that\n * store a 2D coordinate.\n * The actual storage representation of the coordinates is left to\n * the subclass.\n *\n * @author      Jim Graham\n * @since 1.2\n ","description":"","name":"Point2D","qualified_name":"java.awt.geom.Point2D","type":2},{"comment":"","description":"","name":"Runtime","qualified_name":"java.lang.Runtime","type":2},{"comment":"","description":"","name":"SystemClassLoaderAction","qualified_name":"java.lang.SystemClassLoaderAction","type":2},{"comment":"\n * A FocusTraversalPolicy defines the order in which Components with a\n * particular focus cycle root are traversed. Instances can apply the policy to\n * arbitrary focus cycle roots, allowing themselves to be shared across\n * Containers. They do not need to be reinitialized when the focus cycle roots\n * of a Component hierarchy change.\n * <p>\n * The core responsibility of a FocusTraversalPolicy is to provide algorithms\n * determining the next and previous Components to focus when traversing\n * forward or backward in a UI. Each FocusTraversalPolicy must also provide\n * algorithms for determining the first, last, and default Components in a\n * traversal cycle. First and last Components are used when normal forward and\n * backward traversal, respectively, wraps. The default Component is the first\n * to receive focus when traversing down into a new focus traversal cycle.\n * A FocusTraversalPolicy can optionally provide an algorithm for determining\n * a Window's initial Component. The initial Component is the first to receive\n * focus when a Window is first made visible.\n * <p>\n * FocusTraversalPolicy takes into account <a\n * href=\"doc-files/FocusSpec.html#FocusTraversalPolicyProviders\">focus traversal\n * policy providers</a>.  When searching for first/last/next/previous Component,\n * if a focus traversal policy provider is encountered, its focus traversal\n * policy is used to perform the search operation.\n * <p>\n * Please see\n * <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/misc/focus.html\">\n * How to Use the Focus Subsystem</a>,\n * a section in <em>The Java Tutorial</em>, and the\n * <a href=\"../../java/awt/doc-files/FocusSpec.html\">Focus Specification</a>\n * for more information.\n *\n * @author David Mendenhall\n *\n * @see Container#setFocusTraversalPolicy\n * @see Container#getFocusTraversalPolicy\n * @see Container#setFocusCycleRoot\n * @see Container#isFocusCycleRoot\n * @see Container#setFocusTraversalPolicyProvider\n * @see Container#isFocusTraversalPolicyProvider\n * @see KeyboardFocusManager#setDefaultFocusTraversalPolicy\n * @see KeyboardFocusManager#getDefaultFocusTraversalPolicy\n * @since 1.4\n ","description":"","name":"FocusTraversalPolicy","qualified_name":"java.awt.FocusTraversalPolicy","type":2},{"comment":"\n     * The <code>Double</code> class defines an ellipse specified\n     * in <code>double</code> precision.\n     * @since 1.2\n     ","description":"","name":"Double","qualified_name":"java.awt.geom.Ellipse2D.Double","type":2},{"comment":"","description":"","name":"StringWriter","qualified_name":"java.io.StringWriter","type":2},{"comment":"\n * Cache mapping pairs of {@code (key, sub-key) -> value}. Keys and values are\n * weakly but sub-keys are strongly referenced.  Keys are passed directly to\n * {@link #get} method which also takes a {@code parameter}. Sub-keys are\n * calculated from keys and parameters using the {@code subKeyFactory} function\n * passed to the constructor. Values are calculated from keys and parameters\n * using the {@code valueFactory} function passed to the constructor.\n * Keys can be {@code null} and are compared by identity while sub-keys returned by\n * {@code subKeyFactory} or values returned by {@code valueFactory}\n * can not be null. Sub-keys are compared using their {@link #equals} method.\n * Entries are expunged from cache lazily on each invocation to {@link #get},\n * {@link #containsValue} or {@link #size} methods when the WeakReferences to\n * keys are cleared. Cleared WeakReferences to individual values don't cause\n * expunging, but such entries are logically treated as non-existent and\n * trigger re-evaluation of {@code valueFactory} on request for their\n * key/subKey.\n *\n * @author Peter Levart\n * @param <K> type of keys\n * @param <P> type of parameters\n * @param <V> type of values\n ","description":"","name":"WeakCache","qualified_name":"java.lang.reflect.WeakCache","type":2},{"comment":" CardLayout","description":"","name":"java_awt_CardLayout_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_awt_CardLayout_PersistenceDelegate","type":2},{"comment":"\n * The <code>GraphicsDevice</code> class describes the graphics devices\n * that might be available in a particular graphics environment.  These\n * include screen and printer devices. Note that there can be many screens\n * and many printers in an instance of {@link GraphicsEnvironment}. Each\n * graphics device has one or more {@link GraphicsConfiguration} objects\n * associated with it.  These objects specify the different configurations\n * in which the <code>GraphicsDevice</code> can be used.\n * <p>\n * In a multi-screen environment, the <code>GraphicsConfiguration</code>\n * objects can be used to render components on multiple screens.  The\n * following code sample demonstrates how to create a <code>JFrame</code>\n * object for each <code>GraphicsConfiguration</code> on each screen\n * device in the <code>GraphicsEnvironment</code>:\n * <pre>{@code\n *   GraphicsEnvironment ge = GraphicsEnvironment.\n *   getLocalGraphicsEnvironment();\n *   GraphicsDevice[] gs = ge.getScreenDevices();\n *   for (int j = 0; j < gs.length; j++) {\n *      GraphicsDevice gd = gs[j];\n *      GraphicsConfiguration[] gc =\n *      gd.getConfigurations();\n *      for (int i=0; i < gc.length; i++) {\n *         JFrame f = new\n *         JFrame(gs[j].getDefaultConfiguration());\n *         Canvas c = new Canvas(gc[i]);\n *         Rectangle gcBounds = gc[i].getBounds();\n *         int xoffs = gcBounds.x;\n *         int yoffs = gcBounds.y;\n *         f.getContentPane().add(c);\n *         f.setLocation((i*50)+xoffs, (i*60)+yoffs);\n *         f.show();\n *      }\n *   }\n * }</pre>\n * <p>\n * For more information on full-screen exclusive mode API, see the\n * <a href=\"https://docs.oracle.com/javase/tutorial/extra/fullscreen/index.html\">\n * Full-Screen Exclusive Mode API Tutorial</a>.\n *\n * @see GraphicsEnvironment\n * @see GraphicsConfiguration\n ","description":"","name":"GraphicsDevice","qualified_name":"java.awt.GraphicsDevice","type":2},{"comment":"","description":"","name":"DataBufferDouble","qualified_name":"java.awt.image.DataBufferDouble","type":2},{"comment":"\n     * A function that maps an array of interfaces to an optimal key where\n     * Class objects representing interfaces are weakly referenced.\n     ","description":"","name":"KeyFactory","qualified_name":"java.lang.reflect.Proxy.KeyFactory","type":2},{"comment":"\n * This class represents the state of a horizontal or vertical\n * scrollbar of a <code>ScrollPane</code>.  Objects of this class are\n * returned by <code>ScrollPane</code> methods.\n *\n * @since       1.4\n ","description":"","name":"ScrollPaneAdjustable","qualified_name":"java.awt.ScrollPaneAdjustable","type":2},{"comment":"","description":"","name":"CharacterData","qualified_name":"java.lang.CharacterData","type":2},{"comment":"\n * This class is no longer used, but is maintained for Serialization\n * backward-compatibility.\n ","description":"","name":"FocusManager","qualified_name":"java.awt.FocusManager","type":2},{"comment":"\n     * Lightweight identity hash table which maps objects to integer handles,\n     * assigned in ascending order.\n     ","description":"","name":"HandleTable","qualified_name":"java.io.ObjectOutputStream.HandleTable","type":2},{"comment":"\n * The listener interface for receiving <code>WindowEvents</code>, including\n * <code>WINDOW_GAINED_FOCUS</code> and <code>WINDOW_LOST_FOCUS</code> events.\n * The class that is interested in processing a <code>WindowEvent</code>\n * either implements this interface (and\n * all the methods it contains) or extends the abstract\n * <code>WindowAdapter</code> class (overriding only the methods of interest).\n * The listener object created from that class is then registered with a\n * <code>Window</code>\n * using the <code>Window</code>'s <code>addWindowFocusListener</code> method.\n * When the <code>Window</code>'s\n * status changes by virtue of it being opened, closed, activated, deactivated,\n * iconified, or deiconified, or by focus being transfered into or out of the\n * <code>Window</code>, the relevant method in the listener object is invoked,\n * and the <code>WindowEvent</code> is passed to it.\n *\n * @author David Mendenhall\n *\n * @see WindowAdapter\n * @see WindowEvent\n * @see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/windowlistener.html\">Tutorial: Writing a Window Listener</a>\n *\n * @since 1.4\n ","description":"","name":"WindowFocusListener","qualified_name":"java.awt.event.WindowFocusListener","type":3},{"comment":"\n * The management interface for the class loading system of\n * the Java virtual machine.\n *\n * <p> A Java virtual machine has a single instance of the implementation\n * class of this interface.  This instance implementing this interface is\n * an <a href=\"ManagementFactory.html#MXBean\">MXBean</a>\n * that can be obtained by calling\n * the {@link ManagementFactory#getClassLoadingMXBean} method or\n * from the {@link ManagementFactory#getPlatformMBeanServer\n * platform <tt>MBeanServer</tt>}.\n *\n * <p>The <tt>ObjectName</tt> for uniquely identifying the MXBean for\n * the class loading system within an <tt>MBeanServer</tt> is:\n * <blockquote>\n * {@link ManagementFactory#CLASS_LOADING_MXBEAN_NAME\n *        <tt>java.lang:type=ClassLoading</tt>}\n * </blockquote>\n *\n * It can be obtained by calling the\n * {@link PlatformManagedObject#getObjectName} method.\n *\n * @see ManagementFactory#getPlatformMXBeans(Class)\n * @see <a href=\"../../../javax/management/package-summary.html\">\n *      JMX Specification.</a>\n * @see <a href=\"package-summary.html#examples\">\n *      Ways to Access MXBeans</a>\n *\n * @author  Mandy Chung\n * @since   1.5\n ","description":"","name":"ClassLoadingMXBean","qualified_name":"java.lang.management.ClassLoadingMXBean","type":3},{"comment":"\n         * Fire PropertyChange listener, if one is registered,\n         * when focus events happen\n         * @since 1.3\n         ","description":"","name":"AccessibleAWTFocusHandler","qualified_name":"java.awt.Component.AccessibleAWTComponent.AccessibleAWTFocusHandler","type":2},{"comment":"","description":"","name":"Any","qualified_name":"java.awt.TexturePaintContext.Any","type":2},{"comment":"\n     * Class representing the portion of an object's serialized form allotted\n     * to data described by a given class descriptor.  If \"hasData\" is false,\n     * the object's serialized form does not contain data associated with the\n     * class descriptor.\n     ","description":"","name":"ClassDataSlot","qualified_name":"java.io.ObjectStreamClass.ClassDataSlot","type":2},{"comment":"","description":"","name":"RandomNumberGeneratorHolder","qualified_name":"java.lang.Math.RandomNumberGeneratorHolder","type":2},{"comment":"","description":"","name":"ColorSpace","qualified_name":"java.awt.color.ColorSpace","type":2},{"comment":"\n         * Fire PropertyChange listener, if one is registered,\n         * when shown/hidden..\n         * @since 1.3\n         ","description":"","name":"AccessibleAWTComponentHandler","qualified_name":"java.awt.Component.AccessibleAWTComponent.AccessibleAWTComponentHandler","type":2},{"comment":"\n * The peer interface for {@link Container}. This is the parent interface\n * for all container like widgets.\n *\n * The peer interfaces are intended only for use in porting\n * the AWT. They are not intended for use by application\n * developers, and developers should not implement peers\n * nor invoke any of the peer methods directly on the peer\n * instances.\n ","description":"","name":"ContainerPeer","qualified_name":"java.awt.peer.ContainerPeer","type":3},{"comment":"","description":"","name":"Lock","qualified_name":"java.lang.ref.ReferenceQueue.Lock","type":2},{"comment":"\n * Tests if an object can truly be serialized by serializing it to a null\n * OutputStream.\n *\n * @since 1.4\n ","description":"","name":"SerializationTester","qualified_name":"java.awt.dnd.SerializationTester","type":2},{"comment":"\n * A piped input stream should be connected\n * to a piped output stream; the piped  input\n * stream then provides whatever data bytes\n * are written to the piped output  stream.\n * Typically, data is read from a <code>PipedInputStream</code>\n * object by one thread  and data is written\n * to the corresponding <code>PipedOutputStream</code>\n * by some  other thread. Attempting to use\n * both objects from a single thread is not\n * recommended, as it may deadlock the thread.\n * The piped input stream contains a buffer,\n * decoupling read operations from write operations,\n * within limits.\n * A pipe is said to be <a name=\"BROKEN\"> <i>broken</i> </a> if a\n * thread that was providing data bytes to the connected\n * piped output stream is no longer alive.\n *\n * @author  James Gosling\n * @see     java.io.PipedOutputStream\n * @since   JDK1.0\n ","description":"","name":"PipedInputStream","qualified_name":"java.io.PipedInputStream","type":2},{"comment":"\n * The listener interface for receiving container events.\n * The class that is interested in processing a container event\n * either implements this interface (and all the methods it\n * contains) or extends the abstract <code>ContainerAdapter</code> class\n * (overriding only the methods of interest).\n * The listener object created from that class is then registered with a\n * component using the component's <code>addContainerListener</code>\n * method. When the container's contents change because a component\n * has been added or removed, the relevant method in the listener object\n * is invoked, and the <code>ContainerEvent</code> is passed to it.\n * <P>\n * Container events are provided for notification purposes ONLY;\n * The AWT will automatically handle add and remove operations\n * internally so the program works properly regardless of\n * whether the program registers a {@code ContainerListener} or not.\n *\n * @see ContainerAdapter\n * @see ContainerEvent\n * @see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/containerlistener.html\">Tutorial: Writing a Container Listener</a>\n *\n * @author Tim Prinzing\n * @author Amy Fowler\n * @since 1.1\n ","description":"","name":"ContainerListener","qualified_name":"java.awt.event.ContainerListener","type":3},{"comment":"","description":"","name":"PaintCallback","qualified_name":"java.awt.GraphicsCallback.PaintCallback","type":2},{"comment":"\n     * Private class to perform sub-region flipping.\n     ","description":"","name":"FlipSubRegionBufferStrategy","qualified_name":"java.awt.Component.FlipSubRegionBufferStrategy","type":2},{"comment":"\n     * The {@code Double} class defines a geometric path with\n     * coordinates stored in double precision floating point.\n     *\n     * @since 1.6\n     ","description":"","name":"Double","qualified_name":"java.awt.geom.Path2D.Double","type":2},{"comment":"","description":"","name":"BCSSCServiceRef","qualified_name":"java.beans.beancontext.BeanContextServicesSupport.BCSSChild.BCSSCServiceRef","type":2},{"comment":"\n * The persistence delegate for {@link Insets}.\n * It is impossible to use {@link DefaultPersistenceDelegate}\n * because this class does not have any properties.\n *\n * @author Sergey A. Malenkov\n ","description":"","name":"java_awt_Insets_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_awt_Insets_PersistenceDelegate","type":2},{"comment":"","description":"","name":"AreaIterator","qualified_name":"java.awt.geom.AreaIterator","type":2},{"comment":"\n     * Pre-initialized NamedFunctions for bootstrapping purposes.\n     * Factored in an inner class to delay initialization until first usage.\n     ","description":"","name":"Lazy","qualified_name":"java.lang.invoke.MethodHandleImpl.Lazy","type":2},{"comment":"\n * A helper interface to run the nested event loop.\n * <p>\n * Objects that implement this interface are created with the\n * {@link EventQueue#createSecondaryLoop} method. The interface\n * provides two methods, {@link #enter} and {@link #exit},\n * which can be used to start and stop the event loop.\n * <p>\n * When the {@link #enter} method is called, the current\n * thread is blocked until the loop is terminated by the\n * {@link #exit} method. Also, a new event loop is started\n * on the event dispatch thread, which may or may not be\n * the current thread. The loop can be terminated on any\n * thread by calling its {@link #exit} method. After the\n * loop is terminated, the {@code SecondaryLoop} object can\n * be reused to run a new nested event loop.\n * <p>\n * A typical use case of applying this interface is AWT\n * and Swing modal dialogs. When a modal dialog is shown on\n * the event dispatch thread, it enters a new secondary loop.\n * Later, when the dialog is hidden or disposed, it exits\n * the loop, and the thread continues its execution.\n * <p>\n * The following example illustrates a simple use case of\n * secondary loops:\n *\n * <pre>\n *   SecondaryLoop loop;\n *\n *   JButton jButton = new JButton(\"Button\");\n *   jButton.addActionListener(new ActionListener() {\n *       {@code @Override}\n *       public void actionPerformed(ActionEvent e) {\n *           Toolkit tk = Toolkit.getDefaultToolkit();\n *           EventQueue eq = tk.getSystemEventQueue();\n *           loop = eq.createSecondaryLoop();\n *\n *           // Spawn a new thread to do the work\n *           Thread worker = new WorkerThread();\n *           worker.start();\n *\n *           // Enter the loop to block the current event\n *           // handler, but leave UI responsive\n *           if (!loop.enter()) {\n *               // Report an error\n *           }\n *       }\n *   });\n *\n *   class WorkerThread extends Thread {\n *       {@code @Override}\n *       public void run() {\n *           // Perform calculations\n *           doSomethingUseful();\n *\n *           // Exit the loop\n *           loop.exit();\n *       }\n *   }\n * </pre>\n *\n * @see Dialog#show\n * @see EventQueue#createSecondaryLoop\n * @see Toolkit#getSystemEventQueue\n *\n * @author Anton Tarasov, Artem Ananiev\n *\n * @since 1.7\n ","description":"","name":"SecondaryLoop","qualified_name":"java.awt.SecondaryLoop","type":3},{"comment":"\n * <p>\n * The BeanContextServices interface provides a mechanism for a BeanContext\n * to expose generic \"services\" to the BeanContextChild objects within.\n * </p>\n ","description":"","name":"BeanContextServices","qualified_name":"java.beans.beancontext.BeanContextServices","type":3},{"comment":"\n * {@code AnnotatedArrayType} represents the potentially annotated use of an\n * array type, whose component type may itself represent the annotated use of a\n * type.\n *\n * @since 1.8\n ","description":"","name":"AnnotatedArrayType","qualified_name":"java.lang.reflect.AnnotatedArrayType","type":3},{"comment":"","description":"","name":"HierarchyEventFilter","qualified_name":"java.awt.EventDispatchThread.HierarchyEventFilter","type":2},{"comment":"\n * An ImageFilter class for cropping images.\n * This class extends the basic ImageFilter Class to extract a given\n * rectangular region of an existing Image and provide a source for a\n * new image containing just the extracted region.  It is meant to\n * be used in conjunction with a FilteredImageSource object to produce\n * cropped versions of existing images.\n *\n * @see FilteredImageSource\n * @see ImageFilter\n *\n * @author      Jim Graham\n ","description":"","name":"CropImageFilter","qualified_name":"java.awt.image.CropImageFilter","type":2},{"comment":"\n * The persistence delegate for <CODE>java.util.Date</CODE> classes.\n * Do not extend DefaultPersistenceDelegate to improve performance and\n * to avoid problems with <CODE>java.sql.Date</CODE>,\n * <CODE>java.sql.Time</CODE> and <CODE>java.sql.Timestamp</CODE>.\n *\n * @author Sergey A. Malenkov\n ","description":"","name":"java_util_Date_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_util_Date_PersistenceDelegate","type":2},{"comment":"\n * A class that describes the pointer position.\n * It provides the {@code GraphicsDevice} where the pointer is and\n * the {@code Point} that represents the coordinates of the pointer.\n * <p>\n * Instances of this class should be obtained via\n * {@link MouseInfo#getPointerInfo}.\n * The {@code PointerInfo} instance is not updated dynamically as the mouse\n * moves. To get the updated location, you must call\n * {@link MouseInfo#getPointerInfo} again.\n *\n * @see MouseInfo#getPointerInfo\n * @author Roman Poborchiy\n * @since 1.5\n ","description":"","name":"PointerInfo","qualified_name":"java.awt.PointerInfo","type":2},{"comment":"","description":"","name":"TypeAheadMarker","qualified_name":"java.awt.DefaultKeyboardFocusManager.TypeAheadMarker","type":2},{"comment":"\n * This class handles the renderable aspects of an operation with help\n * from its associated instance of a ContextualRenderedImageFactory.\n ","description":"","name":"RenderableImageOp","qualified_name":"java.awt.image.renderable.RenderableImageOp","type":2},{"comment":"","description":"","name":"ToolkitModalEventFilter","qualified_name":"java.awt.ModalEventFilter.ToolkitModalEventFilter","type":2},{"comment":"\n * This is the common base class of all Java language enumeration types.\n *\n * More information about enums, including descriptions of the\n * implicitly declared methods synthesized by the compiler, can be\n * found in section 8.9 of\n * <cite>The Java&trade; Language Specification</cite>.\n *\n * <p> Note that when using an enumeration type as the type of a set\n * or as the type of the keys in a map, specialized and efficient\n * {@linkplain java.util.EnumSet set} and {@linkplain\n * java.util.EnumMap map} implementations are available.\n *\n * @param <E> The enum type subclass\n * @author  Josh Bloch\n * @author  Neal Gafter\n * @see     Class#getEnumConstants()\n * @see     java.util.EnumSet\n * @see     java.util.EnumMap\n * @since   1.5\n ","description":"","name":"Enum","qualified_name":"java.lang.Enum","type":2},{"comment":"","description":"","name":"MouseEventTargetFilter","qualified_name":"java.awt.Container.MouseEventTargetFilter","type":2},{"comment":"\n     * An internal class that represents an entry in the Special Casing Properties.\n     ","description":"","name":"Entry","qualified_name":"java.lang.ConditionalSpecialCasing.Entry","type":2},{"comment":"\n * Thrown when a syntactically malformed signature attribute is\n * encountered by a reflective method that needs to interpret the\n * generic signature information for a type, method or constructor.\n *\n * @since 1.5\n ","description":"","name":"GenericSignatureFormatError","qualified_name":"java.lang.reflect.GenericSignatureFormatError","type":2},{"comment":"\n * Capabilities and properties of buffers.\n *\n * @see java.awt.image.BufferStrategy#getCapabilities()\n * @see GraphicsConfiguration#getBufferCapabilities\n * @author Michael Martak\n * @since 1.4\n ","description":"","name":"BufferCapabilities","qualified_name":"java.awt.BufferCapabilities","type":2},{"comment":"\n * This class extends Raster to provide pixel writing capabilities.\n * Refer to the class comment for Raster for descriptions of how\n * a Raster stores pixels.\n *\n * <p> The constructors of this class are protected.  To instantiate\n * a WritableRaster, use one of the createWritableRaster factory methods\n * in the Raster class.\n ","description":"","name":"WritableRaster","qualified_name":"java.awt.image.WritableRaster","type":2},{"comment":"\n * A <code>Rectangle</code> specifies an area in a coordinate space that is\n * enclosed by the <code>Rectangle</code> object's upper-left point\n * {@code (x,y)}\n * in the coordinate space, its width, and its height.\n * <p>\n * A <code>Rectangle</code> object's <code>width</code> and\n * <code>height</code> are <code>public</code> fields. The constructors\n * that create a <code>Rectangle</code>, and the methods that can modify\n * one, do not prevent setting a negative value for width or height.\n * <p>\n * <a name=\"Empty\">\n * A {@code Rectangle} whose width or height is exactly zero has location\n * along those axes with zero dimension, but is otherwise considered empty.\n * The {@link #isEmpty} method will return true for such a {@code Rectangle}.\n * Methods which test if an empty {@code Rectangle} contains or intersects\n * a point or rectangle will always return false if either dimension is zero.\n * Methods which combine such a {@code Rectangle} with a point or rectangle\n * will include the location of the {@code Rectangle} on that axis in the\n * result as if the {@link #add(Point)} method were being called.\n * </a>\n * <p>\n * <a name=\"NonExistant\">\n * A {@code Rectangle} whose width or height is negative has neither\n * location nor dimension along those axes with negative dimensions.\n * Such a {@code Rectangle} is treated as non-existant along those axes.\n * Such a {@code Rectangle} is also empty with respect to containment\n * calculations and methods which test if it contains or intersects a\n * point or rectangle will always return false.\n * Methods which combine such a {@code Rectangle} with a point or rectangle\n * will ignore the {@code Rectangle} entirely in generating the result.\n * If two {@code Rectangle} objects are combined and each has a negative\n * dimension, the result will have at least one negative dimension.\n * </a>\n * <p>\n * Methods which affect only the location of a {@code Rectangle} will\n * operate on its location regardless of whether or not it has a negative\n * or zero dimension along either axis.\n * <p>\n * Note that a {@code Rectangle} constructed with the default no-argument\n * constructor will have dimensions of {@code 0x0} and therefore be empty.\n * That {@code Rectangle} will still have a location of {@code (0,0)} and\n * will contribute that location to the union and add operations.\n * Code attempting to accumulate the bounds of a set of points should\n * therefore initially construct the {@code Rectangle} with a specifically\n * negative width and height or it should use the first point in the set\n * to construct the {@code Rectangle}.\n * For example:\n * <pre>{@code\n *     Rectangle bounds = new Rectangle(0, 0, -1, -1);\n *     for (int i = 0; i < points.length; i++) {\n *         bounds.add(points[i]);\n *     }\n * }</pre>\n * or if we know that the points array contains at least one point:\n * <pre>{@code\n *     Rectangle bounds = new Rectangle(points[0]);\n *     for (int i = 1; i < points.length; i++) {\n *         bounds.add(points[i]);\n *     }\n * }</pre>\n * <p>\n * This class uses 32-bit integers to store its location and dimensions.\n * Frequently operations may produce a result that exceeds the range of\n * a 32-bit integer.\n * The methods will calculate their results in a way that avoids any\n * 32-bit overflow for intermediate results and then choose the best\n * representation to store the final results back into the 32-bit fields\n * which hold the location and dimensions.\n * The location of the result will be stored into the {@link #x} and\n * {@link #y} fields by clipping the true result to the nearest 32-bit value.\n * The values stored into the {@link #width} and {@link #height} dimension\n * fields will be chosen as the 32-bit values that encompass the largest\n * part of the true result as possible.\n * Generally this means that the dimension will be clipped independently\n * to the range of 32-bit integers except that if the location had to be\n * moved to store it into its pair of 32-bit fields then the dimensions\n * will be adjusted relative to the \"best representation\" of the location.\n * If the true result had a negative dimension and was therefore\n * non-existant along one or both axes, the stored dimensions will be\n * negative numbers in those axes.\n * If the true result had a location that could be represented within\n * the range of 32-bit integers, but zero dimension along one or both\n * axes, then the stored dimensions will be zero in those axes.\n *\n * @author      Sami Shaio\n * @since 1.0\n ","description":"","name":"Rectangle","qualified_name":"java.awt.Rectangle","type":2},{"comment":"\n * Use the {@code BeanInfo} interface\n * to create a {@code BeanInfo} class\n * and provide explicit information about the methods,\n * properties, events, and other features of your beans.\n * <p>\n * When developing your bean, you can implement\n * the bean features required for your application task\n * omitting the rest of the {@code BeanInfo} features.\n * They will be obtained through the automatic analysis\n * by using the low-level reflection of the bean methods\n * and applying standard design patterns.\n * You have an opportunity to provide additional bean information\n * through various descriptor classes.\n * <p>\n * See the {@link SimpleBeanInfo} class that is\n * a convenient basic class for {@code BeanInfo} classes.\n * You can override the methods and properties of\n * the {@code SimpleBeanInfo} class to define specific information.\n * <p>\n * See also the {@link Introspector} class to learn more about bean behavior.\n ","description":"","name":"BeanInfo","qualified_name":"java.beans.BeanInfo","type":3},{"comment":"\n * The {@code GeneralPath} class represents a geometric path\n * constructed from straight lines, and quadratic and cubic\n * (B&eacute;zier) curves.  It can contain multiple subpaths.\n * <p>\n * {@code GeneralPath} is a legacy final class which exactly\n * implements the behavior of its superclass {@link Path2D.Float}.\n * Together with {@link Path2D.Double}, the {@link Path2D} classes\n * provide full implementations of a general geometric path that\n * support all of the functionality of the {@link Shape} and\n * {@link PathIterator} interfaces with the ability to explicitly\n * select different levels of internal coordinate precision.\n * <p>\n * Use {@code Path2D.Float} (or this legacy {@code GeneralPath}\n * subclass) when dealing with data that can be represented\n * and used with floating point precision.  Use {@code Path2D.Double}\n * for data that requires the accuracy or range of double precision.\n *\n * @author Jim Graham\n * @since 1.2\n ","description":"","name":"GeneralPath","qualified_name":"java.awt.geom.GeneralPath","type":2},{"comment":"","description":"","name":"Book","qualified_name":"java.awt.print.Book","type":2},{"comment":"","description":"","name":"CharacterDataLatin1","qualified_name":"java.lang.CharacterDataLatin1","type":2},{"comment":"","description":"","name":"PrintCallback","qualified_name":"java.awt.GraphicsCallback.PrintCallback","type":2},{"comment":"\n         * Simple growable list of (integer) handles.\n         ","description":"","name":"HandleList","qualified_name":"java.io.ObjectInputStream.HandleTable.HandleList","type":2},{"comment":"","description":"","name":"InputMethodRequests","qualified_name":"java.awt.im.InputMethodRequests","type":3},{"comment":"","description":"","name":"TypeConvertingMethodAdapter","qualified_name":"java.lang.invoke.TypeConvertingMethodAdapter","type":2},{"comment":"\n     * Meta-data wrapper for concrete BMH types.\n     * Each BMH type corresponds to a given sequence of basic field types (LIJFD).\n     * The fields are immutable; their values are fully specified at object construction.\n     * Each BMH type supplies an array of getter functions which may be used in lambda forms.\n     * A BMH is constructed by cloning a shorter BMH and adding one or more new field values.\n     * The shortest possible BMH has zero fields; its class is SimpleMethodHandle.\n     * BMH species are not interrelated by subtyping, even though it would appear that\n     * a shorter BMH could serve as a supertype of a longer one which extends it.\n     ","description":"","name":"SpeciesData","qualified_name":"java.lang.invoke.BoundMethodHandle.SpeciesData","type":2},{"comment":"\n * LayoutPath provides a mapping between locations relative to the\n * baseline and points in user space.  Locations consist of an advance\n * along the baseline, and an offset perpendicular to the baseline at\n * the advance.  Positive values along the perpendicular are in the\n * direction that is 90 degrees clockwise from the baseline vector.\n * Locations are represented as a <code>Point2D</code>, where x is the advance and\n * y is the offset.\n *\n * @since 1.6\n ","description":"","name":"LayoutPath","qualified_name":"java.awt.font.LayoutPath","type":2},{"comment":"\n * The PixelGrabber class implements an ImageConsumer which can be attached\n * to an Image or ImageProducer object to retrieve a subset of the pixels\n * in that image.  Here is an example:\n * <pre>{@code\n *\n * public void handlesinglepixel(int x, int y, int pixel) {\n *      int alpha = (pixel >> 24) & 0xff;\n *      int red   = (pixel >> 16) & 0xff;\n *      int green = (pixel >>  8) & 0xff;\n *      int blue  = (pixel      ) & 0xff;\n *      // Deal with the pixel as necessary...\n * }\n *\n * public void handlepixels(Image img, int x, int y, int w, int h) {\n *      int[] pixels = new int[w * h];\n *      PixelGrabber pg = new PixelGrabber(img, x, y, w, h, pixels, 0, w);\n *      try {\n *          pg.grabPixels();\n *      } catch (InterruptedException e) {\n *          System.err.println(\"interrupted waiting for pixels!\");\n *          return;\n *      }\n *      if ((pg.getStatus() & ImageObserver.ABORT) != 0) {\n *          System.err.println(\"image fetch aborted or errored\");\n *          return;\n *      }\n *      for (int j = 0; j < h; j++) {\n *          for (int i = 0; i < w; i++) {\n *              handlesinglepixel(x+i, y+j, pixels[j * w + i]);\n *          }\n *      }\n * }\n *\n * }</pre>\n *\n * @see ColorModel#getRGBdefault\n *\n * @author      Jim Graham\n ","description":"","name":"PixelGrabber","qualified_name":"java.awt.image.PixelGrabber","type":2},{"comment":"\n * The <code>FlatteningPathIterator</code> class returns a flattened view of\n * another {@link PathIterator} object.  Other {@link java.awt.Shape Shape}\n * classes can use this class to provide flattening behavior for their paths\n * without having to perform the interpolation calculations themselves.\n *\n * @author Jim Graham\n ","description":"","name":"FlatteningPathIterator","qualified_name":"java.awt.geom.FlatteningPathIterator","type":2},{"comment":"\n * An event which indicates a change to the <code>Component</code>\n * hierarchy to which <code>Component</code> belongs.\n * <ul>\n * <li>Hierarchy Change Events (HierarchyListener)\n *     <ul>\n *     <li> addition of an ancestor\n *     <li> removal of an ancestor\n *     <li> hierarchy made displayable\n *     <li> hierarchy made undisplayable\n *     <li> hierarchy shown on the screen (both visible and displayable)\n *     <li> hierarchy hidden on the screen (either invisible or undisplayable)\n *     </ul>\n * <li>Ancestor Reshape Events (HierarchyBoundsListener)\n *     <ul>\n *     <li> an ancestor was resized\n *     <li> an ancestor was moved\n *     </ul>\n * </ul>\n * <p>\n * Hierarchy events are provided for notification purposes ONLY.\n * The AWT will automatically handle changes to the hierarchy internally so\n * that GUI layout and displayability works properly regardless of whether a\n * program is receiving these events or not.\n * <p>\n * This event is generated by a Container object (such as a Panel) when the\n * Container is added, removed, moved, or resized, and passed down the\n * hierarchy. It is also generated by a Component object when that object's\n * <code>addNotify</code>, <code>removeNotify</code>, <code>show</code>, or\n * <code>hide</code> method is called. The {@code ANCESTOR_MOVED} and\n * {@code ANCESTOR_RESIZED}\n * events are dispatched to every <code>HierarchyBoundsListener</code> or\n * <code>HierarchyBoundsAdapter</code> object which registered to receive\n * such events using the Component's <code>addHierarchyBoundsListener</code>\n * method. (<code>HierarchyBoundsAdapter</code> objects implement the <code>\n * HierarchyBoundsListener</code> interface.) The {@code HIERARCHY_CHANGED} events are\n * dispatched to every <code>HierarchyListener</code> object which registered\n * to receive such events using the Component's <code>addHierarchyListener\n * </code> method. Each such listener object gets this <code>HierarchyEvent\n * </code> when the event occurs.\n * <p>\n * An unspecified behavior will be caused if the {@code id} parameter\n * of any particular {@code HierarchyEvent} instance is not\n * in the range from {@code HIERARCHY_FIRST} to {@code HIERARCHY_LAST}.\n * <br>\n * The {@code changeFlags} parameter of any {@code HierarchyEvent} instance takes one of the following\n * values:\n * <ul>\n * <li> {@code HierarchyEvent.PARENT_CHANGED}\n * <li> {@code HierarchyEvent.DISPLAYABILITY_CHANGED}\n * <li> {@code HierarchyEvent.SHOWING_CHANGED}\n * </ul>\n * Assigning the value different from listed above will cause unspecified behavior.\n *\n * @author      David Mendenhall\n * @see         HierarchyListener\n * @see         HierarchyBoundsAdapter\n * @see         HierarchyBoundsListener\n * @since       1.3\n ","description":"","name":"HierarchyEvent","qualified_name":"java.awt.event.HierarchyEvent","type":2},{"comment":"\n * The <code>FontMetrics</code> class defines a font metrics object, which\n * encapsulates information about the rendering of a particular font on a\n * particular screen.\n * <p>\n * <b>Note to subclassers</b>: Since many of these methods form closed,\n * mutually recursive loops, you must take care that you implement\n * at least one of the methods in each such loop to prevent\n * infinite recursion when your subclass is used.\n * In particular, the following is the minimal suggested set of methods\n * to override in order to ensure correctness and prevent infinite\n * recursion (though other subsets are equally feasible):\n * <ul>\n * <li>{@link #getAscent()}\n * <li>{@link #getLeading()}\n * <li>{@link #getMaxAdvance()}\n * <li>{@link #charWidth(char)}\n * <li>{@link #charsWidth(char[], int, int)}\n * </ul>\n * <p>\n * <img src=\"doc-files/FontMetrics-1.gif\" alt=\"The letter 'p' showing its 'reference point'\"\n * style=\"border:15px; float:right; margin: 7px 10px;\">\n * Note that the implementations of these methods are\n * inefficient, so they are usually overridden with more efficient\n * toolkit-specific implementations.\n * <p>\n * When an application asks to place a character at the position\n * (<i>x</i>,&nbsp;<i>y</i>), the character is placed so that its\n * reference point (shown as the dot in the accompanying image) is\n * put at that position. The reference point specifies a horizontal\n * line called the <i>baseline</i> of the character. In normal\n * printing, the baselines of characters should align.\n * <p>\n * In addition, every character in a font has an <i>ascent</i>, a\n * <i>descent</i>, and an <i>advance width</i>. The ascent is the\n * amount by which the character ascends above the baseline. The\n * descent is the amount by which the character descends below the\n * baseline. The advance width indicates the position at which AWT\n * should place the next character.\n * <p>\n * An array of characters or a string can also have an ascent, a\n * descent, and an advance width. The ascent of the array is the\n * maximum ascent of any character in the array. The descent is the\n * maximum descent of any character in the array. The advance width\n * is the sum of the advance widths of each of the characters in the\n * character array.  The advance of a <code>String</code> is the\n * distance along the baseline of the <code>String</code>.  This\n * distance is the width that should be used for centering or\n * right-aligning the <code>String</code>.\n * <p>Note that the advance of a <code>String</code> is not necessarily\n * the sum of the advances of its characters measured in isolation\n * because the width of a character can vary depending on its context.\n * For example, in Arabic text, the shape of a character can change\n * in order to connect to other characters.  Also, in some scripts,\n * certain character sequences can be represented by a single shape,\n * called a <em>ligature</em>.  Measuring characters individually does\n * not account for these transformations.\n * <p>Font metrics are baseline-relative, meaning that they are\n * generally independent of the rotation applied to the font (modulo\n * possible grid hinting effects).  See {@link java.awt.Font Font}.\n *\n * @author      Jim Graham\n * @see         java.awt.Font\n * @since       JDK1.0\n ","description":"","name":"FontMetrics","qualified_name":"java.awt.FontMetrics","type":2},{"comment":"\n     * The BookPage inner class describes an individual\n     * page in a Book through a PageFormat-Printable pair.\n     ","description":"","name":"BookPage","qualified_name":"java.awt.print.Book.BookPage","type":2},{"comment":"\n * The listener interface for receiving keyboard events (keystrokes).\n * The class that is interested in processing a keyboard event\n * either implements this interface (and all the methods it\n * contains) or extends the abstract <code>KeyAdapter</code> class\n * (overriding only the methods of interest).\n * <P>\n * The listener object created from that class is then registered with a\n * component using the component's <code>addKeyListener</code>\n * method. A keyboard event is generated when a key is pressed, released,\n * or typed. The relevant method in the listener\n * object is then invoked, and the <code>KeyEvent</code> is passed to it.\n *\n * @author Carl Quinn\n *\n * @see KeyAdapter\n * @see KeyEvent\n * @see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/keylistener.html\">Tutorial: Writing a Key Listener</a>\n *\n * @since 1.1\n ","description":"","name":"KeyListener","qualified_name":"java.awt.event.KeyListener","type":3},{"comment":"\n * The <code>Choice</code> class presents a pop-up menu of choices.\n * The current choice is displayed as the title of the menu.\n * <p>\n * The following code example produces a pop-up menu:\n *\n * <hr><blockquote><pre>\n * Choice ColorChooser = new Choice();\n * ColorChooser.add(\"Green\");\n * ColorChooser.add(\"Red\");\n * ColorChooser.add(\"Blue\");\n * </pre></blockquote><hr>\n * <p>\n * After this choice menu has been added to a panel,\n * it appears as follows in its normal state:\n * <p>\n * <img src=\"doc-files/Choice-1.gif\" alt=\"The following text describes the graphic\"\n * style=\"float:center; margin: 7px 10px;\">\n * <p>\n * In the picture, <code>\"Green\"</code> is the current choice.\n * Pushing the mouse button down on the object causes a menu to\n * appear with the current choice highlighted.\n * <p>\n * Some native platforms do not support arbitrary resizing of\n * <code>Choice</code> components and the behavior of\n * <code>setSize()/getSize()</code> is bound by\n * such limitations.\n * Native GUI <code>Choice</code> components' size are often bound by such\n * attributes as font size and length of items contained within\n * the <code>Choice</code>.\n * <p>\n * @author      Sami Shaio\n * @author      Arthur van Hoff\n * @since       JDK1.0\n ","description":"","name":"Choice","qualified_name":"java.awt.Choice","type":2},{"comment":"\n * The <code>EventHandler</code> class provides\n * support for dynamically generating event listeners whose methods\n * execute a simple statement involving an incoming event object\n * and a target object.\n * <p>\n * The <code>EventHandler</code> class is intended to be used by interactive tools, such as\n * application builders, that allow developers to make connections between\n * beans. Typically connections are made from a user interface bean\n * (the event <em>source</em>)\n * to an application logic bean (the <em>target</em>). The most effective\n * connections of this kind isolate the application logic from the user\n * interface.  For example, the <code>EventHandler</code> for a\n * connection from a <code>JCheckBox</code> to a method\n * that accepts a boolean value can deal with extracting the state\n * of the check box and passing it directly to the method so that\n * the method is isolated from the user interface layer.\n * <p>\n * Inner classes are another, more general way to handle events from\n * user interfaces.  The <code>EventHandler</code> class\n * handles only a subset of what is possible using inner\n * classes. However, <code>EventHandler</code> works better\n * with the long-term persistence scheme than inner classes.\n * Also, using <code>EventHandler</code> in large applications in\n * which the same interface is implemented many times can\n * reduce the disk and memory footprint of the application.\n * <p>\n * The reason that listeners created with <code>EventHandler</code>\n * have such a small\n * footprint is that the <code>Proxy</code> class, on which\n * the <code>EventHandler</code> relies, shares implementations\n * of identical\n * interfaces. For example, if you use\n * the <code>EventHandler</code> <code>create</code> methods to make\n * all the <code>ActionListener</code>s in an application,\n * all the action listeners will be instances of a single class\n * (one created by the <code>Proxy</code> class).\n * In general, listeners based on\n * the <code>Proxy</code> class require one listener class\n * to be created per <em>listener type</em> (interface),\n * whereas the inner class\n * approach requires one class to be created per <em>listener</em>\n * (object that implements the interface).\n *\n * <p>\n * You don't generally deal directly with <code>EventHandler</code>\n * instances.\n * Instead, you use one of the <code>EventHandler</code>\n * <code>create</code> methods to create\n * an object that implements a given listener interface.\n * This listener object uses an <code>EventHandler</code> object\n * behind the scenes to encapsulate information about the\n * event, the object to be sent a message when the event occurs,\n * the message (method) to be sent, and any argument\n * to the method.\n * The following section gives examples of how to create listener\n * objects using the <code>create</code> methods.\n *\n * <h2>Examples of Using EventHandler</h2>\n *\n * The simplest use of <code>EventHandler</code> is to install\n * a listener that calls a method on the target object with no arguments.\n * In the following example we create an <code>ActionListener</code>\n * that invokes the <code>toFront</code> method on an instance\n * of <code>javax.swing.JFrame</code>.\n *\n * <blockquote>\n *<pre>\n *myButton.addActionListener(\n *    (ActionListener)EventHandler.create(ActionListener.class, frame, \"toFront\"));\n *</pre>\n * </blockquote>\n *\n * When <code>myButton</code> is pressed, the statement\n * <code>frame.toFront()</code> will be executed.  One could get\n * the same effect, with some additional compile-time type safety,\n * by defining a new implementation of the <code>ActionListener</code>\n * interface and adding an instance of it to the button:\n *\n * <blockquote>\n *<pre>\n//Equivalent code using an inner class instead of EventHandler.\n *myButton.addActionListener(new ActionListener() {\n *    public void actionPerformed(ActionEvent e) {\n *        frame.toFront();\n *    }\n *});\n *</pre>\n * </blockquote>\n *\n * The next simplest use of <code>EventHandler</code> is\n * to extract a property value from the first argument\n * of the method in the listener interface (typically an event object)\n * and use it to set the value of a property in the target object.\n * In the following example we create an <code>ActionListener</code> that\n * sets the <code>nextFocusableComponent</code> property of the target\n * (myButton) object to the value of the \"source\" property of the event.\n *\n * <blockquote>\n *<pre>\n *EventHandler.create(ActionListener.class, myButton, \"nextFocusableComponent\", \"source\")\n *</pre>\n * </blockquote>\n *\n * This would correspond to the following inner class implementation:\n *\n * <blockquote>\n *<pre>\n//Equivalent code using an inner class instead of EventHandler.\n *new ActionListener() {\n *    public void actionPerformed(ActionEvent e) {\n *        myButton.setNextFocusableComponent((Component)e.getSource());\n *    }\n *}\n *</pre>\n * </blockquote>\n *\n * It's also possible to create an <code>EventHandler</code> that\n * just passes the incoming event object to the target's action.\n * If the fourth <code>EventHandler.create</code> argument is\n * an empty string, then the event is just passed along:\n *\n * <blockquote>\n *<pre>\n *EventHandler.create(ActionListener.class, target, \"doActionEvent\", \"\")\n *</pre>\n * </blockquote>\n *\n * This would correspond to the following inner class implementation:\n *\n * <blockquote>\n *<pre>\n//Equivalent code using an inner class instead of EventHandler.\n *new ActionListener() {\n *    public void actionPerformed(ActionEvent e) {\n *        target.doActionEvent(e);\n *    }\n *}\n *</pre>\n * </blockquote>\n *\n * Probably the most common use of <code>EventHandler</code>\n * is to extract a property value from the\n * <em>source</em> of the event object and set this value as\n * the value of a property of the target object.\n * In the following example we create an <code>ActionListener</code> that\n * sets the \"label\" property of the target\n * object to the value of the \"text\" property of the\n * source (the value of the \"source\" property) of the event.\n *\n * <blockquote>\n *<pre>\n *EventHandler.create(ActionListener.class, myButton, \"label\", \"source.text\")\n *</pre>\n * </blockquote>\n *\n * This would correspond to the following inner class implementation:\n *\n * <blockquote>\n *<pre>\n//Equivalent code using an inner class instead of EventHandler.\n *new ActionListener {\n *    public void actionPerformed(ActionEvent e) {\n *        myButton.setLabel(((JTextField)e.getSource()).getText());\n *    }\n *}\n *</pre>\n * </blockquote>\n *\n * The event property may be \"qualified\" with an arbitrary number\n * of property prefixes delimited with the \".\" character. The \"qualifying\"\n * names that appear before the \".\" characters are taken as the names of\n * properties that should be applied, left-most first, to\n * the event object.\n * <p>\n * For example, the following action listener\n *\n * <blockquote>\n *<pre>\n *EventHandler.create(ActionListener.class, target, \"a\", \"b.c.d\")\n *</pre>\n * </blockquote>\n *\n * might be written as the following inner class\n * (assuming all the properties had canonical getter methods and\n * returned the appropriate types):\n *\n * <blockquote>\n *<pre>\n//Equivalent code using an inner class instead of EventHandler.\n *new ActionListener {\n *    public void actionPerformed(ActionEvent e) {\n *        target.setA(e.getB().getC().isD());\n *    }\n *}\n *</pre>\n * </blockquote>\n * The target property may also be \"qualified\" with an arbitrary number\n * of property prefixs delimited with the \".\" character.  For example, the\n * following action listener:\n * <pre>\n *   EventHandler.create(ActionListener.class, target, \"a.b\", \"c.d\")\n * </pre>\n * might be written as the following inner class\n * (assuming all the properties had canonical getter methods and\n * returned the appropriate types):\n * <pre>\n *   //Equivalent code using an inner class instead of EventHandler.\n *   new ActionListener {\n *     public void actionPerformed(ActionEvent e) {\n *         target.getA().setB(e.getC().isD());\n *    }\n *}\n *</pre>\n * <p>\n * As <code>EventHandler</code> ultimately relies on reflection to invoke\n * a method we recommend against targeting an overloaded method.  For example,\n * if the target is an instance of the class <code>MyTarget</code> which is\n * defined as:\n * <pre>\n *   public class MyTarget {\n *     public void doIt(String);\n *     public void doIt(Object);\n *   }\n * </pre>\n * Then the method <code>doIt</code> is overloaded.  EventHandler will invoke\n * the method that is appropriate based on the source.  If the source is\n * null, then either method is appropriate and the one that is invoked is\n * undefined.  For that reason we recommend against targeting overloaded\n * methods.\n *\n * @see java.lang.reflect.Proxy\n * @see java.util.EventObject\n *\n * @since 1.4\n *\n * @author Mark Davidson\n * @author Philip Milne\n * @author Hans Muller\n *\n ","description":"","name":"EventHandler","qualified_name":"java.beans.EventHandler","type":2},{"comment":"\n * Thrown to indicate that a thread is not in an appropriate state\n * for the requested operation. See, for example, the\n * <code>suspend</code> and <code>resume</code> methods in class\n * <code>Thread</code>.\n *\n * @author  unascribed\n * @see     java.lang.Thread#resume()\n * @see     java.lang.Thread#suspend()\n * @since   JDK1.0\n ","description":"","name":"IllegalThreadStateException","qualified_name":"java.lang.IllegalThreadStateException","type":2},{"comment":"\n * The <code>MenuBar</code> class encapsulates the platform's\n * concept of a menu bar bound to a frame. In order to associate\n * the menu bar with a <code>Frame</code> object, call the\n * frame's <code>setMenuBar</code> method.\n * <p>\n * <A NAME=\"mbexample\"></A><!-- target for cross references -->\n * This is what a menu bar might look like:\n * <p>\n * <img src=\"doc-files/MenuBar-1.gif\"\n * alt=\"Diagram of MenuBar containing 2 menus: Examples and Options.\n * Examples menu is expanded showing items: Basic, Simple, Check, and More Examples.\"\n * style=\"float:center; margin: 7px 10px;\">\n * <p>\n * A menu bar handles keyboard shortcuts for menu items, passing them\n * along to its child menus.\n * (Keyboard shortcuts, which are optional, provide the user with\n * an alternative to the mouse for invoking a menu item and the\n * action that is associated with it.)\n * Each menu item can maintain an instance of <code>MenuShortcut</code>.\n * The <code>MenuBar</code> class defines several methods,\n * {@link MenuBar#shortcuts} and\n * {@link MenuBar#getShortcutMenuItem}\n * that retrieve information about the shortcuts a given\n * menu bar is managing.\n *\n * @author Sami Shaio\n * @see        java.awt.Frame\n * @see        java.awt.Frame#setMenuBar(java.awt.MenuBar)\n * @see        java.awt.Menu\n * @see        java.awt.MenuItem\n * @see        java.awt.MenuShortcut\n * @since      JDK1.0\n ","description":"","name":"MenuBar","qualified_name":"java.awt.MenuBar","type":2},{"comment":"\n * An applet is a small program that is intended not to be run on\n * its own, but rather to be embedded inside another application.\n * <p>\n * The <code>Applet</code> class must be the superclass of any\n * applet that is to be embedded in a Web page or viewed by the Java\n * Applet Viewer. The <code>Applet</code> class provides a standard\n * interface between applets and their environment.\n *\n * @author      Arthur van Hoff\n * @author      Chris Warth\n * @since       JDK1.0\n ","description":"","name":"Applet","qualified_name":"java.applet.Applet","type":2},{"comment":"\n * Base class for character conversion exceptions.\n *\n * @author      Asmus Freytag\n * @since       JDK1.1\n ","description":"","name":"CharConversionException","qualified_name":"java.io.CharConversionException","type":2},{"comment":"","description":"","name":"GlyphMetrics","qualified_name":"java.awt.font.GlyphMetrics","type":2},{"comment":"\n * ObjectInput extends the DataInput interface to include the reading of\n * objects. DataInput includes methods for the input of primitive types,\n * ObjectInput extends that interface to include objects, arrays, and Strings.\n *\n * @author  unascribed\n * @see java.io.InputStream\n * @see java.io.ObjectOutputStream\n * @see java.io.ObjectInputStream\n * @since   JDK1.1\n ","description":"","name":"ObjectInput","qualified_name":"java.io.ObjectInput","type":3},{"comment":"\n * The {@code Float} class wraps a value of primitive type\n * {@code float} in an object. An object of type\n * {@code Float} contains a single field whose type is\n * {@code float}.\n *\n * <p>In addition, this class provides several methods for converting a\n * {@code float} to a {@code String} and a\n * {@code String} to a {@code float}, as well as other\n * constants and methods useful when dealing with a\n * {@code float}.\n *\n * @author  Lee Boynton\n * @author  Arthur van Hoff\n * @author  Joseph D. Darcy\n * @since JDK1.0\n ","description":"","name":"Float","qualified_name":"java.lang.Float","type":2},{"comment":"\n * Thrown if an application tries to access or modify a specified\n * field of an object, and that object no longer has that field.\n * <p>\n * Normally, this error is caught by the compiler; this error can\n * only occur at run time if the definition of a class has\n * incompatibly changed.\n *\n * @author  unascribed\n * @since   JDK1.0\n ","description":"","name":"NoSuchFieldError","qualified_name":"java.lang.NoSuchFieldError","type":2},{"comment":"","description":"","name":"LineNumberReader","qualified_name":"java.io.LineNumberReader","type":2},{"comment":" List","description":"","name":"java_util_List_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_util_List_PersistenceDelegate","type":2},{"comment":"\n     * ThreadLocalMap is a customized hash map suitable only for\n     * maintaining thread local values. No operations are exported\n     * outside of the ThreadLocal class. The class is package private to\n     * allow declaration of fields in class Thread.  To help deal with\n     * very large and long-lived usages, the hash table entries use\n     * WeakReferences for keys. However, since reference queues are not\n     * used, stale entries are guaranteed to be removed only when\n     * the table starts running out of space.\n     ","description":"","name":"ThreadLocalMap","qualified_name":"java.lang.ThreadLocal.ThreadLocalMap","type":2},{"comment":"\n * The <code>FileDialog</code> class displays a dialog window\n * from which the user can select a file.\n * <p>\n * Since it is a modal dialog, when the application calls\n * its <code>show</code> method to display the dialog,\n * it blocks the rest of the application until the user has\n * chosen a file.\n *\n * @see Window#show\n *\n * @author      Sami Shaio\n * @author      Arthur van Hoff\n * @since       JDK1.0\n ","description":"","name":"FileDialog","qualified_name":"java.awt.FileDialog","type":2},{"comment":" This subclass handles non-static field references. ","description":"","name":"Accessor","qualified_name":"java.lang.invoke.DirectMethodHandle.Accessor","type":2},{"comment":"","description":"","name":"TransferableProxy","qualified_name":"java.awt.dnd.DropTargetContext.TransferableProxy","type":2},{"comment":"\n * Defines the interface for classes that know how to lay out\n * <code>Container</code>s.\n * <p>\n * Swing's painting architecture assumes the children of a\n * <code>JComponent</code> do not overlap.  If a\n * <code>JComponent</code>'s <code>LayoutManager</code> allows\n * children to overlap, the <code>JComponent</code> must override\n * <code>isOptimizedDrawingEnabled</code> to return false.\n *\n * @see Container\n * @see javax.swing.JComponent#isOptimizedDrawingEnabled\n *\n * @author      Sami Shaio\n * @author      Arthur van Hoff\n ","description":"","name":"LayoutManager","qualified_name":"java.awt.LayoutManager","type":3},{"comment":"\n * This class consists exclusively of static methods that operate on or return\n * method handles. They fall into several categories:\n * <ul>\n * <li>Lookup methods which help create method handles for methods and fields.\n * <li>Combinator methods, which combine or transform pre-existing method handles into new ones.\n * <li>Other factory methods to create method handles that emulate other common JVM operations or control flow patterns.\n * </ul>\n * <p>\n * @author John Rose, JSR 292 EG\n * @since 1.7\n ","description":"","name":"MethodHandles","qualified_name":"java.lang.invoke.MethodHandles","type":2},{"comment":"","description":"","name":"Iterator","qualified_name":"java.awt.geom.Path2D.Iterator","type":2},{"comment":"\n * Thrown if the Java Virtual Machine or a <code>ClassLoader</code> instance\n * tries to load in the definition of a class (as part of a normal method call\n * or as part of creating a new instance using the <code>new</code> expression)\n * and no definition of the class could be found.\n * <p>\n * The searched-for class definition existed when the currently\n * executing class was compiled, but the definition can no longer be\n * found.\n *\n * @author  unascribed\n * @since   JDK1.0\n ","description":"","name":"NoClassDefFoundError","qualified_name":"java.lang.NoClassDefFoundError","type":2},{"comment":"\n * This class provides thread-local variables.  These variables differ from\n * their normal counterparts in that each thread that accesses one (via its\n * {@code get} or {@code set} method) has its own, independently initialized\n * copy of the variable.  {@code ThreadLocal} instances are typically private\n * static fields in classes that wish to associate state with a thread (e.g.,\n * a user ID or Transaction ID).\n *\n * <p>For example, the class below generates unique identifiers local to each\n * thread.\n * A thread's id is assigned the first time it invokes {@code ThreadId.get()}\n * and remains unchanged on subsequent calls.\n * <pre>\n * import java.util.concurrent.atomic.AtomicInteger;\n *\n * public class ThreadId {\n *     // Atomic integer containing the next thread ID to be assigned\n *     private static final AtomicInteger nextId = new AtomicInteger(0);\n *\n *     // Thread local variable containing each thread's ID\n *     private static final ThreadLocal&lt;Integer&gt; threadId =\n *         new ThreadLocal&lt;Integer&gt;() {\n *             &#64;Override protected Integer initialValue() {\n *                 return nextId.getAndIncrement();\n *         }\n *     };\n *\n *     // Returns the current thread's unique ID, assigning it if necessary\n *     public static int get() {\n *         return threadId.get();\n *     }\n * }\n * </pre>\n * <p>Each thread holds an implicit reference to its copy of a thread-local\n * variable as long as the thread is alive and the {@code ThreadLocal}\n * instance is accessible; after a thread goes away, all of its copies of\n * thread-local instances are subject to garbage collection (unless other\n * references to these copies exist).\n *\n * @author  Josh Bloch and Doug Lea\n * @since   1.2\n ","description":"","name":"ThreadLocal","qualified_name":"java.lang.ThreadLocal","type":2},{"comment":"","description":"","name":"AlphaComposite","qualified_name":"java.awt.AlphaComposite","type":2},{"comment":"\n * This class extends <CODE>DataBuffer</CODE> and stores data internally\n * as integers.\n * <p>\n * <a name=\"optimizations\">\n * Note that some implementations may function more efficiently\n * if they can maintain control over how the data for an image is\n * stored.\n * For example, optimizations such as caching an image in video\n * memory require that the implementation track all modifications\n * to that data.\n * Other implementations may operate better if they can store the\n * data in locations other than a Java array.\n * To maintain optimum compatibility with various optimizations\n * it is best to avoid constructors and methods which expose the\n * underlying storage as a Java array as noted below in the\n * documentation for those methods.\n * </a>\n ","description":"","name":"DataBufferInt","qualified_name":"java.awt.image.DataBufferInt","type":2},{"comment":"\n     * a key used for proxy class with 1 implemented interface\n     ","description":"","name":"Key1","qualified_name":"java.lang.reflect.Proxy.Key1","type":2},{"comment":"\n * The default KeyboardFocusManager for AWT applications. Focus traversal is\n * done in response to a Component's focus traversal keys, and using a\n * Container's FocusTraversalPolicy.\n * <p>\n * Please see\n * <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/misc/focus.html\">\n * How to Use the Focus Subsystem</a>,\n * a section in <em>The Java Tutorial</em>, and the\n * <a href=\"../../java/awt/doc-files/FocusSpec.html\">Focus Specification</a>\n * for more information.\n *\n * @author David Mendenhall\n *\n * @see FocusTraversalPolicy\n * @see Component#setFocusTraversalKeys\n * @see Component#getFocusTraversalKeys\n * @since 1.4\n ","description":"","name":"DefaultKeyboardFocusManager","qualified_name":"java.awt.DefaultKeyboardFocusManager","type":2},{"comment":"\n * The <code>Rectangle2D</code> class describes a rectangle\n * defined by a location {@code (x,y)} and dimension\n * {@code (w x h)}.\n * <p>\n * This class is only the abstract superclass for all objects that\n * store a 2D rectangle.\n * The actual storage representation of the coordinates is left to\n * the subclass.\n *\n * @author      Jim Graham\n * @since 1.2\n ","description":"","name":"Rectangle2D","qualified_name":"java.awt.geom.Rectangle2D","type":2},{"comment":"","description":"","name":"ArrayAccessor","qualified_name":"java.lang.invoke.MethodHandleImpl.ArrayAccessor","type":2},{"comment":"\n     * CacheKey containing a weakly referenced {@code key}. It registers\n     * itself with the {@code refQueue} so that it can be used to expunge\n     * the entry when the {@link WeakReference} is cleared.\n     ","description":"","name":"CacheKey","qualified_name":"java.lang.reflect.WeakCache.CacheKey","type":2},{"comment":" -- Encoding --","description":"","name":"StringEncoder","qualified_name":"java.lang.StringCoding.StringEncoder","type":2},{"comment":"\n * An abstract adapter class for receiving keyboard focus events.\n * The methods in this class are empty. This class exists as\n * convenience for creating listener objects.\n * <P>\n * Extend this class to create a <code>FocusEvent</code> listener\n * and override the methods for the events of interest. (If you implement the\n * <code>FocusListener</code> interface, you have to define all of\n * the methods in it. This abstract class defines null methods for them\n * all, so you can only have to define methods for events you care about.)\n * <P>\n * Create a listener object using the extended class and then register it with\n * a component using the component's <code>addFocusListener</code>\n * method. When the component gains or loses the keyboard focus,\n * the relevant method in the listener object is invoked,\n * and the <code>FocusEvent</code> is passed to it.\n *\n * @see FocusEvent\n * @see FocusListener\n * @see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/focuslistener.html\">Tutorial: Writing a Focus Listener</a>\n *\n * @author Carl Quinn\n * @since 1.1\n ","description":"","name":"FocusAdapter","qualified_name":"java.awt.event.FocusAdapter","type":2},{"comment":"\n * A Multipurpose Internet Mail Extension (MIME) type, as defined\n * in RFC 2045 and 2046.\n *\n * THIS IS *NOT* - REPEAT *NOT* - A PUBLIC CLASS! DataFlavor IS\n * THE PUBLIC INTERFACE, AND THIS IS PROVIDED AS A ***PRIVATE***\n * (THAT IS AS IN *NOT* PUBLIC) HELPER CLASS!\n ","description":"","name":"MimeType","qualified_name":"java.awt.datatransfer.MimeType","type":2},{"comment":"","description":"","name":"PrinterAbortException","qualified_name":"java.awt.print.PrinterAbortException","type":2},{"comment":" The preceding static fields are protected by this lock ","description":"","name":"Lock","qualified_name":"java.lang.Shutdown.Lock","type":2},{"comment":"\n * A mutable sequence of characters.  This class provides an API compatible\n * with {@code StringBuffer}, but with no guarantee of synchronization.\n * This class is designed for use as a drop-in replacement for\n * {@code StringBuffer} in places where the string buffer was being\n * used by a single thread (as is generally the case).   Where possible,\n * it is recommended that this class be used in preference to\n * {@code StringBuffer} as it will be faster under most implementations.\n *\n * <p>The principal operations on a {@code StringBuilder} are the\n * {@code append} and {@code insert} methods, which are\n * overloaded so as to accept data of any type. Each effectively\n * converts a given datum to a string and then appends or inserts the\n * characters of that string to the string builder. The\n * {@code append} method always adds these characters at the end\n * of the builder; the {@code insert} method adds the characters at\n * a specified point.\n * <p>\n * For example, if {@code z} refers to a string builder object\n * whose current contents are \"{@code start}\", then\n * the method call {@code z.append(\"le\")} would cause the string\n * builder to contain \"{@code startle}\", whereas\n * {@code z.insert(4, \"le\")} would alter the string builder to\n * contain \"{@code starlet}\".\n * <p>\n * In general, if sb refers to an instance of a {@code StringBuilder},\n * then {@code sb.append(x)} has the same effect as\n * {@code sb.insert(sb.length(), x)}.\n * <p>\n * Every string builder has a capacity. As long as the length of the\n * character sequence contained in the string builder does not exceed\n * the capacity, it is not necessary to allocate a new internal\n * buffer. If the internal buffer overflows, it is automatically made larger.\n *\n * <p>Instances of {@code StringBuilder} are not safe for\n * use by multiple threads. If such synchronization is required then it is\n * recommended that {@link java.lang.StringBuffer} be used.\n *\n * <p>Unless otherwise noted, passing a {@code null} argument to a constructor\n * or method in this class will cause a {@link NullPointerException} to be\n * thrown.\n *\n * @author      Michael McCloskey\n * @see         java.lang.StringBuffer\n * @see         java.lang.String\n * @since       1.5\n ","description":"","name":"StringBuilder","qualified_name":"java.lang.StringBuilder","type":2},{"comment":"\n * Code generation backend for LambdaForm.\n * <p>\n * @author John Rose, JSR 292 EG\n ","description":"","name":"InvokerBytecodeGenerator","qualified_name":"java.lang.invoke.InvokerBytecodeGenerator","type":2},{"comment":"","description":"","name":"MenuContainer","qualified_name":"java.awt.MenuContainer","type":3},{"comment":"\n * The listener interface for receiving adjustment events.\n *\n * @author Amy Fowler\n * @since 1.1\n ","description":"","name":"AdjustmentListener","qualified_name":"java.awt.event.AdjustmentListener","type":3},{"comment":"","description":"","name":"SingletonList_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_util_Collections.SingletonList_PersistenceDelegate","type":2},{"comment":"\n * This class extends <CODE>DataBuffer</CODE> and stores data internally as bytes.\n * Values stored in the byte array(s) of this <CODE>DataBuffer</CODE> are treated as\n * unsigned values.\n * <p>\n * <a name=\"optimizations\">\n * Note that some implementations may function more efficiently\n * if they can maintain control over how the data for an image is\n * stored.\n * For example, optimizations such as caching an image in video\n * memory require that the implementation track all modifications\n * to that data.\n * Other implementations may operate better if they can store the\n * data in locations other than a Java array.\n * To maintain optimum compatibility with various optimizations\n * it is best to avoid constructors and methods which expose the\n * underlying storage as a Java array, as noted below in the\n * documentation for those methods.\n * </a>\n ","description":"","name":"DataBufferByte","qualified_name":"java.awt.image.DataBufferByte","type":2},{"comment":"","description":"","name":"LineBreakMeasurer","qualified_name":"java.awt.font.LineBreakMeasurer","type":2},{"comment":"\n * The <code>TransformAttribute</code> class provides an immutable\n * wrapper for a transform so that it is safe to use as an attribute.\n ","description":"","name":"TransformAttribute","qualified_name":"java.awt.font.TransformAttribute","type":2},{"comment":"","description":"","name":"Caches","qualified_name":"java.io.ObjectInputStream.Caches","type":2},{"comment":" JTabbedPane","description":"","name":"javax_swing_JTabbedPane_PersistenceDelegate","qualified_name":"java.beans.MetaData.javax_swing_JTabbedPane_PersistenceDelegate","type":2},{"comment":"","description":"","name":"BufferedWriter","qualified_name":"java.io.BufferedWriter","type":2},{"comment":"","description":"","name":"ICC_ProfileRGB","qualified_name":"java.awt.color.ICC_ProfileRGB","type":2},{"comment":"\n * A utility class to iterate over the path segments of an arc\n * through the PathIterator interface.\n *\n * @author      Jim Graham\n ","description":"","name":"ArcIterator","qualified_name":"java.awt.geom.ArcIterator","type":2},{"comment":"\n * This class defines a lookup table object.  The output of a\n * lookup operation using an object of this class is interpreted\n * as an unsigned byte quantity.  The lookup table contains byte\n * data arrays for one or more bands (or components) of an image,\n * and it contains an offset which will be subtracted from the\n * input values before indexing the arrays.  This allows an array\n * smaller than the native data size to be provided for a\n * constrained input.  If there is only one array in the lookup\n * table, it will be applied to all bands.\n *\n * @see ShortLookupTable\n * @see LookupOp\n ","description":"","name":"ByteLookupTable","qualified_name":"java.awt.image.ByteLookupTable","type":2},{"comment":" This subclass handles constructor references. ","description":"","name":"Constructor","qualified_name":"java.lang.invoke.DirectMethodHandle.Constructor","type":2},{"comment":"\n * Information about an object monitor lock.  An object monitor is locked\n * when entering a synchronization block or method on that object.\n *\n * <h3>MXBean Mapping</h3>\n * <tt>MonitorInfo</tt> is mapped to a {@link CompositeData CompositeData}\n * with attributes as specified in\n * the {@link #from from} method.\n *\n * @author  Mandy Chung\n * @since   1.6\n ","description":"","name":"MonitorInfo","qualified_name":"java.lang.management.MonitorInfo","type":2},{"comment":"","description":"","name":"AWTPermission","qualified_name":"java.awt.AWTPermission","type":2},{"comment":"\n * A {@code Method} provides information about, and access to, a single method\n * on a class or interface.  The reflected method may be a class method\n * or an instance method (including an abstract method).\n *\n * <p>A {@code Method} permits widening conversions to occur when matching the\n * actual parameters to invoke with the underlying method's formal\n * parameters, but it throws an {@code IllegalArgumentException} if a\n * narrowing conversion would occur.\n *\n * @see Member\n * @see java.lang.Class\n * @see java.lang.Class#getMethods()\n * @see java.lang.Class#getMethod(String, Class[])\n * @see java.lang.Class#getDeclaredMethods()\n * @see java.lang.Class#getDeclaredMethod(String, Class[])\n *\n * @author Kenneth Russell\n * @author Nakul Saraiya\n ","description":"","name":"Method","qualified_name":"java.lang.reflect.Method","type":2},{"comment":"\n     * a key used for proxy class with any number of implemented interfaces\n     * (used here for 3 or more only)\n     ","description":"","name":"KeyX","qualified_name":"java.lang.reflect.Proxy.KeyX","type":2},{"comment":"","description":"","name":"TexturePaint","qualified_name":"java.awt.TexturePaint","type":2},{"comment":"\n * The {@code Void} class is an uninstantiable placeholder class to hold a\n * reference to the {@code Class} object representing the Java keyword\n * void.\n *\n * @author  unascribed\n * @since   JDK1.1\n ","description":"","name":"Void","qualified_name":"java.lang.Void","type":2},{"comment":"","description":"","name":"MethodRef","qualified_name":"java.beans.MethodRef","type":2},{"comment":"\n     * A type-safe enumeration of possible print qualities. These print\n     * qualities are in compliance with IPP 1.1.\n     * @since 1.3\n     ","description":"","name":"PrintQualityType","qualified_name":"java.awt.PageAttributes.PrintQualityType","type":2},{"comment":"\n * The information about a memory notification.\n *\n * <p>\n * A memory notification is emitted by {@link MemoryMXBean}\n * when the Java virtual machine detects that the memory usage\n * of a memory pool is exceeding a threshold value.\n * The notification emitted will contain the memory notification\n * information about the detected condition:\n * <ul>\n *   <li>The name of the memory pool.</li>\n *   <li>The memory usage of the memory pool when the notification\n *       was constructed.</li>\n *   <li>The number of times that the memory usage has crossed\n *       a threshold when the notification was constructed.\n *       For usage threshold notifications, this count will be the\n *       {@link MemoryPoolMXBean#getUsageThresholdCount usage threshold\n *       count}.  For collection threshold notifications,\n *       this count will be the\n *       {@link MemoryPoolMXBean#getCollectionUsageThresholdCount\n *       collection usage threshold count}.\n *       </li>\n * </ul>\n *\n * <p>\n * A {@link CompositeData CompositeData} representing\n * the <tt>MemoryNotificationInfo</tt> object\n * is stored in the\n * {@link javax.management.Notification#setUserData user data}\n * of a {@link javax.management.Notification notification}.\n * The {@link #from from} method is provided to convert from\n * a <tt>CompositeData</tt> to a <tt>MemoryNotificationInfo</tt>\n * object. For example:\n *\n * <blockquote><pre>\n *      Notification notif;\n *\n *      // receive the notification emitted by MemoryMXBean and set to notif\n *      ...\n *\n *      String notifType = notif.getType();\n *      if (notifType.equals(MemoryNotificationInfo.MEMORY_THRESHOLD_EXCEEDED) ||\n *          notifType.equals(MemoryNotificationInfo.MEMORY_COLLECTION_THRESHOLD_EXCEEDED)) {\n *          // retrieve the memory notification information\n *          CompositeData cd = (CompositeData) notif.getUserData();\n *          MemoryNotificationInfo info = MemoryNotificationInfo.from(cd);\n *          ....\n *      }\n * </pre></blockquote>\n *\n * <p>\n * The types of notifications emitted by <tt>MemoryMXBean</tt> are:\n * <ul>\n *   <li>A {@link #MEMORY_THRESHOLD_EXCEEDED\n *       usage threshold exceeded notification}.\n *       <br>This notification will be emitted when\n *       the memory usage of a memory pool is increased and has reached\n *       or exceeded its\n *       <a href=\"MemoryPoolMXBean.html#UsageThreshold\"> usage threshold</a> value.\n *       Subsequent crossing of the usage threshold value does not cause\n *       further notification until the memory usage has returned\n *       to become less than the usage threshold value.\n *       <p></li>\n *   <li>A {@link #MEMORY_COLLECTION_THRESHOLD_EXCEEDED\n *       collection usage threshold exceeded notification}.\n *       <br>This notification will be emitted when\n *       the memory usage of a memory pool is greater than or equal to its\n *       <a href=\"MemoryPoolMXBean.html#CollectionThreshold\">\n *       collection usage threshold</a> after the Java virtual machine\n *       has expended effort in recycling unused objects in that\n *       memory pool.</li>\n * </ul>\n *\n * @author  Mandy Chung\n * @since   1.5\n *\n ","description":"","name":"MemoryNotificationInfo","qualified_name":"java.lang.management.MemoryNotificationInfo","type":2},{"comment":"\n * This class performs a pixel-by-pixel color conversion of the data in\n * the source image.  The resulting color values are scaled to the precision\n * of the destination image.  Color conversion can be specified\n * via an array of ColorSpace objects or an array of ICC_Profile objects.\n * <p>\n * If the source is a BufferedImage with premultiplied alpha, the\n * color components are divided by the alpha component before color conversion.\n * If the destination is a BufferedImage with premultiplied alpha, the\n * color components are multiplied by the alpha component after conversion.\n * Rasters are treated as having no alpha channel, i.e. all bands are\n * color bands.\n * <p>\n * If a RenderingHints object is specified in the constructor, the\n * color rendering hint and the dithering hint may be used to control\n * color conversion.\n * <p>\n * Note that Source and Destination may be the same object.\n * @see java.awt.RenderingHints#KEY_COLOR_RENDERING\n * @see java.awt.RenderingHints#KEY_DITHERING\n ","description":"","name":"ColorConvertOp","qualified_name":"java.awt.image.ColorConvertOp","type":2},{"comment":"\n * The management interface for the {@linkplain java.util.logging logging} facility.\n *\n * <p>There is a single global instance of the <tt>PlatformLoggingMXBean</tt>.\n * The {@link java.lang.management.ManagementFactory#getPlatformMXBean(Class)\n * ManagementFactory.getPlatformMXBean} method can be used to obtain\n * the {@code PlatformLoggingMXBean} object as follows:\n * <pre>\n *     PlatformLoggingMXBean logging = ManagementFactory.getPlatformMXBean(PlatformLoggingMXBean.class);\n * </pre>\n * The {@code PlatformLoggingMXBean} object is also registered with the\n * platform {@linkplain java.lang.management.ManagementFactory#getPlatformMBeanServer\n * MBeanServer}.\n * The {@link javax.management.ObjectName ObjectName} for uniquely\n * identifying the {@code PlatformLoggingMXBean} within an MBeanServer is:\n * <pre>\n *      {@link java.util.logging.LogManager#LOGGING_MXBEAN_NAME java.util.logging:type=Logging}\n * </pre>\n *\n * <p>The instance registered in the platform <tt>MBeanServer</tt> with\n * this {@code ObjectName} implements all attributes defined by\n * {@link java.util.logging.LoggingMXBean}.\n *\n * @since   1.7\n ","description":"","name":"PlatformLoggingMXBean","qualified_name":"java.lang.management.PlatformLoggingMXBean","type":3},{"comment":"\n * {@code AnnotatedType} represents the potentially annotated use of a type in\n * the program currently running in this VM. The use may be of any type in the\n * Java programming language, including an array type, a parameterized type, a\n * type variable, or a wildcard type.\n *\n * @since 1.8\n ","description":"","name":"AnnotatedType","qualified_name":"java.lang.reflect.AnnotatedType","type":3},{"comment":"\n * Wraps an {@link IOException} with an unchecked exception.\n *\n * @since   1.8\n ","description":"","name":"UncheckedIOException","qualified_name":"java.io.UncheckedIOException","type":2},{"comment":"\n * This class defines a lookup table object.  The output of a\n * lookup operation using an object of this class is interpreted\n * as an unsigned short quantity.  The lookup table contains short\n * data arrays for one or more bands (or components) of an image,\n * and it contains an offset which will be subtracted from the\n * input values before indexing the arrays.  This allows an array\n * smaller than the native data size to be provided for a\n * constrained input.  If there is only one array in the lookup\n * table, it will be applied to all bands.\n *\n * @see ByteLookupTable\n * @see LookupOp\n ","description":"","name":"ShortLookupTable","qualified_name":"java.awt.image.ShortLookupTable","type":2},{"comment":"","description":"","name":"ApplicationModalEventFilter","qualified_name":"java.awt.ModalEventFilter.ApplicationModalEventFilter","type":2},{"comment":"","description":"","name":"ICC_ColorSpace","qualified_name":"java.awt.color.ICC_ColorSpace","type":2},{"comment":"\n * The {@code DesktopPeer} interface provides methods for the operation\n * of open, edit, print, browse and mail with the given URL or file, by\n * launching the associated application.\n * <p>\n * Each platform has an implementation class for this interface.\n *\n ","description":"","name":"DesktopPeer","qualified_name":"java.awt.peer.DesktopPeer","type":3},{"comment":"\n * Callback interface to allow validation of objects within a graph.\n * Allows an object to be called when a complete graph of objects has\n * been deserialized.\n *\n * @author  unascribed\n * @see     ObjectInputStream\n * @see     ObjectInputStream#registerValidation(java.io.ObjectInputValidation, int)\n * @since   JDK1.1\n ","description":"","name":"ObjectInputValidation","qualified_name":"java.io.ObjectInputValidation","type":3},{"comment":"","description":"","name":"Entry","qualified_name":"java.lang.ref.FinalizerHistogram.Entry","type":2},{"comment":"\n * {@code AnnotatedTypeVariable} represents the potentially annotated use of a\n * type variable, whose declaration may have bounds which themselves represent\n * annotated uses of types.\n *\n * @since 1.8\n ","description":"","name":"AnnotatedTypeVariable","qualified_name":"java.lang.reflect.AnnotatedTypeVariable","type":3},{"comment":"\n * An IllegalAccessException is thrown when an application tries\n * to reflectively create an instance (other than an array),\n * set or get a field, or invoke a method, but the currently\n * executing method does not have access to the definition of\n * the specified class, field, method or constructor.\n *\n * @author  unascribed\n * @see     Class#newInstance()\n * @see     java.lang.reflect.Field#set(Object, Object)\n * @see     java.lang.reflect.Field#setBoolean(Object, boolean)\n * @see     java.lang.reflect.Field#setByte(Object, byte)\n * @see     java.lang.reflect.Field#setShort(Object, short)\n * @see     java.lang.reflect.Field#setChar(Object, char)\n * @see     java.lang.reflect.Field#setInt(Object, int)\n * @see     java.lang.reflect.Field#setLong(Object, long)\n * @see     java.lang.reflect.Field#setFloat(Object, float)\n * @see     java.lang.reflect.Field#setDouble(Object, double)\n * @see     java.lang.reflect.Field#get(Object)\n * @see     java.lang.reflect.Field#getBoolean(Object)\n * @see     java.lang.reflect.Field#getByte(Object)\n * @see     java.lang.reflect.Field#getShort(Object)\n * @see     java.lang.reflect.Field#getChar(Object)\n * @see     java.lang.reflect.Field#getInt(Object)\n * @see     java.lang.reflect.Field#getLong(Object)\n * @see     java.lang.reflect.Field#getFloat(Object)\n * @see     java.lang.reflect.Field#getDouble(Object)\n * @see     java.lang.reflect.Method#invoke(Object, Object[])\n * @see     java.lang.reflect.Constructor#newInstance(Object[])\n * @since   JDK1.0\n ","description":"","name":"IllegalAccessException","qualified_name":"java.lang.IllegalAccessException","type":2},{"comment":"\n * An <code>AWTKeyStroke</code> represents a key action on the\n * keyboard, or equivalent input device. <code>AWTKeyStroke</code>s\n * can correspond to only a press or release of a\n * particular key, just as <code>KEY_PRESSED</code> and\n * <code>KEY_RELEASED</code> <code>KeyEvent</code>s do;\n * alternately, they can correspond to typing a specific Java character, just\n * as <code>KEY_TYPED</code> <code>KeyEvent</code>s do.\n * In all cases, <code>AWTKeyStroke</code>s can specify modifiers\n * (alt, shift, control, meta, altGraph, or a combination thereof) which must be present\n * during the action for an exact match.\n * <p>\n * <code>AWTKeyStrokes</code> are immutable, and are intended\n * to be unique. Client code should never create an\n * <code>AWTKeyStroke</code> on its own, but should instead use\n * a variant of <code>getAWTKeyStroke</code>. Client use of these factory\n * methods allows the <code>AWTKeyStroke</code> implementation\n * to cache and share instances efficiently.\n *\n * @see #getAWTKeyStroke\n *\n * @author Arnaud Weber\n * @author David Mendenhall\n * @since 1.4\n ","description":"","name":"AWTKeyStroke","qualified_name":"java.awt.AWTKeyStroke","type":2},{"comment":"","description":"","name":"RenderedImage","qualified_name":"java.awt.image.RenderedImage","type":3},{"comment":"\n * A semantic event which indicates that a component-defined action occurred.\n * This high-level event is generated by a component (such as a\n * <code>Button</code>) when\n * the component-specific action occurs (such as being pressed).\n * The event is passed to every <code>ActionListener</code> object\n * that registered to receive such events using the component's\n * <code>addActionListener</code> method.\n * <p>\n * <b>Note:</b> To invoke an <code>ActionEvent</code> on a\n * <code>Button</code> using the keyboard, use the Space bar.\n * <P>\n * The object that implements the <code>ActionListener</code> interface\n * gets this <code>ActionEvent</code> when the event occurs. The listener\n * is therefore spared the details of processing individual mouse movements\n * and mouse clicks, and can instead process a \"meaningful\" (semantic)\n * event like \"button pressed\".\n * <p>\n * An unspecified behavior will be caused if the {@code id} parameter\n * of any particular {@code ActionEvent} instance is not\n * in the range from {@code ACTION_FIRST} to {@code ACTION_LAST}.\n *\n * @see ActionListener\n * @see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/actionlistener.html\">Tutorial: How to Write an Action Listener</a>\n *\n * @author Carl Quinn\n * @since 1.1\n ","description":"","name":"ActionEvent","qualified_name":"java.awt.event.ActionEvent","type":2},{"comment":"\n * The <code>OpenType</code> interface represents OpenType and\n * TrueType fonts.  This interface makes it possible to obtain\n * <i>sfnt</i> tables from the font.  A particular\n * <code>Font</code> object can implement this interface.\n * <p>\n * For more information on TrueType and OpenType fonts, see the\n * OpenType specification.\n * ( <a href=\"http://www.microsoft.com/typography/otspec/\">http://www.microsoft.com/typography/otspec/</a> ).\n ","description":"","name":"OpenType","qualified_name":"java.awt.font.OpenType","type":3},{"comment":"\n * This class is used with the CHAR_REPLACEMENT attribute.\n * <p>\n * The <code>GraphicAttribute</code> class represents a graphic embedded\n * in text. Clients subclass this class to implement their own char\n * replacement graphics.  Clients wishing to embed shapes and images in\n * text need not subclass this class.  Instead, clients can use the\n * {@link ShapeGraphicAttribute} and {@link ImageGraphicAttribute}\n * classes.\n * <p>\n * Subclasses must ensure that their objects are immutable once they\n * are constructed.  Mutating a <code>GraphicAttribute</code> that\n * is used in a {@link TextLayout} results in undefined behavior from the\n * <code>TextLayout</code>.\n ","description":"","name":"GraphicAttribute","qualified_name":"java.awt.font.GraphicAttribute","type":2},{"comment":"\n * A method type represents the arguments and return type accepted and\n * returned by a method handle, or the arguments and return type passed\n * and expected  by a method handle caller.  Method types must be properly\n * matched between a method handle and all its callers,\n * and the JVM's operations enforce this matching at, specifically\n * during calls to {@link MethodHandle#invokeExact MethodHandle.invokeExact}\n * and {@link MethodHandle#invoke MethodHandle.invoke}, and during execution\n * of {@code invokedynamic} instructions.\n * <p>\n * The structure is a return type accompanied by any number of parameter types.\n * The types (primitive, {@code void}, and reference) are represented by {@link Class} objects.\n * (For ease of exposition, we treat {@code void} as if it were a type.\n * In fact, it denotes the absence of a return type.)\n * <p>\n * All instances of {@code MethodType} are immutable.\n * Two instances are completely interchangeable if they compare equal.\n * Equality depends on pairwise correspondence of the return and parameter types and on nothing else.\n * <p>\n * This type can be created only by factory methods.\n * All factory methods may cache values, though caching is not guaranteed.\n * Some factory methods are static, while others are virtual methods which\n * modify precursor method types, e.g., by changing a selected parameter.\n * <p>\n * Factory methods which operate on groups of parameter types\n * are systematically presented in two versions, so that both Java arrays and\n * Java lists can be used to work with groups of parameter types.\n * The query methods {@code parameterArray} and {@code parameterList}\n * also provide a choice between arrays and lists.\n * <p>\n * {@code MethodType} objects are sometimes derived from bytecode instructions\n * such as {@code invokedynamic}, specifically from the type descriptor strings associated\n * with the instructions in a class file's constant pool.\n * <p>\n * Like classes and strings, method types can also be represented directly\n * in a class file's constant pool as constants.\n * A method type may be loaded by an {@code ldc} instruction which refers\n * to a suitable {@code CONSTANT_MethodType} constant pool entry.\n * The entry refers to a {@code CONSTANT_Utf8} spelling for the descriptor string.\n * (For full details on method type constants,\n * see sections 4.4.8 and 5.4.3.5 of the Java Virtual Machine Specification.)\n * <p>\n * When the JVM materializes a {@code MethodType} from a descriptor string,\n * all classes named in the descriptor must be accessible, and will be loaded.\n * (But the classes need not be initialized, as is the case with a {@code CONSTANT_Class}.)\n * This loading may occur at any time before the {@code MethodType} object is first derived.\n * @author John Rose, JSR 292 EG\n ","description":"","name":"MethodType","qualified_name":"java.lang.invoke.MethodType","type":2},{"comment":"","description":"","name":"ICC_ProfileGray","qualified_name":"java.awt.color.ICC_ProfileGray","type":2},{"comment":"\n     * A type-safe enumeration of possible job destinations.\n     * @since 1.3\n     ","description":"","name":"DestinationType","qualified_name":"java.awt.JobAttributes.DestinationType","type":2},{"comment":"\n * Thrown when a serious I/O error has occurred.\n *\n * @author  Xueming Shen\n * @since   1.6\n ","description":"","name":"IOError","qualified_name":"java.io.IOError","type":2},{"comment":"\n * The adjustment event emitted by Adjustable objects like\n * {@link java.awt.Scrollbar} and {@link java.awt.ScrollPane}.\n * When the user changes the value of the scrolling component,\n * it receives an instance of {@code AdjustmentEvent}.\n * <p>\n * An unspecified behavior will be caused if the {@code id} parameter\n * of any particular {@code AdjustmentEvent} instance is not\n * in the range from {@code ADJUSTMENT_FIRST} to {@code ADJUSTMENT_LAST}.\n * <p>\n * The {@code type} of any {@code AdjustmentEvent} instance takes one of the following\n * values:\n *                     <ul>\n *                     <li> {@code UNIT_INCREMENT}\n *                     <li> {@code UNIT_DECREMENT}\n *                     <li> {@code BLOCK_INCREMENT}\n *                     <li> {@code BLOCK_DECREMENT}\n *                     <li> {@code TRACK}\n *                     </ul>\n * Assigning the value different from listed above will cause an unspecified behavior.\n * @see java.awt.Adjustable\n * @see AdjustmentListener\n *\n * @author Amy Fowler\n * @since 1.1\n ","description":"","name":"AdjustmentEvent","qualified_name":"java.awt.event.AdjustmentEvent","type":2},{"comment":"","description":"","name":"SelectiveAWTEventListener","qualified_name":"java.awt.Toolkit.SelectiveAWTEventListener","type":2},{"comment":"\n * The abstract class <code>MenuComponent</code> is the superclass\n * of all menu-related components. In this respect, the class\n * <code>MenuComponent</code> is analogous to the abstract superclass\n * <code>Component</code> for AWT components.\n * <p>\n * Menu components receive and process AWT events, just as components do,\n * through the method <code>processEvent</code>.\n *\n * @author      Arthur van Hoff\n * @since       JDK1.0\n ","description":"","name":"MenuComponent","qualified_name":"java.awt.MenuComponent","type":2},{"comment":"\n     * This class defines an arc specified in {@code float} precision.\n     * @since 1.2\n     ","description":"","name":"Float","qualified_name":"java.awt.geom.Arc2D.Float","type":2},{"comment":"\n * The interface for objects which have an adjustable numeric value\n * contained within a bounded range of values.\n *\n * @author Amy Fowler\n * @author Tim Prinzing\n ","description":"","name":"Adjustable","qualified_name":"java.awt.Adjustable","type":3},{"comment":"\n * The LightweightPeer interface marks a component as depending upon\n * a native container so window related events can be routed to the\n * component.  Since this only applies to components and their\n * extensions, this interface extends ComponentPeer.\n * <p>\n * The peer interfaces are intended only for use in porting\n * the AWT. They are not intended for use by application\n * developers, and developers should not implement peers\n * nor invoke any of the peer methods directly on the peer\n * instances.\n *\n * @author Timothy Prinzing\n ","description":"","name":"LightweightPeer","qualified_name":"java.awt.peer.LightweightPeer","type":3},{"comment":"\n * A \"PropertyChange\" event gets delivered whenever a bean changes a \"bound\"\n * or \"constrained\" property.  A PropertyChangeEvent object is sent as an\n * argument to the PropertyChangeListener and VetoableChangeListener methods.\n * <P>\n * Normally PropertyChangeEvents are accompanied by the name and the old\n * and new value of the changed property.  If the new value is a primitive\n * type (such as int or boolean) it must be wrapped as the\n * corresponding java.lang.* Object type (such as Integer or Boolean).\n * <P>\n * Null values may be provided for the old and the new values if their\n * true values are not known.\n * <P>\n * An event source may send a null object as the name to indicate that an\n * arbitrary set of if its properties have changed.  In this case the\n * old and new values should also be null.\n ","description":"","name":"PropertyChangeEvent","qualified_name":"java.beans.PropertyChangeEvent","type":2},{"comment":"\n * A utility class to iterate over the path segments of a quadratic curve\n * segment through the PathIterator interface.\n *\n * @author      Jim Graham\n ","description":"","name":"QuadIterator","qualified_name":"java.awt.geom.QuadIterator","type":2},{"comment":"\n * Signals that a malformed string in\n * <a href=\"DataInput.html#modified-utf-8\">modified UTF-8</a>\n * format has been read in a data\n * input stream or by any class that implements the data input\n * interface.\n * See the\n * <a href=\"DataInput.html#modified-utf-8\"><code>DataInput</code></a>\n * class description for the format in\n * which modified UTF-8 strings are read and written.\n *\n * @author  Frank Yellin\n * @see     java.io.DataInput\n * @see     java.io.DataInputStream#readUTF(java.io.DataInput)\n * @see     java.io.IOException\n * @since   JDK1.0\n ","description":"","name":"UTFDataFormatException","qualified_name":"java.io.UTFDataFormatException","type":2},{"comment":"\n * Signals that an unexpected exception has occurred in a static initializer.\n * An <code>ExceptionInInitializerError</code> is thrown to indicate that an\n * exception occurred during evaluation of a static initializer or the\n * initializer for a static variable.\n *\n * <p>As of release 1.4, this exception has been retrofitted to conform to\n * the general purpose exception-chaining mechanism.  The \"saved throwable\n * object\" that may be provided at construction time and accessed via\n * the {@link #getException()} method is now known as the <i>cause</i>,\n * and may be accessed via the {@link Throwable#getCause()} method, as well\n * as the aforementioned \"legacy method.\"\n *\n * @author  Frank Yellin\n * @since   JDK1.1\n ","description":"","name":"ExceptionInInitializerError","qualified_name":"java.lang.ExceptionInInitializerError","type":2},{"comment":"","description":"","name":"Introspector","qualified_name":"java.beans.Introspector","type":2},{"comment":"","description":"","name":"Reader","qualified_name":"java.io.Reader","type":2},{"comment":"","description":"","name":"Reference","qualified_name":"java.lang.ref.Reference","type":2},{"comment":" Perhaps, we should make this method public (later ;)","description":"","name":"DummyRequestFocusController","qualified_name":"java.awt.Component.DummyRequestFocusController","type":2},{"comment":"\n * The <code>ShapeGraphicAttribute</code> class is an implementation of\n * {@link GraphicAttribute} that draws shapes in a {@link TextLayout}.\n * @see GraphicAttribute\n ","description":"","name":"ShapeGraphicAttribute","qualified_name":"java.awt.font.ShapeGraphicAttribute","type":2},{"comment":"\n * An object that may hold resources (such as file or socket handles)\n * until it is closed. The {@link #close()} method of an {@code AutoCloseable}\n * object is called automatically when exiting a {@code\n * try}-with-resources block for which the object has been declared in\n * the resource specification header. This construction ensures prompt\n * release, avoiding resource exhaustion exceptions and errors that\n * may otherwise occur.\n *\n * @apiNote\n * <p>It is possible, and in fact common, for a base class to\n * implement AutoCloseable even though not all of its subclasses or\n * instances will hold releasable resources.  For code that must operate\n * in complete generality, or when it is known that the {@code AutoCloseable}\n * instance requires resource release, it is recommended to use {@code\n * try}-with-resources constructions. However, when using facilities such as\n * {@link java.util.stream.Stream} that support both I/O-based and\n * non-I/O-based forms, {@code try}-with-resources blocks are in\n * general unnecessary when using non-I/O-based forms.\n *\n * @author Josh Bloch\n * @since 1.7\n ","description":"","name":"AutoCloseable","qualified_name":"java.lang.AutoCloseable","type":3},{"comment":"\n * WildcardType represents a wildcard type expression, such as\n * {@code ?}, {@code ? extends Number}, or {@code ? super Integer}.\n *\n * @since 1.5\n ","description":"","name":"WildcardType","qualified_name":"java.lang.reflect.WildcardType","type":3},{"comment":"","description":"","name":"UnmodifiableList_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_util_Collections.UnmodifiableList_PersistenceDelegate","type":2},{"comment":"","description":"","name":"VKCollection","qualified_name":"java.awt.VKCollection","type":2},{"comment":"\n * A {@code CallSite} is a holder for a variable {@link MethodHandle},\n * which is called its {@code target}.\n * An {@code invokedynamic} instruction linked to a {@code CallSite} delegates\n * all calls to the site's current target.\n * A {@code CallSite} may be associated with several {@code invokedynamic}\n * instructions, or it may be \"free floating\", associated with none.\n * In any case, it may be invoked through an associated method handle\n * called its {@linkplain #dynamicInvoker dynamic invoker}.\n * <p>\n * {@code CallSite} is an abstract class which does not allow\n * direct subclassing by users.  It has three immediate,\n * concrete subclasses that may be either instantiated or subclassed.\n * <ul>\n * <li>If a mutable target is not required, an {@code invokedynamic} instruction\n * may be permanently bound by means of a {@linkplain ConstantCallSite constant call site}.\n * <li>If a mutable target is required which has volatile variable semantics,\n * because updates to the target must be immediately and reliably witnessed by other threads,\n * a {@linkplain VolatileCallSite volatile call site} may be used.\n * <li>Otherwise, if a mutable target is required,\n * a {@linkplain MutableCallSite mutable call site} may be used.\n * </ul>\n * <p>\n * A non-constant call site may be <em>relinked</em> by changing its target.\n * The new target must have the same {@linkplain MethodHandle#type() type}\n * as the previous target.\n * Thus, though a call site can be relinked to a series of\n * successive targets, it cannot change its type.\n * <p>\n * Here is a sample use of call sites and bootstrap methods which links every\n * dynamic call site to print its arguments:\n<blockquote><pre>{@code\nstatic void test() throws Throwable {\n    // THE FOLLOWING LINE IS PSEUDOCODE FOR A JVM INSTRUCTION\n    InvokeDynamic[#bootstrapDynamic].baz(\"baz arg\", 2, 3.14);\n}\nprivate static void printArgs(Object... args) {\n  System.out.println(java.util.Arrays.deepToString(args));\n}\nprivate static final MethodHandle printArgs;\nstatic {\n  MethodHandles.Lookup lookup = MethodHandles.lookup();\n  Class thisClass = lookup.lookupClass();  // (who am I?)\n  printArgs = lookup.findStatic(thisClass,\n      \"printArgs\", MethodType.methodType(void.class, Object[].class));\n}\nprivate static CallSite bootstrapDynamic(MethodHandles.Lookup caller, String name, MethodType type) {\n  // ignore caller and name, but match the type:\n  return new ConstantCallSite(printArgs.asType(type));\n}\n}</pre></blockquote>\n * @author John Rose, JSR 292 EG\n ","description":"","name":"CallSite","qualified_name":"java.lang.invoke.CallSite","type":2},{"comment":"\n * This class stores Font, GraphicAttribute, and Decoration intervals\n * on a paragraph of styled text.\n * <p>\n * Currently, this class is optimized for a small number of intervals\n * (preferrably 1).\n ","description":"","name":"StyledParagraph","qualified_name":"java.awt.font.StyledParagraph","type":2},{"comment":"","description":"","name":"Name","qualified_name":"java.lang.invoke.LambdaForm.Name","type":2},{"comment":"\n * An abstract adapter class for receiving keyboard events.\n * The methods in this class are empty. This class exists as\n * convenience for creating listener objects.\n * <P>\n * Extend this class to create a <code>KeyEvent</code> listener\n * and override the methods for the events of interest. (If you implement the\n * <code>KeyListener</code> interface, you have to define all of\n * the methods in it. This abstract class defines null methods for them\n * all, so you can only have to define methods for events you care about.)\n * <P>\n * Create a listener object using the extended class and then register it with\n * a component using the component's <code>addKeyListener</code>\n * method. When a key is pressed, released, or typed,\n * the relevant method in the listener object is invoked,\n * and the <code>KeyEvent</code> is passed to it.\n *\n * @author Carl Quinn\n *\n * @see KeyEvent\n * @see KeyListener\n * @see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/keylistener.html\">Tutorial: Writing a Key Listener</a>\n *\n * @since 1.1\n ","description":"","name":"KeyAdapter","qualified_name":"java.awt.event.KeyAdapter","type":2},{"comment":"\n * Unicode-aware FileSystem for Windows NT/2000.\n *\n * @author Konstantin Kladko\n * @since 1.4\n ","description":"","name":"WinNTFileSystem","qualified_name":"java.io.WinNTFileSystem","type":2},{"comment":"\n * Thrown by the security manager to indicate a security violation.\n *\n * @author  unascribed\n * @see     java.lang.SecurityManager\n * @since   JDK1.0\n ","description":"","name":"SecurityException","qualified_name":"java.lang.SecurityException","type":2},{"comment":"","description":"","name":"ColorPaintContext","qualified_name":"java.awt.ColorPaintContext","type":2},{"comment":"\n * This is an abstract class that provides base functionality\n * for the {@link PropertyChangeSupport PropertyChangeSupport} class\n * and the {@link VetoableChangeSupport VetoableChangeSupport} class.\n *\n * @see PropertyChangeListenerMap\n * @see VetoableChangeListenerMap\n *\n * @author Sergey A. Malenkov\n ","description":"","name":"ChangeListenerMap","qualified_name":"java.beans.ChangeListenerMap","type":2},{"comment":"\n * The management interface for the compilation system of\n * the Java virtual machine.\n *\n * <p> A Java virtual machine has a single instance of the implementation\n * class of this interface.  This instance implementing this interface is\n * an <a href=\"ManagementFactory.html#MXBean\">MXBean</a>\n * that can be obtained by calling\n * the {@link ManagementFactory#getCompilationMXBean} method or\n * from the {@link ManagementFactory#getPlatformMBeanServer\n * platform <tt>MBeanServer</tt>} method.\n *\n * <p>The <tt>ObjectName</tt> for uniquely identifying the MXBean for\n * the compilation system within an MBeanServer is:\n * <blockquote>\n *  {@link ManagementFactory#COMPILATION_MXBEAN_NAME\n *         <tt>java.lang:type=Compilation</tt>}\n * </blockquote>\n *\n * It can be obtained by calling the\n * {@link PlatformManagedObject#getObjectName} method.\n *\n * @see ManagementFactory#getPlatformMXBeans(Class)\n * @see <a href=\"../../../javax/management/package-summary.html\">\n *      JMX Specification.</a>\n * @see <a href=\"package-summary.html#examples\">\n *      Ways to Access MXBeans</a>\n *\n * @author  Mandy Chung\n * @since   1.5\n ","description":"","name":"CompilationMXBean","qualified_name":"java.lang.management.CompilationMXBean","type":3},{"comment":"\n * Provides the actual implementation for the RadialGradientPaint.\n * This is where the pixel processing is done.  A RadialGradienPaint\n * only supports circular gradients, but it should be possible to scale\n * the circle to look approximately elliptical, by means of a\n * gradient transform passed into the RadialGradientPaint constructor.\n *\n * @author Nicholas Talian, Vincent Hardy, Jim Graham, Jerry Evans\n ","description":"","name":"RadialGradientPaintContext","qualified_name":"java.awt.RadialGradientPaintContext","type":2},{"comment":"\n * The <code>BasicStroke</code> class defines a basic set of rendering\n * attributes for the outlines of graphics primitives, which are rendered\n * with a {@link Graphics2D} object that has its Stroke attribute set to\n * this <code>BasicStroke</code>.\n * The rendering attributes defined by <code>BasicStroke</code> describe\n * the shape of the mark made by a pen drawn along the outline of a\n * {@link Shape} and the decorations applied at the ends and joins of\n * path segments of the <code>Shape</code>.\n * These rendering attributes include:\n * <dl>\n * <dt><i>width</i>\n * <dd>The pen width, measured perpendicularly to the pen trajectory.\n * <dt><i>end caps</i>\n * <dd>The decoration applied to the ends of unclosed subpaths and\n * dash segments.  Subpaths that start and end on the same point are\n * still considered unclosed if they do not have a CLOSE segment.\n * See {@link java.awt.geom.PathIterator#SEG_CLOSE SEG_CLOSE}\n * for more information on the CLOSE segment.\n * The three different decorations are: {@link #CAP_BUTT},\n * {@link #CAP_ROUND}, and {@link #CAP_SQUARE}.\n * <dt><i>line joins</i>\n * <dd>The decoration applied at the intersection of two path segments\n * and at the intersection of the endpoints of a subpath that is closed\n * using {@link java.awt.geom.PathIterator#SEG_CLOSE SEG_CLOSE}.\n * The three different decorations are: {@link #JOIN_BEVEL},\n * {@link #JOIN_MITER}, and {@link #JOIN_ROUND}.\n * <dt><i>miter limit</i>\n * <dd>The limit to trim a line join that has a JOIN_MITER decoration.\n * A line join is trimmed when the ratio of miter length to stroke\n * width is greater than the miterlimit value.  The miter length is\n * the diagonal length of the miter, which is the distance between\n * the inside corner and the outside corner of the intersection.\n * The smaller the angle formed by two line segments, the longer\n * the miter length and the sharper the angle of intersection.  The\n * default miterlimit value of 10.0f causes all angles less than\n * 11 degrees to be trimmed.  Trimming miters converts\n * the decoration of the line join to bevel.\n * <dt><i>dash attributes</i>\n * <dd>The definition of how to make a dash pattern by alternating\n * between opaque and transparent sections.\n * </dl>\n * All attributes that specify measurements and distances controlling\n * the shape of the returned outline are measured in the same\n * coordinate system as the original unstroked <code>Shape</code>\n * argument.  When a <code>Graphics2D</code> object uses a\n * <code>Stroke</code> object to redefine a path during the execution\n * of one of its <code>draw</code> methods, the geometry is supplied\n * in its original form before the <code>Graphics2D</code> transform\n * attribute is applied.  Therefore, attributes such as the pen width\n * are interpreted in the user space coordinate system of the\n * <code>Graphics2D</code> object and are subject to the scaling and\n * shearing effects of the user-space-to-device-space transform in that\n * particular <code>Graphics2D</code>.\n * For example, the width of a rendered shape's outline is determined\n * not only by the width attribute of this <code>BasicStroke</code>,\n * but also by the transform attribute of the\n * <code>Graphics2D</code> object.  Consider this code:\n * <blockquote><tt>\n *      // sets the Graphics2D object's Transform attribute\n *      g2d.scale(10, 10);\n *      // sets the Graphics2D object's Stroke attribute\n *      g2d.setStroke(new BasicStroke(1.5f));\n * </tt></blockquote>\n * Assuming there are no other scaling transforms added to the\n * <code>Graphics2D</code> object, the resulting line\n * will be approximately 15 pixels wide.\n * As the example code demonstrates, a floating-point line\n * offers better precision, especially when large transforms are\n * used with a <code>Graphics2D</code> object.\n * When a line is diagonal, the exact width depends on how the\n * rendering pipeline chooses which pixels to fill as it traces the\n * theoretical widened outline.  The choice of which pixels to turn\n * on is affected by the antialiasing attribute because the\n * antialiasing rendering pipeline can choose to color\n * partially-covered pixels.\n * <p>\n * For more information on the user space coordinate system and the\n * rendering process, see the <code>Graphics2D</code> class comments.\n * @see Graphics2D\n * @author Jim Graham\n ","description":"","name":"BasicStroke","qualified_name":"java.awt.BasicStroke","type":2},{"comment":"","description":"","name":"Beans","qualified_name":"java.beans.Beans","type":2},{"comment":"","description":"","name":"DragSourceDropEvent","qualified_name":"java.awt.dnd.DragSourceDropEvent","type":2},{"comment":"\n     * Atomic operations support.\n     ","description":"","name":"Atomic","qualified_name":"java.lang.Class.Atomic","type":2},{"comment":" That way we can lazily load the code and set up the constants.","description":"","name":"BindCaller","qualified_name":"java.lang.invoke.MethodHandleImpl.BindCaller","type":2},{"comment":"\n     * Defines the base type of all keys used along with the\n     * {@link RenderingHints} class to control various\n     * algorithm choices in the rendering and imaging pipelines.\n     * Instances of this class are immutable and unique which\n     * means that tests for matches can be made using the\n     * {@code ==} operator instead of the more expensive\n     * {@code equals()} method.\n     ","description":"","name":"Key","qualified_name":"java.awt.RenderingHints.Key","type":2},{"comment":"non-public","description":"","name":"MethodHandleStatics","qualified_name":"java.lang.invoke.MethodHandleStatics","type":2},{"comment":"\n * Utility methods for packing/unpacking primitive values in/out of byte arrays\n * using big-endian byte ordering.\n ","description":"","name":"Bits","qualified_name":"java.io.Bits","type":2},{"comment":" will appear blank).","description":"","name":"javax_swing_JFrame_PersistenceDelegate","qualified_name":"java.beans.MetaData.javax_swing_JFrame_PersistenceDelegate","type":2},{"comment":"\n     * This class implements accessibility support for the\n     * <code>TextArea</code> class.  It provides an implementation of the\n     * Java Accessibility API appropriate to text area user-interface elements.\n     * @since 1.3\n     ","description":"","name":"AccessibleAWTTextArea","qualified_name":"java.awt.TextArea.AccessibleAWTTextArea","type":2},{"comment":"","description":"","name":"EmptyList_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_util_Collections.EmptyList_PersistenceDelegate","type":2},{"comment":"","description":"","name":"NameComparator","qualified_name":"java.lang.ProcessEnvironment.NameComparator","type":2},{"comment":"\n     * Pre-initialized NamedFunctions for bootstrapping purposes.\n     * Factored in an inner class to delay initialization until first usage.\n     ","description":"","name":"Lazy","qualified_name":"java.lang.invoke.DirectMethodHandle.Lazy","type":2},{"comment":"","description":"","name":"CpPatch","qualified_name":"java.lang.invoke.InvokerBytecodeGenerator.CpPatch","type":2},{"comment":"\n * InvocationTargetException is a checked exception that wraps\n * an exception thrown by an invoked method or constructor.\n *\n * <p>As of release 1.4, this exception has been retrofitted to conform to\n * the general purpose exception-chaining mechanism.  The \"target exception\"\n * that is provided at construction time and accessed via the\n * {@link #getTargetException()} method is now known as the <i>cause</i>,\n * and may be accessed via the {@link Throwable#getCause()} method,\n * as well as the aforementioned \"legacy method.\"\n *\n * @see Method\n * @see Constructor\n ","description":"","name":"InvocationTargetException","qualified_name":"java.lang.reflect.InvocationTargetException","type":2},{"comment":"\n * The <code>BufferStrategy</code> class represents the mechanism with which\n * to organize complex memory on a particular <code>Canvas</code> or\n * <code>Window</code>.  Hardware and software limitations determine whether and\n * how a particular buffer strategy can be implemented.  These limitations\n * are detectable through the capabilities of the\n * <code>GraphicsConfiguration</code> used when creating the\n * <code>Canvas</code> or <code>Window</code>.\n * <p>\n * It is worth noting that the terms <i>buffer</i> and <i>surface</i> are meant\n * to be synonymous: an area of contiguous memory, either in video device\n * memory or in system memory.\n * <p>\n * There are several types of complex buffer strategies, including\n * sequential ring buffering and blit buffering.\n * Sequential ring buffering (i.e., double or triple\n * buffering) is the most common; an application draws to a single <i>back\n * buffer</i> and then moves the contents to the front (display) in a single\n * step, either by copying the data or moving the video pointer.\n * Moving the video pointer exchanges the buffers so that the first buffer\n * drawn becomes the <i>front buffer</i>, or what is currently displayed on the\n * device; this is called <i>page flipping</i>.\n * <p>\n * Alternatively, the contents of the back buffer can be copied, or\n * <i>blitted</i> forward in a chain instead of moving the video pointer.\n * <pre>{@code\n * Double buffering:\n *\n *                    ***********         ***********\n *                    *         * ------> *         *\n * [To display] <---- * Front B *   Show  * Back B. * <---- Rendering\n *                    *         * <------ *         *\n *                    ***********         ***********\n *\n * Triple buffering:\n *\n * [To      ***********         ***********        ***********\n * display] *         * --------+---------+------> *         *\n *    <---- * Front B *   Show  * Mid. B. *        * Back B. * <---- Rendering\n *          *         * <------ *         * <----- *         *\n *          ***********         ***********        ***********\n *\n * }</pre>\n * <p>\n * Here is an example of how buffer strategies can be created and used:\n * <pre><code>\n *\n * // Check the capabilities of the GraphicsConfiguration\n * ...\n *\n * // Create our component\n * Window w = new Window(gc);\n *\n * // Show our window\n * w.setVisible(true);\n *\n * // Create a general double-buffering strategy\n * w.createBufferStrategy(2);\n * BufferStrategy strategy = w.getBufferStrategy();\n *\n * // Main loop\n * while (!done) {\n *     // Prepare for rendering the next frame\n *     // ...\n *\n *     // Render single frame\n *     do {\n *         // The following loop ensures that the contents of the drawing buffer\n *         // are consistent in case the underlying surface was recreated\n *         do {\n *             // Get a new graphics context every time through the loop\n *             // to make sure the strategy is validated\n *             Graphics graphics = strategy.getDrawGraphics();\n *\n *             // Render to graphics\n *             // ...\n *\n *             // Dispose the graphics\n *             graphics.dispose();\n *\n *             // Repeat the rendering if the drawing buffer contents\n *             // were restored\n *         } while (strategy.contentsRestored());\n *\n *         // Display the buffer\n *         strategy.show();\n *\n *         // Repeat the rendering if the drawing buffer was lost\n *     } while (strategy.contentsLost());\n * }\n *\n * // Dispose the window\n * w.setVisible(false);\n * w.dispose();\n * </code></pre>\n *\n * @see java.awt.Window\n * @see java.awt.Canvas\n * @see java.awt.GraphicsConfiguration\n * @see VolatileImage\n * @author Michael Martak\n * @since 1.4\n ","description":"","name":"BufferStrategy","qualified_name":"java.awt.image.BufferStrategy","type":2},{"comment":"\n * Thrown to indicate that an array has been accessed with an\n * illegal index. The index is either negative or greater than or\n * equal to the size of the array.\n *\n * @author  unascribed\n * @since   JDK1.0\n ","description":"","name":"ArrayIndexOutOfBoundsException","qualified_name":"java.lang.ArrayIndexOutOfBoundsException","type":2},{"comment":"","description":"","name":"DropTargetDropEvent","qualified_name":"java.awt.dnd.DropTargetDropEvent","type":2},{"comment":"","description":"","name":"TempDirectory","qualified_name":"java.io.File.TempDirectory","type":2},{"comment":"","description":"","name":"IntrospectionException","qualified_name":"java.beans.IntrospectionException","type":2},{"comment":"","description":"","name":"TextFlavorComparator","qualified_name":"java.awt.datatransfer.DataFlavor.TextFlavorComparator","type":2},{"comment":"\n * Common superclass of exceptions thrown by reflective operations in\n * core reflection.\n *\n * @see LinkageError\n * @since 1.7\n ","description":"","name":"ReflectiveOperationException","qualified_name":"java.lang.ReflectiveOperationException","type":2},{"comment":"","description":"","name":"AWTInvocationLock","qualified_name":"","type":2},{"comment":"non-public","description":"","name":"MemberName","qualified_name":"java.lang.invoke.MemberName","type":2},{"comment":"\n * The <code>ImagingOpException</code> is thrown if one of the\n * {@link BufferedImageOp} or {@link RasterOp} filter methods cannot\n * process the image.\n ","description":"","name":"ImagingOpException","qualified_name":"java.awt.image.ImagingOpException","type":2},{"comment":"\n * The peer interface for {@link Choice}.\n *\n * The peer interfaces are intended only for use in porting\n * the AWT. They are not intended for use by application\n * developers, and developers should not implement peers\n * nor invoke any of the peer methods directly on the peer\n * instances.\n ","description":"","name":"ChoicePeer","qualified_name":"java.awt.peer.ChoicePeer","type":3},{"comment":"\n * A mutable sequence of characters.\n * <p>\n * Implements a modifiable string. At any point in time it contains some\n * particular sequence of characters, but the length and content of the\n * sequence can be changed through certain method calls.\n *\n * <p>Unless otherwise noted, passing a {@code null} argument to a constructor\n * or method in this class will cause a {@link NullPointerException} to be\n * thrown.\n *\n * @author      Michael McCloskey\n * @author      Martin Buchholz\n * @author      Ulf Zibis\n * @since       1.5\n ","description":"","name":"AbstractStringBuilder","qualified_name":"java.lang.AbstractStringBuilder","type":2},{"comment":"\n * Serialized form of a lambda expression.  The properties of this class\n * represent the information that is present at the lambda factory site, including\n * static metafactory arguments such as the identity of the primary functional\n * interface method and the identity of the implementation method, as well as\n * dynamic metafactory arguments such as values captured from the lexical scope\n * at the time of lambda capture.\n *\n * <p>Implementors of serializable lambdas, such as compilers or language\n * runtime libraries, are expected to ensure that instances deserialize properly.\n * One means to do so is to ensure that the {@code writeReplace} method returns\n * an instance of {@code SerializedLambda}, rather than allowing default\n * serialization to proceed.\n *\n * <p>{@code SerializedLambda} has a {@code readResolve} method that looks for\n * a (possibly private) static method called\n * {@code $deserializeLambda$(SerializedLambda)} in the capturing class, invokes\n * that with itself as the first argument, and returns the result.  Lambda classes\n * implementing {@code $deserializeLambda$} are responsible for validating\n * that the properties of the {@code SerializedLambda} are consistent with a\n * lambda actually captured by that class.\n *\n * @see LambdaMetafactory\n ","description":"","name":"SerializedLambda","qualified_name":"java.lang.invoke.SerializedLambda","type":2},{"comment":"\n * Context during upcalls from object stream to class-defined\n * readObject/writeObject methods.\n * Holds object currently being deserialized and descriptor for current class.\n *\n * This context keeps track of the thread it was constructed on, and allows\n * only a single call of defaultReadObject, readFields, defaultWriteObject\n * or writeFields which must be invoked on the same thread before the class's\n * readObject/writeObject method has returned.\n * If not set to the current thread, the getObj method throws NotActiveException.\n ","description":"","name":"SerialCallbackContext","qualified_name":"java.io.SerialCallbackContext","type":2},{"comment":"","description":"","name":"CharacterData00","qualified_name":"java.lang.CharacterData00","type":2},{"comment":"non-public","description":"","name":"DelegatingMethodHandle","qualified_name":"java.lang.invoke.DelegatingMethodHandle","type":2},{"comment":"\n * An object that encapsulates the parameter list of a MimeType\n * as defined in RFC 2045 and 2046.\n *\n * @author jeff.dunn@eng.sun.com\n ","description":"","name":"MimeTypeParameterList","qualified_name":"java.awt.datatransfer.MimeTypeParameterList","type":2},{"comment":"\n * An abstract adapter class for receiving drop target events. The methods in\n * this class are empty. This class exists only as a convenience for creating\n * listener objects.\n * <p>\n * Extend this class to create a <code>DropTargetEvent</code> listener\n * and override the methods for the events of interest. (If you implement the\n * <code>DropTargetListener</code> interface, you have to define all of\n * the methods in it. This abstract class defines a null implementation for\n * every method except <code>drop(DropTargetDropEvent)</code>, so you only have\n * to define methods for events you care about.) You must provide an\n * implementation for at least <code>drop(DropTargetDropEvent)</code>. This\n * method cannot have a null implementation because its specification requires\n * that you either accept or reject the drop, and, if accepted, indicate\n * whether the drop was successful.\n * <p>\n * Create a listener object using the extended class and then register it with\n * a <code>DropTarget</code>. When the drag enters, moves over, or exits\n * the operable part of the drop site for that <code>DropTarget</code>, when\n * the drop action changes, and when the drop occurs, the relevant method in\n * the listener object is invoked, and the <code>DropTargetEvent</code> is\n * passed to it.\n * <p>\n * The operable part of the drop site for the <code>DropTarget</code> is\n * the part of the associated <code>Component</code>'s geometry that is not\n * obscured by an overlapping top-level window or by another\n * <code>Component</code> higher in the Z-order that has an associated active\n * <code>DropTarget</code>.\n * <p>\n * During the drag, the data associated with the current drag operation can be\n * retrieved by calling <code>getTransferable()</code> on\n * <code>DropTargetDragEvent</code> instances passed to the listener's\n * methods.\n * <p>\n * Note that <code>getTransferable()</code> on the\n * <code>DropTargetDragEvent</code> instance should only be called within the\n * respective listener's method and all the necessary data should be retrieved\n * from the returned <code>Transferable</code> before that method returns.\n *\n * @see DropTargetEvent\n * @see DropTargetListener\n *\n * @author David Mendenhall\n * @since 1.4\n ","description":"","name":"DropTargetAdapter","qualified_name":"java.awt.dnd.DropTargetAdapter","type":2},{"comment":"","description":"","name":"Function","qualified_name":"java.awt.font.TextLine.Function","type":2},{"comment":" Mark arbitrary method handle as intrinsic.\n     * InvokerBytecodeGenerator uses this info to produce more efficient bytecode shape. ","description":"","name":"IntrinsicMethodHandle","qualified_name":"java.lang.invoke.MethodHandleImpl.IntrinsicMethodHandle","type":2},{"comment":"","description":"","name":"Terminator","qualified_name":"java.lang.Terminator","type":2},{"comment":"\n     * This is a {@link ChangeListenerMap ChangeListenerMap} implementation\n     * that works with {@link PropertyChangeListener PropertyChangeListener} objects.\n     ","description":"","name":"PropertyChangeListenerMap","qualified_name":"java.beans.PropertyChangeSupport.PropertyChangeListenerMap","type":2},{"comment":"\n * The <code>DataOutput</code> interface provides\n * for converting data from any of the Java\n * primitive types to a series of bytes and\n * writing these bytes to a binary stream.\n * There is  also a facility for converting\n * a <code>String</code> into\n * <a href=\"DataInput.html#modified-utf-8\">modified UTF-8</a>\n * format and writing the resulting series\n * of bytes.\n * <p>\n * For all the methods in this interface that\n * write bytes, it is generally true that if\n * a byte cannot be written for any reason,\n * an <code>IOException</code> is thrown.\n *\n * @author  Frank Yellin\n * @see     java.io.DataInput\n * @see     java.io.DataOutputStream\n * @since   JDK1.0\n ","description":"","name":"DataOutput","qualified_name":"java.io.DataOutput","type":3},{"comment":"\n * Represents an annotated element of the program currently running in this\n * VM.  This interface allows annotations to be read reflectively.  All\n * annotations returned by methods in this interface are immutable and\n * serializable. The arrays returned by methods of this interface may be modified\n * by callers without affecting the arrays returned to other callers.\n *\n * <p>The {@link #getAnnotationsByType(Class)} and {@link\n * #getDeclaredAnnotationsByType(Class)} methods support multiple\n * annotations of the same type on an element. If the argument to\n * either method is a repeatable annotation type (JLS 9.6), then the\n * method will \"look through\" a container annotation (JLS 9.7), if\n * present, and return any annotations inside the container. Container\n * annotations may be generated at compile-time to wrap multiple\n * annotations of the argument type.\n *\n * <p>The terms <em>directly present</em>, <em>indirectly present</em>,\n * <em>present</em>, and <em>associated</em> are used throughout this\n * interface to describe precisely which annotations are returned by\n * methods:\n *\n * <ul>\n *\n * <li> An annotation <i>A</i> is <em>directly present</em> on an\n * element <i>E</i> if <i>E</i> has a {@code\n * RuntimeVisibleAnnotations} or {@code\n * RuntimeVisibleParameterAnnotations} or {@code\n * RuntimeVisibleTypeAnnotations} attribute, and the attribute\n * contains <i>A</i>.\n *\n * <li>An annotation <i>A</i> is <em>indirectly present</em> on an\n * element <i>E</i> if <i>E</i> has a {@code RuntimeVisibleAnnotations} or\n * {@code RuntimeVisibleParameterAnnotations} or {@code RuntimeVisibleTypeAnnotations}\n * attribute, and <i>A</i> 's type is repeatable, and the attribute contains\n * exactly one annotation whose value element contains <i>A</i> and whose\n * type is the containing annotation type of <i>A</i> 's type.\n *\n * <li>An annotation <i>A</i> is present on an element <i>E</i> if either:\n *\n * <ul>\n *\n * <li><i>A</i> is directly present on <i>E</i>; or\n *\n * <li>No annotation of <i>A</i> 's type is directly present on\n * <i>E</i>, and <i>E</i> is a class, and <i>A</i> 's type is\n * inheritable, and <i>A</i> is present on the superclass of <i>E</i>.\n *\n * </ul>\n *\n * <li>An annotation <i>A</i> is <em>associated</em> with an element <i>E</i>\n * if either:\n *\n * <ul>\n *\n * <li><i>A</i> is directly or indirectly present on <i>E</i>; or\n *\n * <li>No annotation of <i>A</i> 's type is directly or indirectly\n * present on <i>E</i>, and <i>E</i> is a class, and <i>A</i>'s type\n * is inheritable, and <i>A</i> is associated with the superclass of\n * <i>E</i>.\n *\n * </ul>\n *\n * </ul>\n *\n * <p>The table below summarizes which kind of annotation presence\n * different methods in this interface examine.\n *\n * <table border>\n * <caption>Overview of kind of presence detected by different AnnotatedElement methods</caption>\n * <tr><th colspan=2></th><th colspan=4>Kind of Presence</th>\n * <tr><th colspan=2>Method</th><th>Directly Present</th><th>Indirectly Present</th><th>Present</th><th>Associated</th>\n * <tr><td align=right>{@code T}</td><td>{@link #getAnnotation(Class) getAnnotation(Class&lt;T&gt;)}\n * <td></td><td></td><td>X</td><td></td>\n * </tr>\n * <tr><td align=right>{@code Annotation[]}</td><td>{@link #getAnnotations getAnnotations()}\n * <td></td><td></td><td>X</td><td></td>\n * </tr>\n * <tr><td align=right>{@code T[]}</td><td>{@link #getAnnotationsByType(Class) getAnnotationsByType(Class&lt;T&gt;)}\n * <td></td><td></td><td></td><td>X</td>\n * </tr>\n * <tr><td align=right>{@code T}</td><td>{@link #getDeclaredAnnotation(Class) getDeclaredAnnotation(Class&lt;T&gt;)}\n * <td>X</td><td></td><td></td><td></td>\n * </tr>\n * <tr><td align=right>{@code Annotation[]}</td><td>{@link #getDeclaredAnnotations getDeclaredAnnotations()}\n * <td>X</td><td></td><td></td><td></td>\n * </tr>\n * <tr><td align=right>{@code T[]}</td><td>{@link #getDeclaredAnnotationsByType(Class) getDeclaredAnnotationsByType(Class&lt;T&gt;)}\n * <td>X</td><td>X</td><td></td><td></td>\n * </tr>\n * </table>\n *\n * <p>For an invocation of {@code get[Declared]AnnotationsByType( Class <\n * T >)}, the order of annotations which are directly or indirectly\n * present on an element <i>E</i> is computed as if indirectly present\n * annotations on <i>E</i> are directly present on <i>E</i> in place\n * of their container annotation, in the order in which they appear in\n * the value element of the container annotation.\n *\n * <p>There are several compatibility concerns to keep in mind if an\n * annotation type <i>T</i> is originally <em>not</em> repeatable and\n * later modified to be repeatable.\n *\n * The containing annotation type for <i>T</i> is <i>TC</i>.\n *\n * <ul>\n *\n * <li>Modifying <i>T</i> to be repeatable is source and binary\n * compatible with existing uses of <i>T</i> and with existing uses\n * of <i>TC</i>.\n *\n * That is, for source compatibility, source code with annotations of\n * type <i>T</i> or of type <i>TC</i> will still compile. For binary\n * compatibility, class files with annotations of type <i>T</i> or of\n * type <i>TC</i> (or with other kinds of uses of type <i>T</i> or of\n * type <i>TC</i>) will link against the modified version of <i>T</i>\n * if they linked against the earlier version.\n *\n * (An annotation type <i>TC</i> may informally serve as an acting\n * containing annotation type before <i>T</i> is modified to be\n * formally repeatable. Alternatively, when <i>T</i> is made\n * repeatable, <i>TC</i> can be introduced as a new type.)\n *\n * <li>If an annotation type <i>TC</i> is present on an element, and\n * <i>T</i> is modified to be repeatable with <i>TC</i> as its\n * containing annotation type then:\n *\n * <ul>\n *\n * <li>The change to <i>T</i> is behaviorally compatible with respect\n * to the {@code get[Declared]Annotation(Class<T>)} (called with an\n * argument of <i>T</i> or <i>TC</i>) and {@code\n * get[Declared]Annotations()} methods because the results of the\n * methods will not change due to <i>TC</i> becoming the containing\n * annotation type for <i>T</i>.\n *\n * <li>The change to <i>T</i> changes the results of the {@code\n * get[Declared]AnnotationsByType(Class<T>)} methods called with an\n * argument of <i>T</i>, because those methods will now recognize an\n * annotation of type <i>TC</i> as a container annotation for <i>T</i>\n * and will \"look through\" it to expose annotations of type <i>T</i>.\n *\n * </ul>\n *\n * <li>If an annotation of type <i>T</i> is present on an\n * element and <i>T</i> is made repeatable and more annotations of\n * type <i>T</i> are added to the element:\n *\n * <ul>\n *\n * <li> The addition of the annotations of type <i>T</i> is both\n * source compatible and binary compatible.\n *\n * <li>The addition of the annotations of type <i>T</i> changes the results\n * of the {@code get[Declared]Annotation(Class<T>)} methods and {@code\n * get[Declared]Annotations()} methods, because those methods will now\n * only see a container annotation on the element and not see an\n * annotation of type <i>T</i>.\n *\n * <li>The addition of the annotations of type <i>T</i> changes the\n * results of the {@code get[Declared]AnnotationsByType(Class<T>)}\n * methods, because their results will expose the additional\n * annotations of type <i>T</i> whereas previously they exposed only a\n * single annotation of type <i>T</i>.\n *\n * </ul>\n *\n * </ul>\n *\n * <p>If an annotation returned by a method in this interface contains\n * (directly or indirectly) a {@link Class}-valued member referring to\n * a class that is not accessible in this VM, attempting to read the class\n * by calling the relevant Class-returning method on the returned annotation\n * will result in a {@link TypeNotPresentException}.\n *\n * <p>Similarly, attempting to read an enum-valued member will result in\n * a {@link EnumConstantNotPresentException} if the enum constant in the\n * annotation is no longer present in the enum type.\n *\n * <p>If an annotation type <i>T</i> is (meta-)annotated with an\n * {@code @Repeatable} annotation whose value element indicates a type\n * <i>TC</i>, but <i>TC</i> does not declare a {@code value()} method\n * with a return type of <i>T</i>{@code []}, then an exception of type\n * {@link java.lang.annotation.AnnotationFormatError} is thrown.\n *\n * <p>Finally, attempting to read a member whose definition has evolved\n * incompatibly will result in a {@link\n * java.lang.annotation.AnnotationTypeMismatchException} or an\n * {@link java.lang.annotation.IncompleteAnnotationException}.\n *\n * @see java.lang.EnumConstantNotPresentException\n * @see java.lang.TypeNotPresentException\n * @see AnnotationFormatError\n * @see java.lang.annotation.AnnotationTypeMismatchException\n * @see java.lang.annotation.IncompleteAnnotationException\n * @since 1.5\n * @author Josh Bloch\n ","description":"","name":"AnnotatedElement","qualified_name":"java.lang.reflect.AnnotatedElement","type":3},{"comment":"","description":"","name":"CharArrayIterator","qualified_name":"java.awt.font.CharArrayIterator","type":2},{"comment":"","description":"","name":"PrintAllCallback","qualified_name":"java.awt.GraphicsCallback.PrintAllCallback","type":2},{"comment":"","description":"","name":"InputMethod","qualified_name":"java.awt.im.spi.InputMethod","type":3},{"comment":"\n * The peer interface for menus. This is used by {@link Menu}.\n *\n * The peer interfaces are intended only for use in porting\n * the AWT. They are not intended for use by application\n * developers, and developers should not implement peers\n * nor invoke any of the peer methods directly on the peer\n * instances.\n ","description":"","name":"MenuPeer","qualified_name":"java.awt.peer.MenuPeer","type":3},{"comment":"","description":"","name":"BeanContextServiceProviderBeanInfo","qualified_name":"java.beans.beancontext.BeanContextServiceProviderBeanInfo","type":3},{"comment":"\n * A collection of assertion status directives (such as \"enable assertions\n * in package p\" or \"disable assertions in class c\").  This class is used by\n * the JVM to communicate the assertion status directives implied by\n * the <tt>java</tt> command line flags <tt>-enableassertions</tt>\n * (<tt>-ea</tt>) and <tt>-disableassertions</tt> (<tt>-da</tt>).\n *\n * @since  1.4\n * @author Josh Bloch\n ","description":"","name":"AssertionStatusDirectives","qualified_name":"java.lang.AssertionStatusDirectives","type":2},{"comment":"\n     * Inner class of CheckboxMenuItem used to provide default support for\n     * accessibility.  This class is not meant to be used directly by\n     * application developers, but is instead meant only to be\n     * subclassed by menu component developers.\n     * <p>\n     * This class implements accessibility support for the\n     * <code>CheckboxMenuItem</code> class.  It provides an implementation\n     * of the Java Accessibility API appropriate to checkbox menu item\n     * user-interface elements.\n     * @since 1.3\n     ","description":"","name":"AccessibleAWTCheckboxMenuItem","qualified_name":"java.awt.CheckboxMenuItem.AccessibleAWTCheckboxMenuItem","type":2},{"comment":"\n * The root event class for all component-level input events.\n *\n * Input events are delivered to listeners before they are\n * processed normally by the source where they originated.\n * This allows listeners and component subclasses to \"consume\"\n * the event so that the source will not process them in their\n * default manner.  For example, consuming mousePressed events\n * on a Button component will prevent the Button from being\n * activated.\n *\n * @author Carl Quinn\n *\n * @see KeyEvent\n * @see KeyAdapter\n * @see MouseEvent\n * @see MouseAdapter\n * @see MouseMotionAdapter\n *\n * @since 1.1\n ","description":"","name":"InputEvent","qualified_name":"java.awt.event.InputEvent","type":2},{"comment":"","description":"","name":"InputContext","qualified_name":"java.awt.im.InputContext","type":2},{"comment":"","description":"","name":"ManagementPermission","qualified_name":"java.lang.management.ManagementPermission","type":2},{"comment":"\n * The {@code Compiler} class is provided to support Java-to-native-code\n * compilers and related services. By design, the {@code Compiler} class does\n * nothing; it serves as a placeholder for a JIT compiler implementation.\n *\n * <p> When the Java Virtual Machine first starts, it determines if the system\n * property {@code java.compiler} exists. (System properties are accessible\n * through {@link System#getProperty(String)} and {@link\n * System#getProperty(String, String)}.  If so, it is assumed to be the name of\n * a library (with a platform-dependent exact location and type); {@link\n * System#loadLibrary} is called to load that library. If this loading\n * succeeds, the function named {@code java_lang_Compiler_start()} in that\n * library is called.\n *\n * <p> If no compiler is available, these methods do nothing.\n *\n * @author  Frank Yellin\n * @since   JDK1.0\n ","description":"","name":"Compiler","qualified_name":"java.lang.Compiler","type":2},{"comment":"\n * The peer interface for {@link Panel}. This is a subinterface of\n * ContainerPeer and does not declare any additional methods because a Panel\n * is just that, a concrete Container.\n *\n * The peer interfaces are intended only for use in porting\n * the AWT. They are not intended for use by application\n * developers, and developers should not implement peers\n * nor invoke any of the peer methods directly on the peer\n * instances.\n ","description":"","name":"PanelPeer","qualified_name":"java.awt.peer.PanelPeer","type":3},{"comment":"\n * An abstract class which initiates and executes a print job.\n * It provides access to a print graphics object which renders\n * to an appropriate print device.\n *\n * @see Toolkit#getPrintJob\n *\n * @author      Amy Fowler\n ","description":"","name":"PrintJob","qualified_name":"java.awt.PrintJob","type":2},{"comment":"\n     * Inner class for flipping buffers on a component.  That component must\n     * be a <code>Canvas</code> or <code>Window</code>.\n     * @see Canvas\n     * @see Window\n     * @see java.awt.image.BufferStrategy\n     * @author Michael Martak\n     * @since 1.4\n     ","description":"","name":"SingleBufferStrategy","qualified_name":"java.awt.Component.SingleBufferStrategy","type":2},{"comment":"\n     * This class implements accessibility support for the\n     * <code>Checkbox</code> class.  It provides an implementation of the\n     * Java Accessibility API appropriate to checkbox user-interface elements.\n     * @since 1.3\n     ","description":"","name":"AccessibleAWTCheckbox","qualified_name":"java.awt.Checkbox.AccessibleAWTCheckbox","type":2},{"comment":"\n * The {@code Array} class provides static methods to dynamically create and\n * access Java arrays.\n *\n * <p>{@code Array} permits widening conversions to occur during a get or set\n * operation, but throws an {@code IllegalArgumentException} if a narrowing\n * conversion would occur.\n *\n * @author Nakul Saraiya\n ","description":"","name":"Array","qualified_name":"java.lang.reflect.Array","type":2},{"comment":"","description":"","name":"BCSSChild","qualified_name":"java.beans.beancontext.BeanContextServicesSupport.BCSSChild","type":2},{"comment":"\n * A class which extends the {@code EventListenerProxy}\n * specifically for adding a {@code PropertyChangeListener}\n * with a \"bound\" property.\n * Instances of this class can be added\n * as {@code PropertyChangeListener}s to a bean\n * which supports firing property change events.\n * <p>\n * If the object has a {@code getPropertyChangeListeners} method\n * then the array returned could be a mixture of {@code PropertyChangeListener}\n * and {@code PropertyChangeListenerProxy} objects.\n *\n * @see java.util.EventListenerProxy\n * @see PropertyChangeSupport#getPropertyChangeListeners\n * @since 1.4\n ","description":"","name":"PropertyChangeListenerProxy","qualified_name":"java.beans.PropertyChangeListenerProxy","type":2},{"comment":"\n * A {@code Closeable} is a source or destination of data that can be closed.\n * The close method is invoked to release resources that the object is\n * holding (such as open files).\n *\n * @since 1.5\n ","description":"","name":"Closeable","qualified_name":"java.io.Closeable","type":3},{"comment":"","description":"","name":"Transferable","qualified_name":"java.awt.datatransfer.Transferable","type":3},{"comment":"\n * This class is an input stream filter that provides the added\n * functionality of keeping track of the current line number.\n * <p>\n * A line is a sequence of bytes ending with a carriage return\n * character ({@code '\\u005Cr'}), a newline character\n * ({@code '\\u005Cn'}), or a carriage return character followed\n * immediately by a linefeed character. In all three cases, the line\n * terminating character(s) are returned as a single newline character.\n * <p>\n * The line number begins at {@code 0}, and is incremented by\n * {@code 1} when a {@code read} returns a newline character.\n *\n * @author     Arthur van Hoff\n * @see        java.io.LineNumberReader\n * @since      JDK1.0\n * @deprecated This class incorrectly assumes that bytes adequately represent\n *             characters.  As of JDK&nbsp;1.1, the preferred way to operate on\n *             character streams is via the new character-stream classes, which\n *             include a class for counting line numbers.\n ","description":"","name":"LineNumberInputStream","qualified_name":"java.io.LineNumberInputStream","type":2},{"comment":"","description":"","name":"WrappedPrintStream","qualified_name":"java.lang.Throwable.WrappedPrintStream","type":2},{"comment":"","description":"","name":"DesignMode","qualified_name":"java.beans.DesignMode","type":3},{"comment":"","description":"","name":"ImageGraphicAttribute","qualified_name":"java.awt.font.ImageGraphicAttribute","type":2},{"comment":"","description":"","name":"MouseDragGestureRecognizer","qualified_name":"java.awt.dnd.MouseDragGestureRecognizer","type":2},{"comment":"\n * A Dialog is a top-level window with a title and a border\n * that is typically used to take some form of input from the user.\n *\n * The size of the dialog includes any area designated for the\n * border.  The dimensions of the border area can be obtained\n * using the <code>getInsets</code> method, however, since\n * these dimensions are platform-dependent, a valid insets\n * value cannot be obtained until the dialog is made displayable\n * by either calling <code>pack</code> or <code>show</code>.\n * Since the border area is included in the overall size of the\n * dialog, the border effectively obscures a portion of the dialog,\n * constraining the area available for rendering and/or displaying\n * subcomponents to the rectangle which has an upper-left corner\n * location of <code>(insets.left, insets.top)</code>, and has a size of\n * <code>width - (insets.left + insets.right)</code> by\n * <code>height - (insets.top + insets.bottom)</code>.\n * <p>\n * The default layout for a dialog is <code>BorderLayout</code>.\n * <p>\n * A dialog may have its native decorations (i.e. Frame &amp; Titlebar) turned off\n * with <code>setUndecorated</code>.  This can only be done while the dialog\n * is not {@link Component#isDisplayable() displayable}.\n * <p>\n * A dialog may have another window as its owner when it's constructed.  When\n * the owner window of a visible dialog is minimized, the dialog will\n * automatically be hidden from the user. When the owner window is subsequently\n * restored, the dialog is made visible to the user again.\n * <p>\n * In a multi-screen environment, you can create a <code>Dialog</code>\n * on a different screen device than its owner.  See {@link java.awt.Frame} for\n * more information.\n * <p>\n * A dialog can be either modeless (the default) or modal.  A modal\n * dialog is one which blocks input to some other top-level windows\n * in the application, except for any windows created with the dialog\n * as their owner. See <a href=\"doc-files/Modality.html\">AWT Modality</a>\n * specification for details.\n * <p>\n * Dialogs are capable of generating the following\n * <code>WindowEvents</code>:\n * <code>WindowOpened</code>, <code>WindowClosing</code>,\n * <code>WindowClosed</code>, <code>WindowActivated</code>,\n * <code>WindowDeactivated</code>, <code>WindowGainedFocus</code>,\n * <code>WindowLostFocus</code>.\n *\n * @see WindowEvent\n * @see Window#addWindowListener\n *\n * @author      Sami Shaio\n * @author      Arthur van Hoff\n * @since       JDK1.0\n ","description":"","name":"Dialog","qualified_name":"java.awt.Dialog","type":2},{"comment":"","description":"","name":"AsVarargsCollector","qualified_name":"java.lang.invoke.MethodHandleImpl.AsVarargsCollector","type":2},{"comment":"\n *\n * The <code>BufferedImage</code> subclass describes an {@link\n * java.awt.Image Image} with an accessible buffer of image data.\n * A <code>BufferedImage</code> is comprised of a {@link ColorModel} and a\n * {@link Raster} of image data.\n * The number and types of bands in the {@link SampleModel} of the\n * <code>Raster</code> must match the number and types required by the\n * <code>ColorModel</code> to represent its color and alpha components.\n * All <code>BufferedImage</code> objects have an upper left corner\n * coordinate of (0,&nbsp;0).  Any <code>Raster</code> used to construct a\n * <code>BufferedImage</code> must therefore have minX=0 and minY=0.\n *\n * <p>\n * This class relies on the data fetching and setting methods\n * of <code>Raster</code>,\n * and on the color characterization methods of <code>ColorModel</code>.\n *\n * @see ColorModel\n * @see Raster\n * @see WritableRaster\n ","description":"","name":"BufferedImage","qualified_name":"java.awt.image.BufferedImage","type":2},{"comment":"\n * The {@code Path2D} class provides a simple, yet flexible\n * shape which represents an arbitrary geometric path.\n * It can fully represent any path which can be iterated by the\n * {@link PathIterator} interface including all of its segment\n * types and winding rules and it implements all of the\n * basic hit testing methods of the {@link Shape} interface.\n * <p>\n * Use {@link Path2D.Float} when dealing with data that can be represented\n * and used with floating point precision.  Use {@link Path2D.Double}\n * for data that requires the accuracy or range of double precision.\n * <p>\n * {@code Path2D} provides exactly those facilities required for\n * basic construction and management of a geometric path and\n * implementation of the above interfaces with little added\n * interpretation.\n * If it is useful to manipulate the interiors of closed\n * geometric shapes beyond simple hit testing then the\n * {@link Area} class provides additional capabilities\n * specifically targeted at closed figures.\n * While both classes nominally implement the {@code Shape}\n * interface, they differ in purpose and together they provide\n * two useful views of a geometric shape where {@code Path2D}\n * deals primarily with a trajectory formed by path segments\n * and {@code Area} deals more with interpretation and manipulation\n * of enclosed regions of 2D geometric space.\n * <p>\n * The {@link PathIterator} interface has more detailed descriptions\n * of the types of segments that make up a path and the winding rules\n * that control how to determine which regions are inside or outside\n * the path.\n *\n * @author Jim Graham\n * @since 1.6\n ","description":"","name":"Path2D","qualified_name":"java.awt.geom.Path2D","type":2},{"comment":"\n     * A type-safe enumeration of possible color states.\n     * @since 1.3\n     ","description":"","name":"ColorType","qualified_name":"java.awt.PageAttributes.ColorType","type":2},{"comment":"","description":"","name":"EnsureInitialized","qualified_name":"java.lang.invoke.DirectMethodHandle.EnsureInitialized","type":2},{"comment":"\n * The <code>GridBagConstraints</code> class specifies constraints\n * for components that are laid out using the\n * <code>GridBagLayout</code> class.\n *\n * @author Doug Stein\n * @author Bill Spitzak (orignial NeWS &amp; OLIT implementation)\n * @see java.awt.GridBagLayout\n * @since JDK1.0\n ","description":"","name":"GridBagConstraints","qualified_name":"java.awt.GridBagConstraints","type":2},{"comment":"\n * This class serves as a parameter block to the <code>Instrumentation.redefineClasses</code> method.\n * Serves to bind the <code>Class</code> that needs redefining together with the new class file bytes.\n *\n * @see     java.lang.instrument.Instrumentation#redefineClasses\n * @since   1.5\n ","description":"","name":"ClassDefinition","qualified_name":"java.lang.instrument.ClassDefinition","type":2},{"comment":"","description":"","name":"PeerPrintCallback","qualified_name":"java.awt.GraphicsCallback.PeerPrintCallback","type":2},{"comment":"\n * A flow layout arranges components in a directional flow, much\n * like lines of text in a paragraph. The flow direction is\n * determined by the container's <code>componentOrientation</code>\n * property and may be one of two values:\n * <ul>\n * <li><code>ComponentOrientation.LEFT_TO_RIGHT</code>\n * <li><code>ComponentOrientation.RIGHT_TO_LEFT</code>\n * </ul>\n * Flow layouts are typically used\n * to arrange buttons in a panel. It arranges buttons\n * horizontally until no more buttons fit on the same line.\n * The line alignment is determined by the <code>align</code>\n * property. The possible values are:\n * <ul>\n * <li>{@link #LEFT LEFT}\n * <li>{@link #RIGHT RIGHT}\n * <li>{@link #CENTER CENTER}\n * <li>{@link #LEADING LEADING}\n * <li>{@link #TRAILING TRAILING}\n * </ul>\n * <p>\n * For example, the following picture shows an applet using the flow\n * layout manager (its default layout manager) to position three buttons:\n * <p>\n * <img src=\"doc-files/FlowLayout-1.gif\"\n * ALT=\"Graphic of Layout for Three Buttons\"\n * style=\"float:center; margin: 7px 10px;\">\n * <p>\n * Here is the code for this applet:\n *\n * <hr><blockquote><pre>\n * import java.awt.*;\n * import java.applet.Applet;\n *\n * public class myButtons extends Applet {\n *     Button button1, button2, button3;\n *     public void init() {\n *         button1 = new Button(\"Ok\");\n *         button2 = new Button(\"Open\");\n *         button3 = new Button(\"Close\");\n *         add(button1);\n *         add(button2);\n *         add(button3);\n *     }\n * }\n * </pre></blockquote><hr>\n * <p>\n * A flow layout lets each component assume its natural (preferred) size.\n *\n * @author      Arthur van Hoff\n * @author      Sami Shaio\n * @since       JDK1.0\n * @see ComponentOrientation\n ","description":"","name":"FlowLayout","qualified_name":"java.awt.FlowLayout","type":2},{"comment":"\n     * This class implements accessibility support for the\n     * <code>List</code> class.  It provides an implementation of the\n     * Java Accessibility API appropriate to list user-interface elements.\n     * @since 1.3\n     ","description":"","name":"AccessibleAWTList","qualified_name":"java.awt.List.AccessibleAWTList","type":2},{"comment":"\n * The <code>MediaTracker</code> class is a utility class to track\n * the status of a number of media objects. Media objects could\n * include audio clips as well as images, though currently only\n * images are supported.\n * <p>\n * To use a media tracker, create an instance of\n * <code>MediaTracker</code> and call its <code>addImage</code>\n * method for each image to be tracked. In addition, each image can\n * be assigned a unique identifier. This identifier controls the\n * priority order in which the images are fetched. It can also be used\n * to identify unique subsets of the images that can be waited on\n * independently. Images with a lower ID are loaded in preference to\n * those with a higher ID number.\n *\n * <p>\n *\n * Tracking an animated image\n * might not always be useful\n * due to the multi-part nature of animated image\n * loading and painting,\n * but it is supported.\n * <code>MediaTracker</code> treats an animated image\n * as completely loaded\n * when the first frame is completely loaded.\n * At that point, the <code>MediaTracker</code>\n * signals any waiters\n * that the image is completely loaded.\n * If no <code>ImageObserver</code>s are observing the image\n * when the first frame has finished loading,\n * the image might flush itself\n * to conserve resources\n * (see {@link Image#flush()}).\n *\n * <p>\n * Here is an example of using <code>MediaTracker</code>:\n * <p>\n * <hr><blockquote><pre>{@code\n * import java.applet.Applet;\n * import java.awt.Color;\n * import java.awt.Image;\n * import java.awt.Graphics;\n * import java.awt.MediaTracker;\n *\n * public class ImageBlaster extends Applet implements Runnable {\n *      MediaTracker tracker;\n *      Image bg;\n *      Image anim[] = new Image[5];\n *      int index;\n *      Thread animator;\n *\n *      // Get the images for the background (id == 0)\n *      // and the animation frames (id == 1)\n *      // and add them to the MediaTracker\n *      public void init() {\n *          tracker = new MediaTracker(this);\n *          bg = getImage(getDocumentBase(),\n *                  \"images/background.gif\");\n *          tracker.addImage(bg, 0);\n *          for (int i = 0; i < 5; i++) {\n *              anim[i] = getImage(getDocumentBase(),\n *                      \"images/anim\"+i+\".gif\");\n *              tracker.addImage(anim[i], 1);\n *          }\n *      }\n *\n *      // Start the animation thread.\n *      public void start() {\n *          animator = new Thread(this);\n *          animator.start();\n *      }\n *\n *      // Stop the animation thread.\n *      public void stop() {\n *          animator = null;\n *      }\n *\n *      // Run the animation thread.\n *      // First wait for the background image to fully load\n *      // and paint.  Then wait for all of the animation\n *      // frames to finish loading. Finally, loop and\n *      // increment the animation frame index.\n *      public void run() {\n *          try {\n *              tracker.waitForID(0);\n *              tracker.waitForID(1);\n *          } catch (InterruptedException e) {\n *              return;\n *          }\n *          Thread me = Thread.currentThread();\n *          while (animator == me) {\n *              try {\n *                  Thread.sleep(100);\n *              } catch (InterruptedException e) {\n *                  break;\n *              }\n *              synchronized (this) {\n *                  index++;\n *                  if (index >= anim.length) {\n *                      index = 0;\n *                  }\n *              }\n *              repaint();\n *          }\n *      }\n *\n *      // The background image fills the frame so we\n *      // don't need to clear the applet on repaints.\n *      // Just call the paint method.\n *      public void update(Graphics g) {\n *          paint(g);\n *      }\n *\n *      // Paint a large red rectangle if there are any errors\n *      // loading the images.  Otherwise always paint the\n *      // background so that it appears incrementally as it\n *      // is loading.  Finally, only paint the current animation\n *      // frame if all of the frames (id == 1) are done loading,\n *      // so that we don't get partial animations.\n *      public void paint(Graphics g) {\n *          if ((tracker.statusAll(false) & MediaTracker.ERRORED) != 0) {\n *              g.setColor(Color.red);\n *              g.fillRect(0, 0, size().width, size().height);\n *              return;\n *          }\n *          g.drawImage(bg, 0, 0, this);\n *          if (tracker.statusID(1, false) == MediaTracker.COMPLETE) {\n *              g.drawImage(anim[index], 10, 10, this);\n *          }\n *      }\n * }\n * } </pre></blockquote><hr>\n *\n * @author      Jim Graham\n * @since       JDK1.0\n ","description":"","name":"MediaTracker","qualified_name":"java.awt.MediaTracker","type":2},{"comment":"\n * Like the <code>Intropector</code>, the <code>MetaData</code> class\n * contains <em>meta</em> objects that describe the way\n * classes should express their state in terms of their\n * own public APIs.\n *\n * @see java.beans.Intropector\n *\n * @author Philip Milne\n * @author Steve Langley\n ","description":"","name":"MetaData","qualified_name":"java.beans.MetaData","type":2},{"comment":"\n * Thrown by method createFont in the <code>Font</code> class to indicate\n * that the specified font is bad.\n *\n * @author  Parry Kejriwal\n * @see     java.awt.Font\n * @since   1.3\n ","description":"","name":"FontFormatException","qualified_name":"java.awt.FontFormatException","type":2},{"comment":"\n * The peer interface for {@link FileDialog}.\n *\n * The peer interfaces are intended only for use in porting\n * the AWT. They are not intended for use by application\n * developers, and developers should not implement peers\n * nor invoke any of the peer methods directly on the peer\n * instances.\n ","description":"","name":"FileDialogPeer","qualified_name":"java.awt.peer.FileDialogPeer","type":3},{"comment":"\n * The peer interface for {@link CheckboxMenuItem}.\n *\n * The peer interfaces are intended only for use in porting\n * the AWT. They are not intended for use by application\n * developers, and developers should not implement peers\n * nor invoke any of the peer methods directly on the peer\n * instances.\n ","description":"","name":"CheckboxMenuItemPeer","qualified_name":"java.awt.peer.CheckboxMenuItemPeer","type":3},{"comment":"","description":"","name":"java_util_AbstractList_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_util_AbstractList_PersistenceDelegate","type":2},{"comment":"\n     * Implements a <a href=\"#redirect-input\">null output stream</a>.\n     ","description":"","name":"NullOutputStream","qualified_name":"java.lang.ProcessBuilder.NullOutputStream","type":2},{"comment":"\n * A <CODE>ColorModel</CODE> class that works with pixel values that\n * represent color and alpha information as separate samples and that\n * store each sample in a separate data element.  This class can be\n * used with an arbitrary <CODE>ColorSpace</CODE>.  The number of\n * color samples in the pixel values must be same as the number of\n * color components in the <CODE>ColorSpace</CODE>. There may be a\n * single alpha sample.\n * <p>\n * For those methods that use\n * a primitive array pixel representation of type <CODE>transferType</CODE>,\n * the array length is the same as the number of color and alpha samples.\n * Color samples are stored first in the array followed by the alpha\n * sample, if present.  The order of the color samples is specified\n * by the <CODE>ColorSpace</CODE>.  Typically, this order reflects the\n * name of the color space type. For example, for <CODE>TYPE_RGB</CODE>,\n * index 0 corresponds to red, index 1 to green, and index 2 to blue.\n * <p>\n * The translation from pixel sample values to color/alpha components for\n * display or processing purposes is based on a one-to-one correspondence of\n * samples to components.\n * Depending on the transfer type used to create an instance of\n * <code>ComponentColorModel</code>, the pixel sample values\n * represented by that instance may be signed or unsigned and may\n * be of integral type or float or double (see below for details).\n * The translation from sample values to normalized color/alpha components\n * must follow certain rules.  For float and double samples, the translation\n * is an identity, i.e. normalized component values are equal to the\n * corresponding sample values.  For integral samples, the translation\n * should be only a simple scale and offset, where the scale and offset\n * constants may be different for each component.  The result of\n * applying the scale and offset constants is a set of color/alpha\n * component values, which are guaranteed to fall within a certain\n * range.  Typically, the range for a color component will be the range\n * defined by the <code>getMinValue</code> and <code>getMaxValue</code>\n * methods of the <code>ColorSpace</code> class.  The range for an\n * alpha component should be 0.0 to 1.0.\n * <p>\n * Instances of <code>ComponentColorModel</code> created with transfer types\n * <CODE>DataBuffer.TYPE_BYTE</CODE>, <CODE>DataBuffer.TYPE_USHORT</CODE>,\n * and <CODE>DataBuffer.TYPE_INT</CODE> have pixel sample values which\n * are treated as unsigned integral values.\n * The number of bits in a color or alpha sample of a pixel value might not\n * be the same as the number of bits for the corresponding color or alpha\n * sample passed to the\n * <code>ComponentColorModel(ColorSpace, int[], boolean, boolean, int, int)</code>\n * constructor.  In\n * that case, this class assumes that the least significant n bits of a sample\n * value hold the component value, where n is the number of significant bits\n * for the component passed to the constructor.  It also assumes that\n * any higher-order bits in a sample value are zero.  Thus, sample values\n * range from 0 to 2<sup>n</sup> - 1.  This class maps these sample values\n * to normalized color component values such that 0 maps to the value\n * obtained from the <code>ColorSpace's</code> <code>getMinValue</code>\n * method for each component and 2<sup>n</sup> - 1 maps to the value\n * obtained from <code>getMaxValue</code>.  To create a\n * <code>ComponentColorModel</code> with a different color sample mapping\n * requires subclassing this class and overriding the\n * <code>getNormalizedComponents(Object, float[], int)</code> method.\n * The mapping for an alpha sample always maps 0 to 0.0 and\n * 2<sup>n</sup> - 1 to 1.0.\n * <p>\n * For instances with unsigned sample values,\n * the unnormalized color/alpha component representation is only\n * supported if two conditions hold.  First, sample value value 0 must\n * map to normalized component value 0.0 and sample value 2<sup>n</sup> - 1\n * to 1.0.  Second the min/max range of all color components of the\n * <code>ColorSpace</code> must be 0.0 to 1.0.  In this case, the\n * component representation is the n least\n * significant bits of the corresponding sample.  Thus each component is\n * an unsigned integral value between 0 and 2<sup>n</sup> - 1, where\n * n is the number of significant bits for a particular component.\n * If these conditions are not met, any method taking an unnormalized\n * component argument will throw an <code>IllegalArgumentException</code>.\n * <p>\n * Instances of <code>ComponentColorModel</code> created with transfer types\n * <CODE>DataBuffer.TYPE_SHORT</CODE>, <CODE>DataBuffer.TYPE_FLOAT</CODE>, and\n * <CODE>DataBuffer.TYPE_DOUBLE</CODE> have pixel sample values which\n * are treated as signed short, float, or double values.\n * Such instances do not support the unnormalized color/alpha component\n * representation, so any methods taking such a representation as an argument\n * will throw an <code>IllegalArgumentException</code> when called on one\n * of these instances.  The normalized component values of instances\n * of this class have a range which depends on the transfer\n * type as follows: for float samples, the full range of the float data\n * type; for double samples, the full range of the float data type\n * (resulting from casting double to float); for short samples,\n * from approximately -maxVal to +maxVal, where maxVal is the per\n * component maximum value for the <code>ColorSpace</code>\n * (-32767 maps to -maxVal, 0 maps to 0.0, and 32767 maps\n * to +maxVal).  A subclass may override the scaling for short sample\n * values to normalized component values by overriding the\n * <code>getNormalizedComponents(Object, float[], int)</code> method.\n * For float and double samples, the normalized component values are\n * taken to be equal to the corresponding sample values, and subclasses\n * should not attempt to add any non-identity scaling for these transfer\n * types.\n * <p>\n * Instances of <code>ComponentColorModel</code> created with transfer types\n * <CODE>DataBuffer.TYPE_SHORT</CODE>, <CODE>DataBuffer.TYPE_FLOAT</CODE>, and\n * <CODE>DataBuffer.TYPE_DOUBLE</CODE>\n * use all the bits of all sample values.  Thus all color/alpha components\n * have 16 bits when using <CODE>DataBuffer.TYPE_SHORT</CODE>, 32 bits when\n * using <CODE>DataBuffer.TYPE_FLOAT</CODE>, and 64 bits when using\n * <CODE>DataBuffer.TYPE_DOUBLE</CODE>.  When the\n * <code>ComponentColorModel(ColorSpace, int[], boolean, boolean, int, int)</code>\n * form of constructor is used with one of these transfer types, the\n * bits array argument is ignored.\n * <p>\n * It is possible to have color/alpha sample values\n * which cannot be reasonably interpreted as component values for rendering.\n * This can happen when <code>ComponentColorModel</code> is subclassed to\n * override the mapping of unsigned sample values to normalized color\n * component values or when signed sample values outside a certain range\n * are used.  (As an example, specifying an alpha component as a signed\n * short value outside the range 0 to 32767, normalized range 0.0 to 1.0, can\n * lead to unexpected results.) It is the\n * responsibility of applications to appropriately scale pixel data before\n * rendering such that color components fall within the normalized range\n * of the <code>ColorSpace</code> (obtained using the <code>getMinValue</code>\n * and <code>getMaxValue</code> methods of the <code>ColorSpace</code> class)\n * and the alpha component is between 0.0 and 1.0.  If color or alpha\n * component values fall outside these ranges, rendering results are\n * indeterminate.\n * <p>\n * Methods that use a single int pixel representation throw\n * an <CODE>IllegalArgumentException</CODE>, unless the number of components\n * for the <CODE>ComponentColorModel</CODE> is one and the component\n * value is unsigned -- in other words,  a single color component using\n * a transfer type of <CODE>DataBuffer.TYPE_BYTE</CODE>,\n * <CODE>DataBuffer.TYPE_USHORT</CODE>, or <CODE>DataBuffer.TYPE_INT</CODE>\n * and no alpha.\n * <p>\n * A <CODE>ComponentColorModel</CODE> can be used in conjunction with a\n * <CODE>ComponentSampleModel</CODE>, a <CODE>BandedSampleModel</CODE>,\n * or a <CODE>PixelInterleavedSampleModel</CODE> to construct a\n * <CODE>BufferedImage</CODE>.\n *\n * @see ColorModel\n * @see ColorSpace\n * @see ComponentSampleModel\n * @see BandedSampleModel\n * @see PixelInterleavedSampleModel\n * @see BufferedImage\n *\n ","description":"","name":"ComponentColorModel","qualified_name":"java.awt.image.ComponentColorModel","type":2},{"comment":"\n * The persistence delegate for {@link MatteBorder}.\n * It is impossible to use {@link DefaultPersistenceDelegate}\n * because this class does not have writable properties.\n *\n * @author Sergey A. Malenkov\n ","description":"","name":"javax_swing_border_MatteBorder_PersistenceDelegate","qualified_name":"java.beans.MetaData.javax_swing_border_MatteBorder_PersistenceDelegate","type":2},{"comment":"\n * A <code>Menu</code> object is a pull-down menu component\n * that is deployed from a menu bar.\n * <p>\n * A menu can optionally be a <i>tear-off</i> menu. A tear-off menu\n * can be opened and dragged away from its parent menu bar or menu.\n * It remains on the screen after the mouse button has been released.\n * The mechanism for tearing off a menu is platform dependent, since\n * the look and feel of the tear-off menu is determined by its peer.\n * On platforms that do not support tear-off menus, the tear-off\n * property is ignored.\n * <p>\n * Each item in a menu must belong to the <code>MenuItem</code>\n * class. It can be an instance of <code>MenuItem</code>, a submenu\n * (an instance of <code>Menu</code>), or a check box (an instance of\n * <code>CheckboxMenuItem</code>).\n *\n * @author Sami Shaio\n * @see     java.awt.MenuItem\n * @see     java.awt.CheckboxMenuItem\n * @since   JDK1.0\n ","description":"","name":"Menu","qualified_name":"java.awt.Menu","type":2},{"comment":"","description":"","name":"PackedColorModel","qualified_name":"java.awt.image.PackedColorModel","type":2},{"comment":"","description":"","name":"EnclosingMethodInfo","qualified_name":"java.lang.Class.EnclosingMethodInfo","type":2},{"comment":"\n     * This class implements accessibility support for the\n     * <code>Canvas</code> class.  It provides an implementation of the\n     * Java Accessibility API appropriate to canvas user-interface elements.\n     * @since 1.3\n     ","description":"","name":"AccessibleAWTCanvas","qualified_name":"java.awt.Canvas.AccessibleAWTCanvas","type":2},{"comment":"","description":"","name":"AppletInitializer","qualified_name":"java.beans.AppletInitializer","type":3},{"comment":"","description":"","name":"InstantiationError","qualified_name":"java.lang.InstantiationError","type":2},{"comment":"\n     * A type-safe enumeration of possible dialogs to display to the user.\n     * @since 1.3\n     ","description":"","name":"DialogType","qualified_name":"java.awt.JobAttributes.DialogType","type":2},{"comment":"\n     * Hold a snapshot of values to be passed to an ObjectInputFilter.\n     ","description":"","name":"FilterValues","qualified_name":"java.io.ObjectInputStream.FilterValues","type":2},{"comment":"\n * A <code>Label</code> object is a component for placing text in a\n * container. A label displays a single line of read-only text.\n * The text can be changed by the application, but a user cannot edit it\n * directly.\n * <p>\n * For example, the code&nbsp;.&nbsp;.&nbsp;.\n *\n * <hr><blockquote><pre>\n * setLayout(new FlowLayout(FlowLayout.CENTER, 10, 10));\n * add(new Label(\"Hi There!\"));\n * add(new Label(\"Another Label\"));\n * </pre></blockquote><hr>\n * <p>\n * produces the following labels:\n * <p>\n * <img src=\"doc-files/Label-1.gif\" alt=\"Two labels: 'Hi There!' and 'Another label'\"\n * style=\"float:center; margin: 7px 10px;\">\n *\n * @author      Sami Shaio\n * @since       JDK1.0\n ","description":"","name":"Label","qualified_name":"java.awt.Label","type":2},{"comment":"\n *    A class to encapsulate MimeType parsing related exceptions\n *\n * @serial exclude\n * @since 1.3\n ","description":"","name":"MimeTypeParseException","qualified_name":"java.awt.datatransfer.MimeTypeParseException","type":2},{"comment":"\n * Signals that a method has been invoked at an illegal or\n * inappropriate time.  In other words, the Java environment or\n * Java application is not in an appropriate state for the requested\n * operation.\n *\n * @author  Jonni Kanerva\n * @since   JDK1.1\n ","description":"","name":"IllegalStateException","qualified_name":"java.lang.IllegalStateException","type":2},{"comment":"\n * A low-level event which indicates that a Component has gained or lost the\n * input focus. This low-level event is generated by a Component (such as a\n * TextField). The event is passed to every <code>FocusListener</code> or\n * <code>FocusAdapter</code> object which registered to receive such events\n * using the Component's <code>addFocusListener</code> method. (<code>\n * FocusAdapter</code> objects implement the <code>FocusListener</code>\n * interface.) Each such listener object gets this <code>FocusEvent</code> when\n * the event occurs.\n * <p>\n * There are two levels of focus events: permanent and temporary. Permanent\n * focus change events occur when focus is directly moved from one Component to\n * another, such as through a call to requestFocus() or as the user uses the\n * TAB key to traverse Components. Temporary focus change events occur when\n * focus is temporarily lost for a Component as the indirect result of another\n * operation, such as Window deactivation or a Scrollbar drag. In this case,\n * the original focus state will automatically be restored once that operation\n * is finished, or, for the case of Window deactivation, when the Window is\n * reactivated. Both permanent and temporary focus events are delivered using\n * the FOCUS_GAINED and FOCUS_LOST event ids; the level may be distinguished in\n * the event using the isTemporary() method.\n * <p>\n * An unspecified behavior will be caused if the {@code id} parameter\n * of any particular {@code FocusEvent} instance is not\n * in the range from {@code FOCUS_FIRST} to {@code FOCUS_LAST}.\n *\n * @see FocusAdapter\n * @see FocusListener\n * @see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/focuslistener.html\">Tutorial: Writing a Focus Listener</a>\n *\n * @author Carl Quinn\n * @author Amy Fowler\n * @since 1.1\n ","description":"","name":"FocusEvent","qualified_name":"java.awt.event.FocusEvent","type":2},{"comment":"","description":"","name":"InputMethodListener","qualified_name":"java.awt.event.InputMethodListener","type":3},{"comment":"\n * The <code>Composite</code> interface, along with\n * {@link CompositeContext}, defines the methods to compose a draw\n * primitive with the underlying graphics area.\n * After the <code>Composite</code> is set in the\n * {@link Graphics2D} context, it combines a shape, text, or an image\n * being rendered with the colors that have already been rendered\n * according to pre-defined rules. The classes\n * implementing this interface provide the rules and a method to create\n * the context for a particular operation.\n * <code>CompositeContext</code> is an environment used by the\n * compositing operation, which is created by the <code>Graphics2D</code>\n * prior to the start of the operation.  <code>CompositeContext</code>\n * contains private information and resources needed for a compositing\n * operation.  When the <code>CompositeContext</code> is no longer needed,\n * the <code>Graphics2D</code> object disposes of it in order to reclaim\n * resources allocated for the operation.\n * <p>\n * Instances of classes implementing <code>Composite</code> must be\n * immutable because the <code>Graphics2D</code> does not clone\n * these objects when they are set as an attribute with the\n * <code>setComposite</code> method or when the <code>Graphics2D</code>\n * object is cloned.  This is to avoid undefined rendering behavior of\n * <code>Graphics2D</code>, resulting from the modification of\n * the <code>Composite</code> object after it has been set in the\n * <code>Graphics2D</code> context.\n * <p>\n * Since this interface must expose the contents of pixels on the\n * target device or image to potentially arbitrary code, the use of\n * custom objects which implement this interface when rendering directly\n * to a screen device is governed by the <code>readDisplayPixels</code>\n * {@link AWTPermission}.  The permission check will occur when such\n * a custom object is passed to the <code>setComposite</code> method\n * of a <code>Graphics2D</code> retrieved from a {@link Component}.\n * @see AlphaComposite\n * @see CompositeContext\n * @see Graphics2D#setComposite\n ","description":"","name":"Composite","qualified_name":"java.awt.Composite","type":3},{"comment":"","description":"","name":"DnDEventMulticaster","qualified_name":"java.awt.dnd.DnDEventMulticaster","type":2},{"comment":"\n     * This class implements accessibility support for the\n     * <code>Label</code> class.  It provides an implementation of the\n     * Java Accessibility API appropriate to label user-interface elements.\n     * @since 1.3\n     ","description":"","name":"AccessibleAWTLabel","qualified_name":"java.awt.Label.AccessibleAWTLabel","type":2},{"comment":"\n * Member is an interface that reflects identifying information about\n * a single member (a field or a method) or a constructor.\n *\n * @see java.lang.Class\n * @see Field\n * @see Method\n * @see Constructor\n *\n * @author Nakul Saraiya\n ","description":"","name":"Member","qualified_name":"java.lang.reflect.Member","type":3},{"comment":"\n * An \"IndexedPropertyChange\" event gets delivered whenever a component that\n * conforms to the JavaBeans&trade; specification (a \"bean\") changes a bound\n * indexed property. This class is an extension of <code>PropertyChangeEvent</code>\n * but contains the index of the property that has changed.\n * <P>\n * Null values may be provided for the old and the new values if their\n * true values are not known.\n * <P>\n * An event source may send a null object as the name to indicate that an\n * arbitrary set of if its properties have changed.  In this case the\n * old and new values should also be null.\n *\n * @since 1.5\n * @author Mark Davidson\n ","description":"","name":"IndexedPropertyChangeEvent","qualified_name":"java.beans.IndexedPropertyChangeEvent","type":2},{"comment":"\n * Construction and caching of often-used invokers.\n * @author jrose\n ","description":"","name":"Invokers","qualified_name":"java.lang.invoke.Invokers","type":2},{"comment":"","description":"","name":"BeanContextChild","qualified_name":"java.beans.beancontext.BeanContextChild","type":3},{"comment":"\n * A point representing a location in {@code (x,y)} coordinate space,\n * specified in integer precision.\n *\n * @author      Sami Shaio\n * @since       1.0\n ","description":"","name":"Point","qualified_name":"java.awt.Point","type":2},{"comment":"","description":"","name":"PolygonPathIterator","qualified_name":"java.awt.Polygon.PolygonPathIterator","type":2},{"comment":"\n * Thrown when a semantically malformed parameterized type is\n * encountered by a reflective method that needs to instantiate it.\n * For example, if the number of type arguments to a parameterized type\n * is wrong.\n *\n * @since 1.5\n ","description":"","name":"MalformedParameterizedTypeException","qualified_name":"java.lang.reflect.MalformedParameterizedTypeException","type":2},{"comment":"","description":"","name":"DefaultBufferCapabilities","qualified_name":"java.awt.GraphicsConfiguration.DefaultBufferCapabilities","type":2},{"comment":" Not so for JMenu apparently.","description":"","name":"javax_swing_JMenu_PersistenceDelegate","qualified_name":"java.beans.MetaData.javax_swing_JMenu_PersistenceDelegate","type":2},{"comment":"\n * The management interface for the operating system on which\n * the Java virtual machine is running.\n *\n * <p> A Java virtual machine has a single instance of the implementation\n * class of this interface.  This instance implementing this interface is\n * an <a href=\"ManagementFactory.html#MXBean\">MXBean</a>\n * that can be obtained by calling\n * the {@link ManagementFactory#getOperatingSystemMXBean} method or\n * from the {@link ManagementFactory#getPlatformMBeanServer\n * platform <tt>MBeanServer</tt>} method.\n *\n * <p>The <tt>ObjectName</tt> for uniquely identifying the MXBean for\n * the operating system within an MBeanServer is:\n * <blockquote>\n *    {@link ManagementFactory#OPERATING_SYSTEM_MXBEAN_NAME\n *      <tt>java.lang:type=OperatingSystem</tt>}\n * </blockquote>\n *\n * It can be obtained by calling the\n * {@link PlatformManagedObject#getObjectName} method.\n *\n * <p> This interface defines several convenient methods for accessing\n * system properties about the operating system on which the Java\n * virtual machine is running.\n *\n * @see ManagementFactory#getPlatformMXBeans(Class)\n * @see <a href=\"../../../javax/management/package-summary.html\">\n *      JMX Specification.</a>\n * @see <a href=\"package-summary.html#examples\">\n *      Ways to Access MXBeans</a>\n *\n * @author  Mandy Chung\n * @since   1.5\n ","description":"","name":"OperatingSystemMXBean","qualified_name":"java.lang.management.OperatingSystemMXBean","type":3},{"comment":"\n * A {@code DataFlavor} provides meta information about data. {@code DataFlavor}\n * is typically used to access data on the clipboard, or during\n * a drag and drop operation.\n * <p>\n * An instance of {@code DataFlavor} encapsulates a content type as\n * defined in <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>\n * and <a href=\"http://www.ietf.org/rfc/rfc2046.txt\">RFC 2046</a>.\n * A content type is typically referred to as a MIME type.\n * <p>\n * A content type consists of a media type (referred\n * to as the primary type), a subtype, and optional parameters. See\n * <a href=\"http://www.ietf.org/rfc/rfc2045.txt\">RFC 2045</a>\n * for details on the syntax of a MIME type.\n * <p>\n * The JRE data transfer implementation interprets the parameter &quot;class&quot;\n * of a MIME type as <B>a representation class</b>.\n * The representation class reflects the class of the object being\n * transferred. In other words, the representation class is the type of\n * object returned by {@link Transferable#getTransferData}.\n * For example, the MIME type of {@link #imageFlavor} is\n * {@code \"image/x-java-image;class=java.awt.Image\"},\n * the primary type is {@code image}, the subtype is\n * {@code x-java-image}, and the representation class is\n * {@code java.awt.Image}. When {@code getTransferData} is invoked\n * with a {@code DataFlavor} of {@code imageFlavor}, an instance of\n * {@code java.awt.Image} is returned.\n * It's important to note that {@code DataFlavor} does no error checking\n * against the representation class. It is up to consumers of\n * {@code DataFlavor}, such as {@code Transferable}, to honor the representation\n * class.\n * <br>\n * Note, if you do not specify a representation class when\n * creating a {@code DataFlavor}, the default\n * representation class is used. See appropriate documentation for\n * {@code DataFlavor}'s constructors.\n * <p>\n * Also, {@code DataFlavor} instances with the &quot;text&quot; primary\n * MIME type may have a &quot;charset&quot; parameter. Refer to\n * <a href=\"http://www.ietf.org/rfc/rfc2046.txt\">RFC 2046</a> and\n * {@link #selectBestTextFlavor} for details on &quot;text&quot; MIME types\n * and the &quot;charset&quot; parameter.\n * <p>\n * Equality of {@code DataFlavors} is determined by the primary type,\n * subtype, and representation class. Refer to {@link #equals(DataFlavor)} for\n * details. When determining equality, any optional parameters are ignored.\n * For example, the following produces two {@code DataFlavors} that\n * are considered identical:\n * <pre>\n *   DataFlavor flavor1 = new DataFlavor(Object.class, &quot;X-test/test; class=&lt;java.lang.Object&gt;; foo=bar&quot;);\n *   DataFlavor flavor2 = new DataFlavor(Object.class, &quot;X-test/test; class=&lt;java.lang.Object&gt;; x=y&quot;);\n *   // The following returns true.\n *   flavor1.equals(flavor2);\n * </pre>\n * As mentioned, {@code flavor1} and {@code flavor2} are considered identical.\n * As such, asking a {@code Transferable} for either {@code DataFlavor} returns\n * the same results.\n * <p>\n * For more information on the using data transfer with Swing see\n * the <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/dnd/index.html\">\n * How to Use Drag and Drop and Data Transfer</a>,\n * section in <em>Java Tutorial</em>.\n *\n * @author      Blake Sullivan\n * @author      Laurence P. G. Cable\n * @author      Jeff Dunn\n ","description":"","name":"DataFlavor","qualified_name":"java.awt.datatransfer.DataFlavor","type":2},{"comment":"","description":"","name":"ObjectInputStreamWithLoader","qualified_name":"java.beans.ObjectInputStreamWithLoader","type":2},{"comment":"\n * The <code>Runnable</code> interface should be implemented by any\n * class whose instances are intended to be executed by a thread. The\n * class must define a method of no arguments called <code>run</code>.\n * <p>\n * This interface is designed to provide a common protocol for objects that\n * wish to execute code while they are active. For example,\n * <code>Runnable</code> is implemented by class <code>Thread</code>.\n * Being active simply means that a thread has been started and has not\n * yet been stopped.\n * <p>\n * In addition, <code>Runnable</code> provides the means for a class to be\n * active while not subclassing <code>Thread</code>. A class that implements\n * <code>Runnable</code> can run without subclassing <code>Thread</code>\n * by instantiating a <code>Thread</code> instance and passing itself in\n * as the target.  In most cases, the <code>Runnable</code> interface should\n * be used if you are only planning to override the <code>run()</code>\n * method and no other <code>Thread</code> methods.\n * This is important because classes should not be subclassed\n * unless the programmer intends on modifying or enhancing the fundamental\n * behavior of the class.\n *\n * @author  Arthur van Hoff\n * @see     java.lang.Thread\n * @see     java.util.concurrent.Callable\n * @since   JDK1.0\n ","description":"","name":"Runnable","qualified_name":"java.lang.Runnable","type":3},{"comment":"\n     * A cubic parametric curve segment specified with\n     * {@code double} coordinates.\n     * @since 1.2\n     ","description":"","name":"Double","qualified_name":"java.awt.geom.CubicCurve2D.Double","type":2},{"comment":"\n * The peer interface for {@link Scrollbar}.\n *\n * The peer interfaces are intended only for use in porting\n * the AWT. They are not intended for use by application\n * developers, and developers should not implement peers\n * nor invoke any of the peer methods directly on the peer\n * instances.\n ","description":"","name":"ScrollbarPeer","qualified_name":"java.awt.peer.ScrollbarPeer","type":3},{"comment":"\n     * The inner class NativeLibrary denotes a loaded native library instance.\n     * Every classloader contains a vector of loaded native libraries in the\n     * private field <tt>nativeLibraries</tt>.  The native libraries loaded\n     * into the system are entered into the <tt>systemNativeLibraries</tt>\n     * vector.\n     *\n     * <p> Every native library requires a particular version of JNI. This is\n     * denoted by the private <tt>jniVersion</tt> field.  This field is set by\n     * the VM when it loads the library, and used by the VM to pass the correct\n     * version of JNI to the native methods.  </p>\n     *\n     * @see      ClassLoader\n     * @since    1.2\n     ","description":"","name":"NativeLibrary","qualified_name":"java.lang.ClassLoader.NativeLibrary","type":2},{"comment":"","description":"","name":"PropertyChangeListener","qualified_name":"java.beans.PropertyChangeListener","type":3},{"comment":"","description":"","name":"UnmodifiableSortedSet_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_util_Collections.UnmodifiableSortedSet_PersistenceDelegate","type":2},{"comment":"","description":"","name":"StreamTokenizer","qualified_name":"java.io.StreamTokenizer","type":2},{"comment":"","description":"","name":"FileWriter","qualified_name":"java.io.FileWriter","type":2},{"comment":"\n * The <code>Color</code> class is used to encapsulate colors in the default\n * sRGB color space or colors in arbitrary color spaces identified by a\n * {@link ColorSpace}.  Every color has an implicit alpha value of 1.0 or\n * an explicit one provided in the constructor.  The alpha value\n * defines the transparency of a color and can be represented by\n * a float value in the range 0.0&nbsp;-&nbsp;1.0 or 0&nbsp;-&nbsp;255.\n * An alpha value of 1.0 or 255 means that the color is completely\n * opaque and an alpha value of 0 or 0.0 means that the color is\n * completely transparent.\n * When constructing a <code>Color</code> with an explicit alpha or\n * getting the color/alpha components of a <code>Color</code>, the color\n * components are never premultiplied by the alpha component.\n * <p>\n * The default color space for the Java 2D(tm) API is sRGB, a proposed\n * standard RGB color space.  For further information on sRGB,\n * see <A href=\"http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html\">\n * http://www.w3.org/pub/WWW/Graphics/Color/sRGB.html\n * </A>.\n * <p>\n * @version     10 Feb 1997\n * @author      Sami Shaio\n * @author      Arthur van Hoff\n * @see         ColorSpace\n * @see         AlphaComposite\n ","description":"","name":"Color","qualified_name":"java.awt.Color","type":2},{"comment":"","description":"","name":"DragSourceEvent","qualified_name":"java.awt.dnd.DragSourceEvent","type":2},{"comment":"","description":"","name":"WritableRenderedImage","qualified_name":"java.awt.image.WritableRenderedImage","type":3},{"comment":"","description":"","name":"ClassLoaderHelper","qualified_name":"java.lang.ClassLoaderHelper","type":2},{"comment":"\n     * Implements a <a href=\"#redirect-output\">null input stream</a>.\n     ","description":"","name":"NullInputStream","qualified_name":"java.lang.ProcessBuilder.NullInputStream","type":2},{"comment":" Beans","description":"","name":"java_beans_beancontext_BeanContextSupport_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_beans_beancontext_BeanContextSupport_PersistenceDelegate","type":2},{"comment":"","description":"","name":"BeanDescriptor","qualified_name":"java.beans.BeanDescriptor","type":2},{"comment":"","description":"","name":"CheckedList_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_util_Collections.CheckedList_PersistenceDelegate","type":2},{"comment":"\n * A platform managed object is a {@linkplain javax.management.MXBean JMX MXBean}\n * for monitoring and managing a component in the Java platform.\n * Each platform managed object has a unique\n * <a href=\"ManagementFactory.html#MXBean\">object name</a>\n * for the {@linkplain ManagementFactory#getPlatformMBeanServer\n * platform MBeanServer} access.\n * All platform MXBeans will implement this interface.\n *\n * <p>\n * Note:\n * The platform MXBean interfaces (i.e. all subinterfaces\n * of {@code PlatformManagedObject}) are implemented\n * by the Java platform only.  New methods may be added in these interfaces\n * in future Java SE releases.\n * In addition, this {@code PlatformManagedObject} interface is only\n * intended for the management interfaces for the platform to extend but\n * not for applications.\n *\n * @see ManagementFactory\n * @since 1.7\n ","description":"","name":"PlatformManagedObject","qualified_name":"java.lang.management.PlatformManagedObject","type":3},{"comment":"\n * Thrown when an application tries to access an enum constant by name\n * and the enum type contains no constant with the specified name.\n * This exception can be thrown by the {@linkplain\n * java.lang.reflect.AnnotatedElement API used to read annotations\n * reflectively}.\n *\n * @author  Josh Bloch\n * @see     java.lang.reflect.AnnotatedElement\n * @since   1.5\n ","description":"","name":"EnumConstantNotPresentException","qualified_name":"java.lang.EnumConstantNotPresentException","type":2},{"comment":"\n * Thrown to indicate that the application has attempted to convert\n * a string to one of the numeric types, but that the string does not\n * have the appropriate format.\n *\n * @author  unascribed\n * @see     java.lang.Integer#parseInt(String)\n * @since   JDK1.0\n ","description":"","name":"NumberFormatException","qualified_name":"java.lang.NumberFormatException","type":2},{"comment":"\n * The peer interface for {@link Component}. This is the top level peer\n * interface for widgets and defines the bulk of methods for AWT component\n * peers. Most component peers have to implement this interface (via one\n * of the subinterfaces), except menu components, which implement\n * {@link MenuComponentPeer}.\n *\n * The peer interfaces are intended only for use in porting\n * the AWT. They are not intended for use by application\n * developers, and developers should not implement peers\n * nor invoke any of the peer methods directly on the peer\n * instances.\n ","description":"","name":"ComponentPeer","qualified_name":"java.awt.peer.ComponentPeer","type":3},{"comment":"\n * The <code>Shape</code> interface provides definitions for objects\n * that represent some form of geometric shape.  The <code>Shape</code>\n * is described by a {@link PathIterator} object, which can express the\n * outline of the <code>Shape</code> as well as a rule for determining\n * how the outline divides the 2D plane into interior and exterior\n * points.  Each <code>Shape</code> object provides callbacks to get the\n * bounding box of the geometry, determine whether points or\n * rectangles lie partly or entirely within the interior\n * of the <code>Shape</code>, and retrieve a <code>PathIterator</code>\n * object that describes the trajectory path of the <code>Shape</code>\n * outline.\n * <p>\n * <a name=\"def_insideness\"><b>Definition of insideness:</b></a>\n * A point is considered to lie inside a\n * <code>Shape</code> if and only if:\n * <ul>\n * <li> it lies completely\n * inside the<code>Shape</code> boundary <i>or</i>\n * <li>\n * it lies exactly on the <code>Shape</code> boundary <i>and</i> the\n * space immediately adjacent to the\n * point in the increasing <code>X</code> direction is\n * entirely inside the boundary <i>or</i>\n * <li>\n * it lies exactly on a horizontal boundary segment <b>and</b> the\n * space immediately adjacent to the point in the\n * increasing <code>Y</code> direction is inside the boundary.\n * </ul>\n * <p>The <code>contains</code> and <code>intersects</code> methods\n * consider the interior of a <code>Shape</code> to be the area it\n * encloses as if it were filled.  This means that these methods\n * consider\n * unclosed shapes to be implicitly closed for the purpose of\n * determining if a shape contains or intersects a rectangle or if a\n * shape contains a point.\n *\n * @see java.awt.geom.PathIterator\n * @see java.awt.geom.AffineTransform\n * @see java.awt.geom.FlatteningPathIterator\n * @see java.awt.geom.GeneralPath\n *\n * @author Jim Graham\n * @since 1.2\n ","description":"","name":"Shape","qualified_name":"java.awt.Shape","type":3},{"comment":"","description":"","name":"BCSSCServiceClassRef","qualified_name":"java.beans.beancontext.BeanContextServicesSupport.BCSSChild.BCSSCServiceClassRef","type":2},{"comment":"\n * An ImageFilter class for scaling images using the simplest algorithm.\n * This class extends the basic ImageFilter Class to scale an existing\n * image and provide a source for a new image containing the resampled\n * image.  The pixels in the source image are sampled to produce pixels\n * for an image of the specified size by replicating rows and columns of\n * pixels to scale up or omitting rows and columns of pixels to scale\n * down.\n * <p>It is meant to be used in conjunction with a FilteredImageSource\n * object to produce scaled versions of existing images.  Due to\n * implementation dependencies, there may be differences in pixel values\n * of an image filtered on different platforms.\n *\n * @see FilteredImageSource\n * @see ImageFilter\n *\n * @author      Jim Graham\n ","description":"","name":"ReplicateScaleFilter","qualified_name":"java.awt.image.ReplicateScaleFilter","type":2},{"comment":"\n * An adapter class that implements ImageProducer to allow the\n * asynchronous production of a RenderableImage.  The size of the\n * ImageConsumer is determined by the scale factor of the usr2dev\n * transform in the RenderContext.  If the RenderContext is null, the\n * default rendering of the RenderableImage is used.  This class\n * implements an asynchronous production that produces the image in\n * one thread at one resolution.  This class may be subclassed to\n * implement versions that will render the image using several\n * threads.  These threads could render either the same image at\n * progressively better quality, or different sections of the image at\n * a single resolution.\n ","description":"","name":"RenderableImageProducer","qualified_name":"java.awt.image.renderable.RenderableImageProducer","type":2},{"comment":"","description":"","name":"ToolkitEventMulticaster","qualified_name":"java.awt.Toolkit.ToolkitEventMulticaster","type":2},{"comment":"\n * Thrown to indicate some unexpected internal error has occurred in\n * the Java Virtual Machine.\n *\n * @author  unascribed\n * @since   JDK1.0\n ","description":"","name":"InternalError","qualified_name":"java.lang.InternalError","type":2},{"comment":"\n     * A type-safe enumeration of possible origins.\n     * @since 1.3\n     ","description":"","name":"OriginType","qualified_name":"java.awt.PageAttributes.OriginType","type":2},{"comment":"\n *\n * <code>TextLayout</code> is an immutable graphical representation of styled\n * character data.\n * <p>\n * It provides the following capabilities:\n * <ul>\n * <li>implicit bidirectional analysis and reordering,\n * <li>cursor positioning and movement, including split cursors for\n * mixed directional text,\n * <li>highlighting, including both logical and visual highlighting\n * for mixed directional text,\n * <li>multiple baselines (roman, hanging, and centered),\n * <li>hit testing,\n * <li>justification,\n * <li>default font substitution,\n * <li>metric information such as ascent, descent, and advance, and\n * <li>rendering\n * </ul>\n * <p>\n * A <code>TextLayout</code> object can be rendered using\n * its <code>draw</code> method.\n * <p>\n * <code>TextLayout</code> can be constructed either directly or through\n * the use of a {@link LineBreakMeasurer}.  When constructed directly, the\n * source text represents a single paragraph.  <code>LineBreakMeasurer</code>\n * allows styled text to be broken into lines that fit within a particular\n * width.  See the <code>LineBreakMeasurer</code> documentation for more\n * information.\n * <p>\n * <code>TextLayout</code> construction logically proceeds as follows:\n * <ul>\n * <li>paragraph attributes are extracted and examined,\n * <li>text is analyzed for bidirectional reordering, and reordering\n * information is computed if needed,\n * <li>text is segmented into style runs\n * <li>fonts are chosen for style runs, first by using a font if the\n * attribute {@link TextAttribute#FONT} is present, otherwise by computing\n * a default font using the attributes that have been defined\n * <li>if text is on multiple baselines, the runs or subruns are further\n * broken into subruns sharing a common baseline,\n * <li>glyphvectors are generated for each run using the chosen font,\n * <li>final bidirectional reordering is performed on the glyphvectors\n * </ul>\n * <p>\n * All graphical information returned from a <code>TextLayout</code>\n * object's methods is relative to the origin of the\n * <code>TextLayout</code>, which is the intersection of the\n * <code>TextLayout</code> object's baseline with its left edge.  Also,\n * coordinates passed into a <code>TextLayout</code> object's methods\n * are assumed to be relative to the <code>TextLayout</code> object's\n * origin.  Clients usually need to translate between a\n * <code>TextLayout</code> object's coordinate system and the coordinate\n * system in another object (such as a\n * {@link java.awt.Graphics Graphics} object).\n * <p>\n * <code>TextLayout</code> objects are constructed from styled text,\n * but they do not retain a reference to their source text.  Thus,\n * changes in the text previously used to generate a <code>TextLayout</code>\n * do not affect the <code>TextLayout</code>.\n * <p>\n * Three methods on a <code>TextLayout</code> object\n * (<code>getNextRightHit</code>, <code>getNextLeftHit</code>, and\n * <code>hitTestChar</code>) return instances of {@link TextHitInfo}.\n * The offsets contained in these <code>TextHitInfo</code> objects\n * are relative to the start of the <code>TextLayout</code>, <b>not</b>\n * to the text used to create the <code>TextLayout</code>.  Similarly,\n * <code>TextLayout</code> methods that accept <code>TextHitInfo</code>\n * instances as parameters expect the <code>TextHitInfo</code> object's\n * offsets to be relative to the <code>TextLayout</code>, not to any\n * underlying text storage model.\n * <p>\n * <strong>Examples</strong>:<p>\n * Constructing and drawing a <code>TextLayout</code> and its bounding\n * rectangle:\n * <blockquote><pre>\n *   Graphics2D g = ...;\n *   Point2D loc = ...;\n *   Font font = Font.getFont(\"Helvetica-bold-italic\");\n *   FontRenderContext frc = g.getFontRenderContext();\n *   TextLayout layout = new TextLayout(\"This is a string\", font, frc);\n *   layout.draw(g, (float)loc.getX(), (float)loc.getY());\n *\n *   Rectangle2D bounds = layout.getBounds();\n *   bounds.setRect(bounds.getX()+loc.getX(),\n *                  bounds.getY()+loc.getY(),\n *                  bounds.getWidth(),\n *                  bounds.getHeight());\n *   g.draw(bounds);\n * </pre>\n * </blockquote>\n * <p>\n * Hit-testing a <code>TextLayout</code> (determining which character is at\n * a particular graphical location):\n * <blockquote><pre>\n *   Point2D click = ...;\n *   TextHitInfo hit = layout.hitTestChar(\n *                         (float) (click.getX() - loc.getX()),\n *                         (float) (click.getY() - loc.getY()));\n * </pre>\n * </blockquote>\n * <p>\n * Responding to a right-arrow key press:\n * <blockquote><pre>\n *   int insertionIndex = ...;\n *   TextHitInfo next = layout.getNextRightHit(insertionIndex);\n *   if (next != null) {\n *       // translate graphics to origin of layout on screen\n *       g.translate(loc.getX(), loc.getY());\n *       Shape[] carets = layout.getCaretShapes(next.getInsertionIndex());\n *       g.draw(carets[0]);\n *       if (carets[1] != null) {\n *           g.draw(carets[1]);\n *       }\n *   }\n * </pre></blockquote>\n * <p>\n * Drawing a selection range corresponding to a substring in the source text.\n * The selected area may not be visually contiguous:\n * <blockquote><pre>\n *   // selStart, selLimit should be relative to the layout,\n *   // not to the source text\n *\n *   int selStart = ..., selLimit = ...;\n *   Color selectionColor = ...;\n *   Shape selection = layout.getLogicalHighlightShape(selStart, selLimit);\n *   // selection may consist of disjoint areas\n *   // graphics is assumed to be tranlated to origin of layout\n *   g.setColor(selectionColor);\n *   g.fill(selection);\n * </pre></blockquote>\n * <p>\n * Drawing a visually contiguous selection range.  The selection range may\n * correspond to more than one substring in the source text.  The ranges of\n * the corresponding source text substrings can be obtained with\n * <code>getLogicalRangesForVisualSelection()</code>:\n * <blockquote><pre>\n *   TextHitInfo selStart = ..., selLimit = ...;\n *   Shape selection = layout.getVisualHighlightShape(selStart, selLimit);\n *   g.setColor(selectionColor);\n *   g.fill(selection);\n *   int[] ranges = getLogicalRangesForVisualSelection(selStart, selLimit);\n *   // ranges[0], ranges[1] is the first selection range,\n *   // ranges[2], ranges[3] is the second selection range, etc.\n * </pre></blockquote>\n * <p>\n * Note: Font rotations can cause text baselines to be rotated, and\n * multiple runs with different rotations can cause the baseline to\n * bend or zig-zag.  In order to account for this (rare) possibility,\n * some APIs are specified to return metrics and take parameters 'in\n * baseline-relative coordinates' (e.g. ascent, advance), and others\n * are in 'in standard coordinates' (e.g. getBounds).  Values in\n * baseline-relative coordinates map the 'x' coordinate to the\n * distance along the baseline, (positive x is forward along the\n * baseline), and the 'y' coordinate to a distance along the\n * perpendicular to the baseline at 'x' (positive y is 90 degrees\n * clockwise from the baseline vector).  Values in standard\n * coordinates are measured along the x and y axes, with 0,0 at the\n * origin of the TextLayout.  Documentation for each relevant API\n * indicates what values are in what coordinate system.  In general,\n * measurement-related APIs are in baseline-relative coordinates,\n * while display-related APIs are in standard coordinates.\n *\n * @see LineBreakMeasurer\n * @see TextAttribute\n * @see TextHitInfo\n * @see LayoutPath\n ","description":"","name":"TextLayout","qualified_name":"java.awt.font.TextLayout","type":2},{"comment":"\n *\n * @since 1.8\n ","description":"","name":"DefaultFileSystem","qualified_name":"java.io.DefaultFileSystem","type":2},{"comment":"\n     * Inner class of MenuBar used to provide default support for\n     * accessibility.  This class is not meant to be used directly by\n     * application developers, but is instead meant only to be\n     * subclassed by menu component developers.\n     * <p>\n     * This class implements accessibility support for the\n     * <code>MenuBar</code> class.  It provides an implementation of the\n     * Java Accessibility API appropriate to menu bar user-interface elements.\n     * @since 1.3\n     ","description":"","name":"AccessibleAWTMenuBar","qualified_name":"java.awt.MenuBar.AccessibleAWTMenuBar","type":2},{"comment":"","description":"","name":"GraphicsConfiguration","qualified_name":"java.awt.GraphicsConfiguration","type":2},{"comment":"","description":"","name":"Paint","qualified_name":"java.awt.Paint","type":3},{"comment":"\n * This abstract class is the superclass of all classes representing\n * an input stream of bytes.\n *\n * <p> Applications that need to define a subclass of <code>InputStream</code>\n * must always provide a method that returns the next byte of input.\n *\n * @author  Arthur van Hoff\n * @see     java.io.BufferedInputStream\n * @see     java.io.ByteArrayInputStream\n * @see     java.io.DataInputStream\n * @see     java.io.FilterInputStream\n * @see     java.io.InputStream#read()\n * @see     java.io.OutputStream\n * @see     java.io.PushbackInputStream\n * @since   JDK1.0\n ","description":"","name":"InputStream","qualified_name":"java.io.InputStream","type":2},{"comment":"","description":"","name":"BufferedReader","qualified_name":"java.io.BufferedReader","type":2},{"comment":"\n * The {@code ManagementFactory} class is a factory class for getting\n * managed beans for the Java platform.\n * This class consists of static methods each of which returns\n * one or more <i>platform MXBeans</i> representing\n * the management interface of a component of the Java virtual\n * machine.\n *\n * <h3><a name=\"MXBean\">Platform MXBeans</a></h3>\n * <p>\n * A platform MXBean is a <i>managed bean</i> that\n * conforms to the <a href=\"../../../javax/management/package-summary.html\">JMX</a>\n * Instrumentation Specification and only uses a set of basic data types.\n * A JMX management application and the {@linkplain\n * #getPlatformMBeanServer platform MBeanServer}\n * can interoperate without requiring classes for MXBean specific\n * data types.\n * The data types being transmitted between the JMX connector\n * server and the connector client are\n * {@linkplain javax.management.openmbean.OpenType open types}\n * and this allows interoperation across versions.\n * See <a href=\"../../../javax/management/MXBean.html#MXBean-spec\">\n * the specification of MXBeans</a> for details.\n *\n * <a name=\"MXBeanNames\"></a>\n * <p>Each platform MXBean is a {@link PlatformManagedObject}\n * and it has a unique\n * {@link javax.management.ObjectName ObjectName} for\n * registration in the platform {@code MBeanServer} as returned by\n * by the {@link PlatformManagedObject#getObjectName getObjectName}\n * method.\n *\n * <p>\n * An application can access a platform MXBean in the following ways:\n * <h4>1. Direct access to an MXBean interface</h4>\n * <blockquote>\n * <ul>\n *     <li>Get an MXBean instance by calling the\n *         {@link #getPlatformMXBean(Class) getPlatformMXBean} or\n *         {@link #getPlatformMXBeans(Class) getPlatformMXBeans} method\n *         and access the MXBean locally in the running\n *         virtual machine.\n *         </li>\n *     <li>Construct an MXBean proxy instance that forwards the\n *         method calls to a given {@link MBeanServer MBeanServer} by calling\n *         the {@link #getPlatformMXBean(MBeanServerConnection, Class)} or\n *         {@link #getPlatformMXBeans(MBeanServerConnection, Class)} method.\n *         The {@link #newPlatformMXBeanProxy newPlatformMXBeanProxy} method\n *         can also be used to construct an MXBean proxy instance of\n *         a given {@code ObjectName}.\n *         A proxy is typically constructed to remotely access\n *         an MXBean of another running virtual machine.\n *         </li>\n * </ul>\n * <h4>2. Indirect access to an MXBean interface via MBeanServer</h4>\n * <ul>\n *     <li>Go through the platform {@code MBeanServer} to access MXBeans\n *         locally or a specific <tt>MBeanServerConnection</tt> to access\n *         MXBeans remotely.\n *         The attributes and operations of an MXBean use only\n *         <em>JMX open types</em> which include basic data types,\n *         {@link javax.management.openmbean.CompositeData CompositeData},\n *         and {@link javax.management.openmbean.TabularData TabularData}\n *         defined in\n *         {@link javax.management.openmbean.OpenType OpenType}.\n *         The mapping is specified in\n *         the {@linkplain javax.management.MXBean MXBean} specification\n *         for details.\n *        </li>\n * </ul>\n * </blockquote>\n *\n * <p>\n * The {@link #getPlatformManagementInterfaces getPlatformManagementInterfaces}\n * method returns all management interfaces supported in the Java virtual machine\n * including the standard management interfaces listed in the tables\n * below as well as the management interfaces extended by the JDK implementation.\n * <p>\n * A Java virtual machine has a single instance of the following management\n * interfaces:\n *\n * <blockquote>\n * <table border summary=\"The list of Management Interfaces and their single instances\">\n * <tr>\n * <th>Management Interface</th>\n * <th>ObjectName</th>\n * </tr>\n * <tr>\n * <td> {@link ClassLoadingMXBean} </td>\n * <td> {@link #CLASS_LOADING_MXBEAN_NAME\n *             java.lang:type=ClassLoading}</td>\n * </tr>\n * <tr>\n * <td> {@link MemoryMXBean} </td>\n * <td> {@link #MEMORY_MXBEAN_NAME\n *             java.lang:type=Memory}</td>\n * </tr>\n * <tr>\n * <td> {@link ThreadMXBean} </td>\n * <td> {@link #THREAD_MXBEAN_NAME\n *             java.lang:type=Threading}</td>\n * </tr>\n * <tr>\n * <td> {@link RuntimeMXBean} </td>\n * <td> {@link #RUNTIME_MXBEAN_NAME\n *             java.lang:type=Runtime}</td>\n * </tr>\n * <tr>\n * <td> {@link OperatingSystemMXBean} </td>\n * <td> {@link #OPERATING_SYSTEM_MXBEAN_NAME\n *             java.lang:type=OperatingSystem}</td>\n * </tr>\n * <tr>\n * <td> {@link PlatformLoggingMXBean} </td>\n * <td> {@link java.util.logging.LogManager#LOGGING_MXBEAN_NAME\n *             java.util.logging:type=Logging}</td>\n * </tr>\n * </table>\n * </blockquote>\n *\n * <p>\n * A Java virtual machine has zero or a single instance of\n * the following management interfaces.\n *\n * <blockquote>\n * <table border summary=\"The list of Management Interfaces and their single instances\">\n * <tr>\n * <th>Management Interface</th>\n * <th>ObjectName</th>\n * </tr>\n * <tr>\n * <td> {@link CompilationMXBean} </td>\n * <td> {@link #COMPILATION_MXBEAN_NAME\n *             java.lang:type=Compilation}</td>\n * </tr>\n * </table>\n * </blockquote>\n *\n * <p>\n * A Java virtual machine may have one or more instances of the following\n * management interfaces.\n * <blockquote>\n * <table border summary=\"The list of Management Interfaces and their single instances\">\n * <tr>\n * <th>Management Interface</th>\n * <th>ObjectName</th>\n * </tr>\n * <tr>\n * <td> {@link GarbageCollectorMXBean} </td>\n * <td> {@link #GARBAGE_COLLECTOR_MXBEAN_DOMAIN_TYPE\n *             java.lang:type=GarbageCollector}<tt>,name=</tt><i>collector's name</i></td>\n * </tr>\n * <tr>\n * <td> {@link MemoryManagerMXBean} </td>\n * <td> {@link #MEMORY_MANAGER_MXBEAN_DOMAIN_TYPE\n *             java.lang:type=MemoryManager}<tt>,name=</tt><i>manager's name</i></td>\n * </tr>\n * <tr>\n * <td> {@link MemoryPoolMXBean} </td>\n * <td> {@link #MEMORY_POOL_MXBEAN_DOMAIN_TYPE\n *             java.lang:type=MemoryPool}<tt>,name=</tt><i>pool's name</i></td>\n * </tr>\n * <tr>\n * <td> {@link BufferPoolMXBean} </td>\n * <td> {@code java.nio:type=BufferPool,name=}<i>pool name</i></td>\n * </tr>\n * </table>\n * </blockquote>\n *\n * @see <a href=\"../../../javax/management/package-summary.html\">\n *      JMX Specification</a>\n * @see <a href=\"package-summary.html#examples\">\n *      Ways to Access Management Metrics</a>\n * @see javax.management.MXBean\n *\n * @author  Mandy Chung\n * @since   1.5\n ","description":"","name":"ManagementFactory","qualified_name":"java.lang.management.ManagementFactory","type":2},{"comment":"\n     * Inner class of MenuItem used to provide default support for\n     * accessibility.  This class is not meant to be used directly by\n     * application developers, but is instead meant only to be\n     * subclassed by menu component developers.\n     * <p>\n     * This class implements accessibility support for the\n     * <code>MenuItem</code> class.  It provides an implementation of the\n     * Java Accessibility API appropriate to menu item user-interface elements.\n     * @since 1.3\n     ","description":"","name":"AccessibleAWTMenuItem","qualified_name":"java.awt.MenuItem.AccessibleAWTMenuItem","type":2},{"comment":"","description":"","name":"CheckedValues","qualified_name":"java.lang.ProcessEnvironment.CheckedValues","type":2},{"comment":"","description":"","name":"CardLayout","qualified_name":"java.awt.CardLayout","type":2},{"comment":"\n     * This class defines an arc specified in {@code double} precision.\n     * @since 1.2\n     ","description":"","name":"Double","qualified_name":"java.awt.geom.Arc2D.Double","type":2},{"comment":"\n * The listener interface for receiving ancestor moved and resized events.\n * The class that is interested in processing these events either implements\n * this interface (and all the methods it contains) or extends the abstract\n * <code>HierarchyBoundsAdapter</code> class (overriding only the method of\n * interest).\n * The listener object created from that class is then registered with a\n * Component using the Component's <code>addHierarchyBoundsListener</code>\n * method. When the hierarchy to which the Component belongs changes by\n * the resizing or movement of an ancestor, the relevant method in the listener\n * object is invoked, and the <code>HierarchyEvent</code> is passed to it.\n * <p>\n * Hierarchy events are provided for notification purposes ONLY;\n * The AWT will automatically handle changes to the hierarchy internally so\n * that GUI layout works properly regardless of whether a\n * program registers an <code>HierarchyBoundsListener</code> or not.\n *\n * @author      David Mendenhall\n * @see         HierarchyBoundsAdapter\n * @see         HierarchyEvent\n * @since       1.3\n ","description":"","name":"HierarchyBoundsListener","qualified_name":"java.awt.event.HierarchyBoundsListener","type":3},{"comment":"\n * An <code>Area</code> object stores and manipulates a\n * resolution-independent description of an enclosed area of\n * 2-dimensional space.\n * <code>Area</code> objects can be transformed and can perform\n * various Constructive Area Geometry (CAG) operations when combined\n * with other <code>Area</code> objects.\n * The CAG operations include area\n * {@link #add addition}, {@link #subtract subtraction},\n * {@link #intersect intersection}, and {@link #exclusiveOr exclusive or}.\n * See the linked method documentation for examples of the various\n * operations.\n * <p>\n * The <code>Area</code> class implements the <code>Shape</code>\n * interface and provides full support for all of its hit-testing\n * and path iteration facilities, but an <code>Area</code> is more\n * specific than a generalized path in a number of ways:\n * <ul>\n * <li>Only closed paths and sub-paths are stored.\n *     <code>Area</code> objects constructed from unclosed paths\n *     are implicitly closed during construction as if those paths\n *     had been filled by the <code>Graphics2D.fill</code> method.\n * <li>The interiors of the individual stored sub-paths are all\n *     non-empty and non-overlapping.  Paths are decomposed during\n *     construction into separate component non-overlapping parts,\n *     empty pieces of the path are discarded, and then these\n *     non-empty and non-overlapping properties are maintained\n *     through all subsequent CAG operations.  Outlines of different\n *     component sub-paths may touch each other, as long as they\n *     do not cross so that their enclosed areas overlap.\n * <li>The geometry of the path describing the outline of the\n *     <code>Area</code> resembles the path from which it was\n *     constructed only in that it describes the same enclosed\n *     2-dimensional area, but may use entirely different types\n *     and ordering of the path segments to do so.\n * </ul>\n * Interesting issues which are not always obvious when using\n * the <code>Area</code> include:\n * <ul>\n * <li>Creating an <code>Area</code> from an unclosed (open)\n *     <code>Shape</code> results in a closed outline in the\n *     <code>Area</code> object.\n * <li>Creating an <code>Area</code> from a <code>Shape</code>\n *     which encloses no area (even when \"closed\") produces an\n *     empty <code>Area</code>.  A common example of this issue\n *     is that producing an <code>Area</code> from a line will\n *     be empty since the line encloses no area.  An empty\n *     <code>Area</code> will iterate no geometry in its\n *     <code>PathIterator</code> objects.\n * <li>A self-intersecting <code>Shape</code> may be split into\n *     two (or more) sub-paths each enclosing one of the\n *     non-intersecting portions of the original path.\n * <li>An <code>Area</code> may take more path segments to\n *     describe the same geometry even when the original\n *     outline is simple and obvious.  The analysis that the\n *     <code>Area</code> class must perform on the path may\n *     not reflect the same concepts of \"simple and obvious\"\n *     as a human being perceives.\n * </ul>\n *\n * @since 1.2\n ","description":"","name":"Area","qualified_name":"java.awt.geom.Area","type":2},{"comment":"\n * Thrown when an unknown but serious exception has occurred in the\n * Java Virtual Machine.\n *\n * @author unascribed\n * @since   JDK1.0\n ","description":"","name":"UnknownError","qualified_name":"java.lang.UnknownError","type":2},{"comment":"\n * This class implements a character buffer that can be used as a\n * character-input stream.\n *\n * @author      Herb Jellinek\n * @since       JDK1.1\n ","description":"","name":"CharArrayReader","qualified_name":"java.io.CharArrayReader","type":2},{"comment":"\n * An abstract adapter class for receiving mouse motion events.\n * The methods in this class are empty. This class exists as\n * convenience for creating listener objects.\n * <P>\n * Mouse motion events occur when a mouse is moved or dragged.\n * (Many such events will be generated in a normal program.\n * To track clicks and other mouse events, use the MouseAdapter.)\n * <P>\n * Extend this class to create a <code>MouseEvent</code> listener\n * and override the methods for the events of interest. (If you implement the\n * <code>MouseMotionListener</code> interface, you have to define all of\n * the methods in it. This abstract class defines null methods for them\n * all, so you can only have to define methods for events you care about.)\n * <P>\n * Create a listener object using the extended class and then register it with\n * a component using the component's <code>addMouseMotionListener</code>\n * method. When the mouse is moved or dragged, the relevant method in the\n * listener object is invoked and the <code>MouseEvent</code> is passed to it.\n *\n * @author Amy Fowler\n *\n * @see MouseEvent\n * @see MouseMotionListener\n * @see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/mousemotionlistener.html\">Tutorial: Writing a Mouse Motion Listener</a>\n *\n * @since 1.1\n ","description":"","name":"MouseMotionAdapter","qualified_name":"java.awt.event.MouseMotionAdapter","type":2},{"comment":"","description":"","name":"PixelInterleavedSampleModel","qualified_name":"java.awt.image.PixelInterleavedSampleModel","type":2},{"comment":"\n * This class creates a labeled button. The application can cause\n * some action to happen when the button is pushed. This image\n * depicts three views of a \"<code>Quit</code>\" button as it appears\n * under the Solaris operating system:\n * <p>\n * <img src=\"doc-files/Button-1.gif\" alt=\"The following context describes the graphic\"\n * style=\"float:center; margin: 7px 10px;\">\n * <p>\n * The first view shows the button as it appears normally.\n * The second view shows the button\n * when it has input focus. Its outline is darkened to let the\n * user know that it is an active object. The third view shows the\n * button when the user clicks the mouse over the button, and thus\n * requests that an action be performed.\n * <p>\n * The gesture of clicking on a button with the mouse\n * is associated with one instance of <code>ActionEvent</code>,\n * which is sent out when the mouse is both pressed and released\n * over the button. If an application is interested in knowing\n * when the button has been pressed but not released, as a separate\n * gesture, it can specialize <code>processMouseEvent</code>,\n * or it can register itself as a listener for mouse events by\n * calling <code>addMouseListener</code>. Both of these methods are\n * defined by <code>Component</code>, the abstract superclass of\n * all components.\n * <p>\n * When a button is pressed and released, AWT sends an instance\n * of <code>ActionEvent</code> to the button, by calling\n * <code>processEvent</code> on the button. The button's\n * <code>processEvent</code> method receives all events\n * for the button; it passes an action event along by\n * calling its own <code>processActionEvent</code> method.\n * The latter method passes the action event on to any action\n * listeners that have registered an interest in action\n * events generated by this button.\n * <p>\n * If an application wants to perform some action based on\n * a button being pressed and released, it should implement\n * <code>ActionListener</code> and register the new listener\n * to receive events from this button, by calling the button's\n * <code>addActionListener</code> method. The application can\n * make use of the button's action command as a messaging protocol.\n *\n * @author      Sami Shaio\n * @see         java.awt.event.ActionEvent\n * @see         java.awt.event.ActionListener\n * @see         java.awt.Component#processMouseEvent\n * @see         java.awt.Component#addMouseListener\n * @since       JDK1.0\n ","description":"","name":"Button","qualified_name":"java.awt.Button","type":2},{"comment":"\n * The peer interface for {@link TextField}.\n *\n * The peer interfaces are intended only for use in porting\n * the AWT. They are not intended for use by application\n * developers, and developers should not implement peers\n * nor invoke any of the peer methods directly on the peer\n * instances.\n ","description":"","name":"TextFieldPeer","qualified_name":"java.awt.peer.TextFieldPeer","type":3},{"comment":"\n * A class to encapsulate the bitmap representation of the mouse cursor.\n *\n * @see Component#setCursor\n * @author      Amy Fowler\n ","description":"","name":"Cursor","qualified_name":"java.awt.Cursor","type":2},{"comment":"","description":"","name":"ProxyPersistenceDelegate","qualified_name":"java.beans.MetaData.ProxyPersistenceDelegate","type":2},{"comment":"\n * A set of attributes which control the output of a printed page.\n * <p>\n * Instances of this class control the color state, paper size (media type),\n * orientation, logical origin, print quality, and resolution of every\n * page which uses the instance. Attribute names are compliant with the\n * Internet Printing Protocol (IPP) 1.1 where possible. Attribute values\n * are partially compliant where possible.\n * <p>\n * To use a method which takes an inner class type, pass a reference to\n * one of the constant fields of the inner class. Client code cannot create\n * new instances of the inner class types because none of those classes\n * has a public constructor. For example, to set the color state to\n * monochrome, use the following code:\n * <pre>\n * import java.awt.PageAttributes;\n *\n * public class MonochromeExample {\n *     public void setMonochrome(PageAttributes pageAttributes) {\n *         pageAttributes.setColor(PageAttributes.ColorType.MONOCHROME);\n *     }\n * }\n * </pre>\n * <p>\n * Every IPP attribute which supports an <i>attributeName</i>-default value\n * has a corresponding <code>set<i>attributeName</i>ToDefault</code> method.\n * Default value fields are not provided.\n *\n * @author      David Mendenhall\n * @since 1.3\n ","description":"","name":"PageAttributes","qualified_name":"java.awt.PageAttributes","type":2},{"comment":"","description":"","name":"DropTarget","qualified_name":"java.awt.dnd.DropTarget","type":2},{"comment":"\n * The Permission class for reflective operations.\n * <P>\n * The following table\n * provides a summary description of what the permission allows,\n * and discusses the risks of granting code the permission.\n *\n * <table border=1 cellpadding=5 summary=\"Table shows permission target name, what the permission allows, and associated risks\">\n * <tr>\n * <th>Permission Target Name</th>\n * <th>What the Permission Allows</th>\n * <th>Risks of Allowing this Permission</th>\n * </tr>\n *\n * <tr>\n *   <td>suppressAccessChecks</td>\n *   <td>ability to suppress the standard Java language access checks\n *       on fields and methods in a class; allow access not only public members\n *       but also allow access to default (package) access, protected,\n *       and private members.</td>\n *   <td>This is dangerous in that information (possibly confidential) and\n *       methods normally unavailable would be accessible to malicious code.</td>\n * </tr>\n * <tr>\n *   <td>newProxyInPackage.{package name}</td>\n *   <td>ability to create a proxy instance in the specified package of which\n *       the non-public interface that the proxy class implements.</td>\n *   <td>This gives code access to classes in packages to which it normally\n *       does not have access and the dynamic proxy class is in the system\n *       protection domain. Malicious code may use these classes to\n *       help in its attempt to compromise security in the system.</td>\n * </tr>\n *\n * </table>\n *\n * @see java.security.Permission\n * @see java.security.BasicPermission\n * @see AccessibleObject\n * @see Field#get\n * @see Field#set\n * @see Method#invoke\n * @see Constructor#newInstance\n * @see Proxy#newProxyInstance\n *\n * @since 1.2\n ","description":"","name":"ReflectPermission","qualified_name":"java.lang.reflect.ReflectPermission","type":2},{"comment":"\n * The abstract class <code>Image</code> is the superclass of all\n * classes that represent graphical images. The image must be\n * obtained in a platform-specific manner.\n *\n * @author      Sami Shaio\n * @author      Arthur van Hoff\n * @since       JDK1.0\n ","description":"","name":"Image","qualified_name":"java.awt.Image","type":2},{"comment":"\n * A VetoableChange event gets fired whenever a bean changes a \"constrained\"\n * property.  You can register a VetoableChangeListener with a source bean\n * so as to be notified of any constrained property updates.\n ","description":"","name":"VetoableChangeListener","qualified_name":"java.beans.VetoableChangeListener","type":3},{"comment":"\n     * Placeholder used in class descriptor and field reflector lookup tables\n     * for an entry in the process of being initialized.  (Internal) callers\n     * which receive an EntryFuture belonging to another thread as the result\n     * of a lookup should call the get() method of the EntryFuture; this will\n     * return the actual entry once it is ready for use and has been set().  To\n     * conserve objects, EntryFutures synchronize on themselves.\n     ","description":"","name":"EntryFuture","qualified_name":"java.io.ObjectStreamClass.EntryFuture","type":2},{"comment":"","description":"","name":"ProcessImpl","qualified_name":"java.lang.ProcessImpl","type":2},{"comment":"","description":"","name":"Math","qualified_name":"java.lang.Math","type":2},{"comment":"\n * The <code>RoundRectangle2D</code> class defines a rectangle with\n * rounded corners defined by a location {@code (x,y)}, a\n * dimension {@code (w x h)}, and the width and height of an arc\n * with which to round the corners.\n * <p>\n * This class is the abstract superclass for all objects that\n * store a 2D rounded rectangle.\n * The actual storage representation of the coordinates is left to\n * the subclass.\n *\n * @author      Jim Graham\n * @since 1.2\n ","description":"","name":"RoundRectangle2D","qualified_name":"java.awt.geom.RoundRectangle2D","type":2},{"comment":"","description":"","name":"CharacterName","qualified_name":"java.lang.CharacterName","type":2},{"comment":"\n     * A factory function that generates, defines and returns the proxy class given\n     * the ClassLoader and array of interfaces.\n     ","description":"","name":"ProxyClassFactory","qualified_name":"java.lang.reflect.Proxy.ProxyClassFactory","type":2},{"comment":"\n * Thrown when code that is dependent on a keyboard, display, or mouse\n * is called in an environment that does not support a keyboard, display,\n * or mouse.\n *\n * @since 1.4\n * @author  Michael Martak\n ","description":"","name":"HeadlessException","qualified_name":"java.awt.HeadlessException","type":2},{"comment":"\n * Thrown to indicate that a method has been passed an illegal or\n * inappropriate argument.\n *\n * @author  unascribed\n * @since   JDK1.0\n ","description":"","name":"IllegalArgumentException","qualified_name":"java.lang.IllegalArgumentException","type":2},{"comment":"\n * The <code>XMLEncoder</code> class is a complementary alternative to\n * the <code>ObjectOutputStream</code> and can used to generate\n * a textual representation of a <em>JavaBean</em> in the same\n * way that the <code>ObjectOutputStream</code> can\n * be used to create binary representation of <code>Serializable</code>\n * objects. For example, the following fragment can be used to create\n * a textual representation the supplied <em>JavaBean</em>\n * and all its properties:\n * <pre>\n *       XMLEncoder e = new XMLEncoder(\n *                          new BufferedOutputStream(\n *                              new FileOutputStream(\"Test.xml\")));\n *       e.writeObject(new JButton(\"Hello, world\"));\n *       e.close();\n * </pre>\n * Despite the similarity of their APIs, the <code>XMLEncoder</code>\n * class is exclusively designed for the purpose of archiving graphs\n * of <em>JavaBean</em>s as textual representations of their public\n * properties. Like Java source files, documents written this way\n * have a natural immunity to changes in the implementations of the classes\n * involved. The <code>ObjectOutputStream</code> continues to be recommended\n * for interprocess communication and general purpose serialization.\n * <p>\n * The <code>XMLEncoder</code> class provides a default denotation for\n * <em>JavaBean</em>s in which they are represented as XML documents\n * complying with version 1.0 of the XML specification and the\n * UTF-8 character encoding of the Unicode/ISO 10646 character set.\n * The XML documents produced by the <code>XMLEncoder</code> class are:\n * <ul>\n * <li>\n * <em>Portable and version resilient</em>: they have no dependencies\n * on the private implementation of any class and so, like Java source\n * files, they may be exchanged between environments which may have\n * different versions of some of the classes and between VMs from\n * different vendors.\n * <li>\n * <em>Structurally compact</em>: The <code>XMLEncoder</code> class\n * uses a <em>redundancy elimination</em> algorithm internally so that the\n * default values of a Bean's properties are not written to the stream.\n * <li>\n * <em>Fault tolerant</em>: Non-structural errors in the file,\n * caused either by damage to the file or by API changes\n * made to classes in an archive remain localized\n * so that a reader can report the error and continue to load the parts\n * of the document which were not affected by the error.\n * </ul>\n * <p>\n * Below is an example of an XML archive containing\n * some user interface components from the <em>swing</em> toolkit:\n * <pre>\n * &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n * &lt;java version=\"1.0\" class=\"java.beans.XMLDecoder\"&gt;\n * &lt;object class=\"javax.swing.JFrame\"&gt;\n *   &lt;void property=\"name\"&gt;\n *     &lt;string&gt;frame1&lt;/string&gt;\n *   &lt;/void&gt;\n *   &lt;void property=\"bounds\"&gt;\n *     &lt;object class=\"java.awt.Rectangle\"&gt;\n *       &lt;int&gt;0&lt;/int&gt;\n *       &lt;int&gt;0&lt;/int&gt;\n *       &lt;int&gt;200&lt;/int&gt;\n *       &lt;int&gt;200&lt;/int&gt;\n *     &lt;/object&gt;\n *   &lt;/void&gt;\n *   &lt;void property=\"contentPane\"&gt;\n *     &lt;void method=\"add\"&gt;\n *       &lt;object class=\"javax.swing.JButton\"&gt;\n *         &lt;void property=\"label\"&gt;\n *           &lt;string&gt;Hello&lt;/string&gt;\n *         &lt;/void&gt;\n *       &lt;/object&gt;\n *     &lt;/void&gt;\n *   &lt;/void&gt;\n *   &lt;void property=\"visible\"&gt;\n *     &lt;boolean&gt;true&lt;/boolean&gt;\n *   &lt;/void&gt;\n * &lt;/object&gt;\n * &lt;/java&gt;\n * </pre>\n * The XML syntax uses the following conventions:\n * <ul>\n * <li>\n * Each element represents a method call.\n * <li>\n * The \"object\" tag denotes an <em>expression</em> whose value is\n * to be used as the argument to the enclosing element.\n * <li>\n * The \"void\" tag denotes a <em>statement</em> which will\n * be executed, but whose result will not be used as an\n * argument to the enclosing method.\n * <li>\n * Elements which contain elements use those elements as arguments,\n * unless they have the tag: \"void\".\n * <li>\n * The name of the method is denoted by the \"method\" attribute.\n * <li>\n * XML's standard \"id\" and \"idref\" attributes are used to make\n * references to previous expressions - so as to deal with\n * circularities in the object graph.\n * <li>\n * The \"class\" attribute is used to specify the target of a static\n * method or constructor explicitly; its value being the fully\n * qualified name of the class.\n * <li>\n * Elements with the \"void\" tag are executed using\n * the outer context as the target if no target is defined\n * by a \"class\" attribute.\n * <li>\n * Java's String class is treated specially and is\n * written &lt;string&gt;Hello, world&lt;/string&gt; where\n * the characters of the string are converted to bytes\n * using the UTF-8 character encoding.\n * </ul>\n * <p>\n * Although all object graphs may be written using just these three\n * tags, the following definitions are included so that common\n * data structures can be expressed more concisely:\n * <p>\n * <ul>\n * <li>\n * The default method name is \"new\".\n * <li>\n * A reference to a java class is written in the form\n *  &lt;class&gt;javax.swing.JButton&lt;/class&gt;.\n * <li>\n * Instances of the wrapper classes for Java's primitive types are written\n * using the name of the primitive type as the tag. For example, an\n * instance of the <code>Integer</code> class could be written:\n * &lt;int&gt;123&lt;/int&gt;. Note that the <code>XMLEncoder</code> class\n * uses Java's reflection package in which the conversion between\n * Java's primitive types and their associated \"wrapper classes\"\n * is handled internally. The API for the <code>XMLEncoder</code> class\n * itself deals only with <code>Object</code>s.\n * <li>\n * In an element representing a nullary method whose name\n * starts with \"get\", the \"method\" attribute is replaced\n * with a \"property\" attribute whose value is given by removing\n * the \"get\" prefix and decapitalizing the result.\n * <li>\n * In an element representing a monadic method whose name\n * starts with \"set\", the \"method\" attribute is replaced\n * with a \"property\" attribute whose value is given by removing\n * the \"set\" prefix and decapitalizing the result.\n * <li>\n * In an element representing a method named \"get\" taking one\n * integer argument, the \"method\" attribute is replaced\n * with an \"index\" attribute whose value the value of the\n * first argument.\n * <li>\n * In an element representing a method named \"set\" taking two arguments,\n * the first of which is an integer, the \"method\" attribute is replaced\n * with an \"index\" attribute whose value the value of the\n * first argument.\n * <li>\n * A reference to an array is written using the \"array\"\n * tag. The \"class\" and \"length\" attributes specify the\n * sub-type of the array and its length respectively.\n * </ul>\n *\n *<p>\n * For more information you might also want to check out\n * <a\n href=\"http://java.sun.com/products/jfc/tsc/articles/persistence4\">Using XMLEncoder</a>,\n * an article in <em>The Swing Connection.</em>\n * @see XMLDecoder\n * @see java.io.ObjectOutputStream\n *\n * @since 1.4\n *\n * @author Philip Milne\n ","description":"","name":"XMLEncoder","qualified_name":"java.beans.XMLEncoder","type":2},{"comment":"\n * The {@code DataInput} interface provides\n * for reading bytes from a binary stream and\n * reconstructing from them data in any of\n * the Java primitive types. There is also\n * a\n * facility for reconstructing a {@code String}\n * from data in\n * <a href=\"#modified-utf-8\">modified UTF-8</a>\n * format.\n * <p>\n * It is generally true of all the reading\n * routines in this interface that if end of\n * file is reached before the desired number\n * of bytes has been read, an {@code EOFException}\n * (which is a kind of {@code IOException})\n * is thrown. If any byte cannot be read for\n * any reason other than end of file, an {@code IOException}\n * other than {@code EOFException} is\n * thrown. In particular, an {@code IOException}\n * may be thrown if the input stream has been\n * closed.\n *\n * <h3><a name=\"modified-utf-8\">Modified UTF-8</a></h3>\n * <p>\n * Implementations of the DataInput and DataOutput interfaces represent\n * Unicode strings in a format that is a slight modification of UTF-8.\n * (For information regarding the standard UTF-8 format, see section\n * <i>3.9 Unicode Encoding Forms</i> of <i>The Unicode Standard, Version\n * 4.0</i>).\n * Note that in the following table, the most significant bit appears in the\n * far left-hand column.\n *\n * <blockquote>\n *   <table border=\"1\" cellspacing=\"0\" cellpadding=\"8\"\n *          summary=\"Bit values and bytes\">\n *     <tr>\n *       <th colspan=\"9\"><span style=\"font-weight:normal\">\n *         All characters in the range {@code '\\u005Cu0001'} to\n *         {@code '\\u005Cu007F'} are represented by a single byte:</span></th>\n *     </tr>\n *     <tr>\n *       <td></td>\n *       <th colspan=\"8\" id=\"bit_a\">Bit Values</th>\n *     </tr>\n *     <tr>\n *       <th id=\"byte1_a\">Byte 1</th>\n *       <td><center>0</center>\n *       <td colspan=\"7\"><center>bits 6-0</center>\n *     </tr>\n *     <tr>\n *       <th colspan=\"9\"><span style=\"font-weight:normal\">\n *         The null character {@code '\\u005Cu0000'} and characters\n *         in the range {@code '\\u005Cu0080'} to {@code '\\u005Cu07FF'} are\n *         represented by a pair of bytes:</span></th>\n *     </tr>\n *     <tr>\n *       <td></td>\n *       <th colspan=\"8\" id=\"bit_b\">Bit Values</th>\n *     </tr>\n *     <tr>\n *       <th id=\"byte1_b\">Byte 1</th>\n *       <td><center>1</center>\n *       <td><center>1</center>\n *       <td><center>0</center>\n *       <td colspan=\"5\"><center>bits 10-6</center>\n *     </tr>\n *     <tr>\n *       <th id=\"byte2_a\">Byte 2</th>\n *       <td><center>1</center>\n *       <td><center>0</center>\n *       <td colspan=\"6\"><center>bits 5-0</center>\n *     </tr>\n *     <tr>\n *       <th colspan=\"9\"><span style=\"font-weight:normal\">\n *         {@code char} values in the range {@code '\\u005Cu0800'}\n *         to {@code '\\u005CuFFFF'} are represented by three bytes:</span></th>\n *     </tr>\n *     <tr>\n *       <td></td>\n *       <th colspan=\"8\"id=\"bit_c\">Bit Values</th>\n *     </tr>\n *     <tr>\n *       <th id=\"byte1_c\">Byte 1</th>\n *       <td><center>1</center>\n *       <td><center>1</center>\n *       <td><center>1</center>\n *       <td><center>0</center>\n *       <td colspan=\"4\"><center>bits 15-12</center>\n *     </tr>\n *     <tr>\n *       <th id=\"byte2_b\">Byte 2</th>\n *       <td><center>1</center>\n *       <td><center>0</center>\n *       <td colspan=\"6\"><center>bits 11-6</center>\n *     </tr>\n *     <tr>\n *       <th id=\"byte3\">Byte 3</th>\n *       <td><center>1</center>\n *       <td><center>0</center>\n *       <td colspan=\"6\"><center>bits 5-0</center>\n *     </tr>\n *   </table>\n * </blockquote>\n * <p>\n * The differences between this format and the\n * standard UTF-8 format are the following:\n * <ul>\n * <li>The null byte {@code '\\u005Cu0000'} is encoded in 2-byte format\n *     rather than 1-byte, so that the encoded strings never have\n *     embedded nulls.\n * <li>Only the 1-byte, 2-byte, and 3-byte formats are used.\n * <li><a href=\"../lang/Character.html#unicode\">Supplementary characters</a>\n *     are represented in the form of surrogate pairs.\n * </ul>\n * @author  Frank Yellin\n * @see     java.io.DataInputStream\n * @see     java.io.DataOutput\n * @since   JDK1.0\n ","description":"","name":"DataInput","qualified_name":"java.io.DataInput","type":3},{"comment":"\n * The <code>PageFormat</code> class describes the size and\n * orientation of a page to be printed.\n ","description":"","name":"PageFormat","qualified_name":"java.awt.print.PageFormat","type":2},{"comment":"\n * A border layout lays out a container, arranging and resizing\n * its components to fit in five regions:\n * north, south, east, west, and center.\n * Each region may contain no more than one component, and\n * is identified by a corresponding constant:\n * <code>NORTH</code>, <code>SOUTH</code>, <code>EAST</code>,\n * <code>WEST</code>, and <code>CENTER</code>.  When adding a\n * component to a container with a border layout, use one of these\n * five constants, for example:\n * <pre>\n *    Panel p = new Panel();\n *    p.setLayout(new BorderLayout());\n *    p.add(new Button(\"Okay\"), BorderLayout.SOUTH);\n * </pre>\n * As a convenience, <code>BorderLayout</code> interprets the\n * absence of a string specification the same as the constant\n * <code>CENTER</code>:\n * <pre>\n *    Panel p2 = new Panel();\n *    p2.setLayout(new BorderLayout());\n *    p2.add(new TextArea());  // Same as p.add(new TextArea(), BorderLayout.CENTER);\n * </pre>\n * <p>\n * In addition, <code>BorderLayout</code> supports the relative\n * positioning constants, <code>PAGE_START</code>, <code>PAGE_END</code>,\n * <code>LINE_START</code>, and <code>LINE_END</code>.\n * In a container whose <code>ComponentOrientation</code> is set to\n * <code>ComponentOrientation.LEFT_TO_RIGHT</code>, these constants map to\n * <code>NORTH</code>, <code>SOUTH</code>, <code>WEST</code>, and\n * <code>EAST</code>, respectively.\n * <p>\n * For compatibility with previous releases, <code>BorderLayout</code>\n * also includes the relative positioning constants <code>BEFORE_FIRST_LINE</code>,\n * <code>AFTER_LAST_LINE</code>, <code>BEFORE_LINE_BEGINS</code> and\n * <code>AFTER_LINE_ENDS</code>.  These are equivalent to\n * <code>PAGE_START</code>, <code>PAGE_END</code>, <code>LINE_START</code>\n * and <code>LINE_END</code> respectively.  For\n * consistency with the relative positioning constants used by other\n * components, the latter constants are preferred.\n * <p>\n * Mixing both absolute and relative positioning constants can lead to\n * unpredictable results.  If\n * you use both types, the relative constants will take precedence.\n * For example, if you add components using both the <code>NORTH</code>\n * and <code>PAGE_START</code> constants in a container whose\n * orientation is <code>LEFT_TO_RIGHT</code>, only the\n * <code>PAGE_START</code> will be layed out.\n * <p>\n * NOTE: Currently (in the Java 2 platform v1.2),\n * <code>BorderLayout</code> does not support vertical\n * orientations.  The <code>isVertical</code> setting on the container's\n * <code>ComponentOrientation</code> is not respected.\n * <p>\n * The components are laid out according to their\n * preferred sizes and the constraints of the container's size.\n * The <code>NORTH</code> and <code>SOUTH</code> components may\n * be stretched horizontally; the <code>EAST</code> and\n * <code>WEST</code> components may be stretched vertically;\n * the <code>CENTER</code> component may stretch both horizontally\n * and vertically to fill any space left over.\n * <p>\n * Here is an example of five buttons in an applet laid out using\n * the <code>BorderLayout</code> layout manager:\n * <p>\n * <img src=\"doc-files/BorderLayout-1.gif\"\n * alt=\"Diagram of an applet demonstrating BorderLayout.\n *      Each section of the BorderLayout contains a Button corresponding to its position in the layout, one of:\n *      North, West, Center, East, or South.\"\n * style=\"float:center; margin: 7px 10px;\">\n * <p>\n * The code for this applet is as follows:\n *\n * <hr><blockquote><pre>\n * import java.awt.*;\n * import java.applet.Applet;\n *\n * public class buttonDir extends Applet {\n *   public void init() {\n *     setLayout(new BorderLayout());\n *     add(new Button(\"North\"), BorderLayout.NORTH);\n *     add(new Button(\"South\"), BorderLayout.SOUTH);\n *     add(new Button(\"East\"), BorderLayout.EAST);\n *     add(new Button(\"West\"), BorderLayout.WEST);\n *     add(new Button(\"Center\"), BorderLayout.CENTER);\n *   }\n * }\n * </pre></blockquote><hr>\n * <p>\n * @author      Arthur van Hoff\n * @see         java.awt.Container#add(String, Component)\n * @see         java.awt.ComponentOrientation\n * @since       JDK1.0\n ","description":"","name":"BorderLayout","qualified_name":"java.awt.BorderLayout","type":2},{"comment":"\n * This <code>Graphics2D</code> class extends the\n * {@link Graphics} class to provide more sophisticated\n * control over geometry, coordinate transformations, color management,\n * and text layout.  This is the fundamental class for rendering\n * 2-dimensional shapes, text and images on the  Java(tm) platform.\n * <p>\n * <h2>Coordinate Spaces</h2>\n * All coordinates passed to a <code>Graphics2D</code> object are specified\n * in a device-independent coordinate system called User Space, which is\n * used by applications.  The <code>Graphics2D</code> object contains\n * an {@link AffineTransform} object as part of its rendering state\n * that defines how to convert coordinates from user space to\n * device-dependent coordinates in Device Space.\n * <p>\n * Coordinates in device space usually refer to individual device pixels\n * and are aligned on the infinitely thin gaps between these pixels.\n * Some <code>Graphics2D</code> objects can be used to capture rendering\n * operations for storage into a graphics metafile for playback on a\n * concrete device of unknown physical resolution at a later time.  Since\n * the resolution might not be known when the rendering operations are\n * captured, the <code>Graphics2D</code> <code>Transform</code> is set up\n * to transform user coordinates to a virtual device space that\n * approximates the expected resolution of the target device. Further\n * transformations might need to be applied at playback time if the\n * estimate is incorrect.\n * <p>\n * Some of the operations performed by the rendering attribute objects\n * occur in the device space, but all <code>Graphics2D</code> methods take\n * user space coordinates.\n * <p>\n * Every <code>Graphics2D</code> object is associated with a target that\n * defines where rendering takes place. A\n * {@link GraphicsConfiguration} object defines the characteristics\n * of the rendering target, such as pixel format and resolution.\n * The same rendering target is used throughout the life of a\n * <code>Graphics2D</code> object.\n * <p>\n * When creating a <code>Graphics2D</code> object,  the\n * <code>GraphicsConfiguration</code>\n * specifies the <a name=\"deftransform\">default transform</a> for\n * the target of the <code>Graphics2D</code> (a\n * {@link Component} or {@link Image}).  This default transform maps the\n * user space coordinate system to screen and printer device coordinates\n * such that the origin maps to the upper left hand corner of the\n * target region of the device with increasing X coordinates extending\n * to the right and increasing Y coordinates extending downward.\n * The scaling of the default transform is set to identity for those devices\n * that are close to 72 dpi, such as screen devices.\n * The scaling of the default transform is set to approximately 72 user\n * space coordinates per square inch for high resolution devices, such as\n * printers.  For image buffers, the default transform is the\n * <code>Identity</code> transform.\n *\n * <h2>Rendering Process</h2>\n * The Rendering Process can be broken down into four phases that are\n * controlled by the <code>Graphics2D</code> rendering attributes.\n * The renderer can optimize many of these steps, either by caching the\n * results for future calls, by collapsing multiple virtual steps into\n * a single operation, or by recognizing various attributes as common\n * simple cases that can be eliminated by modifying other parts of the\n * operation.\n * <p>\n * The steps in the rendering process are:\n * <ol>\n * <li>\n * Determine what to render.\n * <li>\n * Constrain the rendering operation to the current <code>Clip</code>.\n * The <code>Clip</code> is specified by a {@link Shape} in user\n * space and is controlled by the program using the various clip\n * manipulation methods of <code>Graphics</code> and\n * <code>Graphics2D</code>.  This <i>user clip</i>\n * is transformed into device space by the current\n * <code>Transform</code> and combined with the\n * <i>device clip</i>, which is defined by the visibility of windows and\n * device extents.  The combination of the user clip and device clip\n * defines the <i>composite clip</i>, which determines the final clipping\n * region.  The user clip is not modified by the rendering\n * system to reflect the resulting composite clip.\n * <li>\n * Determine what colors to render.\n * <li>\n * Apply the colors to the destination drawing surface using the current\n * {@link Composite} attribute in the <code>Graphics2D</code> context.\n * </ol>\n * <br>\n * The three types of rendering operations, along with details of each\n * of their particular rendering processes are:\n * <ol>\n * <li>\n * <b><a name=\"rendershape\"><code>Shape</code> operations</a></b>\n * <ol>\n * <li>\n * If the operation is a <code>draw(Shape)</code> operation, then\n * the  {@link Stroke#createStrokedShape(Shape) createStrokedShape}\n * method on the current {@link Stroke} attribute in the\n * <code>Graphics2D</code> context is used to construct a new\n * <code>Shape</code> object that contains the outline of the specified\n * <code>Shape</code>.\n * <li>\n * The <code>Shape</code> is transformed from user space to device space\n * using the current <code>Transform</code>\n * in the <code>Graphics2D</code> context.\n * <li>\n * The outline of the <code>Shape</code> is extracted using the\n * {@link Shape#getPathIterator(AffineTransform) getPathIterator} method of\n * <code>Shape</code>, which returns a\n * {@link java.awt.geom.PathIterator PathIterator}\n * object that iterates along the boundary of the <code>Shape</code>.\n * <li>\n * If the <code>Graphics2D</code> object cannot handle the curved segments\n * that the <code>PathIterator</code> object returns then it can call the\n * alternate\n * {@link Shape#getPathIterator(AffineTransform, double) getPathIterator}\n * method of <code>Shape</code>, which flattens the <code>Shape</code>.\n * <li>\n * The current {@link Paint} in the <code>Graphics2D</code> context\n * is queried for a {@link PaintContext}, which specifies the\n * colors to render in device space.\n * </ol>\n * <li>\n * <b><a name=rendertext>Text operations</a></b>\n * <ol>\n * <li>\n * The following steps are used to determine the set of glyphs required\n * to render the indicated <code>String</code>:\n * <ol>\n * <li>\n * If the argument is a <code>String</code>, then the current\n * <code>Font</code> in the <code>Graphics2D</code> context is asked to\n * convert the Unicode characters in the <code>String</code> into a set of\n * glyphs for presentation with whatever basic layout and shaping\n * algorithms the font implements.\n * <li>\n * If the argument is an\n * {@link AttributedCharacterIterator},\n * the iterator is asked to convert itself to a\n * {@link java.awt.font.TextLayout TextLayout}\n * using its embedded font attributes. The <code>TextLayout</code>\n * implements more sophisticated glyph layout algorithms that\n * perform Unicode bi-directional layout adjustments automatically\n * for multiple fonts of differing writing directions.\n  * <li>\n * If the argument is a\n * {@link GlyphVector}, then the\n * <code>GlyphVector</code> object already contains the appropriate\n * font-specific glyph codes with explicit coordinates for the position of\n * each glyph.\n * </ol>\n * <li>\n * The current <code>Font</code> is queried to obtain outlines for the\n * indicated glyphs.  These outlines are treated as shapes in user space\n * relative to the position of each glyph that was determined in step 1.\n * <li>\n * The character outlines are filled as indicated above\n * under <a href=\"#rendershape\"><code>Shape</code> operations</a>.\n * <li>\n * The current <code>Paint</code> is queried for a\n * <code>PaintContext</code>, which specifies\n * the colors to render in device space.\n * </ol>\n * <li>\n * <b><a name= renderingimage><code>Image</code> Operations</a></b>\n * <ol>\n * <li>\n * The region of interest is defined by the bounding box of the source\n * <code>Image</code>.\n * This bounding box is specified in Image Space, which is the\n * <code>Image</code> object's local coordinate system.\n * <li>\n * If an <code>AffineTransform</code> is passed to\n * {@link #drawImage(java.awt.Image, java.awt.geom.AffineTransform, java.awt.image.ImageObserver) drawImage(Image, AffineTransform, ImageObserver)},\n * the <code>AffineTransform</code> is used to transform the bounding\n * box from image space to user space. If no <code>AffineTransform</code>\n * is supplied, the bounding box is treated as if it is already in user space.\n * <li>\n * The bounding box of the source <code>Image</code> is transformed from user\n * space into device space using the current <code>Transform</code>.\n * Note that the result of transforming the bounding box does not\n * necessarily result in a rectangular region in device space.\n * <li>\n * The <code>Image</code> object determines what colors to render,\n * sampled according to the source to destination\n * coordinate mapping specified by the current <code>Transform</code> and the\n * optional image transform.\n * </ol>\n * </ol>\n *\n * <h2>Default Rendering Attributes</h2>\n * The default values for the <code>Graphics2D</code> rendering attributes are:\n * <dl compact>\n * <dt><i><code>Paint</code></i>\n * <dd>The color of the <code>Component</code>.\n * <dt><i><code>Font</code></i>\n * <dd>The <code>Font</code> of the <code>Component</code>.\n * <dt><i><code>Stroke</code></i>\n * <dd>A square pen with a linewidth of 1, no dashing, miter segment joins\n * and square end caps.\n * <dt><i><code>Transform</code></i>\n * <dd>The\n * {@link GraphicsConfiguration#getDefaultTransform() getDefaultTransform}\n * for the <code>GraphicsConfiguration</code> of the <code>Component</code>.\n * <dt><i><code>Composite</code></i>\n * <dd>The {@link AlphaComposite#SRC_OVER} rule.\n * <dt><i><code>Clip</code></i>\n * <dd>No rendering <code>Clip</code>, the output is clipped to the\n * <code>Component</code>.\n * </dl>\n *\n * <h2>Rendering Compatibility Issues</h2>\n * The JDK(tm) 1.1 rendering model is based on a pixelization model\n * that specifies that coordinates\n * are infinitely thin, lying between the pixels.  Drawing operations are\n * performed using a one-pixel wide pen that fills the\n * pixel below and to the right of the anchor point on the path.\n * The JDK 1.1 rendering model is consistent with the\n * capabilities of most of the existing class of platform\n * renderers that need  to resolve integer coordinates to a\n * discrete pen that must fall completely on a specified number of pixels.\n * <p>\n * The Java 2D(tm) (Java(tm) 2 platform) API supports antialiasing renderers.\n * A pen with a width of one pixel does not need to fall\n * completely on pixel N as opposed to pixel N+1.  The pen can fall\n * partially on both pixels. It is not necessary to choose a bias\n * direction for a wide pen since the blending that occurs along the\n * pen traversal edges makes the sub-pixel position of the pen\n * visible to the user.  On the other hand, when antialiasing is\n * turned off by setting the\n * {@link RenderingHints#KEY_ANTIALIASING KEY_ANTIALIASING} hint key\n * to the\n * {@link RenderingHints#VALUE_ANTIALIAS_OFF VALUE_ANTIALIAS_OFF}\n * hint value, the renderer might need\n * to apply a bias to determine which pixel to modify when the pen\n * is straddling a pixel boundary, such as when it is drawn\n * along an integer coordinate in device space.  While the capabilities\n * of an antialiasing renderer make it no longer necessary for the\n * rendering model to specify a bias for the pen, it is desirable for the\n * antialiasing and non-antialiasing renderers to perform similarly for\n * the common cases of drawing one-pixel wide horizontal and vertical\n * lines on the screen.  To ensure that turning on antialiasing by\n * setting the\n * {@link RenderingHints#KEY_ANTIALIASING KEY_ANTIALIASING} hint\n * key to\n * {@link RenderingHints#VALUE_ANTIALIAS_ON VALUE_ANTIALIAS_ON}\n * does not cause such lines to suddenly become twice as wide and half\n * as opaque, it is desirable to have the model specify a path for such\n * lines so that they completely cover a particular set of pixels to help\n * increase their crispness.\n * <p>\n * Java 2D API maintains compatibility with JDK 1.1 rendering\n * behavior, such that legacy operations and existing renderer\n * behavior is unchanged under Java 2D API.  Legacy\n * methods that map onto general <code>draw</code> and\n * <code>fill</code> methods are defined, which clearly indicates\n * how <code>Graphics2D</code> extends <code>Graphics</code> based\n * on settings of <code>Stroke</code> and <code>Transform</code>\n * attributes and rendering hints.  The definition\n * performs identically under default attribute settings.\n * For example, the default <code>Stroke</code> is a\n * <code>BasicStroke</code> with a width of 1 and no dashing and the\n * default Transform for screen drawing is an Identity transform.\n * <p>\n * The following two rules provide predictable rendering behavior whether\n * aliasing or antialiasing is being used.\n * <ul>\n * <li> Device coordinates are defined to be between device pixels which\n * avoids any inconsistent results between aliased and antialiased\n * rendering.  If coordinates were defined to be at a pixel's center, some\n * of the pixels covered by a shape, such as a rectangle, would only be\n * half covered.\n * With aliased rendering, the half covered pixels would either be\n * rendered inside the shape or outside the shape.  With anti-aliased\n * rendering, the pixels on the entire edge of the shape would be half\n * covered.  On the other hand, since coordinates are defined to be\n * between pixels, a shape like a rectangle would have no half covered\n * pixels, whether or not it is rendered using antialiasing.\n * <li> Lines and paths stroked using the <code>BasicStroke</code>\n * object may be \"normalized\" to provide consistent rendering of the\n * outlines when positioned at various points on the drawable and\n * whether drawn with aliased or antialiased rendering.  This\n * normalization process is controlled by the\n * {@link RenderingHints#KEY_STROKE_CONTROL KEY_STROKE_CONTROL} hint.\n * The exact normalization algorithm is not specified, but the goals\n * of this normalization are to ensure that lines are rendered with\n * consistent visual appearance regardless of how they fall on the\n * pixel grid and to promote more solid horizontal and vertical\n * lines in antialiased mode so that they resemble their non-antialiased\n * counterparts more closely.  A typical normalization step might\n * promote antialiased line endpoints to pixel centers to reduce the\n * amount of blending or adjust the subpixel positioning of\n * non-antialiased lines so that the floating point line widths\n * round to even or odd pixel counts with equal likelihood.  This\n * process can move endpoints by up to half a pixel (usually towards\n * positive infinity along both axes) to promote these consistent\n * results.\n * </ul>\n * <p>\n * The following definitions of general legacy methods\n * perform identically to previously specified behavior under default\n * attribute settings:\n * <ul>\n * <li>\n * For <code>fill</code> operations, including <code>fillRect</code>,\n * <code>fillRoundRect</code>, <code>fillOval</code>,\n * <code>fillArc</code>, <code>fillPolygon</code>, and\n * <code>clearRect</code>, {@link #fill(Shape) fill} can now be called\n * with the desired <code>Shape</code>.  For example, when filling a\n * rectangle:\n * <pre>\n * fill(new Rectangle(x, y, w, h));\n * </pre>\n * is called.\n * <p>\n * <li>\n * Similarly, for draw operations, including <code>drawLine</code>,\n * <code>drawRect</code>, <code>drawRoundRect</code>,\n * <code>drawOval</code>, <code>drawArc</code>, <code>drawPolyline</code>,\n * and <code>drawPolygon</code>, {@link #draw(Shape) draw} can now be\n * called with the desired <code>Shape</code>.  For example, when drawing a\n * rectangle:\n * <pre>\n * draw(new Rectangle(x, y, w, h));\n * </pre>\n * is called.\n * <p>\n * <li>\n * The <code>draw3DRect</code> and <code>fill3DRect</code> methods were\n * implemented in terms of the <code>drawLine</code> and\n * <code>fillRect</code> methods in the <code>Graphics</code> class which\n * would predicate their behavior upon the current <code>Stroke</code>\n * and <code>Paint</code> objects in a <code>Graphics2D</code> context.\n * This class overrides those implementations with versions that use\n * the current <code>Color</code> exclusively, overriding the current\n * <code>Paint</code> and which uses <code>fillRect</code> to describe\n * the exact same behavior as the preexisting methods regardless of the\n * setting of the current <code>Stroke</code>.\n * </ul>\n * The <code>Graphics</code> class defines only the <code>setColor</code>\n * method to control the color to be painted.  Since the Java 2D API extends\n * the <code>Color</code> object to implement the new <code>Paint</code>\n * interface, the existing\n * <code>setColor</code> method is now a convenience method for setting the\n * current <code>Paint</code> attribute to a <code>Color</code> object.\n * <code>setColor(c)</code> is equivalent to <code>setPaint(c)</code>.\n * <p>\n * The <code>Graphics</code> class defines two methods for controlling\n * how colors are applied to the destination.\n * <ol>\n * <li>\n * The <code>setPaintMode</code> method is implemented as a convenience\n * method to set the default <code>Composite</code>, equivalent to\n * <code>setComposite(new AlphaComposite.SrcOver)</code>.\n * <li>\n * The <code>setXORMode(Color xorcolor)</code> method is implemented\n * as a convenience method to set a special <code>Composite</code> object that\n * ignores the <code>Alpha</code> components of source colors and sets the\n * destination color to the value:\n * <pre>\n * dstpixel = (PixelOf(srccolor) ^ PixelOf(xorcolor) ^ dstpixel);\n * </pre>\n * </ol>\n *\n * @author Jim Graham\n * @see java.awt.RenderingHints\n ","description":"","name":"Graphics2D","qualified_name":"java.awt.Graphics2D","type":2},{"comment":"\n     * a key used for proxy class with 2 implemented interfaces\n     ","description":"","name":"Key2","qualified_name":"java.lang.reflect.Proxy.Key2","type":2},{"comment":"\n * An ExceptionListener is notified of internal exceptions.\n *\n * @since 1.4\n *\n * @author Philip Milne\n ","description":"","name":"ExceptionListener","qualified_name":"java.beans.ExceptionListener","type":3},{"comment":"","description":"","name":"BeanContextServiceAvailableEvent","qualified_name":"java.beans.beancontext.BeanContextServiceAvailableEvent","type":2},{"comment":"","description":"","name":"GlyphJustificationInfo","qualified_name":"java.awt.font.GlyphJustificationInfo","type":2},{"comment":"\n     * A <em>lookup object</em> is a factory for creating method handles,\n     * when the creation requires access checking.\n     * Method handles do not perform\n     * access checks when they are called, but rather when they are created.\n     * Therefore, method handle access\n     * restrictions must be enforced when a method handle is created.\n     * The caller class against which those restrictions are enforced\n     * is known as the {@linkplain #lookupClass lookup class}.\n     * <p>\n     * A lookup class which needs to create method handles will call\n     * {@link MethodHandles#lookup MethodHandles.lookup} to create a factory for itself.\n     * When the {@code Lookup} factory object is created, the identity of the lookup class is\n     * determined, and securely stored in the {@code Lookup} object.\n     * The lookup class (or its delegates) may then use factory methods\n     * on the {@code Lookup} object to create method handles for access-checked members.\n     * This includes all methods, constructors, and fields which are allowed to the lookup class,\n     * even private ones.\n     *\n     * <h1><a name=\"lookups\"></a>Lookup Factory Methods</h1>\n     * The factory methods on a {@code Lookup} object correspond to all major\n     * use cases for methods, constructors, and fields.\n     * Each method handle created by a factory method is the functional\n     * equivalent of a particular <em>bytecode behavior</em>.\n     * (Bytecode behaviors are described in section 5.4.3.5 of the Java Virtual Machine Specification.)\n     * Here is a summary of the correspondence between these factory methods and\n     * the behavior the resulting method handles:\n     * <table border=1 cellpadding=5 summary=\"lookup method behaviors\">\n     * <tr>\n     *     <th><a name=\"equiv\"></a>lookup expression</th>\n     *     <th>member</th>\n     *     <th>bytecode behavior</th>\n     * </tr>\n     * <tr>\n     *     <td>{@link java.lang.invoke.MethodHandles.Lookup#findGetter lookup.findGetter(C.class,\"f\",FT.class)}</td>\n     *     <td>{@code FT f;}</td><td>{@code (T) this.f;}</td>\n     * </tr>\n     * <tr>\n     *     <td>{@link java.lang.invoke.MethodHandles.Lookup#findStaticGetter lookup.findStaticGetter(C.class,\"f\",FT.class)}</td>\n     *     <td>{@code static}<br>{@code FT f;}</td><td>{@code (T) C.f;}</td>\n     * </tr>\n     * <tr>\n     *     <td>{@link java.lang.invoke.MethodHandles.Lookup#findSetter lookup.findSetter(C.class,\"f\",FT.class)}</td>\n     *     <td>{@code FT f;}</td><td>{@code this.f = x;}</td>\n     * </tr>\n     * <tr>\n     *     <td>{@link java.lang.invoke.MethodHandles.Lookup#findStaticSetter lookup.findStaticSetter(C.class,\"f\",FT.class)}</td>\n     *     <td>{@code static}<br>{@code FT f;}</td><td>{@code C.f = arg;}</td>\n     * </tr>\n     * <tr>\n     *     <td>{@link java.lang.invoke.MethodHandles.Lookup#findVirtual lookup.findVirtual(C.class,\"m\",MT)}</td>\n     *     <td>{@code T m(A*);}</td><td>{@code (T) this.m(arg*);}</td>\n     * </tr>\n     * <tr>\n     *     <td>{@link java.lang.invoke.MethodHandles.Lookup#findStatic lookup.findStatic(C.class,\"m\",MT)}</td>\n     *     <td>{@code static}<br>{@code T m(A*);}</td><td>{@code (T) C.m(arg*);}</td>\n     * </tr>\n     * <tr>\n     *     <td>{@link java.lang.invoke.MethodHandles.Lookup#findSpecial lookup.findSpecial(C.class,\"m\",MT,this.class)}</td>\n     *     <td>{@code T m(A*);}</td><td>{@code (T) super.m(arg*);}</td>\n     * </tr>\n     * <tr>\n     *     <td>{@link java.lang.invoke.MethodHandles.Lookup#findConstructor lookup.findConstructor(C.class,MT)}</td>\n     *     <td>{@code C(A*);}</td><td>{@code new C(arg*);}</td>\n     * </tr>\n     * <tr>\n     *     <td>{@link java.lang.invoke.MethodHandles.Lookup#unreflectGetter lookup.unreflectGetter(aField)}</td>\n     *     <td>({@code static})?<br>{@code FT f;}</td><td>{@code (FT) aField.get(thisOrNull);}</td>\n     * </tr>\n     * <tr>\n     *     <td>{@link java.lang.invoke.MethodHandles.Lookup#unreflectSetter lookup.unreflectSetter(aField)}</td>\n     *     <td>({@code static})?<br>{@code FT f;}</td><td>{@code aField.set(thisOrNull, arg);}</td>\n     * </tr>\n     * <tr>\n     *     <td>{@link java.lang.invoke.MethodHandles.Lookup#unreflect lookup.unreflect(aMethod)}</td>\n     *     <td>({@code static})?<br>{@code T m(A*);}</td><td>{@code (T) aMethod.invoke(thisOrNull, arg*);}</td>\n     * </tr>\n     * <tr>\n     *     <td>{@link java.lang.invoke.MethodHandles.Lookup#unreflectConstructor lookup.unreflectConstructor(aConstructor)}</td>\n     *     <td>{@code C(A*);}</td><td>{@code (C) aConstructor.newInstance(arg*);}</td>\n     * </tr>\n     * <tr>\n     *     <td>{@link java.lang.invoke.MethodHandles.Lookup#unreflect lookup.unreflect(aMethod)}</td>\n     *     <td>({@code static})?<br>{@code T m(A*);}</td><td>{@code (T) aMethod.invoke(thisOrNull, arg*);}</td>\n     * </tr>\n     * </table>\n     *\n     * Here, the type {@code C} is the class or interface being searched for a member,\n     * documented as a parameter named {@code refc} in the lookup methods.\n     * The method type {@code MT} is composed from the return type {@code T}\n     * and the sequence of argument types {@code A*}.\n     * The constructor also has a sequence of argument types {@code A*} and\n     * is deemed to return the newly-created object of type {@code C}.\n     * Both {@code MT} and the field type {@code FT} are documented as a parameter named {@code type}.\n     * The formal parameter {@code this} stands for the self-reference of type {@code C};\n     * if it is present, it is always the leading argument to the method handle invocation.\n     * (In the case of some {@code protected} members, {@code this} may be\n     * restricted in type to the lookup class; see below.)\n     * The name {@code arg} stands for all the other method handle arguments.\n     * In the code examples for the Core Reflection API, the name {@code thisOrNull}\n     * stands for a null reference if the accessed method or field is static,\n     * and {@code this} otherwise.\n     * The names {@code aMethod}, {@code aField}, and {@code aConstructor} stand\n     * for reflective objects corresponding to the given members.\n     * <p>\n     * In cases where the given member is of variable arity (i.e., a method or constructor)\n     * the returned method handle will also be of {@linkplain MethodHandle#asVarargsCollector variable arity}.\n     * In all other cases, the returned method handle will be of fixed arity.\n     * <p style=\"font-size:smaller;\">\n     * <em>Discussion:</em>\n     * The equivalence between looked-up method handles and underlying\n     * class members and bytecode behaviors\n     * can break down in a few ways:\n     * <ul style=\"font-size:smaller;\">\n     * <li>If {@code C} is not symbolically accessible from the lookup class's loader,\n     * the lookup can still succeed, even when there is no equivalent\n     * Java expression or bytecoded constant.\n     * <li>Likewise, if {@code T} or {@code MT}\n     * is not symbolically accessible from the lookup class's loader,\n     * the lookup can still succeed.\n     * For example, lookups for {@code MethodHandle.invokeExact} and\n     * {@code MethodHandle.invoke} will always succeed, regardless of requested type.\n     * <li>If there is a security manager installed, it can forbid the lookup\n     * on various grounds (<a href=\"MethodHandles.Lookup.html#secmgr\">see below</a>).\n     * By contrast, the {@code ldc} instruction on a {@code CONSTANT_MethodHandle}\n     * constant is not subject to security manager checks.\n     * <li>If the looked-up method has a\n     * <a href=\"MethodHandle.html#maxarity\">very large arity</a>,\n     * the method handle creation may fail, due to the method handle\n     * type having too many parameters.\n     * </ul>\n     *\n     * <h1><a name=\"access\"></a>Access checking</h1>\n     * Access checks are applied in the factory methods of {@code Lookup},\n     * when a method handle is created.\n     * This is a key difference from the Core Reflection API, since\n     * {@link java.lang.reflect.Method#invoke java.lang.reflect.Method.invoke}\n     * performs access checking against every caller, on every call.\n     * <p>\n     * All access checks start from a {@code Lookup} object, which\n     * compares its recorded lookup class against all requests to\n     * create method handles.\n     * A single {@code Lookup} object can be used to create any number\n     * of access-checked method handles, all checked against a single\n     * lookup class.\n     * <p>\n     * A {@code Lookup} object can be shared with other trusted code,\n     * such as a metaobject protocol.\n     * A shared {@code Lookup} object delegates the capability\n     * to create method handles on private members of the lookup class.\n     * Even if privileged code uses the {@code Lookup} object,\n     * the access checking is confined to the privileges of the\n     * original lookup class.\n     * <p>\n     * A lookup can fail, because\n     * the containing class is not accessible to the lookup class, or\n     * because the desired class member is missing, or because the\n     * desired class member is not accessible to the lookup class, or\n     * because the lookup object is not trusted enough to access the member.\n     * In any of these cases, a {@code ReflectiveOperationException} will be\n     * thrown from the attempted lookup.  The exact class will be one of\n     * the following:\n     * <ul>\n     * <li>NoSuchMethodException &mdash; if a method is requested but does not exist\n     * <li>NoSuchFieldException &mdash; if a field is requested but does not exist\n     * <li>IllegalAccessException &mdash; if the member exists but an access check fails\n     * </ul>\n     * <p>\n     * In general, the conditions under which a method handle may be\n     * looked up for a method {@code M} are no more restrictive than the conditions\n     * under which the lookup class could have compiled, verified, and resolved a call to {@code M}.\n     * Where the JVM would raise exceptions like {@code NoSuchMethodError},\n     * a method handle lookup will generally raise a corresponding\n     * checked exception, such as {@code NoSuchMethodException}.\n     * And the effect of invoking the method handle resulting from the lookup\n     * is <a href=\"MethodHandles.Lookup.html#equiv\">exactly equivalent</a>\n     * to executing the compiled, verified, and resolved call to {@code M}.\n     * The same point is true of fields and constructors.\n     * <p style=\"font-size:smaller;\">\n     * <em>Discussion:</em>\n     * Access checks only apply to named and reflected methods,\n     * constructors, and fields.\n     * Other method handle creation methods, such as\n     * {@link MethodHandle#asType MethodHandle.asType},\n     * do not require any access checks, and are used\n     * independently of any {@code Lookup} object.\n     * <p>\n     * If the desired member is {@code protected}, the usual JVM rules apply,\n     * including the requirement that the lookup class must be either be in the\n     * same package as the desired member, or must inherit that member.\n     * (See the Java Virtual Machine Specification, sections 4.9.2, 5.4.3.5, and 6.4.)\n     * In addition, if the desired member is a non-static field or method\n     * in a different package, the resulting method handle may only be applied\n     * to objects of the lookup class or one of its subclasses.\n     * This requirement is enforced by narrowing the type of the leading\n     * {@code this} parameter from {@code C}\n     * (which will necessarily be a superclass of the lookup class)\n     * to the lookup class itself.\n     * <p>\n     * The JVM imposes a similar requirement on {@code invokespecial} instruction,\n     * that the receiver argument must match both the resolved method <em>and</em>\n     * the current class.  Again, this requirement is enforced by narrowing the\n     * type of the leading parameter to the resulting method handle.\n     * (See the Java Virtual Machine Specification, section 4.10.1.9.)\n     * <p>\n     * The JVM represents constructors and static initializer blocks as internal methods\n     * with special names ({@code \"<init>\"} and {@code \"<clinit>\"}).\n     * The internal syntax of invocation instructions allows them to refer to such internal\n     * methods as if they were normal methods, but the JVM bytecode verifier rejects them.\n     * A lookup of such an internal method will produce a {@code NoSuchMethodException}.\n     * <p>\n     * In some cases, access between nested classes is obtained by the Java compiler by creating\n     * an wrapper method to access a private method of another class\n     * in the same top-level declaration.\n     * For example, a nested class {@code C.D}\n     * can access private members within other related classes such as\n     * {@code C}, {@code C.D.E}, or {@code C.B},\n     * but the Java compiler may need to generate wrapper methods in\n     * those related classes.  In such cases, a {@code Lookup} object on\n     * {@code C.E} would be unable to those private members.\n     * A workaround for this limitation is the {@link Lookup#in Lookup.in} method,\n     * which can transform a lookup on {@code C.E} into one on any of those other\n     * classes, without special elevation of privilege.\n     * <p>\n     * The accesses permitted to a given lookup object may be limited,\n     * according to its set of {@link #lookupModes lookupModes},\n     * to a subset of members normally accessible to the lookup class.\n     * For example, the {@link MethodHandles#publicLookup publicLookup}\n     * method produces a lookup object which is only allowed to access\n     * public members in public classes.\n     * The caller sensitive method {@link MethodHandles#lookup lookup}\n     * produces a lookup object with full capabilities relative to\n     * its caller class, to emulate all supported bytecode behaviors.\n     * Also, the {@link Lookup#in Lookup.in} method may produce a lookup object\n     * with fewer access modes than the original lookup object.\n     *\n     * <p style=\"font-size:smaller;\">\n     * <a name=\"privacc\"></a>\n     * <em>Discussion of private access:</em>\n     * We say that a lookup has <em>private access</em>\n     * if its {@linkplain #lookupModes lookup modes}\n     * include the possibility of accessing {@code private} members.\n     * As documented in the relevant methods elsewhere,\n     * only lookups with private access possess the following capabilities:\n     * <ul style=\"font-size:smaller;\">\n     * <li>access private fields, methods, and constructors of the lookup class\n     * <li>create method handles which invoke <a href=\"MethodHandles.Lookup.html#callsens\">caller sensitive</a> methods,\n     *     such as {@code Class.forName}\n     * <li>create method handles which {@link Lookup#findSpecial emulate invokespecial} instructions\n     * <li>avoid <a href=\"MethodHandles.Lookup.html#secmgr\">package access checks</a>\n     *     for classes accessible to the lookup class\n     * <li>create {@link Lookup#in delegated lookup objects} which have private access to other classes\n     *     within the same package member\n     * </ul>\n     * <p style=\"font-size:smaller;\">\n     * Each of these permissions is a consequence of the fact that a lookup object\n     * with private access can be securely traced back to an originating class,\n     * whose <a href=\"MethodHandles.Lookup.html#equiv\">bytecode behaviors</a> and Java language access permissions\n     * can be reliably determined and emulated by method handles.\n     *\n     * <h1><a name=\"secmgr\"></a>Security manager interactions</h1>\n     * Although bytecode instructions can only refer to classes in\n     * a related class loader, this API can search for methods in any\n     * class, as long as a reference to its {@code Class} object is\n     * available.  Such cross-loader references are also possible with the\n     * Core Reflection API, and are impossible to bytecode instructions\n     * such as {@code invokestatic} or {@code getfield}.\n     * There is a {@linkplain java.lang.SecurityManager security manager API}\n     * to allow applications to check such cross-loader references.\n     * These checks apply to both the {@code MethodHandles.Lookup} API\n     * and the Core Reflection API\n     * (as found on {@link java.lang.Class Class}).\n     * <p>\n     * If a security manager is present, member lookups are subject to\n     * additional checks.\n     * From one to three calls are made to the security manager.\n     * Any of these calls can refuse access by throwing a\n     * {@link java.lang.SecurityException SecurityException}.\n     * Define {@code smgr} as the security manager,\n     * {@code lookc} as the lookup class of the current lookup object,\n     * {@code refc} as the containing class in which the member\n     * is being sought, and {@code defc} as the class in which the\n     * member is actually defined.\n     * The value {@code lookc} is defined as <em>not present</em>\n     * if the current lookup object does not have\n     * <a href=\"MethodHandles.Lookup.html#privacc\">private access</a>.\n     * The calls are made according to the following rules:\n     * <ul>\n     * <li><b>Step 1:</b>\n     *     If {@code lookc} is not present, or if its class loader is not\n     *     the same as or an ancestor of the class loader of {@code refc},\n     *     then {@link SecurityManager#checkPackageAccess\n     *     smgr.checkPackageAccess(refcPkg)} is called,\n     *     where {@code refcPkg} is the package of {@code refc}.\n     * <li><b>Step 2:</b>\n     *     If the retrieved member is not public and\n     *     {@code lookc} is not present, then\n     *     {@link SecurityManager#checkPermission smgr.checkPermission}\n     *     with {@code RuntimePermission(\"accessDeclaredMembers\")} is called.\n     * <li><b>Step 3:</b>\n     *     If the retrieved member is not public,\n     *     and if {@code lookc} is not present,\n     *     and if {@code defc} and {@code refc} are different,\n     *     then {@link SecurityManager#checkPackageAccess\n     *     smgr.checkPackageAccess(defcPkg)} is called,\n     *     where {@code defcPkg} is the package of {@code defc}.\n     * </ul>\n     * Security checks are performed after other access checks have passed.\n     * Therefore, the above rules presuppose a member that is public,\n     * or else that is being accessed from a lookup class that has\n     * rights to access the member.\n     *\n     * <h1><a name=\"callsens\"></a>Caller sensitive methods</h1>\n     * A small number of Java methods have a special property called caller sensitivity.\n     * A <em>caller-sensitive</em> method can behave differently depending on the\n     * identity of its immediate caller.\n     * <p>\n     * If a method handle for a caller-sensitive method is requested,\n     * the general rules for <a href=\"MethodHandles.Lookup.html#equiv\">bytecode behaviors</a> apply,\n     * but they take account of the lookup class in a special way.\n     * The resulting method handle behaves as if it were called\n     * from an instruction contained in the lookup class,\n     * so that the caller-sensitive method detects the lookup class.\n     * (By contrast, the invoker of the method handle is disregarded.)\n     * Thus, in the case of caller-sensitive methods,\n     * different lookup classes may give rise to\n     * differently behaving method handles.\n     * <p>\n     * In cases where the lookup object is\n     * {@link MethodHandles#publicLookup() publicLookup()},\n     * or some other lookup object without\n     * <a href=\"MethodHandles.Lookup.html#privacc\">private access</a>,\n     * the lookup class is disregarded.\n     * In such cases, no caller-sensitive method handle can be created,\n     * access is forbidden, and the lookup fails with an\n     * {@code IllegalAccessException}.\n     * <p style=\"font-size:smaller;\">\n     * <em>Discussion:</em>\n     * For example, the caller-sensitive method\n     * {@link java.lang.Class#forName(String) Class.forName(x)}\n     * can return varying classes or throw varying exceptions,\n     * depending on the class loader of the class that calls it.\n     * A public lookup of {@code Class.forName} will fail, because\n     * there is no reasonable way to determine its bytecode behavior.\n     * <p style=\"font-size:smaller;\">\n     * If an application caches method handles for broad sharing,\n     * it should use {@code publicLookup()} to create them.\n     * If there is a lookup of {@code Class.forName}, it will fail,\n     * and the application must take appropriate action in that case.\n     * It may be that a later lookup, perhaps during the invocation of a\n     * bootstrap method, can incorporate the specific identity\n     * of the caller, making the method accessible.\n     * <p style=\"font-size:smaller;\">\n     * The function {@code MethodHandles.lookup} is caller sensitive\n     * so that there can be a secure foundation for lookups.\n     * Nearly all other methods in the JSR 292 API rely on lookup\n     * objects to check access requests.\n     ","description":"","name":"Lookup","qualified_name":"java.lang.invoke.MethodHandles.Lookup","type":2},{"comment":"\n * Thrown by {@code String} methods to indicate that an index\n * is either negative or greater than the size of the string.  For\n * some methods such as the charAt method, this exception also is\n * thrown when the index is equal to the size of the string.\n *\n * @author  unascribed\n * @see     java.lang.String#charAt(int)\n * @since   JDK1.0\n ","description":"","name":"StringIndexOutOfBoundsException","qualified_name":"java.lang.StringIndexOutOfBoundsException","type":2},{"comment":"","description":"","name":"LineReader","qualified_name":"java.io.Console.LineReader","type":2},{"comment":" Box","description":"","name":"javax_swing_Box_PersistenceDelegate","qualified_name":"java.beans.MetaData.javax_swing_Box_PersistenceDelegate","type":2},{"comment":"\n * A <code>TrayIcon</code> object represents a tray icon that can be\n * added to the {@link SystemTray system tray}. A\n * <code>TrayIcon</code> can have a tooltip (text), an image, a popup\n * menu, and a set of listeners associated with it.\n *\n * <p>A <code>TrayIcon</code> can generate various {@link MouseEvent\n * MouseEvents} and supports adding corresponding listeners to receive\n * notification of these events.  <code>TrayIcon</code> processes some\n * of the events by itself.  For example, by default, when the\n * right-mouse click is performed on the <code>TrayIcon</code> it\n * displays the specified popup menu.  When the mouse hovers\n * over the <code>TrayIcon</code> the tooltip is displayed.\n *\n * <p><strong>Note:</strong> When the <code>MouseEvent</code> is\n * dispatched to its registered listeners its <code>component</code>\n * property will be set to <code>null</code>.  (See {@link\n * java.awt.event.ComponentEvent#getComponent}) The\n * <code>source</code> property will be set to this\n * <code>TrayIcon</code>. (See {@link\n * java.util.EventObject#getSource})\n *\n * <p><b>Note:</b> A well-behaved {@link TrayIcon} implementation\n * will assign different gestures to showing a popup menu and\n * selecting a tray icon.\n *\n * <p>A <code>TrayIcon</code> can generate an {@link ActionEvent\n * ActionEvent}.  On some platforms, this occurs when the user selects\n * the tray icon using either the mouse or keyboard.\n *\n * <p>If a SecurityManager is installed, the AWTPermission\n * {@code accessSystemTray} must be granted in order to create\n * a {@code TrayIcon}. Otherwise the constructor will throw a\n * SecurityException.\n *\n * <p> See the {@link SystemTray} class overview for an example on how\n * to use the <code>TrayIcon</code> API.\n *\n * @since 1.6\n * @see SystemTray#add\n * @see java.awt.event.ComponentEvent#getComponent\n * @see java.util.EventObject#getSource\n *\n * @author Bino George\n * @author Denis Mikhalkin\n * @author Sharon Zakhour\n * @author Anton Tarasov\n ","description":"","name":"TrayIcon","qualified_name":"java.awt.TrayIcon","type":2},{"comment":"","description":"","name":"CharacterData01","qualified_name":"java.lang.CharacterData01","type":2},{"comment":"\n * Signals that an end of file or end of stream has been reached\n * unexpectedly during input.\n * <p>\n * This exception is mainly used by data input streams to signal end of\n * stream. Note that many other input operations return a special value on\n * end of stream rather than throwing an exception.\n *\n * @author  Frank Yellin\n * @see     java.io.DataInputStream\n * @see     java.io.IOException\n * @since   JDK1.0\n ","description":"","name":"EOFException","qualified_name":"java.io.EOFException","type":2},{"comment":"\n * A <i>thread</i> is a thread of execution in a program. The Java\n * Virtual Machine allows an application to have multiple threads of\n * execution running concurrently.\n * <p>\n * Every thread has a priority. Threads with higher priority are\n * executed in preference to threads with lower priority. Each thread\n * may or may not also be marked as a daemon. When code running in\n * some thread creates a new <code>Thread</code> object, the new\n * thread has its priority initially set equal to the priority of the\n * creating thread, and is a daemon thread if and only if the\n * creating thread is a daemon.\n * <p>\n * When a Java Virtual Machine starts up, there is usually a single\n * non-daemon thread (which typically calls the method named\n * <code>main</code> of some designated class). The Java Virtual\n * Machine continues to execute threads until either of the following\n * occurs:\n * <ul>\n * <li>The <code>exit</code> method of class <code>Runtime</code> has been\n *     called and the security manager has permitted the exit operation\n *     to take place.\n * <li>All threads that are not daemon threads have died, either by\n *     returning from the call to the <code>run</code> method or by\n *     throwing an exception that propagates beyond the <code>run</code>\n *     method.\n * </ul>\n * <p>\n * There are two ways to create a new thread of execution. One is to\n * declare a class to be a subclass of <code>Thread</code>. This\n * subclass should override the <code>run</code> method of class\n * <code>Thread</code>. An instance of the subclass can then be\n * allocated and started. For example, a thread that computes primes\n * larger than a stated value could be written as follows:\n * <hr><blockquote><pre>\n *     class PrimeThread extends Thread {\n *         long minPrime;\n *         PrimeThread(long minPrime) {\n *             this.minPrime = minPrime;\n *         }\n *\n *         public void run() {\n *             // compute primes larger than minPrime\n *             &nbsp;.&nbsp;.&nbsp;.\n *         }\n *     }\n * </pre></blockquote><hr>\n * <p>\n * The following code would then create a thread and start it running:\n * <blockquote><pre>\n *     PrimeThread p = new PrimeThread(143);\n *     p.start();\n * </pre></blockquote>\n * <p>\n * The other way to create a thread is to declare a class that\n * implements the <code>Runnable</code> interface. That class then\n * implements the <code>run</code> method. An instance of the class can\n * then be allocated, passed as an argument when creating\n * <code>Thread</code>, and started. The same example in this other\n * style looks like the following:\n * <hr><blockquote><pre>\n *     class PrimeRun implements Runnable {\n *         long minPrime;\n *         PrimeRun(long minPrime) {\n *             this.minPrime = minPrime;\n *         }\n *\n *         public void run() {\n *             // compute primes larger than minPrime\n *             &nbsp;.&nbsp;.&nbsp;.\n *         }\n *     }\n * </pre></blockquote><hr>\n * <p>\n * The following code would then create a thread and start it running:\n * <blockquote><pre>\n *     PrimeRun p = new PrimeRun(143);\n *     new Thread(p).start();\n * </pre></blockquote>\n * <p>\n * Every thread has a name for identification purposes. More than\n * one thread may have the same name. If a name is not specified when\n * a thread is created, a new name is generated for it.\n * <p>\n * Unless otherwise noted, passing a {@code null} argument to a constructor\n * or method in this class will cause a {@link NullPointerException} to be\n * thrown.\n *\n * @author  unascribed\n * @see     Runnable\n * @see     Runtime#exit(int)\n * @see     #run()\n * @see     #stop()\n * @since   JDK1.0\n ","description":"","name":"Thread","qualified_name":"java.lang.Thread","type":2},{"comment":"\n * The SystemFlavorMap is a configurable map between \"natives\" (Strings), which\n * correspond to platform-specific data formats, and \"flavors\" (DataFlavors),\n * which correspond to platform-independent MIME types. This mapping is used\n * by the data transfer subsystem to transfer data between Java and native\n * applications, and between Java applications in separate VMs.\n * <p>\n *\n * @since 1.2\n ","description":"","name":"SystemFlavorMap","qualified_name":"java.awt.datatransfer.SystemFlavorMap","type":2},{"comment":"\n * The peer interface for {@link Frame}. This adds a couple of frame specific\n * methods to the {@link WindowPeer} interface.\n *\n * The peer interfaces are intended only for use in porting\n * the AWT. They are not intended for use by application\n * developers, and developers should not implement peers\n * nor invoke any of the peer methods directly on the peer\n * instances.\n ","description":"","name":"FramePeer","qualified_name":"java.awt.peer.FramePeer","type":3},{"comment":"","description":"","name":"CharacterDataUndefined","qualified_name":"java.lang.CharacterDataUndefined","type":2},{"comment":"\n * Thrown to indicate that the Java Virtual Machine is broken or has\n * run out of resources necessary for it to continue operating.\n *\n *\n * @author  Frank Yellin\n * @since   JDK1.0\n ","description":"","name":"VirtualMachineError","qualified_name":"java.lang.VirtualMachineError","type":2},{"comment":"\n * This class is used to generate native system input events\n * for the purposes of test automation, self-running demos, and\n * other applications where control of the mouse and keyboard\n * is needed. The primary purpose of Robot is to facilitate\n * automated testing of Java platform implementations.\n * <p>\n * Using the class to generate input events differs from posting\n * events to the AWT event queue or AWT components in that the\n * events are generated in the platform's native input\n * queue. For example, <code>Robot.mouseMove</code> will actually move\n * the mouse cursor instead of just generating mouse move events.\n * <p>\n * Note that some platforms require special privileges or extensions\n * to access low-level input control. If the current platform configuration\n * does not allow input control, an <code>AWTException</code> will be thrown\n * when trying to construct Robot objects. For example, X-Window systems\n * will throw the exception if the XTEST 2.2 standard extension is not supported\n * (or not enabled) by the X server.\n * <p>\n * Applications that use Robot for purposes other than self-testing should\n * handle these error conditions gracefully.\n *\n * @author      Robi Khan\n * @since       1.3\n ","description":"","name":"Robot","qualified_name":"java.awt.Robot","type":2},{"comment":" Map","description":"","name":"java_util_Map_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_util_Map_PersistenceDelegate","type":2},{"comment":"\n * Thrown if an application tries to call a specified method of a\n * class (either static or instance), and that class no longer has a\n * definition of that method.\n * <p>\n * Normally, this error is caught by the compiler; this error can\n * only occur at run time if the definition of a class has\n * incompatibly changed.\n *\n * @author  unascribed\n * @since   JDK1.0\n ","description":"","name":"NoSuchMethodError","qualified_name":"java.lang.NoSuchMethodError","type":2},{"comment":"","description":"","name":"CaseInsensitiveComparator","qualified_name":"java.lang.String.CaseInsensitiveComparator","type":2},{"comment":"\n * The peer interface for {@link MenuBar}.\n *\n * The peer interfaces are intended only for use in porting\n * the AWT. They are not intended for use by application\n * developers, and developers should not implement peers\n * nor invoke any of the peer methods directly on the peer\n * instances.\n ","description":"","name":"MenuBarPeer","qualified_name":"java.awt.peer.MenuBarPeer","type":3},{"comment":"\n     * Prioritized list of callbacks to be performed once object graph has been\n     * completely deserialized.\n     ","description":"","name":"ValidationList","qualified_name":"java.io.ObjectInputStream.ValidationList","type":2},{"comment":"\n * {@code AnnotatedParameterizedType} represents the potentially annotated use\n * of a parameterized type, whose type arguments may themselves represent\n * annotated uses of types.\n *\n * @since 1.8\n ","description":"","name":"AnnotatedParameterizedType","qualified_name":"java.lang.reflect.AnnotatedParameterizedType","type":3},{"comment":"\n * The {@code Throwable} class is the superclass of all errors and\n * exceptions in the Java language. Only objects that are instances of this\n * class (or one of its subclasses) are thrown by the Java Virtual Machine or\n * can be thrown by the Java {@code throw} statement. Similarly, only\n * this class or one of its subclasses can be the argument type in a\n * {@code catch} clause.\n *\n * For the purposes of compile-time checking of exceptions, {@code\n * Throwable} and any subclass of {@code Throwable} that is not also a\n * subclass of either {@link RuntimeException} or {@link Error} are\n * regarded as checked exceptions.\n *\n * <p>Instances of two subclasses, {@link java.lang.Error} and\n * {@link java.lang.Exception}, are conventionally used to indicate\n * that exceptional situations have occurred. Typically, these instances\n * are freshly created in the context of the exceptional situation so\n * as to include relevant information (such as stack trace data).\n *\n * <p>A throwable contains a snapshot of the execution stack of its\n * thread at the time it was created. It can also contain a message\n * string that gives more information about the error. Over time, a\n * throwable can {@linkplain Throwable#addSuppressed suppress} other\n * throwables from being propagated.  Finally, the throwable can also\n * contain a <i>cause</i>: another throwable that caused this\n * throwable to be constructed.  The recording of this causal information\n * is referred to as the <i>chained exception</i> facility, as the\n * cause can, itself, have a cause, and so on, leading to a \"chain\" of\n * exceptions, each caused by another.\n *\n * <p>One reason that a throwable may have a cause is that the class that\n * throws it is built atop a lower layered abstraction, and an operation on\n * the upper layer fails due to a failure in the lower layer.  It would be bad\n * design to let the throwable thrown by the lower layer propagate outward, as\n * it is generally unrelated to the abstraction provided by the upper layer.\n * Further, doing so would tie the API of the upper layer to the details of\n * its implementation, assuming the lower layer's exception was a checked\n * exception.  Throwing a \"wrapped exception\" (i.e., an exception containing a\n * cause) allows the upper layer to communicate the details of the failure to\n * its caller without incurring either of these shortcomings.  It preserves\n * the flexibility to change the implementation of the upper layer without\n * changing its API (in particular, the set of exceptions thrown by its\n * methods).\n *\n * <p>A second reason that a throwable may have a cause is that the method\n * that throws it must conform to a general-purpose interface that does not\n * permit the method to throw the cause directly.  For example, suppose\n * a persistent collection conforms to the {@link java.util.Collection\n * Collection} interface, and that its persistence is implemented atop\n * {@code java.io}.  Suppose the internals of the {@code add} method\n * can throw an {@link java.io.IOException IOException}.  The implementation\n * can communicate the details of the {@code IOException} to its caller\n * while conforming to the {@code Collection} interface by wrapping the\n * {@code IOException} in an appropriate unchecked exception.  (The\n * specification for the persistent collection should indicate that it is\n * capable of throwing such exceptions.)\n *\n * <p>A cause can be associated with a throwable in two ways: via a\n * constructor that takes the cause as an argument, or via the\n * {@link #initCause(Throwable)} method.  New throwable classes that\n * wish to allow causes to be associated with them should provide constructors\n * that take a cause and delegate (perhaps indirectly) to one of the\n * {@code Throwable} constructors that takes a cause.\n *\n * Because the {@code initCause} method is public, it allows a cause to be\n * associated with any throwable, even a \"legacy throwable\" whose\n * implementation predates the addition of the exception chaining mechanism to\n * {@code Throwable}.\n *\n * <p>By convention, class {@code Throwable} and its subclasses have two\n * constructors, one that takes no arguments and one that takes a\n * {@code String} argument that can be used to produce a detail message.\n * Further, those subclasses that might likely have a cause associated with\n * them should have two more constructors, one that takes a\n * {@code Throwable} (the cause), and one that takes a\n * {@code String} (the detail message) and a {@code Throwable} (the\n * cause).\n *\n * @author  unascribed\n * @author  Josh Bloch (Added exception chaining and programmatic access to\n *          stack trace in 1.4.)\n * @jls 11.2 Compile-Time Checking of Exceptions\n * @since JDK1.0\n ","description":"","name":"Throwable","qualified_name":"java.lang.Throwable","type":2},{"comment":"","description":"","name":"OutputStreamWriter","qualified_name":"java.io.OutputStreamWriter","type":2},{"comment":"","description":"","name":"CheckedSortedMap_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_util_Collections.CheckedSortedMap_PersistenceDelegate","type":2},{"comment":"\n * The class {@code Exception} and its subclasses are a form of\n * {@code Throwable} that indicates conditions that a reasonable\n * application might want to catch.\n *\n * <p>The class {@code Exception} and any subclasses that are not also\n * subclasses of {@link RuntimeException} are <em>checked\n * exceptions</em>.  Checked exceptions need to be declared in a\n * method or constructor's {@code throws} clause if they can be thrown\n * by the execution of the method or constructor and propagate outside\n * the method or constructor boundary.\n *\n * @author  Frank Yellin\n * @see     java.lang.Error\n * @jls 11.2 Compile-Time Checking of Exceptions\n * @since   JDK1.0\n ","description":"","name":"Exception","qualified_name":"java.lang.Exception","type":2},{"comment":"\n     * A pair of Component and String that represents its name.\n     ","description":"","name":"Card","qualified_name":"java.awt.CardLayout.Card","type":2},{"comment":"\n * A utility class to iterate over the path segments of a line segment\n * through the PathIterator interface.\n *\n * @author      Jim Graham\n ","description":"","name":"LineIterator","qualified_name":"java.awt.geom.LineIterator","type":2},{"comment":"","description":"","name":"SoftReference","qualified_name":"java.lang.ref.SoftReference","type":2},{"comment":"\n * Thrown when an instance is required to have a Serializable interface.\n * The serialization runtime or the class of the instance can throw\n * this exception. The argument should be the name of the class.\n *\n * @author  unascribed\n * @since   JDK1.1\n ","description":"","name":"NotSerializableException","qualified_name":"java.io.NotSerializableException","type":2},{"comment":"","description":"","name":"TxIterator","qualified_name":"java.awt.geom.Path2D.Float.TxIterator","type":2},{"comment":"\n * A <code>Canvas</code> component represents a blank rectangular\n * area of the screen onto which the application can draw or from\n * which the application can trap input events from the user.\n * <p>\n * An application must subclass the <code>Canvas</code> class in\n * order to get useful functionality such as creating a custom\n * component. The <code>paint</code> method must be overridden\n * in order to perform custom graphics on the canvas.\n *\n * @author      Sami Shaio\n * @since       JDK1.0\n ","description":"","name":"Canvas","qualified_name":"java.awt.Canvas","type":2},{"comment":"\n * The {@code RadialGradientPaint} class provides a way to fill a shape with\n * a circular radial color gradient pattern. The user may specify 2 or more\n * gradient colors, and this paint will provide an interpolation between\n * each color.\n * <p>\n * The user must specify the circle controlling the gradient pattern,\n * which is described by a center point and a radius.  The user can also\n * specify a separate focus point within that circle, which controls the\n * location of the first color of the gradient.  By default the focus is\n * set to be the center of the circle.\n * <p>\n * This paint will map the first color of the gradient to the focus point,\n * and the last color to the perimeter of the circle, interpolating\n * smoothly for any in-between colors specified by the user.  Any line drawn\n * from the focus point to the circumference will thus span all the gradient\n * colors.\n * <p>\n * Specifying a focus point outside of the radius of the circle will cause\n * the rings of the gradient pattern to be centered on the point just inside\n * the edge of the circle in the direction of the focus point.\n * The rendering will internally use this modified location as if it were\n * the specified focus point.\n * <p>\n * The user must provide an array of floats specifying how to distribute the\n * colors along the gradient.  These values should range from 0.0 to 1.0 and\n * act like keyframes along the gradient (they mark where the gradient should\n * be exactly a particular color).\n * <p>\n * In the event that the user does not set the first keyframe value equal\n * to 0 and/or the last keyframe value equal to 1, keyframes will be created\n * at these positions and the first and last colors will be replicated there.\n * So, if a user specifies the following arrays to construct a gradient:<br>\n * <pre>\n *     {Color.BLUE, Color.RED}, {.3f, .7f}\n * </pre>\n * this will be converted to a gradient with the following keyframes:<br>\n * <pre>\n *     {Color.BLUE, Color.BLUE, Color.RED, Color.RED}, {0f, .3f, .7f, 1f}\n * </pre>\n *\n * <p>\n * The user may also select what action the {@code RadialGradientPaint} object\n * takes when it is filling the space outside the circle's radius by\n * setting {@code CycleMethod} to either {@code REFLECTION} or {@code REPEAT}.\n * The gradient color proportions are equal for any particular line drawn\n * from the focus point. The following figure shows that the distance AB\n * is equal to the distance BC, and the distance AD is equal to the distance DE.\n * <center>\n * <img src = \"doc-files/RadialGradientPaint-3.png\" alt=\"image showing the\n * distance AB=BC, and AD=DE\">\n * </center>\n * If the gradient and graphics rendering transforms are uniformly scaled and\n * the user sets the focus so that it coincides with the center of the circle,\n * the gradient color proportions are equal for any line drawn from the center.\n * The following figure shows the distances AB, BC, AD, and DE. They are all equal.\n * <center>\n * <img src = \"doc-files/RadialGradientPaint-4.png\" alt=\"image showing the\n * distance of AB, BC, AD, and DE are all equal\">\n * </center>\n * Note that some minor variations in distances may occur due to sampling at\n * the granularity of a pixel.\n * If no cycle method is specified, {@code NO_CYCLE} will be chosen by\n * default, which means the the last keyframe color will be used to fill the\n * remaining area.\n * <p>\n * The colorSpace parameter allows the user to specify in which colorspace\n * the interpolation should be performed, default sRGB or linearized RGB.\n *\n * <p>\n * The following code demonstrates typical usage of\n * {@code RadialGradientPaint}, where the center and focus points are\n * the same:\n * <pre>\n *     Point2D center = new Point2D.Float(50, 50);\n *     float radius = 25;\n *     float[] dist = {0.0f, 0.2f, 1.0f};\n *     Color[] colors = {Color.RED, Color.WHITE, Color.BLUE};\n *     RadialGradientPaint p =\n *         new RadialGradientPaint(center, radius, dist, colors);\n * </pre>\n *\n * <p>\n * This image demonstrates the example code above, with default\n * (centered) focus for each of the three cycle methods:\n * <center>\n * <img src = \"doc-files/RadialGradientPaint-1.png\" alt=\"image showing the\n * output of the sameple code\">\n * </center>\n *\n * <p>\n * It is also possible to specify a non-centered focus point, as\n * in the following code:\n * <pre>\n *     Point2D center = new Point2D.Float(50, 50);\n *     float radius = 25;\n *     Point2D focus = new Point2D.Float(40, 40);\n *     float[] dist = {0.0f, 0.2f, 1.0f};\n *     Color[] colors = {Color.RED, Color.WHITE, Color.BLUE};\n *     RadialGradientPaint p =\n *         new RadialGradientPaint(center, radius, focus,\n *                                 dist, colors,\n *                                 CycleMethod.NO_CYCLE);\n * </pre>\n *\n * <p>\n * This image demonstrates the previous example code, with non-centered\n * focus for each of the three cycle methods:\n * <center>\n * <img src = \"doc-files/RadialGradientPaint-2.png\" alt=\"image showing the\n * output of the sample code\">\n * </center>\n *\n * @see java.awt.Paint\n * @see java.awt.Graphics2D#setPaint\n * @author Nicholas Talian, Vincent Hardy, Jim Graham, Jerry Evans\n * @since 1.6\n ","description":"","name":"RadialGradientPaint","qualified_name":"java.awt.RadialGradientPaint","type":2},{"comment":"\n * The peer interface for menu items. This is used by {@link MenuItem}.\n *\n * The peer interfaces are intended only for use in porting\n * the AWT. They are not intended for use by application\n * developers, and developers should not implement peers\n * nor invoke any of the peer methods directly on the peer\n * instances.\n ","description":"","name":"MenuItemPeer","qualified_name":"java.awt.peer.MenuItemPeer","type":3},{"comment":"","description":"","name":"RobotDisposer","qualified_name":"java.awt.Robot.RobotDisposer","type":2},{"comment":"","description":"","name":"SingletonMap_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_util_Collections.SingletonMap_PersistenceDelegate","type":2},{"comment":"\n * The peer interface for {@link Button}.\n *\n * The peer interfaces are intended only for use in porting\n * the AWT. They are not intended for use by application\n * developers, and developers should not implement peers\n * nor invoke any of the peer methods directly on the peer\n * instances.\n ","description":"","name":"ButtonPeer","qualified_name":"java.awt.peer.ButtonPeer","type":3},{"comment":"\n * A generic Abstract Window Toolkit(AWT) container object is a component\n * that can contain other AWT components.\n * <p>\n * Components added to a container are tracked in a list.  The order\n * of the list will define the components' front-to-back stacking order\n * within the container.  If no index is specified when adding a\n * component to a container, it will be added to the end of the list\n * (and hence to the bottom of the stacking order).\n * <p>\n * <b>Note</b>: For details on the focus subsystem, see\n * <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/misc/focus.html\">\n * How to Use the Focus Subsystem</a>,\n * a section in <em>The Java Tutorial</em>, and the\n * <a href=\"../../java/awt/doc-files/FocusSpec.html\">Focus Specification</a>\n * for more information.\n *\n * @author      Arthur van Hoff\n * @author      Sami Shaio\n * @see       #add(java.awt.Component, int)\n * @see       #getComponent(int)\n * @see       LayoutManager\n * @since     JDK1.0\n ","description":"","name":"Container","qualified_name":"java.awt.Container","type":2},{"comment":"","description":"","name":"SynchronizedSet_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_util_Collections.SynchronizedSet_PersistenceDelegate","type":2},{"comment":"\n * Serializability of a class is enabled by the class implementing the\n * java.io.Serializable interface. Classes that do not implement this\n * interface will not have any of their state serialized or\n * deserialized.  All subtypes of a serializable class are themselves\n * serializable.  The serialization interface has no methods or fields\n * and serves only to identify the semantics of being serializable. <p>\n *\n * To allow subtypes of non-serializable classes to be serialized, the\n * subtype may assume responsibility for saving and restoring the\n * state of the supertype's public, protected, and (if accessible)\n * package fields.  The subtype may assume this responsibility only if\n * the class it extends has an accessible no-arg constructor to\n * initialize the class's state.  It is an error to declare a class\n * Serializable if this is not the case.  The error will be detected at\n * runtime. <p>\n *\n * During deserialization, the fields of non-serializable classes will\n * be initialized using the public or protected no-arg constructor of\n * the class.  A no-arg constructor must be accessible to the subclass\n * that is serializable.  The fields of serializable subclasses will\n * be restored from the stream. <p>\n *\n * When traversing a graph, an object may be encountered that does not\n * support the Serializable interface. In this case the\n * NotSerializableException will be thrown and will identify the class\n * of the non-serializable object. <p>\n *\n * Classes that require special handling during the serialization and\n * deserialization process must implement special methods with these exact\n * signatures:\n *\n * <PRE>\n * private void writeObject(java.io.ObjectOutputStream out)\n *     throws IOException\n * private void readObject(java.io.ObjectInputStream in)\n *     throws IOException, ClassNotFoundException;\n * private void readObjectNoData()\n *     throws ObjectStreamException;\n * </PRE>\n *\n * <p>The writeObject method is responsible for writing the state of the\n * object for its particular class so that the corresponding\n * readObject method can restore it.  The default mechanism for saving\n * the Object's fields can be invoked by calling\n * out.defaultWriteObject. The method does not need to concern\n * itself with the state belonging to its superclasses or subclasses.\n * State is saved by writing the individual fields to the\n * ObjectOutputStream using the writeObject method or by using the\n * methods for primitive data types supported by DataOutput.\n *\n * <p>The readObject method is responsible for reading from the stream and\n * restoring the classes fields. It may call in.defaultReadObject to invoke\n * the default mechanism for restoring the object's non-static and\n * non-transient fields.  The defaultReadObject method uses information in\n * the stream to assign the fields of the object saved in the stream with the\n * correspondingly named fields in the current object.  This handles the case\n * when the class has evolved to add new fields. The method does not need to\n * concern itself with the state belonging to its superclasses or subclasses.\n * State is saved by writing the individual fields to the\n * ObjectOutputStream using the writeObject method or by using the\n * methods for primitive data types supported by DataOutput.\n *\n * <p>The readObjectNoData method is responsible for initializing the state of\n * the object for its particular class in the event that the serialization\n * stream does not list the given class as a superclass of the object being\n * deserialized.  This may occur in cases where the receiving party uses a\n * different version of the deserialized instance's class than the sending\n * party, and the receiver's version extends classes that are not extended by\n * the sender's version.  This may also occur if the serialization stream has\n * been tampered; hence, readObjectNoData is useful for initializing\n * deserialized objects properly despite a \"hostile\" or incomplete source\n * stream.\n *\n * <p>Serializable classes that need to designate an alternative object to be\n * used when writing an object to the stream should implement this\n * special method with the exact signature:\n *\n * <PRE>\n * ANY-ACCESS-MODIFIER Object writeReplace() throws ObjectStreamException;\n * </PRE><p>\n *\n * This writeReplace method is invoked by serialization if the method\n * exists and it would be accessible from a method defined within the\n * class of the object being serialized. Thus, the method can have private,\n * protected and package-private access. Subclass access to this method\n * follows java accessibility rules. <p>\n *\n * Classes that need to designate a replacement when an instance of it\n * is read from the stream should implement this special method with the\n * exact signature.\n *\n * <PRE>\n * ANY-ACCESS-MODIFIER Object readResolve() throws ObjectStreamException;\n * </PRE><p>\n *\n * This readResolve method follows the same invocation rules and\n * accessibility rules as writeReplace.<p>\n *\n * The serialization runtime associates with each serializable class a version\n * number, called a serialVersionUID, which is used during deserialization to\n * verify that the sender and receiver of a serialized object have loaded\n * classes for that object that are compatible with respect to serialization.\n * If the receiver has loaded a class for the object that has a different\n * serialVersionUID than that of the corresponding sender's class, then\n * deserialization will result in an {@link InvalidClassException}.  A\n * serializable class can declare its own serialVersionUID explicitly by\n * declaring a field named <code>\"serialVersionUID\"</code> that must be static,\n * final, and of type <code>long</code>:\n *\n * <PRE>\n * ANY-ACCESS-MODIFIER static final long serialVersionUID = 42L;\n * </PRE>\n *\n * If a serializable class does not explicitly declare a serialVersionUID, then\n * the serialization runtime will calculate a default serialVersionUID value\n * for that class based on various aspects of the class, as described in the\n * Java(TM) Object Serialization Specification.  However, it is <em>strongly\n * recommended</em> that all serializable classes explicitly declare\n * serialVersionUID values, since the default serialVersionUID computation is\n * highly sensitive to class details that may vary depending on compiler\n * implementations, and can thus result in unexpected\n * <code>InvalidClassException</code>s during deserialization.  Therefore, to\n * guarantee a consistent serialVersionUID value across different java compiler\n * implementations, a serializable class must declare an explicit\n * serialVersionUID value.  It is also strongly advised that explicit\n * serialVersionUID declarations use the <code>private</code> modifier where\n * possible, since such declarations apply only to the immediately declaring\n * class--serialVersionUID fields are not useful as inherited members. Array\n * classes cannot declare an explicit serialVersionUID, so they always have\n * the default computed value, but the requirement for matching\n * serialVersionUID values is waived for array classes.\n *\n * @author  unascribed\n * @see java.io.ObjectOutputStream\n * @see java.io.ObjectInputStream\n * @see java.io.ObjectOutput\n * @see java.io.ObjectInput\n * @see java.io.Externalizable\n * @since   JDK1.1\n ","description":"","name":"Serializable","qualified_name":"java.io.Serializable","type":3},{"comment":"","description":"","name":"WakingRunnable","qualified_name":"java.awt.Container.WakingRunnable","type":2},{"comment":"\n * Thrown when the Java Virtual Machine cannot allocate an object\n * because it is out of memory, and no more memory could be made\n * available by the garbage collector.\n *\n * {@code OutOfMemoryError} objects may be constructed by the virtual\n * machine as if {@linkplain Throwable#Throwable(String, Throwable,\n * boolean, boolean) suppression were disabled and/or the stack trace was not\n * writable}.\n *\n * @author  unascribed\n * @since   JDK1.0\n ","description":"","name":"OutOfMemoryError","qualified_name":"java.lang.OutOfMemoryError","type":2},{"comment":"\n * A utility class to iterate over the path segments of a cubic curve\n * segment through the PathIterator interface.\n *\n * @author      Jim Graham\n ","description":"","name":"CubicIterator","qualified_name":"java.awt.geom.CubicIterator","type":2},{"comment":"\n     * The <code>Float</code> class defines a rectangle with rounded\n     * corners all specified in <code>float</code> coordinates.\n     * @since 1.2\n     ","description":"","name":"Float","qualified_name":"java.awt.geom.RoundRectangle2D.Float","type":2},{"comment":"\n * The <code>CheckboxGroup</code> class is used to group together\n * a set of <code>Checkbox</code> buttons.\n * <p>\n * Exactly one check box button in a <code>CheckboxGroup</code> can\n * be in the \"on\" state at any given time. Pushing any\n * button sets its state to \"on\" and forces any other button that\n * is in the \"on\" state into the \"off\" state.\n * <p>\n * The following code example produces a new check box group,\n * with three check boxes:\n *\n * <hr><blockquote><pre>\n * setLayout(new GridLayout(3, 1));\n * CheckboxGroup cbg = new CheckboxGroup();\n * add(new Checkbox(\"one\", cbg, true));\n * add(new Checkbox(\"two\", cbg, false));\n * add(new Checkbox(\"three\", cbg, false));\n * </pre></blockquote><hr>\n * <p>\n * This image depicts the check box group created by this example:\n * <p>\n * <img src=\"doc-files/CheckboxGroup-1.gif\"\n * alt=\"Shows three checkboxes, arranged vertically, labeled one, two, and three. Checkbox one is in the on state.\"\n * style=\"float:center; margin: 7px 10px;\">\n * <p>\n * @author      Sami Shaio\n * @see         java.awt.Checkbox\n * @since       JDK1.0\n ","description":"","name":"CheckboxGroup","qualified_name":"java.awt.CheckboxGroup","type":2},{"comment":"\n * Thrown to indicate that an index of some sort (such as to an array, to a\n * string, or to a vector) is out of range.\n * <p>\n * Applications can subclass this class to indicate similar exceptions.\n *\n * @author  Frank Yellin\n * @since   JDK1.0\n ","description":"","name":"IndexOutOfBoundsException","qualified_name":"java.lang.IndexOutOfBoundsException","type":2},{"comment":"\n * Signals that an I/O operation has been interrupted. An\n * <code>InterruptedIOException</code> is thrown to indicate that an\n * input or output transfer has been terminated because the thread\n * performing it was interrupted. The field {@link #bytesTransferred}\n * indicates how many bytes were successfully transferred before\n * the interruption occurred.\n *\n * @author  unascribed\n * @see     java.io.InputStream\n * @see     java.io.OutputStream\n * @see     java.lang.Thread#interrupt()\n * @since   JDK1.0\n ","description":"","name":"InterruptedIOException","qualified_name":"java.io.InterruptedIOException","type":2},{"comment":"\n * An <code>Insets</code> object is a representation of the borders\n * of a container. It specifies the space that a container must leave\n * at each of its edges. The space can be a border, a blank space, or\n * a title.\n *\n * @author      Arthur van Hoff\n * @author      Sami Shaio\n * @see         java.awt.LayoutManager\n * @see         java.awt.Container\n * @since       JDK1.0\n ","description":"","name":"Insets","qualified_name":"java.awt.Insets","type":2},{"comment":"\n * An abstract class which provides a print graphics context for a page.\n *\n * @author      Amy Fowler\n ","description":"","name":"PrintGraphics","qualified_name":"java.awt.PrintGraphics","type":3},{"comment":"","description":"","name":"CharacterData02","qualified_name":"java.lang.CharacterData02","type":2},{"comment":" BorderLayout","description":"","name":"java_awt_BorderLayout_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_awt_BorderLayout_PersistenceDelegate","type":2},{"comment":"\n     * This class implements accessibility support for the\n     * <code>Applet</code> class.  It provides an implementation of the\n     * Java Accessibility API appropriate to applet user-interface elements.\n     * @since 1.3\n     ","description":"","name":"AccessibleApplet","qualified_name":"java.applet.Applet.AccessibleApplet","type":2},{"comment":"\n * A low-level event that indicates that a window has changed its status. This\n * low-level event is generated by a Window object when it is opened, closed,\n * activated, deactivated, iconified, or deiconified, or when focus is\n * transfered into or out of the Window.\n * <P>\n * The event is passed to every <code>WindowListener</code>\n * or <code>WindowAdapter</code> object which registered to receive such\n * events using the window's <code>addWindowListener</code> method.\n * (<code>WindowAdapter</code> objects implement the\n * <code>WindowListener</code> interface.) Each such listener object\n * gets this <code>WindowEvent</code> when the event occurs.\n * <p>\n * An unspecified behavior will be caused if the {@code id} parameter\n * of any particular {@code WindowEvent} instance is not\n * in the range from {@code WINDOW_FIRST} to {@code WINDOW_LAST}.\n *\n * @author Carl Quinn\n * @author Amy Fowler\n *\n * @see WindowAdapter\n * @see WindowListener\n * @see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/windowlistener.html\">Tutorial: Writing a Window Listener</a>\n *\n * @since JDK1.1\n ","description":"","name":"WindowEvent","qualified_name":"java.awt.event.WindowEvent","type":2},{"comment":"\n * {@code AnnotatedWildcardType} represents the potentially annotated use of a\n * wildcard type argument, whose upper or lower bounds may themselves represent\n * annotated uses of types.\n *\n * @since 1.8\n ","description":"","name":"AnnotatedWildcardType","qualified_name":"java.lang.reflect.AnnotatedWildcardType","type":3},{"comment":"","description":"","name":"CheckedMap_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_util_Collections.CheckedMap_PersistenceDelegate","type":2},{"comment":"\n     * Buffered output stream with two modes: in default mode, outputs data in\n     * same format as DataOutputStream; in \"block data\" mode, outputs data\n     * bracketed by block data markers (see object serialization specification\n     * for details).\n     ","description":"","name":"BlockDataOutputStream","qualified_name":"java.io.ObjectOutputStream.BlockDataOutputStream","type":2},{"comment":"\n     * Contains information about InvalidClassException instances to be thrown\n     * when attempting operations on an invalid class. Note that instances of\n     * this class are immutable and are potentially shared among\n     * ObjectStreamClass instances.\n     ","description":"","name":"ExceptionInfo","qualified_name":"java.io.ObjectStreamClass.ExceptionInfo","type":2},{"comment":"","description":"","name":"CheckedKeySet","qualified_name":"java.lang.ProcessEnvironment.CheckedKeySet","type":2},{"comment":"\n * Thrown to indicate that the code has attempted to cast an object\n * to a subclass of which it is not an instance. For example, the\n * following code generates a <code>ClassCastException</code>:\n * <blockquote><pre>\n *     Object x = new Integer(0);\n *     System.out.println((String)x);\n * </pre></blockquote>\n *\n * @author  unascribed\n * @since   JDK1.0\n ","description":"","name":"ClassCastException","qualified_name":"java.lang.ClassCastException","type":2},{"comment":"\n * A utility class to iterate over the path segments of an rounded rectangle\n * through the PathIterator interface.\n *\n * @author      Jim Graham\n ","description":"","name":"RoundRectIterator","qualified_name":"java.awt.geom.RoundRectIterator","type":2},{"comment":"","description":"","name":"Finalizer","qualified_name":"java.lang.ref.Finalizer","type":2},{"comment":"","description":"","name":"InputMethodHighlight","qualified_name":"java.awt.im.InputMethodHighlight","type":2},{"comment":"\n * A class loader is an object that is responsible for loading classes. The\n * class <tt>ClassLoader</tt> is an abstract class.  Given the <a\n * href=\"#name\">binary name</a> of a class, a class loader should attempt to\n * locate or generate data that constitutes a definition for the class.  A\n * typical strategy is to transform the name into a file name and then read a\n * \"class file\" of that name from a file system.\n *\n * <p> Every {@link Class <tt>Class</tt>} object contains a {@link\n * Class#getClassLoader() reference} to the <tt>ClassLoader</tt> that defined\n * it.\n *\n * <p> <tt>Class</tt> objects for array classes are not created by class\n * loaders, but are created automatically as required by the Java runtime.\n * The class loader for an array class, as returned by {@link\n * Class#getClassLoader()} is the same as the class loader for its element\n * type; if the element type is a primitive type, then the array class has no\n * class loader.\n *\n * <p> Applications implement subclasses of <tt>ClassLoader</tt> in order to\n * extend the manner in which the Java virtual machine dynamically loads\n * classes.\n *\n * <p> Class loaders may typically be used by security managers to indicate\n * security domains.\n *\n * <p> The <tt>ClassLoader</tt> class uses a delegation model to search for\n * classes and resources.  Each instance of <tt>ClassLoader</tt> has an\n * associated parent class loader.  When requested to find a class or\n * resource, a <tt>ClassLoader</tt> instance will delegate the search for the\n * class or resource to its parent class loader before attempting to find the\n * class or resource itself.  The virtual machine's built-in class loader,\n * called the \"bootstrap class loader\", does not itself have a parent but may\n * serve as the parent of a <tt>ClassLoader</tt> instance.\n *\n * <p> Class loaders that support concurrent loading of classes are known as\n * <em>parallel capable</em> class loaders and are required to register\n * themselves at their class initialization time by invoking the\n * {@link\n * #registerAsParallelCapable <tt>ClassLoader.registerAsParallelCapable</tt>}\n * method. Note that the <tt>ClassLoader</tt> class is registered as parallel\n * capable by default. However, its subclasses still need to register themselves\n * if they are parallel capable. <br>\n * In environments in which the delegation model is not strictly\n * hierarchical, class loaders need to be parallel capable, otherwise class\n * loading can lead to deadlocks because the loader lock is held for the\n * duration of the class loading process (see {@link #loadClass\n * <tt>loadClass</tt>} methods).\n *\n * <p> Normally, the Java virtual machine loads classes from the local file\n * system in a platform-dependent manner.  For example, on UNIX systems, the\n * virtual machine loads classes from the directory defined by the\n * <tt>CLASSPATH</tt> environment variable.\n *\n * <p> However, some classes may not originate from a file; they may originate\n * from other sources, such as the network, or they could be constructed by an\n * application.  The method {@link #defineClass(String, byte[], int, int)\n * <tt>defineClass</tt>} converts an array of bytes into an instance of class\n * <tt>Class</tt>. Instances of this newly defined class can be created using\n * {@link Class#newInstance <tt>Class.newInstance</tt>}.\n *\n * <p> The methods and constructors of objects created by a class loader may\n * reference other classes.  To determine the class(es) referred to, the Java\n * virtual machine invokes the {@link #loadClass <tt>loadClass</tt>} method of\n * the class loader that originally created the class.\n *\n * <p> For example, an application could create a network class loader to\n * download class files from a server.  Sample code might look like:\n *\n * <blockquote><pre>\n *   ClassLoader loader&nbsp;= new NetworkClassLoader(host,&nbsp;port);\n *   Object main&nbsp;= loader.loadClass(\"Main\", true).newInstance();\n *       &nbsp;.&nbsp;.&nbsp;.\n * </pre></blockquote>\n *\n * <p> The network class loader subclass must define the methods {@link\n * #findClass <tt>findClass</tt>} and <tt>loadClassData</tt> to load a class\n * from the network.  Once it has downloaded the bytes that make up the class,\n * it should use the method {@link #defineClass <tt>defineClass</tt>} to\n * create a class instance.  A sample implementation is:\n *\n * <blockquote><pre>\n *     class NetworkClassLoader extends ClassLoader {\n *         String host;\n *         int port;\n *\n *         public Class findClass(String name) {\n *             byte[] b = loadClassData(name);\n *             return defineClass(name, b, 0, b.length);\n *         }\n *\n *         private byte[] loadClassData(String name) {\n *             // load the class data from the connection\n *             &nbsp;.&nbsp;.&nbsp;.\n *         }\n *     }\n * </pre></blockquote>\n *\n * <h3> <a name=\"name\">Binary names</a> </h3>\n *\n * <p> Any class name provided as a {@link String} parameter to methods in\n * <tt>ClassLoader</tt> must be a binary name as defined by\n * <cite>The Java&trade; Language Specification</cite>.\n *\n * <p> Examples of valid class names include:\n * <blockquote><pre>\n *   \"java.lang.String\"\n *   \"javax.swing.JSpinner$DefaultEditor\"\n *   \"java.security.KeyStore$Builder$FileBuilder$1\"\n *   \"java.net.URLClassLoader$3$1\"\n * </pre></blockquote>\n *\n * @see      #resolveClass(Class)\n * @since 1.0\n ","description":"","name":"ClassLoader","qualified_name":"java.lang.ClassLoader","type":2},{"comment":"\n     * Counting method handle. It has 2 states: counting and non-counting.\n     * It is in counting state for the first n invocations and then transitions to non-counting state.\n     * Behavior in counting and non-counting states is determined by lambda forms produced by\n     * countingFormProducer & nonCountingFormProducer respectively.\n     ","description":"","name":"CountingWrapper","qualified_name":"java.lang.invoke.MethodHandleImpl.CountingWrapper","type":2},{"comment":"\n * The {@code Double} class wraps a value of the primitive type\n * {@code double} in an object. An object of type\n * {@code Double} contains a single field whose type is\n * {@code double}.\n *\n * <p>In addition, this class provides several methods for converting a\n * {@code double} to a {@code String} and a\n * {@code String} to a {@code double}, as well as other\n * constants and methods useful when dealing with a\n * {@code double}.\n *\n * @author  Lee Boynton\n * @author  Arthur van Hoff\n * @author  Joseph D. Darcy\n * @since JDK1.0\n ","description":"","name":"Double","qualified_name":"java.lang.Double","type":2},{"comment":"\n * The <code>CubicCurve2D</code> class defines a cubic parametric curve\n * segment in {@code (x,y)} coordinate space.\n * <p>\n * This class is only the abstract superclass for all objects which\n * store a 2D cubic curve segment.\n * The actual storage representation of the coordinates is left to\n * the subclass.\n *\n * @author      Jim Graham\n * @since 1.2\n ","description":"","name":"CubicCurve2D","qualified_name":"java.awt.geom.CubicCurve2D","type":2},{"comment":"","description":"","name":"ItemSelectable","qualified_name":"java.awt.ItemSelectable","type":3},{"comment":" Choice","description":"","name":"java_awt_Choice_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_awt_Choice_PersistenceDelegate","type":2},{"comment":"\n * The <code>DirectColorModel</code> class is a <code>ColorModel</code>\n * class that works with pixel values that represent RGB\n * color and alpha information as separate samples and that pack all\n * samples for a single pixel into a single int, short, or byte quantity.\n * This class can be used only with ColorSpaces of type ColorSpace.TYPE_RGB.\n * In addition, for each component of the ColorSpace, the minimum\n * normalized component value obtained via the <code>getMinValue()</code>\n * method of ColorSpace must be 0.0, and the maximum value obtained via\n * the <code>getMaxValue()</code> method must be 1.0 (these min/max\n * values are typical for RGB spaces).\n * There must be three color samples in the pixel values and there can\n * be a single alpha sample.  For those methods that use a primitive array\n * pixel representation of type <code>transferType</code>, the array\n * length is always one.  The transfer\n * types supported are DataBuffer.TYPE_BYTE,\n * DataBuffer.TYPE_USHORT, and DataBuffer.TYPE_INT.\n * Color and alpha samples are stored in the single\n * element of the array in bits indicated by bit masks.  Each bit mask\n * must be contiguous and masks must not overlap.  The same masks apply to\n * the single int pixel representation used by other methods.  The\n * correspondence of masks and color/alpha samples is as follows:\n * <ul>\n * <li> Masks are identified by indices running from 0 through 2\n * if no alpha is present, or 3 if an alpha is present.\n * <li> The first three indices refer to color samples;\n * index 0 corresponds to red, index 1 to green, and index 2 to blue.\n * <li> Index 3 corresponds to the alpha sample, if present.\n * </ul>\n * <p>\n * The translation from pixel values to color/alpha components for\n * display or processing purposes is a one-to-one correspondence of\n * samples to components.  A <code>DirectColorModel</code> is\n * typically used with image data which uses masks to define packed\n * samples.  For example, a <code>DirectColorModel</code> can be used in\n * conjunction with a <code>SinglePixelPackedSampleModel</code> to\n * construct a {@link BufferedImage}.  Normally the masks used by the\n * {@link SampleModel} and the <code>ColorModel</code> would be the\n * same.  However, if they are different, the color interpretation\n * of pixel data will be done according to the masks of the\n * <code>ColorModel</code>.\n * <p>\n * A single int pixel representation is valid for all objects of this\n * class, since it is always possible to represent pixel values used with\n * this class in a single int.  Therefore, methods which use this\n * representation will not throw an <code>IllegalArgumentException</code>\n * due to an invalid pixel value.\n * <p>\n * This color model is similar to an X11 TrueColor visual.\n * The default RGB ColorModel specified by the\n * {@link ColorModel#getRGBdefault() getRGBdefault} method is a\n * <code>DirectColorModel</code> with the following parameters:\n * <pre>\n * Number of bits:        32\n * Red mask:              0x00ff0000\n * Green mask:            0x0000ff00\n * Blue mask:             0x000000ff\n * Alpha mask:            0xff000000\n * Color space:           sRGB\n * isAlphaPremultiplied:  False\n * Transparency:          Transparency.TRANSLUCENT\n * transferType:          DataBuffer.TYPE_INT\n * </pre>\n * <p>\n * Many of the methods in this class are final. This is because the\n * underlying native graphics code makes assumptions about the layout\n * and operation of this class and those assumptions are reflected in\n * the implementations of the methods here that are marked final.  You\n * can subclass this class for other reasons, but you cannot override\n * or modify the behavior of those methods.\n *\n * @see ColorModel\n * @see ColorSpace\n * @see SinglePixelPackedSampleModel\n * @see BufferedImage\n * @see ColorModel#getRGBdefault\n *\n ","description":"","name":"DirectColorModel","qualified_name":"java.awt.image.DirectColorModel","type":2},{"comment":"\n * The management interface for the runtime system of\n * the Java virtual machine.\n *\n * <p> A Java virtual machine has a single instance of the implementation\n * class of this interface.  This instance implementing this interface is\n * an <a href=\"ManagementFactory.html#MXBean\">MXBean</a>\n * that can be obtained by calling\n * the {@link ManagementFactory#getRuntimeMXBean} method or\n * from the {@link ManagementFactory#getPlatformMBeanServer\n * platform <tt>MBeanServer</tt>} method.\n *\n * <p>The <tt>ObjectName</tt> for uniquely identifying the MXBean for\n * the runtime system within an MBeanServer is:\n * <blockquote>\n *    {@link ManagementFactory#RUNTIME_MXBEAN_NAME\n *           <tt>java.lang:type=Runtime</tt>}\n * </blockquote>\n *\n * It can be obtained by calling the\n * {@link PlatformManagedObject#getObjectName} method.\n *\n * <p> This interface defines several convenient methods for accessing\n * system properties about the Java virtual machine.\n *\n * @see ManagementFactory#getPlatformMXBeans(Class)\n * @see <a href=\"../../../javax/management/package-summary.html\">\n *      JMX Specification.</a>\n * @see <a href=\"package-summary.html#examples\">\n *      Ways to Access MXBeans</a>\n *\n * @author  Mandy Chung\n * @since   1.5\n ","description":"","name":"RuntimeMXBean","qualified_name":"java.lang.management.RuntimeMXBean","type":3},{"comment":"\n * Instances of classes that implement this interface are used to\n * filter filenames. These instances are used to filter directory\n * listings in the <code>list</code> method of class\n * <code>File</code>, and by the Abstract Window Toolkit's file\n * dialog component.\n *\n * @author  Arthur van Hoff\n * @author  Jonathan Payne\n * @see     java.awt.FileDialog#setFilenameFilter(java.io.FilenameFilter)\n * @see     java.io.File\n * @see     java.io.File#list(java.io.FilenameFilter)\n * @since   JDK1.0\n ","description":"","name":"FilenameFilter","qualified_name":"java.io.FilenameFilter","type":3},{"comment":"\n * The management interface for a memory pool.  A memory pool\n * represents the memory resource managed by the Java virtual machine\n * and is managed by one or more {@link MemoryManagerMXBean memory managers}.\n *\n * <p> A Java virtual machine has one or more instances of the\n * implementation class of this interface.  An instance\n * implementing this interface is\n * an <a href=\"ManagementFactory.html#MXBean\">MXBean</a>\n * that can be obtained by calling\n * the {@link ManagementFactory#getMemoryPoolMXBeans} method or\n * from the {@link ManagementFactory#getPlatformMBeanServer\n * platform <tt>MBeanServer</tt>} method.\n *\n * <p>The <tt>ObjectName</tt> for uniquely identifying the MXBean for\n * a memory pool within an <tt>MBeanServer</tt> is:\n * <blockquote>\n *    {@link ManagementFactory#MEMORY_POOL_MXBEAN_DOMAIN_TYPE\n *    <tt>java.lang:type=MemoryPool</tt>}<tt>,name=</tt><i>pool's name</i>\n * </blockquote>\n *\n * It can be obtained by calling the\n * {@link PlatformManagedObject#getObjectName} method.\n *\n * <h3>Memory Type</h3>\n * <p>The Java virtual machine has a heap for object allocation and also\n * maintains non-heap memory for the method area and the Java virtual\n * machine execution.  The Java virtual machine can have one or more\n * memory pools.  Each memory pool represents a memory area\n * of one of the following types:\n * <ul>\n *   <li>{@link MemoryType#HEAP heap}</li>\n *   <li>{@link MemoryType#NON_HEAP non-heap}</li>\n * </ul>\n *\n * <h3>Memory Usage Monitoring</h3>\n *\n * A memory pool has the following attributes:\n * <ul>\n *   <li><a href=\"#Usage\">Memory usage</a></li>\n *   <li><a href=\"#PeakUsage\">Peak memory usage</a></li>\n *   <li><a href=\"#UsageThreshold\">Usage Threshold</a></li>\n *   <li><a href=\"#CollectionThreshold\">Collection Usage Threshold</a>\n *       (only supported by some <em>garbage-collected</em> memory pools)</li>\n * </ul>\n *\n * <h3><a name=\"Usage\">1. Memory Usage</a></h3>\n *\n * The {@link #getUsage} method provides an estimate\n * of the current usage of a memory pool.\n * For a garbage-collected memory pool, the amount of used memory\n * includes the memory occupied by all objects in the pool\n * including both <em>reachable</em> and <em>unreachable</em> objects.\n *\n * <p>In general, this method is a lightweight operation for getting\n * an approximate memory usage.  For some memory pools, for example,\n * when objects are not packed contiguously, this method may be\n * an expensive operation that requires some computation to determine\n * the current memory usage.  An implementation should document when\n * this is the case.\n *\n * <h3><a name=\"PeakUsage\">2. Peak Memory Usage</a></h3>\n *\n * The Java virtual machine maintains the peak memory usage of a memory\n * pool since the virtual machine was started or the peak was reset.\n * The peak memory usage is returned by the {@link #getPeakUsage} method\n * and reset by calling the {@link #resetPeakUsage} method.\n *\n * <h3><a name=\"UsageThreshold\">3. Usage Threshold</a></h3>\n *\n * Each memory pool has a manageable attribute\n * called the <i>usage threshold</i> which has a default value supplied\n * by the Java virtual machine.  The default value is platform-dependent.\n * The usage threshold can be set via the\n * {@link #setUsageThreshold setUsageThreshold} method.\n * If the threshold is set to a positive value, the usage threshold crossing\n * checking is enabled in this memory pool.\n * If the usage threshold is set to zero, usage\n * threshold crossing checking on this memory pool is disabled.\n * The {@link MemoryPoolMXBean#isUsageThresholdSupported} method can\n * be used to determine if this functionality is supported.\n * <p>\n * A Java virtual machine performs usage threshold crossing checking on a\n * memory pool basis at its best appropriate time, typically,\n * at garbage collection time.\n * Each memory pool maintains a {@link #getUsageThresholdCount\n * usage threshold count} that will get incremented\n * every time when the Java virtual machine\n * detects that the memory pool usage is crossing the threshold.\n * <p>\n * This manageable usage threshold attribute is designed for monitoring the\n * increasing trend of memory usage with low overhead.\n * Usage threshold may not be appropriate for some memory pools.\n * For example, a generational garbage collector, a common garbage collection\n * algorithm used in many Java virtual machine implementations,\n * manages two or more generations segregating objects by age.\n * Most of the objects are allocated in\n * the <em>youngest generation</em> (say a nursery memory pool).\n * The nursery memory pool is designed to be filled up and\n * collecting the nursery memory pool will free most of its memory space\n * since it is expected to contain mostly short-lived objects\n * and mostly are unreachable at garbage collection time.\n * In this case, it is more appropriate for the nursery memory pool\n * not to support a usage threshold.  In addition,\n * if the cost of an object allocation\n * in one memory pool is very low (for example, just atomic pointer exchange),\n * the Java virtual machine would probably not support the usage threshold\n * for that memory pool since the overhead in comparing the usage with\n * the threshold is higher than the cost of object allocation.\n *\n * <p>\n * The memory usage of the system can be monitored using\n * <a href=\"#Polling\">polling</a> or\n * <a href=\"#ThresholdNotification\">threshold notification</a> mechanisms.\n *\n * <ol type=\"a\">\n *   <li><a name=\"Polling\"><b>Polling</b></a>\n *       <p>\n *       An application can continuously monitor its memory usage\n *       by calling either the {@link #getUsage} method for all\n *       memory pools or the {@link #isUsageThresholdExceeded} method\n *       for those memory pools that support a usage threshold.\n *       Below is example code that has a thread dedicated for\n *       task distribution and processing.  At every interval,\n *       it will determine if it should receive and process new tasks based\n *       on its memory usage.  If the memory usage exceeds its usage threshold,\n *       it will redistribute all outstanding tasks to other VMs and\n *       stop receiving new tasks until the memory usage returns\n *       below its usage threshold.\n *\n *       <pre>\n *       // Assume the usage threshold is supported for this pool.\n *       // Set the threshold to myThreshold above which no new tasks\n *       // should be taken.\n *       pool.setUsageThreshold(myThreshold);\n *       ....\n *\n *       boolean lowMemory = false;\n *       while (true) {\n *          if (pool.isUsageThresholdExceeded()) {\n *              // potential low memory, so redistribute tasks to other VMs\n *              lowMemory = true;\n *              redistributeTasks();\n *              // stop receiving new tasks\n *              stopReceivingTasks();\n *          } else {\n *              if (lowMemory) {\n *                  // resume receiving tasks\n *                  lowMemory = false;\n *                  resumeReceivingTasks();\n *              }\n *              // processing outstanding task\n *              ...\n *          }\n *          // sleep for sometime\n *          try {\n *              Thread.sleep(sometime);\n *          } catch (InterruptedException e) {\n *              ...\n *          }\n *       }\n *       </pre>\n *\n * <hr>\n *       The above example does not differentiate the case where\n *       the memory usage has temporarily dropped below the usage threshold\n *       from the case where the memory usage remains above the threshold\n *       between two iterations.  The usage threshold count returned by\n *       the {@link #getUsageThresholdCount} method\n *       can be used to determine\n *       if the memory usage has returned below the threshold\n *       between two polls.\n *       <p>\n *       Below shows another example that takes some action if a\n *       memory pool is under low memory and ignores the memory usage\n *       changes during the action processing time.\n *\n *       <pre>\n *       // Assume the usage threshold is supported for this pool.\n *       // Set the threshold to myThreshold which determines if\n *       // the application will take some action under low memory condition.\n *       pool.setUsageThreshold(myThreshold);\n *\n *       int prevCrossingCount = 0;\n *       while (true) {\n *           // A busy loop to detect when the memory usage\n *           // has exceeded the threshold.\n *           while (!pool.isUsageThresholdExceeded() ||\n *                  pool.getUsageThresholdCount() == prevCrossingCount) {\n *               try {\n *                   Thread.sleep(sometime)\n *               } catch (InterruptException e) {\n *                   ....\n *               }\n *           }\n *\n *           // Do some processing such as check for memory usage\n *           // and issue a warning\n *           ....\n *\n *           // Gets the current threshold count. The busy loop will then\n *           // ignore any crossing of threshold happens during the processing.\n *           prevCrossingCount = pool.getUsageThresholdCount();\n *       }\n *       </pre><hr>\n *   </li>\n *   <li><a name=\"ThresholdNotification\"><b>Usage Threshold Notifications</b></a>\n *       <p>\n *       Usage threshold notification will be emitted by {@link MemoryMXBean}.\n *       When the Java virtual machine detects that the memory usage of\n *       a memory pool has reached or exceeded the usage threshold\n *       the virtual machine will trigger the <tt>MemoryMXBean</tt> to emit an\n *       {@link MemoryNotificationInfo#MEMORY_THRESHOLD_EXCEEDED\n *       usage threshold exceeded notification}.\n *       Another usage threshold exceeded notification will not be\n *       generated until the usage has fallen below the threshold and\n *       then exceeded it again.\n *       <p>\n *       Below is an example code implementing the same logic as the\n *       first example above but using the usage threshold notification\n *       mechanism to detect low memory conditions instead of polling.\n *       In this example code, upon receiving notification, the notification\n *       listener notifies another thread to perform the actual action\n *       such as to redistribute outstanding tasks, stop receiving tasks,\n *       or resume receiving tasks.\n *       The <tt>handleNotification</tt> method should be designed to\n *       do a very minimal amount of work and return without delay to avoid\n *       causing delay in delivering subsequent notifications.  Time-consuming\n *       actions should be performed by a separate thread.\n *       The notification listener may be invoked by multiple threads\n *       concurrently; so the tasks performed by the listener\n *       should be properly synchronized.\n *\n *       <pre>\n *       class MyListener implements javax.management.NotificationListener {\n *            public void handleNotification(Notification notification, Object handback)  {\n *                String notifType = notification.getType();\n *                if (notifType.equals(MemoryNotificationInfo.MEMORY_THRESHOLD_EXCEEDED)) {\n *                    // potential low memory, notify another thread\n *                    // to redistribute outstanding tasks to other VMs\n *                    // and stop receiving new tasks.\n *                    lowMemory = true;\n *                    notifyAnotherThread(lowMemory);\n *                }\n *            }\n *       }\n *\n *       // Register MyListener with MemoryMXBean\n *       MemoryMXBean mbean = ManagementFactory.getMemoryMXBean();\n *       NotificationEmitter emitter = (NotificationEmitter) mbean;\n *       MyListener listener = new MyListener();\n *       emitter.addNotificationListener(listener, null, null);\n *\n *       // Assume this pool supports a usage threshold.\n *       // Set the threshold to myThreshold above which no new tasks\n *       // should be taken.\n *       pool.setUsageThreshold(myThreshold);\n *\n *       // Usage threshold detection is enabled and notification will be\n *       // handled by MyListener.  Continue for other processing.\n *       ....\n *\n *       </pre>\n * <hr>\n *       <p>\n *       There is no guarantee about when the <tt>MemoryMXBean</tt> will emit\n *       a threshold notification and when the notification will be delivered.\n *       When a notification listener is invoked, the memory usage of\n *       the memory pool may have crossed the usage threshold more\n *       than once.\n *       The {@link MemoryNotificationInfo#getCount} method returns the number\n *       of times that the memory usage has crossed the usage threshold\n *       at the point in time when the notification was constructed.\n *       It can be compared with the current usage threshold count returned\n *       by the {@link #getUsageThresholdCount} method to determine if\n *       such situation has occurred.\n *   </li>\n * </ol>\n *\n * <h3><a name=\"CollectionThreshold\">4. Collection Usage Threshold</a></h3>\n *\n * Collection usage threshold is a manageable attribute only applicable\n * to some garbage-collected memory pools.\n * After a Java virtual machine has expended effort in reclaiming memory\n * space by recycling unused objects in a memory pool at garbage collection\n * time, some number of bytes in the memory pools that are garbaged\n * collected will still be in use.  The collection usage threshold\n * allows a value to be set for this number of bytes such\n * that if the threshold is exceeded,\n * a {@link MemoryNotificationInfo#MEMORY_THRESHOLD_EXCEEDED\n * collection usage threshold exceeded notification}\n * will be emitted by the {@link MemoryMXBean}.\n * In addition, the {@link #getCollectionUsageThresholdCount\n * collection usage threshold count} will then be incremented.\n *\n * <p>\n * The {@link MemoryPoolMXBean#isCollectionUsageThresholdSupported} method can\n * be used to determine if this functionality is supported.\n *\n * <p>\n * A Java virtual machine performs collection usage threshold checking\n * on a memory pool basis.  This checking is enabled if the collection\n * usage threshold is set to a positive value.\n * If the collection usage threshold is set to zero, this checking\n * is disabled on this memory pool.  Default value is zero.\n * The Java virtual machine performs the collection usage threshold\n * checking at garbage collection time.\n *\n * <p>\n * Some garbage-collected memory pools may\n * choose not to support the collection usage threshold.  For example,\n * a memory pool is only managed by a continuous concurrent garbage\n * collector.  Objects can be allocated in this memory pool by some thread\n * while the unused objects are reclaimed by the concurrent garbage\n * collector simultaneously.  Unless there is a well-defined\n * garbage collection time which is the best appropriate time\n * to check the memory usage, the collection usage threshold should not\n * be supported.\n *\n * <p>\n * The collection usage threshold is designed for monitoring the memory usage\n * after the Java virtual machine has expended effort in reclaiming\n * memory space.  The collection usage could also be monitored\n * by the polling and threshold notification mechanism\n * described above for the <a href=\"#UsageThreshold\">usage threshold</a>\n * in a similar fashion.\n *\n * @see ManagementFactory#getPlatformMXBeans(Class)\n * @see <a href=\"../../../javax/management/package-summary.html\">\n *      JMX Specification.</a>\n * @see <a href=\"package-summary.html#examples\">\n *      Ways to Access MXBeans</a>\n *\n * @author  Mandy Chung\n * @since   1.5\n ","description":"","name":"MemoryPoolMXBean","qualified_name":"java.lang.management.MemoryPoolMXBean","type":3},{"comment":"\n     * This is a {@link ChangeListenerMap ChangeListenerMap} implementation\n     * that works with {@link VetoableChangeListener VetoableChangeListener} objects.\n     ","description":"","name":"VetoableChangeListenerMap","qualified_name":"java.beans.VetoableChangeSupport.VetoableChangeListenerMap","type":2},{"comment":"\n     * Inner class for flipping buffers on a component.  That component must\n     * be a <code>Canvas</code> or <code>Window</code>.\n     * @see Canvas\n     * @see Window\n     * @see java.awt.image.BufferStrategy\n     * @author Michael Martak\n     * @since 1.4\n     ","description":"","name":"FlipBufferStrategy","qualified_name":"java.awt.Component.FlipBufferStrategy","type":2},{"comment":"\n * An EventSetDescriptor describes a group of events that a given Java\n * bean fires.\n * <P>\n * The given group of events are all delivered as method calls on a single\n * event listener interface, and an event listener object can be registered\n * via a call on a registration method supplied by the event source.\n ","description":"","name":"EventSetDescriptor","qualified_name":"java.beans.EventSetDescriptor","type":2},{"comment":"\n * Package private support class.  This provides an AppletStub\n * for beans which are applets.\n ","description":"","name":"BeansAppletStub","qualified_name":"java.beans.BeansAppletStub","type":2},{"comment":" Transforms on LFs.\n *  A lambda-form editor can derive new LFs from its base LF.\n *  The editor can cache derived LFs, which simplifies the reuse of their underlying bytecodes.\n *  To support this caching, a LF has an optional pointer to its editor.\n ","description":"","name":"LambdaFormEditor","qualified_name":"java.lang.invoke.LambdaFormEditor","type":2},{"comment":"\n * The persistence delegate for {@link AWTKeyStroke}.\n * It is impossible to use {@link DefaultPersistenceDelegate}\n * because this class have no public constructor.\n *\n * @author Sergey A. Malenkov\n ","description":"","name":"java_awt_AWTKeyStroke_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_awt_AWTKeyStroke_PersistenceDelegate","type":2},{"comment":"\n * Convenience class for reading character files.  The constructors of this\n * class assume that the default character encoding and the default byte-buffer\n * size are appropriate.  To specify these values yourself, construct an\n * InputStreamReader on a FileInputStream.\n *\n * <p><code>FileReader</code> is meant for reading streams of characters.\n * For reading streams of raw bytes, consider using a\n * <code>FileInputStream</code>.\n *\n * @see InputStreamReader\n * @see FileInputStream\n *\n * @author      Mark Reinhold\n * @since       JDK1.1\n ","description":"","name":"FileReader","qualified_name":"java.io.FileReader","type":2},{"comment":"","description":"","name":"Null","qualified_name":"java.lang.ref.ReferenceQueue.Null","type":2},{"comment":"","description":"","name":"DragSourceDragEvent","qualified_name":"java.awt.dnd.DragSourceDragEvent","type":2},{"comment":"\n * The <code>GraphicsConfigTemplate</code> class is used to obtain a valid\n * {@link GraphicsConfiguration}.  A user instantiates one of these\n * objects and then sets all non-default attributes as desired.  The\n * {@link GraphicsDevice#getBestConfiguration} method found in the\n * {@link GraphicsDevice} class is then called with this\n * <code>GraphicsConfigTemplate</code>.  A valid\n * <code>GraphicsConfiguration</code> is returned that meets or exceeds\n * what was requested in the <code>GraphicsConfigTemplate</code>.\n * @see GraphicsDevice\n * @see GraphicsConfiguration\n *\n * @since       1.2\n ","description":"","name":"GraphicsConfigTemplate","qualified_name":"java.awt.GraphicsConfigTemplate","type":2},{"comment":"\n * The peer interface for fonts. This is only a marker interface and not\n * used by AWT itself.\n *\n * The peer interfaces are intended only for use in porting\n * the AWT. They are not intended for use by application\n * developers, and developers should not implement peers\n * nor invoke any of the peer methods directly on the peer\n * instances.\n ","description":"","name":"FontPeer","qualified_name":"java.awt.peer.FontPeer","type":3},{"comment":"","description":"","name":"DeleteOnExitHook","qualified_name":"java.io.DeleteOnExitHook","type":2},{"comment":"","description":"","name":"TextLine","qualified_name":"java.awt.font.TextLine","type":2},{"comment":"\n * This class performs a pixel-by-pixel rescaling of the data in the\n * source image by multiplying the sample values for each pixel by a scale\n * factor and then adding an offset. The scaled sample values are clipped\n * to the minimum/maximum representable in the destination image.\n * <p>\n * The pseudo code for the rescaling operation is as follows:\n * <pre>\n *for each pixel from Source object {\n *    for each band/component of the pixel {\n *        dstElement = (srcElement*scaleFactor) + offset\n *    }\n *}\n * </pre>\n * <p>\n * For Rasters, rescaling operates on bands.  The number of\n * sets of scaling constants may be one, in which case the same constants\n * are applied to all bands, or it must equal the number of Source\n * Raster bands.\n * <p>\n * For BufferedImages, rescaling operates on color and alpha components.\n * The number of sets of scaling constants may be one, in which case the\n * same constants are applied to all color (but not alpha) components.\n * Otherwise, the  number of sets of scaling constants may\n * equal the number of Source color components, in which case no\n * rescaling of the alpha component (if present) is performed.\n * If neither of these cases apply, the number of sets of scaling constants\n * must equal the number of Source color components plus alpha components,\n * in which case all color and alpha components are rescaled.\n * <p>\n * BufferedImage sources with premultiplied alpha data are treated in the same\n * manner as non-premultiplied images for purposes of rescaling.  That is,\n * the rescaling is done per band on the raw data of the BufferedImage source\n * without regard to whether the data is premultiplied.  If a color conversion\n * is required to the destination ColorModel, the premultiplied state of\n * both source and destination will be taken into account for this step.\n * <p>\n * Images with an IndexColorModel cannot be rescaled.\n * <p>\n * If a RenderingHints object is specified in the constructor, the\n * color rendering hint and the dithering hint may be used when color\n * conversion is required.\n * <p>\n * Note that in-place operation is allowed (i.e. the source and destination can\n * be the same object).\n * @see java.awt.RenderingHints#KEY_COLOR_RENDERING\n * @see java.awt.RenderingHints#KEY_DITHERING\n ","description":"","name":"RescaleOp","qualified_name":"java.awt.image.RescaleOp","type":2},{"comment":"","description":"","name":"SampleModel","qualified_name":"java.awt.image.SampleModel","type":2},{"comment":" annotation data that might get invalidated when JVM TI RedefineClasses() is called","description":"","name":"AnnotationData","qualified_name":"java.lang.Class.AnnotationData","type":2},{"comment":"","description":"","name":"LazyPattern","qualified_name":"java.lang.ProcessImpl.LazyPattern","type":2},{"comment":"\n         * The entries in this hash map extend WeakReference, using\n         * its main ref field as the key (which is always a\n         * ThreadLocal object).  Note that null keys (i.e. entry.get()\n         * == null) mean that the key is no longer referenced, so the\n         * entry can be expunged from table.  Such entries are referred to\n         * as \"stale entries\" in the code that follows.\n         ","description":"","name":"Entry","qualified_name":"java.lang.ThreadLocal.ThreadLocalMap.Entry","type":2},{"comment":"","description":"","name":"Byte","qualified_name":"java.awt.TexturePaintContext.Byte","type":2},{"comment":"","description":"","name":"SynchronizedCollection_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_util_Collections.SynchronizedCollection_PersistenceDelegate","type":2},{"comment":"\n * A {@code Field} provides information about, and dynamic access to, a\n * single field of a class or an interface.  The reflected field may\n * be a class (static) field or an instance field.\n *\n * <p>A {@code Field} permits widening conversions to occur during a get or\n * set access operation, but throws an {@code IllegalArgumentException} if a\n * narrowing conversion would occur.\n *\n * @see Member\n * @see java.lang.Class\n * @see java.lang.Class#getFields()\n * @see java.lang.Class#getField(String)\n * @see java.lang.Class#getDeclaredFields()\n * @see java.lang.Class#getDeclaredField(String)\n *\n * @author Kenneth Russell\n * @author Nakul Saraiya\n ","description":"","name":"Field","qualified_name":"java.lang.reflect.Field","type":2},{"comment":"","description":"","name":"ProfileDataException","qualified_name":"java.awt.color.ProfileDataException","type":2},{"comment":"\n * An abstract adapter class for receiving ancestor moved and resized events.\n * The methods in this class are empty. This class exists as a\n * convenience for creating listener objects.\n * <p>\n * Extend this class and override the method for the event of interest. (If\n * you implement the <code>HierarchyBoundsListener</code> interface, you have\n * to define both methods in it. This abstract class defines null methods for\n * them both, so you only have to define the method for the event you care\n * about.)\n * <p>\n * Create a listener object using your class and then register it with a\n * Component using the Component's <code>addHierarchyBoundsListener</code>\n * method. When the hierarchy to which the Component belongs changes by\n * resize or movement of an ancestor, the relevant method in the listener\n * object is invoked, and the <code>HierarchyEvent</code> is passed to it.\n *\n * @author      David Mendenhall\n * @see         HierarchyBoundsListener\n * @see         HierarchyEvent\n * @since       1.3\n ","description":"","name":"HierarchyBoundsAdapter","qualified_name":"java.awt.event.HierarchyBoundsAdapter","type":2},{"comment":"\n     * Inner class of Menu used to provide default support for\n     * accessibility.  This class is not meant to be used directly by\n     * application developers, but is instead meant only to be\n     * subclassed by menu component developers.\n     * <p>\n     * This class implements accessibility support for the\n     * <code>Menu</code> class.  It provides an implementation of the\n     * Java Accessibility API appropriate to menu user-interface elements.\n     * @since 1.3\n     ","description":"","name":"AccessibleAWTMenu","qualified_name":"java.awt.Menu.AccessibleAWTMenu","type":2},{"comment":"\n * <CODE>Arc2D</CODE> is the abstract superclass for all objects that\n * store a 2D arc defined by a framing rectangle,\n * start angle, angular extent (length of the arc), and a closure type\n * (<CODE>OPEN</CODE>, <CODE>CHORD</CODE>, or <CODE>PIE</CODE>).\n * <p>\n * <a name=\"inscribes\">\n * The arc is a partial section of a full ellipse which\n * inscribes the framing rectangle of its parent {@link RectangularShape}.\n * </a>\n * <a name=\"angles\">\n * The angles are specified relative to the non-square\n * framing rectangle such that 45 degrees always falls on the line from\n * the center of the ellipse to the upper right corner of the framing\n * rectangle.\n * As a result, if the framing rectangle is noticeably longer along one\n * axis than the other, the angles to the start and end of the arc segment\n * will be skewed farther along the longer axis of the frame.\n * </a>\n * <p>\n * The actual storage representation of the coordinates is left to\n * the subclass.\n *\n * @author      Jim Graham\n * @since 1.2\n ","description":"","name":"Arc2D","qualified_name":"java.awt.geom.Arc2D","type":2},{"comment":" Component","description":"","name":"java_awt_Component_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_awt_Component_PersistenceDelegate","type":2},{"comment":"\n * The <code>PrinterIOException</code> class is a subclass of\n * {@link PrinterException} and is used to indicate that an IO error\n * of some sort has occurred while printing.\n *\n * <p>As of release 1.4, this exception has been retrofitted to conform to\n * the general purpose exception-chaining mechanism.  The\n * \"<code>IOException</code> that terminated the print job\"\n * that is provided at construction time and accessed via the\n * {@link #getIOException()} method is now known as the <i>cause</i>,\n * and may be accessed via the {@link Throwable#getCause()} method,\n * as well as the aforementioned \"legacy method.\"\n ","description":"","name":"PrinterIOException","qualified_name":"java.awt.print.PrinterIOException","type":2},{"comment":"\n * A method handle is a typed, directly executable reference to an underlying method,\n * constructor, field, or similar low-level operation, with optional\n * transformations of arguments or return values.\n * These transformations are quite general, and include such patterns as\n * {@linkplain #asType conversion},\n * {@linkplain #bindTo insertion},\n * {@linkplain java.lang.invoke.MethodHandles#dropArguments deletion},\n * and {@linkplain java.lang.invoke.MethodHandles#filterArguments substitution}.\n *\n * <h1>Method handle contents</h1>\n * Method handles are dynamically and strongly typed according to their parameter and return types.\n * They are not distinguished by the name or the defining class of their underlying methods.\n * A method handle must be invoked using a symbolic type descriptor which matches\n * the method handle's own {@linkplain #type type descriptor}.\n * <p>\n * Every method handle reports its type descriptor via the {@link #type type} accessor.\n * This type descriptor is a {@link java.lang.invoke.MethodType MethodType} object,\n * whose structure is a series of classes, one of which is\n * the return type of the method (or {@code void.class} if none).\n * <p>\n * A method handle's type controls the types of invocations it accepts,\n * and the kinds of transformations that apply to it.\n * <p>\n * A method handle contains a pair of special invoker methods\n * called {@link #invokeExact invokeExact} and {@link #invoke invoke}.\n * Both invoker methods provide direct access to the method handle's\n * underlying method, constructor, field, or other operation,\n * as modified by transformations of arguments and return values.\n * Both invokers accept calls which exactly match the method handle's own type.\n * The plain, inexact invoker also accepts a range of other call types.\n * <p>\n * Method handles are immutable and have no visible state.\n * Of course, they can be bound to underlying methods or data which exhibit state.\n * With respect to the Java Memory Model, any method handle will behave\n * as if all of its (internal) fields are final variables.  This means that any method\n * handle made visible to the application will always be fully formed.\n * This is true even if the method handle is published through a shared\n * variable in a data race.\n * <p>\n * Method handles cannot be subclassed by the user.\n * Implementations may (or may not) create internal subclasses of {@code MethodHandle}\n * which may be visible via the {@link java.lang.Object#getClass Object.getClass}\n * operation.  The programmer should not draw conclusions about a method handle\n * from its specific class, as the method handle class hierarchy (if any)\n * may change from time to time or across implementations from different vendors.\n *\n * <h1>Method handle compilation</h1>\n * A Java method call expression naming {@code invokeExact} or {@code invoke}\n * can invoke a method handle from Java source code.\n * From the viewpoint of source code, these methods can take any arguments\n * and their result can be cast to any return type.\n * Formally this is accomplished by giving the invoker methods\n * {@code Object} return types and variable arity {@code Object} arguments,\n * but they have an additional quality called <em>signature polymorphism</em>\n * which connects this freedom of invocation directly to the JVM execution stack.\n * <p>\n * As is usual with virtual methods, source-level calls to {@code invokeExact}\n * and {@code invoke} compile to an {@code invokevirtual} instruction.\n * More unusually, the compiler must record the actual argument types,\n * and may not perform method invocation conversions on the arguments.\n * Instead, it must push them on the stack according to their own unconverted types.\n * The method handle object itself is pushed on the stack before the arguments.\n * The compiler then calls the method handle with a symbolic type descriptor which\n * describes the argument and return types.\n * <p>\n * To issue a complete symbolic type descriptor, the compiler must also determine\n * the return type.  This is based on a cast on the method invocation expression,\n * if there is one, or else {@code Object} if the invocation is an expression\n * or else {@code void} if the invocation is a statement.\n * The cast may be to a primitive type (but not {@code void}).\n * <p>\n * As a corner case, an uncasted {@code null} argument is given\n * a symbolic type descriptor of {@code java.lang.Void}.\n * The ambiguity with the type {@code Void} is harmless, since there are no references of type\n * {@code Void} except the null reference.\n *\n * <h1>Method handle invocation</h1>\n * The first time a {@code invokevirtual} instruction is executed\n * it is linked, by symbolically resolving the names in the instruction\n * and verifying that the method call is statically legal.\n * This is true of calls to {@code invokeExact} and {@code invoke}.\n * In this case, the symbolic type descriptor emitted by the compiler is checked for\n * correct syntax and names it contains are resolved.\n * Thus, an {@code invokevirtual} instruction which invokes\n * a method handle will always link, as long\n * as the symbolic type descriptor is syntactically well-formed\n * and the types exist.\n * <p>\n * When the {@code invokevirtual} is executed after linking,\n * the receiving method handle's type is first checked by the JVM\n * to ensure that it matches the symbolic type descriptor.\n * If the type match fails, it means that the method which the\n * caller is invoking is not present on the individual\n * method handle being invoked.\n * <p>\n * In the case of {@code invokeExact}, the type descriptor of the invocation\n * (after resolving symbolic type names) must exactly match the method type\n * of the receiving method handle.\n * In the case of plain, inexact {@code invoke}, the resolved type descriptor\n * must be a valid argument to the receiver's {@link #asType asType} method.\n * Thus, plain {@code invoke} is more permissive than {@code invokeExact}.\n * <p>\n * After type matching, a call to {@code invokeExact} directly\n * and immediately invoke the method handle's underlying method\n * (or other behavior, as the case may be).\n * <p>\n * A call to plain {@code invoke} works the same as a call to\n * {@code invokeExact}, if the symbolic type descriptor specified by the caller\n * exactly matches the method handle's own type.\n * If there is a type mismatch, {@code invoke} attempts\n * to adjust the type of the receiving method handle,\n * as if by a call to {@link #asType asType},\n * to obtain an exactly invokable method handle {@code M2}.\n * This allows a more powerful negotiation of method type\n * between caller and callee.\n * <p>\n * (<em>Note:</em> The adjusted method handle {@code M2} is not directly observable,\n * and implementations are therefore not required to materialize it.)\n *\n * <h1>Invocation checking</h1>\n * In typical programs, method handle type matching will usually succeed.\n * But if a match fails, the JVM will throw a {@link WrongMethodTypeException},\n * either directly (in the case of {@code invokeExact}) or indirectly as if\n * by a failed call to {@code asType} (in the case of {@code invoke}).\n * <p>\n * Thus, a method type mismatch which might show up as a linkage error\n * in a statically typed program can show up as\n * a dynamic {@code WrongMethodTypeException}\n * in a program which uses method handles.\n * <p>\n * Because method types contain \"live\" {@code Class} objects,\n * method type matching takes into account both types names and class loaders.\n * Thus, even if a method handle {@code M} is created in one\n * class loader {@code L1} and used in another {@code L2},\n * method handle calls are type-safe, because the caller's symbolic type\n * descriptor, as resolved in {@code L2},\n * is matched against the original callee method's symbolic type descriptor,\n * as resolved in {@code L1}.\n * The resolution in {@code L1} happens when {@code M} is created\n * and its type is assigned, while the resolution in {@code L2} happens\n * when the {@code invokevirtual} instruction is linked.\n * <p>\n * Apart from the checking of type descriptors,\n * a method handle's capability to call its underlying method is unrestricted.\n * If a method handle is formed on a non-public method by a class\n * that has access to that method, the resulting handle can be used\n * in any place by any caller who receives a reference to it.\n * <p>\n * Unlike with the Core Reflection API, where access is checked every time\n * a reflective method is invoked,\n * method handle access checking is performed\n * <a href=\"MethodHandles.Lookup.html#access\">when the method handle is created</a>.\n * In the case of {@code ldc} (see below), access checking is performed as part of linking\n * the constant pool entry underlying the constant method handle.\n * <p>\n * Thus, handles to non-public methods, or to methods in non-public classes,\n * should generally be kept secret.\n * They should not be passed to untrusted code unless their use from\n * the untrusted code would be harmless.\n *\n * <h1>Method handle creation</h1>\n * Java code can create a method handle that directly accesses\n * any method, constructor, or field that is accessible to that code.\n * This is done via a reflective, capability-based API called\n * {@link java.lang.invoke.MethodHandles.Lookup MethodHandles.Lookup}\n * For example, a static method handle can be obtained\n * from {@link java.lang.invoke.MethodHandles.Lookup#findStatic Lookup.findStatic}.\n * There are also conversion methods from Core Reflection API objects,\n * such as {@link java.lang.invoke.MethodHandles.Lookup#unreflect Lookup.unreflect}.\n * <p>\n * Like classes and strings, method handles that correspond to accessible\n * fields, methods, and constructors can also be represented directly\n * in a class file's constant pool as constants to be loaded by {@code ldc} bytecodes.\n * A new type of constant pool entry, {@code CONSTANT_MethodHandle},\n * refers directly to an associated {@code CONSTANT_Methodref},\n * {@code CONSTANT_InterfaceMethodref}, or {@code CONSTANT_Fieldref}\n * constant pool entry.\n * (For full details on method handle constants,\n * see sections 4.4.8 and 5.4.3.5 of the Java Virtual Machine Specification.)\n * <p>\n * Method handles produced by lookups or constant loads from methods or\n * constructors with the variable arity modifier bit ({@code 0x0080})\n * have a corresponding variable arity, as if they were defined with\n * the help of {@link #asVarargsCollector asVarargsCollector}.\n * <p>\n * A method reference may refer either to a static or non-static method.\n * In the non-static case, the method handle type includes an explicit\n * receiver argument, prepended before any other arguments.\n * In the method handle's type, the initial receiver argument is typed\n * according to the class under which the method was initially requested.\n * (E.g., if a non-static method handle is obtained via {@code ldc},\n * the type of the receiver is the class named in the constant pool entry.)\n * <p>\n * Method handle constants are subject to the same link-time access checks\n * their corresponding bytecode instructions, and the {@code ldc} instruction\n * will throw corresponding linkage errors if the bytecode behaviors would\n * throw such errors.\n * <p>\n * As a corollary of this, access to protected members is restricted\n * to receivers only of the accessing class, or one of its subclasses,\n * and the accessing class must in turn be a subclass (or package sibling)\n * of the protected member's defining class.\n * If a method reference refers to a protected non-static method or field\n * of a class outside the current package, the receiver argument will\n * be narrowed to the type of the accessing class.\n * <p>\n * When a method handle to a virtual method is invoked, the method is\n * always looked up in the receiver (that is, the first argument).\n * <p>\n * A non-virtual method handle to a specific virtual method implementation\n * can also be created.  These do not perform virtual lookup based on\n * receiver type.  Such a method handle simulates the effect of\n * an {@code invokespecial} instruction to the same method.\n *\n * <h1>Usage examples</h1>\n * Here are some examples of usage:\n * <blockquote><pre>{@code\nObject x, y; String s; int i;\nMethodType mt; MethodHandle mh;\nMethodHandles.Lookup lookup = MethodHandles.lookup();\n// mt is (char,char)String\nmt = MethodType.methodType(String.class, char.class, char.class);\nmh = lookup.findVirtual(String.class, \"replace\", mt);\ns = (String) mh.invokeExact(\"daddy\",'d','n');\n// invokeExact(Ljava/lang/String;CC)Ljava/lang/String;\nassertEquals(s, \"nanny\");\n// weakly typed invocation (using MHs.invoke)\ns = (String) mh.invokeWithArguments(\"sappy\", 'p', 'v');\nassertEquals(s, \"savvy\");\n// mt is (Object[])List\nmt = MethodType.methodType(java.util.List.class, Object[].class);\nmh = lookup.findStatic(java.util.Arrays.class, \"asList\", mt);\nassert(mh.isVarargsCollector());\nx = mh.invoke(\"one\", \"two\");\n// invoke(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;\nassertEquals(x, java.util.Arrays.asList(\"one\",\"two\"));\n// mt is (Object,Object,Object)Object\nmt = MethodType.genericMethodType(3);\nmh = mh.asType(mt);\nx = mh.invokeExact((Object)1, (Object)2, (Object)3);\n// invokeExact(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;\nassertEquals(x, java.util.Arrays.asList(1,2,3));\n// mt is ()int\nmt = MethodType.methodType(int.class);\nmh = lookup.findVirtual(java.util.List.class, \"size\", mt);\ni = (int) mh.invokeExact(java.util.Arrays.asList(1,2,3));\n// invokeExact(Ljava/util/List;)I\nassert(i == 3);\nmt = MethodType.methodType(void.class, String.class);\nmh = lookup.findVirtual(java.io.PrintStream.class, \"println\", mt);\nmh.invokeExact(System.out, \"Hello, world.\");\n// invokeExact(Ljava/io/PrintStream;Ljava/lang/String;)V\n * }</pre></blockquote>\n * Each of the above calls to {@code invokeExact} or plain {@code invoke}\n * generates a single invokevirtual instruction with\n * the symbolic type descriptor indicated in the following comment.\n * In these examples, the helper method {@code assertEquals} is assumed to\n * be a method which calls {@link java.util.Objects#equals(Object,Object) Objects.equals}\n * on its arguments, and asserts that the result is true.\n *\n * <h1>Exceptions</h1>\n * The methods {@code invokeExact} and {@code invoke} are declared\n * to throw {@link java.lang.Throwable Throwable},\n * which is to say that there is no static restriction on what a method handle\n * can throw.  Since the JVM does not distinguish between checked\n * and unchecked exceptions (other than by their class, of course),\n * there is no particular effect on bytecode shape from ascribing\n * checked exceptions to method handle invocations.  But in Java source\n * code, methods which perform method handle calls must either explicitly\n * throw {@code Throwable}, or else must catch all\n * throwables locally, rethrowing only those which are legal in the context,\n * and wrapping ones which are illegal.\n *\n * <h1><a name=\"sigpoly\"></a>Signature polymorphism</h1>\n * The unusual compilation and linkage behavior of\n * {@code invokeExact} and plain {@code invoke}\n * is referenced by the term <em>signature polymorphism</em>.\n * As defined in the Java Language Specification,\n * a signature polymorphic method is one which can operate with\n * any of a wide range of call signatures and return types.\n * <p>\n * In source code, a call to a signature polymorphic method will\n * compile, regardless of the requested symbolic type descriptor.\n * As usual, the Java compiler emits an {@code invokevirtual}\n * instruction with the given symbolic type descriptor against the named method.\n * The unusual part is that the symbolic type descriptor is derived from\n * the actual argument and return types, not from the method declaration.\n * <p>\n * When the JVM processes bytecode containing signature polymorphic calls,\n * it will successfully link any such call, regardless of its symbolic type descriptor.\n * (In order to retain type safety, the JVM will guard such calls with suitable\n * dynamic type checks, as described elsewhere.)\n * <p>\n * Bytecode generators, including the compiler back end, are required to emit\n * untransformed symbolic type descriptors for these methods.\n * Tools which determine symbolic linkage are required to accept such\n * untransformed descriptors, without reporting linkage errors.\n *\n * <h1>Interoperation between method handles and the Core Reflection API</h1>\n * Using factory methods in the {@link java.lang.invoke.MethodHandles.Lookup Lookup} API,\n * any class member represented by a Core Reflection API object\n * can be converted to a behaviorally equivalent method handle.\n * For example, a reflective {@link java.lang.reflect.Method Method} can\n * be converted to a method handle using\n * {@link java.lang.invoke.MethodHandles.Lookup#unreflect Lookup.unreflect}.\n * The resulting method handles generally provide more direct and efficient\n * access to the underlying class members.\n * <p>\n * As a special case,\n * when the Core Reflection API is used to view the signature polymorphic\n * methods {@code invokeExact} or plain {@code invoke} in this class,\n * they appear as ordinary non-polymorphic methods.\n * Their reflective appearance, as viewed by\n * {@link java.lang.Class#getDeclaredMethod Class.getDeclaredMethod},\n * is unaffected by their special status in this API.\n * For example, {@link java.lang.reflect.Method#getModifiers Method.getModifiers}\n * will report exactly those modifier bits required for any similarly\n * declared method, including in this case {@code native} and {@code varargs} bits.\n * <p>\n * As with any reflected method, these methods (when reflected) may be\n * invoked via {@link java.lang.reflect.Method#invoke java.lang.reflect.Method.invoke}.\n * However, such reflective calls do not result in method handle invocations.\n * Such a call, if passed the required argument\n * (a single one, of type {@code Object[]}), will ignore the argument and\n * will throw an {@code UnsupportedOperationException}.\n * <p>\n * Since {@code invokevirtual} instructions can natively\n * invoke method handles under any symbolic type descriptor, this reflective view conflicts\n * with the normal presentation of these methods via bytecodes.\n * Thus, these two native methods, when reflectively viewed by\n * {@code Class.getDeclaredMethod}, may be regarded as placeholders only.\n * <p>\n * In order to obtain an invoker method for a particular type descriptor,\n * use {@link java.lang.invoke.MethodHandles#exactInvoker MethodHandles.exactInvoker},\n * or {@link java.lang.invoke.MethodHandles#invoker MethodHandles.invoker}.\n * The {@link java.lang.invoke.MethodHandles.Lookup#findVirtual Lookup.findVirtual}\n * API is also able to return a method handle\n * to call {@code invokeExact} or plain {@code invoke},\n * for any specified type descriptor .\n *\n * <h1>Interoperation between method handles and Java generics</h1>\n * A method handle can be obtained on a method, constructor, or field\n * which is declared with Java generic types.\n * As with the Core Reflection API, the type of the method handle\n * will constructed from the erasure of the source-level type.\n * When a method handle is invoked, the types of its arguments\n * or the return value cast type may be generic types or type instances.\n * If this occurs, the compiler will replace those\n * types by their erasures when it constructs the symbolic type descriptor\n * for the {@code invokevirtual} instruction.\n * <p>\n * Method handles do not represent\n * their function-like types in terms of Java parameterized (generic) types,\n * because there are three mismatches between function-like types and parameterized\n * Java types.\n * <ul>\n * <li>Method types range over all possible arities,\n * from no arguments to up to the  <a href=\"MethodHandle.html#maxarity\">maximum number</a> of allowed arguments.\n * Generics are not variadic, and so cannot represent this.</li>\n * <li>Method types can specify arguments of primitive types,\n * which Java generic types cannot range over.</li>\n * <li>Higher order functions over method handles (combinators) are\n * often generic across a wide range of function types, including\n * those of multiple arities.  It is impossible to represent such\n * genericity with a Java type parameter.</li>\n * </ul>\n *\n * <h1><a name=\"maxarity\"></a>Arity limits</h1>\n * The JVM imposes on all methods and constructors of any kind an absolute\n * limit of 255 stacked arguments.  This limit can appear more restrictive\n * in certain cases:\n * <ul>\n * <li>A {@code long} or {@code double} argument counts (for purposes of arity limits) as two argument slots.\n * <li>A non-static method consumes an extra argument for the object on which the method is called.\n * <li>A constructor consumes an extra argument for the object which is being constructed.\n * <li>Since a method handle&rsquo;s {@code invoke} method (or other signature-polymorphic method) is non-virtual,\n *     it consumes an extra argument for the method handle itself, in addition to any non-virtual receiver object.\n * </ul>\n * These limits imply that certain method handles cannot be created, solely because of the JVM limit on stacked arguments.\n * For example, if a static JVM method accepts exactly 255 arguments, a method handle cannot be created for it.\n * Attempts to create method handles with impossible method types lead to an {@link IllegalArgumentException}.\n * In particular, a method handle&rsquo;s type must not have an arity of the exact maximum 255.\n *\n * @see MethodType\n * @see MethodHandles\n * @author John Rose, JSR 292 EG\n ","description":"","name":"MethodHandle","qualified_name":"java.lang.invoke.MethodHandle","type":2},{"comment":"\n * Instances of the file descriptor class serve as an opaque handle\n * to the underlying machine-specific structure representing an\n * open file, an open socket, or another source or sink of bytes.\n * The main practical use for a file descriptor is to create a\n * {@link FileInputStream} or {@link FileOutputStream} to contain it.\n *\n * <p>Applications should not create their own file descriptors.\n *\n * @author  Pavani Diwanji\n * @since   JDK1.0\n ","description":"","name":"FileDescriptor","qualified_name":"java.io.FileDescriptor","type":2},{"comment":" Replace with ConcurrentReferenceHashMap when/if it appears in a future\n     * release ","description":"","name":"Caches","qualified_name":"java.lang.Thread.Caches","type":2},{"comment":"\n *  The listener interface for receiving\n * <code>BeanContextServiceRevokedEvent</code> objects. A class that is\n * interested in processing a <code>BeanContextServiceRevokedEvent</code>\n * implements this interface.\n ","description":"","name":"BeanContextServiceRevokedListener","qualified_name":"java.beans.beancontext.BeanContextServiceRevokedListener","type":3},{"comment":"\n     * This class implements accessibility support for the\n     * <code>Scrollbar</code> class.  It provides an implementation of\n     * the Java Accessibility API appropriate to scrollbar\n     * user-interface elements.\n     * @since 1.3\n     ","description":"","name":"AccessibleAWTScrollBar","qualified_name":"java.awt.Scrollbar.AccessibleAWTScrollBar","type":2},{"comment":"\n     * Instances of this class represent particular subsets of the Unicode\n     * character set.  The only family of subsets defined in the\n     * {@code Character} class is {@link Character.UnicodeBlock}.\n     * Other portions of the Java API may define other subsets for their\n     * own purposes.\n     *\n     * @since 1.2\n     ","description":"","name":"Subset","qualified_name":"java.lang.Character.Subset","type":2},{"comment":"\n * The persistence delegate for <CODE>java.sql.Timestamp</CODE> classes.\n * It supports nanoseconds.\n *\n * @author Sergey A. Malenkov\n ","description":"","name":"java_sql_Timestamp_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_sql_Timestamp_PersistenceDelegate","type":2},{"comment":"","description":"","name":"UnmodifiableMap_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_util_Collections.UnmodifiableMap_PersistenceDelegate","type":2},{"comment":"","description":"","name":"BandedSampleModel","qualified_name":"java.awt.image.BandedSampleModel","type":2},{"comment":"","description":"","name":"Lazy","qualified_name":"java.lang.invoke.Invokers.Lazy","type":2},{"comment":"\n * A thread-safe, mutable sequence of characters.\n * A string buffer is like a {@link String}, but can be modified. At any\n * point in time it contains some particular sequence of characters, but\n * the length and content of the sequence can be changed through certain\n * method calls.\n * <p>\n * String buffers are safe for use by multiple threads. The methods\n * are synchronized where necessary so that all the operations on any\n * particular instance behave as if they occur in some serial order\n * that is consistent with the order of the method calls made by each of\n * the individual threads involved.\n * <p>\n * The principal operations on a {@code StringBuffer} are the\n * {@code append} and {@code insert} methods, which are\n * overloaded so as to accept data of any type. Each effectively\n * converts a given datum to a string and then appends or inserts the\n * characters of that string to the string buffer. The\n * {@code append} method always adds these characters at the end\n * of the buffer; the {@code insert} method adds the characters at\n * a specified point.\n * <p>\n * For example, if {@code z} refers to a string buffer object\n * whose current contents are {@code \"start\"}, then\n * the method call {@code z.append(\"le\")} would cause the string\n * buffer to contain {@code \"startle\"}, whereas\n * {@code z.insert(4, \"le\")} would alter the string buffer to\n * contain {@code \"starlet\"}.\n * <p>\n * In general, if sb refers to an instance of a {@code StringBuffer},\n * then {@code sb.append(x)} has the same effect as\n * {@code sb.insert(sb.length(), x)}.\n * <p>\n * Whenever an operation occurs involving a source sequence (such as\n * appending or inserting from a source sequence), this class synchronizes\n * only on the string buffer performing the operation, not on the source.\n * Note that while {@code StringBuffer} is designed to be safe to use\n * concurrently from multiple threads, if the constructor or the\n * {@code append} or {@code insert} operation is passed a source sequence\n * that is shared across threads, the calling code must ensure\n * that the operation has a consistent and unchanging view of the source\n * sequence for the duration of the operation.\n * This could be satisfied by the caller holding a lock during the\n * operation's call, by using an immutable source sequence, or by not\n * sharing the source sequence across threads.\n * <p>\n * Every string buffer has a capacity. As long as the length of the\n * character sequence contained in the string buffer does not exceed\n * the capacity, it is not necessary to allocate a new internal\n * buffer array. If the internal buffer overflows, it is\n * automatically made larger.\n * <p>\n * Unless otherwise noted, passing a {@code null} argument to a constructor\n * or method in this class will cause a {@link NullPointerException} to be\n * thrown.\n * <p>\n * As of  release JDK 5, this class has been supplemented with an equivalent\n * class designed for use by a single thread, {@link StringBuilder}.  The\n * {@code StringBuilder} class should generally be used in preference to\n * this one, as it supports all of the same operations but it is faster, as\n * it performs no synchronization.\n *\n * @author      Arthur van Hoff\n * @see     java.lang.StringBuilder\n * @see     java.lang.String\n * @since   JDK1.0\n ","description":"","name":"StringBuffer","qualified_name":"java.lang.StringBuffer","type":2},{"comment":"\n * Thrown when an incompatible class change has occurred to some class\n * definition. The definition of some class, on which the currently\n * executing method depends, has since changed.\n *\n * @author  unascribed\n * @since   JDK1.0\n ","description":"","name":"IncompatibleClassChangeError","qualified_name":"java.lang.IncompatibleClassChangeError","type":2},{"comment":"","description":"","name":"DragSource","qualified_name":"java.awt.dnd.DragSource","type":2},{"comment":"","description":"","name":"ThreadInfo","qualified_name":"java.lang.management.ThreadInfo","type":2},{"comment":"\n * A low-level event which indicates that a container's contents\n * changed because a component was added or removed.\n * <P>\n * Container events are provided for notification purposes ONLY;\n * The AWT will automatically handle changes to the containers\n * contents internally so that the program works properly regardless of\n * whether the program is receiving these events or not.\n * <P>\n * This low-level event is generated by a container object (such as a\n * Panel) when a component is added to it or removed from it.\n * The event is passed to every <code>ContainerListener</code>\n * or <code>ContainerAdapter</code> object which registered to receive such\n * events using the component's <code>addContainerListener</code> method.\n * (<code>ContainerAdapter</code> objects implement the\n * <code>ContainerListener</code> interface.) Each such listener object\n * gets this <code>ContainerEvent</code> when the event occurs.\n * <p>\n * An unspecified behavior will be caused if the {@code id} parameter\n * of any particular {@code ContainerEvent} instance is not\n * in the range from {@code CONTAINER_FIRST} to {@code CONTAINER_LAST}.\n *\n * @see ContainerAdapter\n * @see ContainerListener\n * @see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/containerlistener.html\">Tutorial: Writing a Container Listener</a>\n *\n * @author Tim Prinzing\n * @author Amy Fowler\n * @since 1.1\n ","description":"","name":"ContainerEvent","qualified_name":"java.awt.event.ContainerEvent","type":2},{"comment":"\n * The peer interface for the {@link TrayIcon}. This doesn't need to be\n * implemented if {@link SystemTray#isSupported()} returns false.\n ","description":"","name":"TrayIconPeer","qualified_name":"java.awt.peer.TrayIconPeer","type":3},{"comment":" TextAttribute","description":"","name":"java_awt_font_TextAttribute_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_awt_font_TextAttribute_PersistenceDelegate","type":2},{"comment":"","description":"","name":"DropTargetListener","qualified_name":"java.awt.dnd.DropTargetListener","type":3},{"comment":"","description":"","name":"BeanContextServicesSupport","qualified_name":"java.beans.beancontext.BeanContextServicesSupport","type":2},{"comment":"\n * A <code>BeanContextMembershipEvent</code> encapsulates\n * the list of children added to, or removed from,\n * the membership of a particular <code>BeanContext</code>.\n * An instance of this event is fired whenever a successful\n * add(), remove(), retainAll(), removeAll(), or clear() is\n * invoked on a given <code>BeanContext</code> instance.\n * Objects interested in receiving events of this type must\n * implement the <code>BeanContextMembershipListener</code>\n * interface, and must register their intent via the\n * <code>BeanContext</code>'s\n * <code>addBeanContextMembershipListener(BeanContextMembershipListener bcml)\n * </code> method.\n *\n * @author      Laurence P. G. Cable\n * @since       1.2\n * @see         java.beans.beancontext.BeanContext\n * @see         java.beans.beancontext.BeanContextEvent\n * @see         java.beans.beancontext.BeanContextMembershipListener\n ","description":"","name":"BeanContextMembershipEvent","qualified_name":"java.beans.beancontext.BeanContextMembershipEvent","type":2},{"comment":"\n * Capabilities and properties of images.\n * @author Michael Martak\n * @since 1.4\n ","description":"","name":"ImageCapabilities","qualified_name":"java.awt.ImageCapabilities","type":2},{"comment":"\n     * A type-safe enumeration of possible paper sizes. These sizes are in\n     * compliance with IPP 1.1.\n     * @since 1.3\n     ","description":"","name":"MediaType","qualified_name":"java.awt.PageAttributes.MediaType","type":2},{"comment":"","description":"","name":"PrinterException","qualified_name":"java.awt.print.PrinterException","type":2},{"comment":"\n     * The <code>Double</code> class defines a rectangle with rounded\n     * corners all specified in <code>double</code> coordinates.\n     * @since 1.2\n     ","description":"","name":"Double","qualified_name":"java.awt.geom.RoundRectangle2D.Double","type":2},{"comment":"","description":"","name":"SynchronizedMap_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_util_Collections.SynchronizedMap_PersistenceDelegate","type":2},{"comment":" Object used to synchronize with the garbage collector.  The collector\n     * must acquire this lock at the beginning of each collection cycle.  It is\n     * therefore critical that any code holding this lock complete as quickly\n     * as possible, allocate no new objects, and avoid calling user code.\n     ","description":"","name":"Lock","qualified_name":"java.lang.ref.Reference.Lock","type":2},{"comment":"","description":"","name":"RuntimePermission","qualified_name":"java.lang.RuntimePermission","type":2},{"comment":"\n * The listener interface for receiving notification of events\n * dispatched to objects that are instances of Component or\n * MenuComponent or their subclasses.  Unlike the other EventListeners\n * in this package, AWTEventListeners passively observe events\n * being dispatched in the AWT, system-wide.  Most applications\n * should never use this class; applications which might use\n * AWTEventListeners include event recorders for automated testing,\n * and facilities such as the Java Accessibility package.\n * <p>\n * The class that is interested in monitoring AWT events\n * implements this interface, and the object created with that\n * class is registered with the Toolkit, using the Toolkit's\n * <code>addAWTEventListener</code> method.  When an event is\n * dispatched anywhere in the AWT, that object's\n * <code>eventDispatched</code> method is invoked.\n *\n * @see java.awt.AWTEvent\n * @see java.awt.Toolkit#addAWTEventListener\n * @see java.awt.Toolkit#removeAWTEventListener\n *\n * @author Fred Ecks\n * @since 1.2\n ","description":"","name":"AWTEventListener","qualified_name":"java.awt.event.AWTEventListener","type":3},{"comment":"\n * A method handle whose behavior is determined only by its LambdaForm.\n * @author jrose\n ","description":"","name":"SimpleMethodHandle","qualified_name":"java.lang.invoke.SimpleMethodHandle","type":2},{"comment":"\n * <p>\n * A {@code SwitchPoint} is an object which can publish state transitions to other threads.\n * A switch point is initially in the <em>valid</em> state, but may at any time be\n * changed to the <em>invalid</em> state.  Invalidation cannot be reversed.\n * A switch point can combine a <em>guarded pair</em> of method handles into a\n * <em>guarded delegator</em>.\n * The guarded delegator is a method handle which delegates to one of the old method handles.\n * The state of the switch point determines which of the two gets the delegation.\n * <p>\n * A single switch point may be used to control any number of method handles.\n * (Indirectly, therefore, it can control any number of call sites.)\n * This is done by using the single switch point as a factory for combining\n * any number of guarded method handle pairs into guarded delegators.\n * <p>\n * When a guarded delegator is created from a guarded pair, the pair\n * is wrapped in a new method handle {@code M},\n * which is permanently associated with the switch point that created it.\n * Each pair consists of a target {@code T} and a fallback {@code F}.\n * While the switch point is valid, invocations to {@code M} are delegated to {@code T}.\n * After it is invalidated, invocations are delegated to {@code F}.\n * <p>\n * Invalidation is global and immediate, as if the switch point contained a\n * volatile boolean variable consulted on every call to {@code M}.\n * The invalidation is also permanent, which means the switch point\n * can change state only once.\n * The switch point will always delegate to {@code F} after being invalidated.\n * At that point {@code guardWithTest} may ignore {@code T} and return {@code F}.\n * <p>\n * Here is an example of a switch point in action:\n * <pre>{@code\n * MethodHandle MH_strcat = MethodHandles.lookup()\n *     .findVirtual(String.class, \"concat\", MethodType.methodType(String.class, String.class));\n * SwitchPoint spt = new SwitchPoint();\n * assert(!spt.hasBeenInvalidated());\n * // the following steps may be repeated to re-use the same switch point:\n * MethodHandle worker1 = MH_strcat;\n * MethodHandle worker2 = MethodHandles.permuteArguments(MH_strcat, MH_strcat.type(), 1, 0);\n * MethodHandle worker = spt.guardWithTest(worker1, worker2);\n * assertEquals(\"method\", (String) worker.invokeExact(\"met\", \"hod\"));\n * SwitchPoint.invalidateAll(new SwitchPoint[]{ spt });\n * assert(spt.hasBeenInvalidated());\n * assertEquals(\"hodmet\", (String) worker.invokeExact(\"met\", \"hod\"));\n * }</pre>\n * <p style=\"font-size:smaller;\">\n * <em>Discussion:</em>\n * Switch points are useful without subclassing.  They may also be subclassed.\n * This may be useful in order to associate application-specific invalidation logic\n * with the switch point.\n * Notice that there is no permanent association between a switch point and\n * the method handles it produces and consumes.\n * The garbage collector may collect method handles produced or consumed\n * by a switch point independently of the lifetime of the switch point itself.\n * <p style=\"font-size:smaller;\">\n * <em>Implementation Note:</em>\n * A switch point behaves as if implemented on top of {@link MutableCallSite},\n * approximately as follows:\n * <pre>{@code\n * public class SwitchPoint {\n *     private static final MethodHandle\n *         K_true  = MethodHandles.constant(boolean.class, true),\n *         K_false = MethodHandles.constant(boolean.class, false);\n *     private final MutableCallSite mcs;\n *     private final MethodHandle mcsInvoker;\n *     public SwitchPoint() {\n *         this.mcs = new MutableCallSite(K_true);\n *         this.mcsInvoker = mcs.dynamicInvoker();\n *     }\n *     public MethodHandle guardWithTest(\n *             MethodHandle target, MethodHandle fallback) {\n *         // Note:  mcsInvoker is of type ()boolean.\n *         // Target and fallback may take any arguments, but must have the same type.\n *         return MethodHandles.guardWithTest(this.mcsInvoker, target, fallback);\n *     }\n *     public static void invalidateAll(SwitchPoint[] spts) {\n *         List<MutableCallSite> mcss = new ArrayList<>();\n *         for (SwitchPoint spt : spts)  mcss.add(spt.mcs);\n *         for (MutableCallSite mcs : mcss)  mcs.setTarget(K_false);\n *         MutableCallSite.syncAll(mcss.toArray(new MutableCallSite[0]));\n *     }\n * }\n * }</pre>\n * @author Remi Forax, JSR 292 EG\n ","description":"","name":"SwitchPoint","qualified_name":"java.lang.invoke.SwitchPoint","type":2},{"comment":"","description":"","name":"java_util_AbstractMap_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_util_AbstractMap_PersistenceDelegate","type":2},{"comment":"\n * The Modifier class provides {@code static} methods and\n * constants to decode class and member access modifiers.  The sets of\n * modifiers are represented as integers with distinct bit positions\n * representing different modifiers.  The values for the constants\n * representing the modifiers are taken from the tables in sections 4.1, 4.4, 4.5, and 4.7 of\n * <cite>The Java&trade; Virtual Machine Specification</cite>.\n *\n * @see Class#getModifiers()\n * @see Member#getModifiers()\n *\n * @author Nakul Saraiya\n * @author Kenneth Russell\n ","description":"","name":"Modifier","qualified_name":"java.lang.reflect.Modifier","type":2},{"comment":"\n * An element in a stack trace, as returned by {@link\n * Throwable#getStackTrace()}.  Each element represents a single stack frame.\n * All stack frames except for the one at the top of the stack represent\n * a method invocation.  The frame at the top of the stack represents the\n * execution point at which the stack trace was generated.  Typically,\n * this is the point at which the throwable corresponding to the stack trace\n * was created.\n *\n * @since  1.4\n * @author Josh Bloch\n ","description":"","name":"StackTraceElement","qualified_name":"java.lang.StackTraceElement","type":2},{"comment":"\n     * Inner class for blitting offscreen surfaces to a component.\n     *\n     * @author Michael Martak\n     * @since 1.4\n     ","description":"","name":"BltBufferStrategy","qualified_name":"java.awt.Component.BltBufferStrategy","type":2},{"comment":"\n * {@code Proxy} provides static methods for creating dynamic proxy\n * classes and instances, and it is also the superclass of all\n * dynamic proxy classes created by those methods.\n *\n * <p>To create a proxy for some interface {@code Foo}:\n * <pre>\n *     InvocationHandler handler = new MyInvocationHandler(...);\n *     Class&lt;?&gt; proxyClass = Proxy.getProxyClass(Foo.class.getClassLoader(), Foo.class);\n *     Foo f = (Foo) proxyClass.getConstructor(InvocationHandler.class).\n *                     newInstance(handler);\n * </pre>\n * or more simply:\n * <pre>\n *     Foo f = (Foo) Proxy.newProxyInstance(Foo.class.getClassLoader(),\n *                                          new Class&lt;?&gt;[] { Foo.class },\n *                                          handler);\n * </pre>\n *\n * <p>A <i>dynamic proxy class</i> (simply referred to as a <i>proxy\n * class</i> below) is a class that implements a list of interfaces\n * specified at runtime when the class is created, with behavior as\n * described below.\n *\n * A <i>proxy interface</i> is such an interface that is implemented\n * by a proxy class.\n *\n * A <i>proxy instance</i> is an instance of a proxy class.\n *\n * Each proxy instance has an associated <i>invocation handler</i>\n * object, which implements the interface {@link InvocationHandler}.\n * A method invocation on a proxy instance through one of its proxy\n * interfaces will be dispatched to the {@link InvocationHandler#invoke\n * invoke} method of the instance's invocation handler, passing the proxy\n * instance, a {@code java.lang.reflect.Method} object identifying\n * the method that was invoked, and an array of type {@code Object}\n * containing the arguments.  The invocation handler processes the\n * encoded method invocation as appropriate and the result that it\n * returns will be returned as the result of the method invocation on\n * the proxy instance.\n *\n * <p>A proxy class has the following properties:\n *\n * <ul>\n * <li>Proxy classes are <em>public, final, and not abstract</em> if\n * all proxy interfaces are public.</li>\n *\n * <li>Proxy classes are <em>non-public, final, and not abstract</em> if\n * any of the proxy interfaces is non-public.</li>\n *\n * <li>The unqualified name of a proxy class is unspecified.  The space\n * of class names that begin with the string {@code \"$Proxy\"}\n * should be, however, reserved for proxy classes.\n *\n * <li>A proxy class extends {@code java.lang.reflect.Proxy}.\n *\n * <li>A proxy class implements exactly the interfaces specified at its\n * creation, in the same order.\n *\n * <li>If a proxy class implements a non-public interface, then it will\n * be defined in the same package as that interface.  Otherwise, the\n * package of a proxy class is also unspecified.  Note that package\n * sealing will not prevent a proxy class from being successfully defined\n * in a particular package at runtime, and neither will classes already\n * defined by the same class loader and the same package with particular\n * signers.\n *\n * <li>Since a proxy class implements all of the interfaces specified at\n * its creation, invoking {@code getInterfaces} on its\n * {@code Class} object will return an array containing the same\n * list of interfaces (in the order specified at its creation), invoking\n * {@code getMethods} on its {@code Class} object will return\n * an array of {@code Method} objects that include all of the\n * methods in those interfaces, and invoking {@code getMethod} will\n * find methods in the proxy interfaces as would be expected.\n *\n * <li>The {@link Proxy#isProxyClass Proxy.isProxyClass} method will\n * return true if it is passed a proxy class-- a class returned by\n * {@code Proxy.getProxyClass} or the class of an object returned by\n * {@code Proxy.newProxyInstance}-- and false otherwise.\n *\n * <li>The {@code java.security.ProtectionDomain} of a proxy class\n * is the same as that of system classes loaded by the bootstrap class\n * loader, such as {@code java.lang.Object}, because the code for a\n * proxy class is generated by trusted system code.  This protection\n * domain will typically be granted\n * {@code java.security.AllPermission}.\n *\n * <li>Each proxy class has one public constructor that takes one argument,\n * an implementation of the interface {@link InvocationHandler}, to set\n * the invocation handler for a proxy instance.  Rather than having to use\n * the reflection API to access the public constructor, a proxy instance\n * can be also be created by calling the {@link Proxy#newProxyInstance\n * Proxy.newProxyInstance} method, which combines the actions of calling\n * {@link Proxy#getProxyClass Proxy.getProxyClass} with invoking the\n * constructor with an invocation handler.\n * </ul>\n *\n * <p>A proxy instance has the following properties:\n *\n * <ul>\n * <li>Given a proxy instance {@code proxy} and one of the\n * interfaces implemented by its proxy class {@code Foo}, the\n * following expression will return true:\n * <pre>\n *     {@code proxy instanceof Foo}\n * </pre>\n * and the following cast operation will succeed (rather than throwing\n * a {@code ClassCastException}):\n * <pre>\n *     {@code (Foo) proxy}\n * </pre>\n *\n * <li>Each proxy instance has an associated invocation handler, the one\n * that was passed to its constructor.  The static\n * {@link Proxy#getInvocationHandler Proxy.getInvocationHandler} method\n * will return the invocation handler associated with the proxy instance\n * passed as its argument.\n *\n * <li>An interface method invocation on a proxy instance will be\n * encoded and dispatched to the invocation handler's {@link\n * InvocationHandler#invoke invoke} method as described in the\n * documentation for that method.\n *\n * <li>An invocation of the {@code hashCode},\n * {@code equals}, or {@code toString} methods declared in\n * {@code java.lang.Object} on a proxy instance will be encoded and\n * dispatched to the invocation handler's {@code invoke} method in\n * the same manner as interface method invocations are encoded and\n * dispatched, as described above.  The declaring class of the\n * {@code Method} object passed to {@code invoke} will be\n * {@code java.lang.Object}.  Other public methods of a proxy\n * instance inherited from {@code java.lang.Object} are not\n * overridden by a proxy class, so invocations of those methods behave\n * like they do for instances of {@code java.lang.Object}.\n * </ul>\n *\n * <h3>Methods Duplicated in Multiple Proxy Interfaces</h3>\n *\n * <p>When two or more interfaces of a proxy class contain a method with\n * the same name and parameter signature, the order of the proxy class's\n * interfaces becomes significant.  When such a <i>duplicate method</i>\n * is invoked on a proxy instance, the {@code Method} object passed\n * to the invocation handler will not necessarily be the one whose\n * declaring class is assignable from the reference type of the interface\n * that the proxy's method was invoked through.  This limitation exists\n * because the corresponding method implementation in the generated proxy\n * class cannot determine which interface it was invoked through.\n * Therefore, when a duplicate method is invoked on a proxy instance,\n * the {@code Method} object for the method in the foremost interface\n * that contains the method (either directly or inherited through a\n * superinterface) in the proxy class's list of interfaces is passed to\n * the invocation handler's {@code invoke} method, regardless of the\n * reference type through which the method invocation occurred.\n *\n * <p>If a proxy interface contains a method with the same name and\n * parameter signature as the {@code hashCode}, {@code equals},\n * or {@code toString} methods of {@code java.lang.Object},\n * when such a method is invoked on a proxy instance, the\n * {@code Method} object passed to the invocation handler will have\n * {@code java.lang.Object} as its declaring class.  In other words,\n * the public, non-final methods of {@code java.lang.Object}\n * logically precede all of the proxy interfaces for the determination of\n * which {@code Method} object to pass to the invocation handler.\n *\n * <p>Note also that when a duplicate method is dispatched to an\n * invocation handler, the {@code invoke} method may only throw\n * checked exception types that are assignable to one of the exception\n * types in the {@code throws} clause of the method in <i>all</i> of\n * the proxy interfaces that it can be invoked through.  If the\n * {@code invoke} method throws a checked exception that is not\n * assignable to any of the exception types declared by the method in one\n * of the proxy interfaces that it can be invoked through, then an\n * unchecked {@code UndeclaredThrowableException} will be thrown by\n * the invocation on the proxy instance.  This restriction means that not\n * all of the exception types returned by invoking\n * {@code getExceptionTypes} on the {@code Method} object\n * passed to the {@code invoke} method can necessarily be thrown\n * successfully by the {@code invoke} method.\n *\n * @author      Peter Jones\n * @see         InvocationHandler\n * @since       1.3\n ","description":"","name":"Proxy","qualified_name":"java.lang.reflect.Proxy","type":2},{"comment":"\n * {@code Constructor} provides information about, and access to, a single\n * constructor for a class.\n *\n * <p>{@code Constructor} permits widening conversions to occur when matching the\n * actual parameters to newInstance() with the underlying\n * constructor's formal parameters, but throws an\n * {@code IllegalArgumentException} if a narrowing conversion would occur.\n *\n * @param <T> the class in which the constructor is declared\n *\n * @see Member\n * @see java.lang.Class\n * @see java.lang.Class#getConstructors()\n * @see java.lang.Class#getConstructor(Class[])\n * @see java.lang.Class#getDeclaredConstructors()\n *\n * @author      Kenneth Russell\n * @author      Nakul Saraiya\n ","description":"","name":"Constructor","qualified_name":"java.lang.reflect.Constructor","type":2},{"comment":"\n * The <code>SystemTray</code> class represents the system tray for a\n * desktop.  On Microsoft Windows it is referred to as the \"Taskbar\n * Status Area\", on Gnome it is referred to as the \"Notification\n * Area\", on KDE it is referred to as the \"System Tray\".  The system\n * tray is shared by all applications running on the desktop.\n *\n * <p> On some platforms the system tray may not be present or may not\n * be supported, in this case {@link SystemTray#getSystemTray()}\n * throws {@link UnsupportedOperationException}.  To detect whether the\n * system tray is supported, use {@link SystemTray#isSupported}.\n *\n * <p>The <code>SystemTray</code> may contain one or more {@link\n * TrayIcon TrayIcons}, which are added to the tray using the {@link\n * #add} method, and removed when no longer needed, using the\n * {@link #remove}.  <code>TrayIcon</code> consists of an\n * image, a popup menu and a set of associated listeners.  Please see\n * the {@link TrayIcon} class for details.\n *\n * <p>Every Java application has a single <code>SystemTray</code>\n * instance that allows the app to interface with the system tray of\n * the desktop while the app is running.  The <code>SystemTray</code>\n * instance can be obtained from the {@link #getSystemTray} method.\n * An application may not create its own instance of\n * <code>SystemTray</code>.\n *\n * <p>The following code snippet demonstrates how to access\n * and customize the system tray:\n * <pre>\n * <code>\n *     {@link TrayIcon} trayIcon = null;\n *     if (SystemTray.isSupported()) {\n *         // get the SystemTray instance\n *         SystemTray tray = SystemTray.{@link #getSystemTray};\n *         // load an image\n *         {@link java.awt.Image} image = {@link java.awt.Toolkit#getImage(String) Toolkit.getDefaultToolkit().getImage}(...);\n *         // create a action listener to listen for default action executed on the tray icon\n *         {@link java.awt.event.ActionListener} listener = new {@link java.awt.event.ActionListener ActionListener}() {\n *             public void {@link java.awt.event.ActionListener#actionPerformed actionPerformed}({@link java.awt.event.ActionEvent} e) {\n *                 // execute default action of the application\n *                 // ...\n *             }\n *         };\n *         // create a popup menu\n *         {@link java.awt.PopupMenu} popup = new {@link java.awt.PopupMenu#PopupMenu PopupMenu}();\n *         // create menu item for the default action\n *         MenuItem defaultItem = new MenuItem(...);\n *         defaultItem.addActionListener(listener);\n *         popup.add(defaultItem);\n *         /// ... add other items\n *         // construct a TrayIcon\n *         trayIcon = new {@link TrayIcon#TrayIcon(java.awt.Image, String, java.awt.PopupMenu) TrayIcon}(image, \"Tray Demo\", popup);\n *         // set the TrayIcon properties\n *         trayIcon.{@link TrayIcon#addActionListener(java.awt.event.ActionListener) addActionListener}(listener);\n *         // ...\n *         // add the tray image\n *         try {\n *             tray.{@link SystemTray#add(TrayIcon) add}(trayIcon);\n *         } catch (AWTException e) {\n *             System.err.println(e);\n *         }\n *         // ...\n *     } else {\n *         // disable tray option in your application or\n *         // perform other actions\n *         ...\n *     }\n *     // ...\n *     // some time later\n *     // the application state has changed - update the image\n *     if (trayIcon != null) {\n *         trayIcon.{@link TrayIcon#setImage(java.awt.Image) setImage}(updatedImage);\n *     }\n *     // ...\n * </code>\n * </pre>\n *\n * @since 1.6\n * @see TrayIcon\n *\n * @author Bino George\n * @author Denis Mikhalkin\n * @author Sharon Zakhour\n * @author Anton Tarasov\n ","description":"","name":"SystemTray","qualified_name":"java.awt.SystemTray","type":2},{"comment":"","description":"","name":"DragSourceContextPeer","qualified_name":"java.awt.dnd.peer.DragSourceContextPeer","type":3},{"comment":"","description":"","name":"java_util_AbstractCollection_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_util_AbstractCollection_PersistenceDelegate","type":2},{"comment":"\n * ParameterizedType represents a parameterized type such as\n * Collection&lt;String&gt;.\n *\n * <p>A parameterized type is created the first time it is needed by a\n * reflective method, as specified in this package. When a\n * parameterized type p is created, the generic type declaration that\n * p instantiates is resolved, and all type arguments of p are created\n * recursively. See {@link java.lang.reflect.TypeVariable\n * TypeVariable} for details on the creation process for type\n * variables. Repeated creation of a parameterized type has no effect.\n *\n * <p>Instances of classes that implement this interface must implement\n * an equals() method that equates any two instances that share the\n * same generic type declaration and have equal type parameters.\n *\n * @since 1.5\n ","description":"","name":"ParameterizedType","qualified_name":"java.lang.reflect.ParameterizedType","type":3},{"comment":"","description":"","name":"Writer","qualified_name":"java.io.Writer","type":2},{"comment":"","description":"","name":"ThreadMXBean","qualified_name":"java.lang.management.ThreadMXBean","type":3},{"comment":"\n * The Queue object holds pointers to the beginning and end of one internal\n * queue. An EventQueue object is composed of multiple internal Queues, one\n * for each priority supported by the EventQueue. All Events on a particular\n * internal Queue have identical priority.\n ","description":"","name":"Queue","qualified_name":"java.awt.Queue","type":2},{"comment":"\n * The <code>MultipleMaster</code> interface represents Type 1\n * Multiple Master fonts.\n * A particular {@link Font} object can implement this interface.\n ","description":"","name":"MultipleMaster","qualified_name":"java.awt.font.MultipleMaster","type":3},{"comment":"","description":"","name":"Entry","qualified_name":"java.beans.WeakIdentityMap.Entry","type":2},{"comment":"\n * A file output stream is an output stream for writing data to a\n * <code>File</code> or to a <code>FileDescriptor</code>. Whether or not\n * a file is available or may be created depends upon the underlying\n * platform.  Some platforms, in particular, allow a file to be opened\n * for writing by only one <tt>FileOutputStream</tt> (or other\n * file-writing object) at a time.  In such situations the constructors in\n * this class will fail if the file involved is already open.\n *\n * <p><code>FileOutputStream</code> is meant for writing streams of raw bytes\n * such as image data. For writing streams of characters, consider using\n * <code>FileWriter</code>.\n *\n * @author  Arthur van Hoff\n * @see     java.io.File\n * @see     java.io.FileDescriptor\n * @see     java.io.FileInputStream\n * @see     java.nio.file.Files#newOutputStream\n * @since   JDK1.0\n ","description":"","name":"FileOutputStream","qualified_name":"java.io.FileOutputStream","type":2},{"comment":"\n * A <code>BufferedInputStream</code> adds\n * functionality to another input stream-namely,\n * the ability to buffer the input and to\n * support the <code>mark</code> and <code>reset</code>\n * methods. When  the <code>BufferedInputStream</code>\n * is created, an internal buffer array is\n * created. As bytes  from the stream are read\n * or skipped, the internal buffer is refilled\n * as necessary  from the contained input stream,\n * many bytes at a time. The <code>mark</code>\n * operation  remembers a point in the input\n * stream and the <code>reset</code> operation\n * causes all the  bytes read since the most\n * recent <code>mark</code> operation to be\n * reread before new bytes are  taken from\n * the contained input stream.\n *\n * @author  Arthur van Hoff\n * @since   JDK1.0\n ","description":"","name":"BufferedInputStream","qualified_name":"java.io.BufferedInputStream","type":2},{"comment":"\n * The <code>Graphics</code> class is the abstract base class for\n * all graphics contexts that allow an application to draw onto\n * components that are realized on various devices, as well as\n * onto off-screen images.\n * <p>\n * A <code>Graphics</code> object encapsulates state information needed\n * for the basic rendering operations that Java supports.  This\n * state information includes the following properties:\n *\n * <ul>\n * <li>The <code>Component</code> object on which to draw.\n * <li>A translation origin for rendering and clipping coordinates.\n * <li>The current clip.\n * <li>The current color.\n * <li>The current font.\n * <li>The current logical pixel operation function (XOR or Paint).\n * <li>The current XOR alternation color\n *     (see {@link Graphics#setXORMode}).\n * </ul>\n * <p>\n * Coordinates are infinitely thin and lie between the pixels of the\n * output device.\n * Operations that draw the outline of a figure operate by traversing\n * an infinitely thin path between pixels with a pixel-sized pen that hangs\n * down and to the right of the anchor point on the path.\n * Operations that fill a figure operate by filling the interior\n * of that infinitely thin path.\n * Operations that render horizontal text render the ascending\n * portion of character glyphs entirely above the baseline coordinate.\n * <p>\n * The graphics pen hangs down and to the right from the path it traverses.\n * This has the following implications:\n * <ul>\n * <li>If you draw a figure that covers a given rectangle, that\n * figure occupies one extra row of pixels on the right and bottom edges\n * as compared to filling a figure that is bounded by that same rectangle.\n * <li>If you draw a horizontal line along the same <i>y</i> coordinate as\n * the baseline of a line of text, that line is drawn entirely below\n * the text, except for any descenders.\n * </ul><p>\n * All coordinates that appear as arguments to the methods of this\n * <code>Graphics</code> object are considered relative to the\n * translation origin of this <code>Graphics</code> object prior to\n * the invocation of the method.\n * <p>\n * All rendering operations modify only pixels which lie within the\n * area bounded by the current clip, which is specified by a {@link Shape}\n * in user space and is controlled by the program using the\n * <code>Graphics</code> object.  This <i>user clip</i>\n * is transformed into device space and combined with the\n * <i>device clip</i>, which is defined by the visibility of windows and\n * device extents.  The combination of the user clip and device clip\n * defines the <i>composite clip</i>, which determines the final clipping\n * region.  The user clip cannot be modified by the rendering\n * system to reflect the resulting composite clip. The user clip can only\n * be changed through the <code>setClip</code> or <code>clipRect</code>\n * methods.\n * All drawing or writing is done in the current color,\n * using the current paint mode, and in the current font.\n *\n * @author      Sami Shaio\n * @author      Arthur van Hoff\n * @see     java.awt.Component\n * @see     java.awt.Graphics#clipRect(int, int, int, int)\n * @see     java.awt.Graphics#setColor(java.awt.Color)\n * @see     java.awt.Graphics#setPaintMode()\n * @see     java.awt.Graphics#setXORMode(java.awt.Color)\n * @see     java.awt.Graphics#setFont(java.awt.Font)\n * @since       JDK1.0\n ","description":"","name":"Graphics","qualified_name":"java.awt.Graphics","type":2},{"comment":"\n * Defines an object which listens for {@link FlavorEvent}s.\n *\n * @author Alexander Gerasimov\n * @since 1.5\n ","description":"","name":"FlavorListener","qualified_name":"java.awt.datatransfer.FlavorListener","type":3},{"comment":"\n * The peer interface for {@link Window}.\n *\n * The peer interfaces are intended only for use in porting\n * the AWT. They are not intended for use by application\n * developers, and developers should not implement peers\n * nor invoke any of the peer methods directly on the peer\n * instances.\n ","description":"","name":"WindowPeer","qualified_name":"java.awt.peer.WindowPeer","type":3},{"comment":"","description":"","name":"TextEvent","qualified_name":"java.awt.event.TextEvent","type":2},{"comment":"\n * Thrown when a serious Abstract Window Toolkit error has occurred.\n *\n * @author      Arthur van Hoff\n ","description":"","name":"AWTError","qualified_name":"java.awt.AWTError","type":2},{"comment":"","description":"","name":"BeansAppletContext","qualified_name":"java.beans.BeansAppletContext","type":2},{"comment":" REMIND: add full description of exception propagation algorithm?","description":"","name":"HandleTable","qualified_name":"java.io.ObjectInputStream.HandleTable","type":2},{"comment":"","description":"","name":"NativeLibLoader","qualified_name":"java.awt.event.NativeLibLoader","type":2},{"comment":"\n * The base class for persistence delegates for inner classes\n * that can be created using {@link Collections}.\n *\n * @author Sergey A. Malenkov\n ","description":"","name":"java_util_Collections","qualified_name":"java.beans.MetaData.java_util_Collections","type":2},{"comment":"","description":"","name":"CheckedSet_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_util_Collections.CheckedSet_PersistenceDelegate","type":2},{"comment":"\n * ObjectOutput extends the DataOutput interface to include writing of objects.\n * DataOutput includes methods for output of primitive types, ObjectOutput\n * extends that interface to include objects, arrays, and Strings.\n *\n * @author  unascribed\n * @see java.io.InputStream\n * @see java.io.ObjectOutputStream\n * @see java.io.ObjectInputStream\n * @since   JDK1.1\n ","description":"","name":"ObjectOutput","qualified_name":"java.io.ObjectOutput","type":3},{"comment":"\n * This class is an implementation of the ImageProducer interface which\n * takes an existing image and a filter object and uses them to produce\n * image data for a new filtered version of the original image.\n * Here is an example which filters an image by swapping the red and\n * blue compents:\n * <pre>\n *\n *      Image src = getImage(\"doc:///demo/images/duke/T1.gif\");\n *      ImageFilter colorfilter = new RedBlueSwapFilter();\n *      Image img = createImage(new FilteredImageSource(src.getSource(),\n *                                                      colorfilter));\n *\n * </pre>\n *\n * @see ImageProducer\n *\n * @author      Jim Graham\n ","description":"","name":"FilteredImageSource","qualified_name":"java.awt.image.FilteredImageSource","type":2},{"comment":"\n     * Inner class of Container used to provide default support for\n     * accessibility.  This class is not meant to be used directly by\n     * application developers, but is instead meant only to be\n     * subclassed by container developers.\n     * <p>\n     * The class used to obtain the accessible role for this object,\n     * as well as implementing many of the methods in the\n     * AccessibleContainer interface.\n     * @since 1.3\n     ","description":"","name":"AccessibleAWTContainer","qualified_name":"java.awt.Container.AccessibleAWTContainer","type":2},{"comment":"","description":"","name":"PersistenceDelegate","qualified_name":"java.beans.PersistenceDelegate","type":2},{"comment":"\n     * A type-safe enumeration of possible multiple copy handling states.\n     * It is used to control how the sheets of multiple copies of a single\n     * document are collated.\n     * @since 1.3\n     ","description":"","name":"MultipleDocumentHandlingType","qualified_name":"java.awt.JobAttributes.MultipleDocumentHandlingType","type":2},{"comment":"","description":"","name":"MethodDescriptor","qualified_name":"java.beans.MethodDescriptor","type":2},{"comment":" Classes","description":"","name":"java_lang_Class_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_lang_Class_PersistenceDelegate","type":2},{"comment":"\n     * Wrapper class for PrintStream and PrintWriter to enable a single\n     * implementation of printStackTrace.\n     ","description":"","name":"PrintStreamOrWriter","qualified_name":"java.lang.Throwable.PrintStreamOrWriter","type":2},{"comment":"","description":"","name":"ByteArrayOutputStream","qualified_name":"java.io.ByteArrayOutputStream","type":2},{"comment":"","description":"","name":"EntryComparator","qualified_name":"java.lang.ProcessEnvironment.EntryComparator","type":2},{"comment":"\n * Only the identity of the class of an Externalizable instance is\n * written in the serialization stream and it is the responsibility\n * of the class to save and restore the contents of its instances.\n *\n * The writeExternal and readExternal methods of the Externalizable\n * interface are implemented by a class to give the class complete\n * control over the format and contents of the stream for an object\n * and its supertypes. These methods must explicitly\n * coordinate with the supertype to save its state. These methods supersede\n * customized implementations of writeObject and readObject methods.<br>\n *\n * Object Serialization uses the Serializable and Externalizable\n * interfaces.  Object persistence mechanisms can use them as well.  Each\n * object to be stored is tested for the Externalizable interface. If\n * the object supports Externalizable, the writeExternal method is called. If the\n * object does not support Externalizable and does implement\n * Serializable, the object is saved using\n * ObjectOutputStream. <br> When an Externalizable object is\n * reconstructed, an instance is created using the public no-arg\n * constructor, then the readExternal method called.  Serializable\n * objects are restored by reading them from an ObjectInputStream.<br>\n *\n * An Externalizable instance can designate a substitution object via\n * the writeReplace and readResolve methods documented in the Serializable\n * interface.<br>\n *\n * @author  unascribed\n * @see java.io.ObjectOutputStream\n * @see java.io.ObjectInputStream\n * @see java.io.ObjectOutput\n * @see java.io.ObjectInput\n * @see java.io.Serializable\n * @since   JDK1.1\n ","description":"","name":"Externalizable","qualified_name":"java.io.Externalizable","type":3},{"comment":"\n * This class implements a convolution from the source\n * to the destination.\n * Convolution using a convolution kernel is a spatial operation that\n * computes the output pixel from an input pixel by multiplying the kernel\n * with the surround of the input pixel.\n * This allows the output pixel to be affected by the immediate neighborhood\n * in a way that can be mathematically specified with a kernel.\n *<p>\n * This class operates with BufferedImage data in which color components are\n * premultiplied with the alpha component.  If the Source BufferedImage has\n * an alpha component, and the color components are not premultiplied with\n * the alpha component, then the data are premultiplied before being\n * convolved.  If the Destination has color components which are not\n * premultiplied, then alpha is divided out before storing into the\n * Destination (if alpha is 0, the color components are set to 0).  If the\n * Destination has no alpha component, then the resulting alpha is discarded\n * after first dividing it out of the color components.\n * <p>\n * Rasters are treated as having no alpha channel.  If the above treatment\n * of the alpha channel in BufferedImages is not desired, it may be avoided\n * by getting the Raster of a source BufferedImage and using the filter method\n * of this class which works with Rasters.\n * <p>\n * If a RenderingHints object is specified in the constructor, the\n * color rendering hint and the dithering hint may be used when color\n * conversion is required.\n *<p>\n * Note that the Source and the Destination may not be the same object.\n * @see Kernel\n * @see java.awt.RenderingHints#KEY_COLOR_RENDERING\n * @see java.awt.RenderingHints#KEY_DITHERING\n ","description":"","name":"ConvolveOp","qualified_name":"java.awt.image.ConvolveOp","type":2},{"comment":"","description":"","name":"FeatureDescriptor","qualified_name":"java.beans.FeatureDescriptor","type":2},{"comment":"\n     * This class implements accessibility support for the\n     * <code>Dialog</code> class.  It provides an implementation of the\n     * Java Accessibility API appropriate to dialog user-interface elements.\n     * @since 1.3\n     ","description":"","name":"AccessibleAWTDialog","qualified_name":"java.awt.Dialog.AccessibleAWTDialog","type":2},{"comment":"\n     * Class for computing and caching field/constructor/method signatures\n     * during serialVersionUID calculation.\n     ","description":"","name":"MemberSignature","qualified_name":"java.io.ObjectStreamClass.MemberSignature","type":2},{"comment":"","description":"","name":"GradientPaint","qualified_name":"java.awt.GradientPaint","type":2},{"comment":"\n * This utility class is used to suspend execution on a thread\n * while still allowing {@code EventDispatchThread} to dispatch events.\n * The API methods of the class are thread-safe.\n *\n * @author Anton Tarasov, Artem Ananiev\n *\n * @since 1.7\n ","description":"","name":"WaitDispatchSupport","qualified_name":"java.awt.WaitDispatchSupport","type":2},{"comment":"\n * Thrown to indicate that a program has attempted to access an element of\n * an annotation type that was added to the annotation type definition after\n * the annotation was compiled (or serialized).  This exception will not be\n * thrown if the new element has a default value.\n * This exception can be thrown by the {@linkplain\n * java.lang.reflect.AnnotatedElement API used to read annotations\n * reflectively}.\n *\n * @author  Josh Bloch\n * @see     java.lang.reflect.AnnotatedElement\n * @since 1.5\n ","description":"","name":"IncompleteAnnotationException","qualified_name":"java.lang.annotation.IncompleteAnnotationException","type":2},{"comment":"\n * Class {@code Object} is the root of the class hierarchy.\n * Every class has {@code Object} as a superclass. All objects,\n * including arrays, implement the methods of this class.\n *\n * @author  unascribed\n * @see     java.lang.Class\n * @since   JDK1.0\n ","description":"","name":"Object","qualified_name":"java.lang.Object","type":2},{"comment":"","description":"","name":"BeanContext","qualified_name":"java.beans.beancontext.BeanContext","type":3},{"comment":"\n * A class which extends the {@code EventListenerProxy}\n * specifically for adding an {@code AWTEventListener}\n * for a specific event mask.\n * Instances of this class can be added as {@code AWTEventListener}s\n * to a {@code Toolkit} object.\n * <p>\n * The {@code getAWTEventListeners} method of {@code Toolkit}\n * can return a mixture of {@code AWTEventListener}\n * and {@code AWTEventListenerProxy} objects.\n *\n * @see java.awt.Toolkit\n * @see java.util.EventListenerProxy\n * @since 1.4\n ","description":"","name":"AWTEventListenerProxy","qualified_name":"java.awt.event.AWTEventListenerProxy","type":2},{"comment":"","description":"","name":"ExpiringCache","qualified_name":"java.io.ExpiringCache","type":2},{"comment":"\n * This class extends <CODE>DataBuffer</CODE> and stores data internally as shorts.\n * <p>\n * <a name=\"optimizations\">\n * Note that some implementations may function more efficiently\n * if they can maintain control over how the data for an image is\n * stored.\n * For example, optimizations such as caching an image in video\n * memory require that the implementation track all modifications\n * to that data.\n * Other implementations may operate better if they can store the\n * data in locations other than a Java array.\n * To maintain optimum compatibility with various optimizations\n * it is best to avoid constructors and methods which expose the\n * underlying storage as a Java array as noted below in the\n * documentation for those methods.\n * </a>\n ","description":"","name":"DataBufferShort","qualified_name":"java.awt.image.DataBufferShort","type":2},{"comment":"","description":"","name":"NoninvertibleTransformException","qualified_name":"java.awt.geom.NoninvertibleTransformException","type":2},{"comment":"\n * A {@code ConstantCallSite} is a {@link CallSite} whose target is permanent, and can never be changed.\n * An {@code invokedynamic} instruction linked to a {@code ConstantCallSite} is permanently\n * bound to the call site's target.\n * @author John Rose, JSR 292 EG\n ","description":"","name":"ConstantCallSite","qualified_name":"java.lang.invoke.ConstantCallSite","type":2},{"comment":"\n * A description of a Serializable field from a Serializable class.  An array\n * of ObjectStreamFields is used to declare the Serializable fields of a class.\n *\n * @author      Mike Warres\n * @author      Roger Riggs\n * @see ObjectStreamClass\n * @since 1.2\n ","description":"","name":"ObjectStreamField","qualified_name":"java.io.ObjectStreamField","type":2},{"comment":" ToolTipManager","description":"","name":"javax_swing_ToolTipManager_PersistenceDelegate","qualified_name":"java.beans.MetaData.javax_swing_ToolTipManager_PersistenceDelegate","type":2},{"comment":" package ","description":"","name":"InnerClassLambdaMetafactory","qualified_name":"java.lang.invoke.InnerClassLambdaMetafactory","type":2},{"comment":"","description":"","name":"MouseWheelEvent","qualified_name":"java.awt.event.MouseWheelEvent","type":2},{"comment":"\n * Signals that an I/O exception of some sort has occurred. This\n * class is the general class of exceptions produced by failed or\n * interrupted I/O operations.\n *\n * @author  unascribed\n * @see     java.io.InputStream\n * @see     java.io.OutputStream\n * @since   JDK1.0\n ","description":"","name":"IOException","qualified_name":"java.io.IOException","type":2},{"comment":"\n * Thrown when a particular method cannot be found.\n *\n * @author     unascribed\n * @since      JDK1.0\n ","description":"","name":"NoSuchMethodException","qualified_name":"java.lang.NoSuchMethodException","type":2},{"comment":" DefaultComboBoxModel","description":"","name":"javax_swing_DefaultComboBoxModel_PersistenceDelegate","qualified_name":"java.beans.MetaData.javax_swing_DefaultComboBoxModel_PersistenceDelegate","type":2},{"comment":"","description":"","name":"WeakEntry","qualified_name":"java.lang.invoke.MethodType.ConcurrentWeakInternSet.WeakEntry","type":2},{"comment":" A backing map for all ClassValues, relative a single given type.\n     *  Gives a fully serialized \"true state\" for each pair (ClassValue cv, Class type).\n     *  Also manages an unserialized fast-path cache.\n     ","description":"","name":"ClassValueMap","qualified_name":"java.lang.ClassValue.ClassValueMap","type":2},{"comment":"","description":"","name":"BeanContextProxy","qualified_name":"java.beans.beancontext.BeanContextProxy","type":3},{"comment":"\n * A set of attributes which control a print job.\n * <p>\n * Instances of this class control the number of copies, default selection,\n * destination, print dialog, file and printer names, page ranges, multiple\n * document handling (including collation), and multi-page imposition (such\n * as duplex) of every print job which uses the instance. Attribute names are\n * compliant with the Internet Printing Protocol (IPP) 1.1 where possible.\n * Attribute values are partially compliant where possible.\n * <p>\n * To use a method which takes an inner class type, pass a reference to\n * one of the constant fields of the inner class. Client code cannot create\n * new instances of the inner class types because none of those classes\n * has a public constructor. For example, to set the print dialog type to\n * the cross-platform, pure Java print dialog, use the following code:\n * <pre>\n * import java.awt.JobAttributes;\n *\n * public class PureJavaPrintDialogExample {\n *     public void setPureJavaPrintDialog(JobAttributes jobAttributes) {\n *         jobAttributes.setDialog(JobAttributes.DialogType.COMMON);\n *     }\n * }\n * </pre>\n * <p>\n * Every IPP attribute which supports an <i>attributeName</i>-default value\n * has a corresponding <code>set<i>attributeName</i>ToDefault</code> method.\n * Default value fields are not provided.\n *\n * @author      David Mendenhall\n * @since 1.3\n ","description":"","name":"JobAttributes","qualified_name":"java.awt.JobAttributes","type":2},{"comment":"\n * The {@code RenderingHints} class defines and manages collections of\n * keys and associated values which allow an application to provide input\n * into the choice of algorithms used by other classes which perform\n * rendering and image manipulation services.\n * The {@link java.awt.Graphics2D} class, and classes that implement\n * {@link java.awt.image.BufferedImageOp} and\n * {@link java.awt.image.RasterOp} all provide methods to get and\n * possibly to set individual or groups of {@code RenderingHints}\n * keys and their associated values.\n * When those implementations perform any rendering or image manipulation\n * operations they should examine the values of any {@code RenderingHints}\n * that were requested by the caller and tailor the algorithms used\n * accordingly and to the best of their ability.\n * <p>\n * Note that since these keys and values are <i>hints</i>, there is\n * no requirement that a given implementation supports all possible\n * choices indicated below or that it can respond to requests to\n * modify its choice of algorithm.\n * The values of the various hint keys may also interact such that\n * while all variants of a given key are supported in one situation,\n * the implementation may be more restricted when the values associated\n * with other keys are modified.\n * For example, some implementations may be able to provide several\n * types of dithering when the antialiasing hint is turned off, but\n * have little control over dithering when antialiasing is on.\n * The full set of supported keys and hints may also vary by destination\n * since runtimes may use different underlying modules to render to\n * the screen, or to {@link java.awt.image.BufferedImage} objects,\n * or while printing.\n * <p>\n * Implementations are free to ignore the hints completely, but should\n * try to use an implementation algorithm that is as close as possible\n * to the request.\n * If an implementation supports a given algorithm when any value is used\n * for an associated hint key, then minimally it must do so when the\n * value for that key is the exact value that specifies the algorithm.\n * <p>\n * The keys used to control the hints are all special values that\n * subclass the associated {@link RenderingHints.Key} class.\n * Many common hints are expressed below as static constants in this\n * class, but the list is not meant to be exhaustive.\n * Other hints may be created by other packages by defining new objects\n * which subclass the {@code Key} class and defining the associated values.\n ","description":"","name":"RenderingHints","qualified_name":"java.awt.RenderingHints","type":2},{"comment":"","description":"","name":"AWTEventMulticaster","qualified_name":"java.awt.AWTEventMulticaster","type":2},{"comment":"\n * Thrown by an implementation of\n * {@link java.lang.instrument.Instrumentation#redefineClasses Instrumentation.redefineClasses}\n * when one of the specified classes cannot be modified.\n *\n * @see     java.lang.instrument.Instrumentation#redefineClasses\n * @since   1.5\n ","description":"","name":"UnmodifiableClassException","qualified_name":"java.lang.instrument.UnmodifiableClassException","type":2},{"comment":"\n * This class is the abstract superclass of all actual\n * implementations of the Abstract Window Toolkit. Subclasses of\n * the <code>Toolkit</code> class are used to bind the various components\n * to particular native toolkit implementations.\n * <p>\n * Many GUI events may be delivered to user\n * asynchronously, if the opposite is not specified explicitly.\n * As well as\n * many GUI operations may be performed asynchronously.\n * This fact means that if the state of a component is set, and then\n * the state immediately queried, the returned value may not yet\n * reflect the requested change.  This behavior includes, but is not\n * limited to:\n * <ul>\n * <li>Scrolling to a specified position.\n * <br>For example, calling <code>ScrollPane.setScrollPosition</code>\n *     and then <code>getScrollPosition</code> may return an incorrect\n *     value if the original request has not yet been processed.\n *\n * <li>Moving the focus from one component to another.\n * <br>For more information, see\n * <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/misc/focus.html#transferTiming\">Timing\n * Focus Transfers</a>, a section in\n * <a href=\"http://java.sun.com/docs/books/tutorial/uiswing/\">The Swing\n * Tutorial</a>.\n *\n * <li>Making a top-level container visible.\n * <br>Calling <code>setVisible(true)</code> on a <code>Window</code>,\n *     <code>Frame</code> or <code>Dialog</code> may occur\n *     asynchronously.\n *\n * <li>Setting the size or location of a top-level container.\n * <br>Calls to <code>setSize</code>, <code>setBounds</code> or\n *     <code>setLocation</code> on a <code>Window</code>,\n *     <code>Frame</code> or <code>Dialog</code> are forwarded\n *     to the underlying window management system and may be\n *     ignored or modified.  See {@link java.awt.Window} for\n *     more information.\n * </ul>\n * <p>\n * Most applications should not call any of the methods in this\n * class directly. The methods defined by <code>Toolkit</code> are\n * the \"glue\" that joins the platform-independent classes in the\n * <code>java.awt</code> package with their counterparts in\n * <code>java.awt.peer</code>. Some methods defined by\n * <code>Toolkit</code> query the native operating system directly.\n *\n * @author      Sami Shaio\n * @author      Arthur van Hoff\n * @author      Fred Ecks\n * @since       JDK1.0\n ","description":"","name":"Toolkit","qualified_name":"java.awt.Toolkit","type":2},{"comment":"","description":"","name":"FilterWriter","qualified_name":"java.io.FilterWriter","type":2},{"comment":"","description":"","name":"Caches","qualified_name":"java.io.ObjectOutputStream.Caches","type":2},{"comment":"\n     * Private key for retrieval of this object from ClassValueMap.\n     ","description":"","name":"Identity","qualified_name":"java.lang.ClassValue.Identity","type":2},{"comment":"\n * The component-level paint event.\n * This event is a special type which is used to ensure that\n * paint/update method calls are serialized along with the other\n * events delivered from the event queue.  This event is not\n * designed to be used with the Event Listener model; programs\n * should continue to override paint/update methods in order\n * render themselves properly.\n * <p>\n * An unspecified behavior will be caused if the {@code id} parameter\n * of any particular {@code PaintEvent} instance is not\n * in the range from {@code PAINT_FIRST} to {@code PAINT_LAST}.\n *\n * @author Amy Fowler\n * @since 1.1\n ","description":"","name":"PaintEvent","qualified_name":"java.awt.event.PaintEvent","type":2},{"comment":"\n * Information about method parameters.\n *\n * A {@code Parameter} provides information about method parameters,\n * including its name and modifiers.  It also provides an alternate\n * means of obtaining attributes for the parameter.\n *\n * @since 1.8\n ","description":"","name":"Parameter","qualified_name":"java.lang.reflect.Parameter","type":2},{"comment":"\n * The management interface for a memory manager.\n * A memory manager manages one or more memory pools of the\n * Java virtual machine.\n *\n * <p> A Java virtual machine has one or more memory managers.\n * An instance implementing this interface is\n * an <a href=\"ManagementFactory.html#MXBean\">MXBean</a>\n * that can be obtained by calling\n * the {@link ManagementFactory#getMemoryManagerMXBeans} method or\n * from the {@link ManagementFactory#getPlatformMBeanServer\n * platform <tt>MBeanServer</tt>} method.\n *\n * <p>The <tt>ObjectName</tt> for uniquely identifying the MXBean for\n * a memory manager within an MBeanServer is:\n * <blockquote>\n *   {@link ManagementFactory#MEMORY_MANAGER_MXBEAN_DOMAIN_TYPE\n *    <tt>java.lang:type=MemoryManager</tt>}<tt>,name=</tt><i>manager's name</i>\n * </blockquote>\n *\n * It can be obtained by calling the\n * {@link PlatformManagedObject#getObjectName} method.\n *\n * @see ManagementFactory#getPlatformMXBeans(Class)\n * @see MemoryMXBean\n *\n * @see <a href=\"../../../javax/management/package-summary.html\">\n *      JMX Specification.</a>\n * @see <a href=\"package-summary.html#examples\">\n *      Ways to Access MXBeans</a>\n *\n * @author  Mandy Chung\n * @since   1.5\n ","description":"","name":"MemoryManagerMXBean","qualified_name":"java.lang.management.MemoryManagerMXBean","type":3},{"comment":"","description":"","name":"ComponentSampleModel","qualified_name":"java.awt.image.ComponentSampleModel","type":2},{"comment":"","description":"","name":"RandomAccessFile","qualified_name":"java.io.RandomAccessFile","type":2},{"comment":"\n * Thrown when the Serialization runtime detects one of the following\n * problems with a Class.\n * <UL>\n * <LI> The serial version of the class does not match that of the class\n *      descriptor read from the stream\n * <LI> The class contains unknown datatypes\n * <LI> The class does not have an accessible no-arg constructor\n * </UL>\n *\n * @author  unascribed\n * @since   JDK1.1\n ","description":"","name":"InvalidClassException","qualified_name":"java.io.InvalidClassException","type":2},{"comment":" High-priority thread to enqueue pending References\n     ","description":"","name":"ReferenceHandler","qualified_name":"java.lang.ref.Reference.ReferenceHandler","type":2},{"comment":"\n     * A {@link Value} that weakly references the referent.\n     ","description":"","name":"CacheValue","qualified_name":"java.lang.reflect.WeakCache.CacheValue","type":2},{"comment":"\n * Thrown when an application tries to access a type using a string\n * representing the type's name, but no definition for the type with\n * the specified name can be found.   This exception differs from\n * {@link ClassNotFoundException} in that <tt>ClassNotFoundException</tt> is a\n * checked exception, whereas this exception is unchecked.\n *\n * <p>Note that this exception may be used when undefined type variables\n * are accessed as well as when types (e.g., classes, interfaces or\n * annotation types) are loaded.\n * In particular, this exception can be thrown by the {@linkplain\n * java.lang.reflect.AnnotatedElement API used to read annotations\n * reflectively}.\n *\n * @author  Josh Bloch\n * @see     java.lang.reflect.AnnotatedElement\n * @since 1.5\n ","description":"","name":"TypeNotPresentException","qualified_name":"java.lang.TypeNotPresentException","type":2},{"comment":"\n * The listener interface for receiving hierarchy changed events.\n * The class that is interested in processing a hierarchy changed event\n * should implement this interface.\n * The listener object created from that class is then registered with a\n * Component using the Component's <code>addHierarchyListener</code>\n * method. When the hierarchy to which the Component belongs changes, the\n * <code>hierarchyChanged</code> method in the listener object is invoked,\n * and the <code>HierarchyEvent</code> is passed to it.\n * <p>\n * Hierarchy events are provided for notification purposes ONLY;\n * The AWT will automatically handle changes to the hierarchy internally so\n * that GUI layout, displayability, and visibility work properly regardless\n * of whether a program registers a <code>HierarchyListener</code> or not.\n *\n * @author      David Mendenhall\n * @see         HierarchyEvent\n * @since       1.3\n ","description":"","name":"HierarchyListener","qualified_name":"java.awt.event.HierarchyListener","type":3},{"comment":"","description":"","name":"SingletonSet_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_util_Collections.SingletonSet_PersistenceDelegate","type":2},{"comment":"\n * The <code>Transparency</code> interface defines the common transparency\n * modes for implementing classes.\n ","description":"","name":"Transparency","qualified_name":"java.awt.Transparency","type":3},{"comment":"\n * The peer interface for {@link List}.\n *\n * The peer interfaces are intended only for use in porting\n * the AWT. They are not intended for use by application\n * developers, and developers should not implement peers\n * nor invoke any of the peer methods directly on the peer\n * instances.\n ","description":"","name":"ListPeer","qualified_name":"java.awt.peer.ListPeer","type":3},{"comment":" GridBagLayout","description":"","name":"java_awt_GridBagLayout_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_awt_GridBagLayout_PersistenceDelegate","type":2},{"comment":"","description":"","name":"InvalidDnDOperationException","qualified_name":"java.awt.dnd.InvalidDnDOperationException","type":2},{"comment":"","description":"","name":"FwSecondaryLoopWrapper","qualified_name":"java.awt.EventQueue.FwSecondaryLoopWrapper","type":2},{"comment":" package ","description":"","name":"AbstractValidatingLambdaMetafactory","qualified_name":"java.lang.invoke.AbstractValidatingLambdaMetafactory","type":2},{"comment":"\n     * A type-safe enumeration of possible default selection states.\n     * @since 1.3\n     ","description":"","name":"DefaultSelectionType","qualified_name":"java.awt.JobAttributes.DefaultSelectionType","type":2},{"comment":"\n     * This class implements accessibility support for the\n     * <code>TextField</code> class.  It provides an implementation of the\n     * Java Accessibility API appropriate to text field user-interface elements.\n     * @since 1.3\n     ","description":"","name":"AccessibleAWTTextField","qualified_name":"java.awt.TextField.AccessibleAWTTextField","type":2},{"comment":"","description":"","name":"StaticFieldsPersistenceDelegate","qualified_name":"java.beans.MetaData.StaticFieldsPersistenceDelegate","type":2},{"comment":"\n     * FieldReflector cache lookup key.  Keys are considered equal if they\n     * refer to the same class and equivalent field formats.\n     ","description":"","name":"FieldReflectorKey","qualified_name":"java.io.ObjectStreamClass.FieldReflectorKey","type":2},{"comment":"\n     * Lightweight identity hash table which maps objects to replacement\n     * objects.\n     ","description":"","name":"ReplaceTable","qualified_name":"java.io.ObjectOutputStream.ReplaceTable","type":2},{"comment":"\n * A <code>Transferable</code> which implements the capability required\n * to transfer a <code>String</code>.\n *\n * This <code>Transferable</code> properly supports\n * <code>DataFlavor.stringFlavor</code>\n * and all equivalent flavors. Support for\n * <code>DataFlavor.plainTextFlavor</code>\n * and all equivalent flavors is <b>deprecated</b>. No other\n * <code>DataFlavor</code>s are supported.\n *\n * @see java.awt.datatransfer.DataFlavor#stringFlavor\n * @see java.awt.datatransfer.DataFlavor#plainTextFlavor\n ","description":"","name":"StringSelection","qualified_name":"java.awt.datatransfer.StringSelection","type":2},{"comment":"\n * Thrown when an application tries to call an abstract method.\n * Normally, this error is caught by the compiler; this error can\n * only occur at run time if the definition of some class has\n * incompatibly changed since the currently executing method was last\n * compiled.\n *\n * @author  unascribed\n * @since   JDK1.0\n ","description":"","name":"AbstractMethodError","qualified_name":"java.lang.AbstractMethodError","type":2},{"comment":"","description":"","name":"EventTargetFilter","qualified_name":"java.awt.Container.EventTargetFilter","type":3},{"comment":"\n * The {@code Long} class wraps a value of the primitive type {@code\n * long} in an object. An object of type {@code Long} contains a\n * single field whose type is {@code long}.\n *\n * <p> In addition, this class provides several methods for converting\n * a {@code long} to a {@code String} and a {@code String} to a {@code\n * long}, as well as other constants and methods useful when dealing\n * with a {@code long}.\n *\n * <p>Implementation note: The implementations of the \"bit twiddling\"\n * methods (such as {@link #highestOneBit(long) highestOneBit} and\n * {@link #numberOfTrailingZeros(long) numberOfTrailingZeros}) are\n * based on material from Henry S. Warren, Jr.'s <i>Hacker's\n * Delight</i>, (Addison Wesley, 2002).\n *\n * @author  Lee Boynton\n * @author  Arthur van Hoff\n * @author  Josh Bloch\n * @author  Joseph D. Darcy\n * @since   JDK1.0\n ","description":"","name":"Long","qualified_name":"java.lang.Long","type":2},{"comment":"","description":"","name":"Autoscroll","qualified_name":"java.awt.dnd.Autoscroll","type":3},{"comment":"\n * Provides the actual implementation for the LinearGradientPaint.\n * This is where the pixel processing is done.\n *\n * @see java.awt.LinearGradientPaint\n * @see java.awt.PaintContext\n * @see java.awt.Paint\n * @author Nicholas Talian, Vincent Hardy, Jim Graham, Jerry Evans\n ","description":"","name":"LinearGradientPaintContext","qualified_name":"java.awt.LinearGradientPaintContext","type":2},{"comment":"\n * Thrown by an implementation of\n * {@link java.lang.instrument.ClassFileTransformer#transform ClassFileTransformer.transform}\n * when its input parameters are invalid.\n * This may occur either because the initial class file bytes were\n * invalid or a previously applied transform corrupted the bytes.\n *\n * @see     java.lang.instrument.ClassFileTransformer#transform\n * @since   1.5\n ","description":"","name":"IllegalClassFormatException","qualified_name":"java.lang.instrument.IllegalClassFormatException","type":2},{"comment":"","description":"","name":"DropTargetContextPeer","qualified_name":"java.awt.dnd.peer.DropTargetContextPeer","type":3},{"comment":"\n * The persistence delegate for {@link PrintColorUIResource}.\n * It is impossible to use {@link DefaultPersistenceDelegate}\n * because this class has special rule for serialization:\n * it should be converted to {@link ColorUIResource}.\n *\n * @see PrintColorUIResource#writeReplace\n *\n * @author Sergey A. Malenkov\n ","description":"","name":"sun_swing_PrintColorUIResource_PersistenceDelegate","qualified_name":"java.beans.MetaData.sun_swing_PrintColorUIResource_PersistenceDelegate","type":2},{"comment":"\n * A RenderContext encapsulates the information needed to produce a\n * specific rendering from a RenderableImage.  It contains the area to\n * be rendered specified in rendering-independent terms, the\n * resolution at which the rendering is to be performed, and hints\n * used to control the rendering process.\n *\n * <p> Users create RenderContexts and pass them to the\n * RenderableImage via the createRendering method.  Most of the methods of\n * RenderContexts are not meant to be used directly by applications,\n * but by the RenderableImage and operator classes to which it is\n * passed.\n *\n * <p> The AffineTransform parameter passed into and out of this class\n * are cloned.  The RenderingHints and Shape parameters are not\n * necessarily cloneable and are therefore only reference copied.\n * Altering RenderingHints or Shape instances that are in use by\n * instances of RenderContext may have undesired side effects.\n ","description":"","name":"RenderContext","qualified_name":"java.awt.image.renderable.RenderContext","type":2},{"comment":"","description":"","name":"BufferedImageFilter","qualified_name":"java.awt.image.BufferedImageFilter","type":2},{"comment":"","description":"","name":"SynchronizedRandomAccessList_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_util_Collections.SynchronizedRandomAccessList_PersistenceDelegate","type":2},{"comment":"","description":"","name":"IndexedPropertyDescriptor","qualified_name":"java.beans.IndexedPropertyDescriptor","type":2},{"comment":"","description":"","name":"FontRenderContext","qualified_name":"java.awt.font.FontRenderContext","type":2},{"comment":"","description":"","name":"PrimitivePersistenceDelegate","qualified_name":"java.beans.MetaData.PrimitivePersistenceDelegate","type":2},{"comment":"\n * The <code>Dimension2D</code> class is to encapsulate a width\n * and a height dimension.\n * <p>\n * This class is only the abstract superclass for all objects that\n * store a 2D dimension.\n * The actual storage representation of the sizes is left to\n * the subclass.\n *\n * @author      Jim Graham\n * @since 1.2\n ","description":"","name":"Dimension2D","qualified_name":"java.awt.geom.Dimension2D","type":2},{"comment":"\n * This class provides an easy way to create an ImageFilter which modifies\n * the pixels of an image in the default RGB ColorModel.  It is meant to\n * be used in conjunction with a FilteredImageSource object to produce\n * filtered versions of existing images.  It is an abstract class that\n * provides the calls needed to channel all of the pixel data through a\n * single method which converts pixels one at a time in the default RGB\n * ColorModel regardless of the ColorModel being used by the ImageProducer.\n * The only method which needs to be defined to create a useable image\n * filter is the filterRGB method.  Here is an example of a definition\n * of a filter which swaps the red and blue components of an image:\n * <pre>{@code\n *\n *      class RedBlueSwapFilter extends RGBImageFilter {\n *          public RedBlueSwapFilter() {\n *              // The filter's operation does not depend on the\n *              // pixel's location, so IndexColorModels can be\n *              // filtered directly.\n *              canFilterIndexColorModel = true;\n *          }\n *\n *          public int filterRGB(int x, int y, int rgb) {\n *              return ((rgb & 0xff00ff00)\n *                      | ((rgb & 0xff0000) >> 16)\n *                      | ((rgb & 0xff) << 16));\n *          }\n *      }\n *\n * }</pre>\n *\n * @see FilteredImageSource\n * @see ImageFilter\n * @see ColorModel#getRGBdefault\n *\n * @author      Jim Graham\n ","description":"","name":"RGBImageFilter","qualified_name":"java.awt.image.RGBImageFilter","type":2},{"comment":"\n * A two-way Map between \"natives\" (Strings), which correspond to platform-\n * specific data formats, and \"flavors\" (DataFlavors), which correspond to\n * platform-independent MIME types. FlavorMaps need not be symmetric, but\n * typically are.\n *\n *\n * @since 1.2\n ","description":"","name":"FlavorMap","qualified_name":"java.awt.datatransfer.FlavorMap","type":3},{"comment":"\n * A {@code VolatileCallSite} is a {@link CallSite} whose target acts like a volatile variable.\n * An {@code invokedynamic} instruction linked to a {@code VolatileCallSite} sees updates\n * to its call site target immediately, even if the update occurs in another thread.\n * There may be a performance penalty for such tight coupling between threads.\n * <p>\n * Unlike {@code MutableCallSite}, there is no\n * {@linkplain MutableCallSite#syncAll syncAll operation} on volatile\n * call sites, since every write to a volatile variable is implicitly\n * synchronized with reader threads.\n * <p>\n * In other respects, a {@code VolatileCallSite} is interchangeable\n * with {@code MutableCallSite}.\n * @see MutableCallSite\n * @author John Rose, JSR 292 EG\n ","description":"","name":"VolatileCallSite","qualified_name":"java.lang.invoke.VolatileCallSite","type":2},{"comment":"\n * This class provides services needed to instrument Java\n * programming language code.\n * Instrumentation is the addition of byte-codes to methods for the\n * purpose of gathering data to be utilized by tools.\n * Since the changes are purely additive, these tools do not modify\n * application state or behavior.\n * Examples of such benign tools include monitoring agents, profilers,\n * coverage analyzers, and event loggers.\n *\n * <P>\n * There are two ways to obtain an instance of the\n * <code>Instrumentation</code> interface:\n *\n * <ol>\n *   <li><p> When a JVM is launched in a way that indicates an agent\n *     class. In that case an <code>Instrumentation</code> instance\n *     is passed to the <code>premain</code> method of the agent class.\n *     </p></li>\n *   <li><p> When a JVM provides a mechanism to start agents sometime\n *     after the JVM is launched. In that case an <code>Instrumentation</code>\n *     instance is passed to the <code>agentmain</code> method of the\n *     agent code. </p> </li>\n * </ol>\n * <p>\n * These mechanisms are described in the\n * {@linkplain java.lang.instrument package specification}.\n * <p>\n * Once an agent acquires an <code>Instrumentation</code> instance,\n * the agent may call methods on the instance at any time.\n *\n * @since   1.5\n ","description":"","name":"Instrumentation","qualified_name":"java.lang.instrument.Instrumentation","type":3},{"comment":"non-public","description":"","name":"InfoFromMemberName","qualified_name":"java.lang.invoke.InfoFromMemberName","type":2},{"comment":"\n * RobotPeer defines an interface whereby toolkits support automated testing\n * by allowing native input events to be generated from Java code.\n *\n * This interface should not be directly imported by code outside the\n * java.awt.* hierarchy; it is not to be considered public and is subject\n * to change.\n *\n * @author      Robi Khan\n ","description":"","name":"RobotPeer","qualified_name":"java.awt.peer.RobotPeer","type":3},{"comment":"","description":"","name":"LookupOp","qualified_name":"java.awt.image.LookupOp","type":2},{"comment":"","description":"","name":"SynchronizedList_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_util_Collections.SynchronizedList_PersistenceDelegate","type":2},{"comment":"\n * Indicates that one or more deserialized objects failed validation\n * tests.  The argument should provide the reason for the failure.\n *\n * @see ObjectInputValidation\n * @since JDK1.1\n *\n * @author  unascribed\n * @since   JDK1.1\n ","description":"","name":"InvalidObjectException","qualified_name":"java.io.InvalidObjectException","type":2},{"comment":"\n     * Inner class of <code>MenuComponent</code> used to provide\n     * default support for accessibility.  This class is not meant\n     * to be used directly by application developers, but is instead\n     * meant only to be subclassed by menu component developers.\n     * <p>\n     * The class used to obtain the accessible role for this object.\n     * @since 1.3\n     ","description":"","name":"AccessibleAWTMenuComponent","qualified_name":"java.awt.MenuComponent.AccessibleAWTMenuComponent","type":2},{"comment":"","description":"","name":"BeanContextServiceProvider","qualified_name":"java.beans.beancontext.BeanContextServiceProvider","type":3},{"comment":"\n     * Input stream with two modes: in default mode, inputs data written in the\n     * same format as DataOutputStream; in \"block data\" mode, inputs data\n     * bracketed by block data markers (see object serialization specification\n     * for details).  Buffering depends on block data mode: when in default\n     * mode, no data is buffered in advance; when in block data mode, all data\n     * for the current data block is read in at once (and buffered).\n     ","description":"","name":"BlockDataInputStream","qualified_name":"java.io.ObjectInputStream.BlockDataInputStream","type":2},{"comment":"\n * Thrown to indicate that a thread has attempted to wait on an\n * object's monitor or to notify other threads waiting on an object's\n * monitor without owning the specified monitor.\n *\n * @author  unascribed\n * @see     java.lang.Object#notify()\n * @see     java.lang.Object#notifyAll()\n * @see     java.lang.Object#wait()\n * @see     java.lang.Object#wait(long)\n * @see     java.lang.Object#wait(long, int)\n * @since   JDK1.0\n ","description":"","name":"IllegalMonitorStateException","qualified_name":"java.lang.IllegalMonitorStateException","type":2},{"comment":"","description":"","name":"SerializablePermission","qualified_name":"java.io.SerializablePermission","type":2},{"comment":"","description":"","name":"CharacterData0E","qualified_name":"java.lang.CharacterData0E","type":2},{"comment":"\n * The <code>MenuShortcut</code>class represents a keyboard accelerator\n * for a MenuItem.\n * <p>\n * Menu shortcuts are created using virtual keycodes, not characters.\n * For example, a menu shortcut for Ctrl-a (assuming that Control is\n * the accelerator key) would be created with code like the following:\n * <p>\n * <code>MenuShortcut ms = new MenuShortcut(KeyEvent.VK_A, false);</code>\n * <p> or alternatively\n * <p>\n * <code>MenuShortcut ms = new MenuShortcut(KeyEvent.getExtendedKeyCodeForChar('A'), false);</code>\n * <p>\n * Menu shortcuts may also be constructed for a wider set of keycodes\n * using the <code>java.awt.event.KeyEvent.getExtendedKeyCodeForChar</code> call.\n * For example, a menu shortcut for \"Ctrl+cyrillic ef\" is created by\n * <p>\n * <code>MenuShortcut ms = new MenuShortcut(KeyEvent.getExtendedKeyCodeForChar('\\u0444'), false);</code>\n * <p>\n * Note that shortcuts created with a keycode or an extended keycode defined as a constant in <code>KeyEvent</code>\n * work regardless of the current keyboard layout. However, a shortcut made of\n * an extended keycode not listed in <code>KeyEvent</code>\n * only work if the current keyboard layout produces a corresponding letter.\n * <p>\n * The accelerator key is platform-dependent and may be obtained\n * via {@link Toolkit#getMenuShortcutKeyMask}.\n *\n * @author Thomas Ball\n * @since JDK1.1\n ","description":"","name":"MenuShortcut","qualified_name":"java.awt.MenuShortcut","type":2},{"comment":"\n     *  Weak key for Class objects.\n     *","description":"","name":"WeakClassKey","qualified_name":"java.lang.Thread.WeakClassKey","type":2},{"comment":"\n * The <code>PathIterator</code> interface provides the mechanism\n * for objects that implement the {@link java.awt.Shape Shape}\n * interface to return the geometry of their boundary by allowing\n * a caller to retrieve the path of that boundary a segment at a\n * time.  This interface allows these objects to retrieve the path of\n * their boundary a segment at a time by using 1st through 3rd order\n * B&eacute;zier curves, which are lines and quadratic or cubic\n * B&eacute;zier splines.\n * <p>\n * Multiple subpaths can be expressed by using a \"MOVETO\" segment to\n * create a discontinuity in the geometry to move from the end of\n * one subpath to the beginning of the next.\n * <p>\n * Each subpath can be closed manually by ending the last segment in\n * the subpath on the same coordinate as the beginning \"MOVETO\" segment\n * for that subpath or by using a \"CLOSE\" segment to append a line\n * segment from the last point back to the first.\n * Be aware that manually closing an outline as opposed to using a\n * \"CLOSE\" segment to close the path might result in different line\n * style decorations being used at the end points of the subpath.\n * For example, the {@link java.awt.BasicStroke BasicStroke} object\n * uses a line \"JOIN\" decoration to connect the first and last points\n * if a \"CLOSE\" segment is encountered, whereas simply ending the path\n * on the same coordinate as the beginning coordinate results in line\n * \"CAP\" decorations being used at the ends.\n *\n * @see java.awt.Shape\n * @see java.awt.BasicStroke\n *\n * @author Jim Graham\n ","description":"","name":"PathIterator","qualified_name":"java.awt.geom.PathIterator","type":3},{"comment":"","description":"","name":"UnmodifiableRandomAccessList_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_util_Collections.UnmodifiableRandomAccessList_PersistenceDelegate","type":2},{"comment":"\n * Thrown when a thread is waiting, sleeping, or otherwise occupied,\n * and the thread is interrupted, either before or during the activity.\n * Occasionally a method may wish to test whether the current\n * thread has been interrupted, and if so, to immediately throw\n * this exception.  The following code can be used to achieve\n * this effect:\n * <pre>\n *  if (Thread.interrupted())  // Clears interrupted status!\n *      throw new InterruptedException();\n * </pre>\n *\n * @author  Frank Yellin\n * @see     java.lang.Object#wait()\n * @see     java.lang.Object#wait(long)\n * @see     java.lang.Object#wait(long, int)\n * @see     java.lang.Thread#sleep(long)\n * @see     java.lang.Thread#interrupt()\n * @see     java.lang.Thread#interrupted()\n * @since   JDK1.0\n ","description":"","name":"InterruptedException","qualified_name":"java.lang.InterruptedException","type":2},{"comment":"\n * Signals that an Abstract Window Toolkit exception has occurred.\n *\n * @author      Arthur van Hoff\n ","description":"","name":"AWTException","qualified_name":"java.awt.AWTException","type":2},{"comment":"\n     * The {@code Float} class defines a geometric path with\n     * coordinates stored in single precision floating point.\n     *\n     * @since 1.6\n     ","description":"","name":"Float","qualified_name":"java.awt.geom.Path2D.Float","type":2},{"comment":"","description":"","name":"SynchronizedSortedSet_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_util_Collections.SynchronizedSortedSet_PersistenceDelegate","type":2},{"comment":"","description":"","name":"InputSubset","qualified_name":"java.awt.im.InputSubset","type":2},{"comment":"","description":"","name":"DisposeAction","qualified_name":"","type":2},{"comment":"\n * This is the superclass for all PaintContexts which use a multiple color\n * gradient to fill in their raster.  It provides the actual color\n * interpolation functionality.  Subclasses only have to deal with using\n * the gradient to fill pixels in a raster.\n *\n * @author Nicholas Talian, Vincent Hardy, Jim Graham, Jerry Evans\n ","description":"","name":"MultipleGradientPaintContext","qualified_name":"java.awt.MultipleGradientPaintContext","type":2},{"comment":"","description":"","name":"CheckedEntrySet","qualified_name":"java.lang.ProcessEnvironment.CheckedEntrySet","type":2},{"comment":"","description":"","name":"PrintWriter","qualified_name":"java.io.PrintWriter","type":2},{"comment":"\n * A <code>Frame</code> is a top-level window with a title and a border.\n * <p>\n * The size of the frame includes any area designated for the\n * border.  The dimensions of the border area may be obtained\n * using the <code>getInsets</code> method, however, since\n * these dimensions are platform-dependent, a valid insets\n * value cannot be obtained until the frame is made displayable\n * by either calling <code>pack</code> or <code>show</code>.\n * Since the border area is included in the overall size of the\n * frame, the border effectively obscures a portion of the frame,\n * constraining the area available for rendering and/or displaying\n * subcomponents to the rectangle which has an upper-left corner\n * location of <code>(insets.left, insets.top)</code>, and has a size of\n * <code>width - (insets.left + insets.right)</code> by\n * <code>height - (insets.top + insets.bottom)</code>.\n * <p>\n * The default layout for a frame is <code>BorderLayout</code>.\n * <p>\n * A frame may have its native decorations (i.e. <code>Frame</code>\n * and <code>Titlebar</code>) turned off\n * with <code>setUndecorated</code>. This can only be done while the frame\n * is not {@link Component#isDisplayable() displayable}.\n * <p>\n * In a multi-screen environment, you can create a <code>Frame</code>\n * on a different screen device by constructing the <code>Frame</code>\n * with {@link #Frame(GraphicsConfiguration)} or\n * {@link #Frame(String title, GraphicsConfiguration)}.  The\n * <code>GraphicsConfiguration</code> object is one of the\n * <code>GraphicsConfiguration</code> objects of the target screen\n * device.\n * <p>\n * In a virtual device multi-screen environment in which the desktop\n * area could span multiple physical screen devices, the bounds of all\n * configurations are relative to the virtual-coordinate system.  The\n * origin of the virtual-coordinate system is at the upper left-hand\n * corner of the primary physical screen.  Depending on the location\n * of the primary screen in the virtual device, negative coordinates\n * are possible, as shown in the following figure.\n * <p>\n * <img src=\"doc-files/MultiScreen.gif\"\n * alt=\"Diagram of virtual device encompassing three physical screens and one primary physical screen. The primary physical screen\n * shows (0,0) coords while a different physical screen shows (-80,-100) coords.\"\n * style=\"float:center; margin: 7px 10px;\">\n * <p>\n * In such an environment, when calling <code>setLocation</code>,\n * you must pass a virtual coordinate to this method.  Similarly,\n * calling <code>getLocationOnScreen</code> on a <code>Frame</code>\n * returns virtual device coordinates.  Call the <code>getBounds</code>\n * method of a <code>GraphicsConfiguration</code> to find its origin in\n * the virtual coordinate system.\n * <p>\n * The following code sets the\n * location of the <code>Frame</code> at (10, 10) relative\n * to the origin of the physical screen of the corresponding\n * <code>GraphicsConfiguration</code>.  If the bounds of the\n * <code>GraphicsConfiguration</code> is not taken into account, the\n * <code>Frame</code> location would be set at (10, 10) relative to the\n * virtual-coordinate system and would appear on the primary physical\n * screen, which might be different from the physical screen of the\n * specified <code>GraphicsConfiguration</code>.\n *\n * <pre>\n *      Frame f = new Frame(GraphicsConfiguration gc);\n *      Rectangle bounds = gc.getBounds();\n *      f.setLocation(10 + bounds.x, 10 + bounds.y);\n * </pre>\n *\n * <p>\n * Frames are capable of generating the following types of\n * <code>WindowEvent</code>s:\n * <ul>\n * <li><code>WINDOW_OPENED</code>\n * <li><code>WINDOW_CLOSING</code>:\n *     <br>If the program doesn't\n *     explicitly hide or dispose the window while processing\n *     this event, the window close operation is canceled.\n * <li><code>WINDOW_CLOSED</code>\n * <li><code>WINDOW_ICONIFIED</code>\n * <li><code>WINDOW_DEICONIFIED</code>\n * <li><code>WINDOW_ACTIVATED</code>\n * <li><code>WINDOW_DEACTIVATED</code>\n * <li><code>WINDOW_GAINED_FOCUS</code>\n * <li><code>WINDOW_LOST_FOCUS</code>\n * <li><code>WINDOW_STATE_CHANGED</code>\n * </ul>\n *\n * @author      Sami Shaio\n * @see WindowEvent\n * @see Window#addWindowListener\n * @since       JDK1.0\n ","description":"","name":"Frame","qualified_name":"java.awt.Frame","type":2},{"comment":"\n * Exception indicating the failure of an object read operation due to\n * unread primitive data, or the end of data belonging to a serialized\n * object in the stream.  This exception may be thrown in two cases:\n *\n * <ul>\n *   <li>An attempt was made to read an object when the next element in the\n *       stream is primitive data.  In this case, the OptionalDataException's\n *       length field is set to the number of bytes of primitive data\n *       immediately readable from the stream, and the eof field is set to\n *       false.\n *\n *   <li>An attempt was made to read past the end of data consumable by a\n *       class-defined readObject or readExternal method.  In this case, the\n *       OptionalDataException's eof field is set to true, and the length field\n *       is set to 0.\n * </ul>\n *\n * @author  unascribed\n * @since   JDK1.1\n ","description":"","name":"OptionalDataException","qualified_name":"java.io.OptionalDataException","type":2},{"comment":"\n * The base interface for all kinds of menu components. This is used by\n * {@link MenuComponent}.\n *\n * The peer interfaces are intended only for use in porting\n * the AWT. They are not intended for use by application\n * developers, and developers should not implement peers\n * nor invoke any of the peer methods directly on the peer\n * instances.\n ","description":"","name":"MenuComponentPeer","qualified_name":"java.awt.peer.MenuComponentPeer","type":3},{"comment":"\n * The <code>Scrollbar</code> class embodies a scroll bar, a\n * familiar user-interface object. A scroll bar provides a\n * convenient means for allowing a user to select from a\n * range of values. The following three vertical\n * scroll bars could be used as slider controls to pick\n * the red, green, and blue components of a color:\n * <p>\n * <img src=\"doc-files/Scrollbar-1.gif\" alt=\"Image shows 3 vertical sliders, side-by-side.\"\n * style=\"float:center; margin: 7px 10px;\">\n * <p>\n * Each scroll bar in this example could be created with\n * code similar to the following:\n *\n * <hr><blockquote><pre>\n * redSlider=new Scrollbar(Scrollbar.VERTICAL, 0, 1, 0, 255);\n * add(redSlider);\n * </pre></blockquote><hr>\n * <p>\n * Alternatively, a scroll bar can represent a range of values. For\n * example, if a scroll bar is used for scrolling through text, the\n * width of the \"bubble\" (also called the \"thumb\" or \"scroll box\")\n * can be used to represent the amount of text that is visible.\n * Here is an example of a scroll bar that represents a range:\n * <p>\n * <img src=\"doc-files/Scrollbar-2.gif\"\n * alt=\"Image shows horizontal slider with starting range of 0 and ending range of 300. The slider thumb is labeled 60.\"\n * style=\"float:center; margin: 7px 10px;\">\n * <p>\n * The value range represented by the bubble in this example\n * is the <em>visible amount</em>. The horizontal scroll bar\n * in this example could be created with code like the following:\n *\n * <hr><blockquote><pre>\n * ranger = new Scrollbar(Scrollbar.HORIZONTAL, 0, 60, 0, 300);\n * add(ranger);\n * </pre></blockquote><hr>\n * <p>\n * Note that the actual maximum value of the scroll bar is the\n * <code>maximum</code> minus the <code>visible amount</code>.\n * In the previous example, because the <code>maximum</code> is\n * 300 and the <code>visible amount</code> is 60, the actual maximum\n * value is 240.  The range of the scrollbar track is 0 - 300.\n * The left side of the bubble indicates the value of the\n * scroll bar.\n * <p>\n * Normally, the user changes the value of the scroll bar by\n * making a gesture with the mouse. For example, the user can\n * drag the scroll bar's bubble up and down, or click in the\n * scroll bar's unit increment or block increment areas. Keyboard\n * gestures can also be mapped to the scroll bar. By convention,\n * the <b>Page&nbsp;Up</b> and <b>Page&nbsp;Down</b>\n * keys are equivalent to clicking in the scroll bar's block\n * increment and block decrement areas.\n * <p>\n * When the user changes the value of the scroll bar, the scroll bar\n * receives an instance of <code>AdjustmentEvent</code>.\n * The scroll bar processes this event, passing it along to\n * any registered listeners.\n * <p>\n * Any object that wishes to be notified of changes to the\n * scroll bar's value should implement\n * <code>AdjustmentListener</code>, an interface defined in\n * the package <code>java.awt.event</code>.\n * Listeners can be added and removed dynamically by calling\n * the methods <code>addAdjustmentListener</code> and\n * <code>removeAdjustmentListener</code>.\n * <p>\n * The <code>AdjustmentEvent</code> class defines five types\n * of adjustment event, listed here:\n *\n * <ul>\n * <li><code>AdjustmentEvent.TRACK</code> is sent out when the\n * user drags the scroll bar's bubble.\n * <li><code>AdjustmentEvent.UNIT_INCREMENT</code> is sent out\n * when the user clicks in the left arrow of a horizontal scroll\n * bar, or the top arrow of a vertical scroll bar, or makes the\n * equivalent gesture from the keyboard.\n * <li><code>AdjustmentEvent.UNIT_DECREMENT</code> is sent out\n * when the user clicks in the right arrow of a horizontal scroll\n * bar, or the bottom arrow of a vertical scroll bar, or makes the\n * equivalent gesture from the keyboard.\n * <li><code>AdjustmentEvent.BLOCK_INCREMENT</code> is sent out\n * when the user clicks in the track, to the left of the bubble\n * on a horizontal scroll bar, or above the bubble on a vertical\n * scroll bar. By convention, the <b>Page&nbsp;Up</b>\n * key is equivalent, if the user is using a keyboard that\n * defines a <b>Page&nbsp;Up</b> key.\n * <li><code>AdjustmentEvent.BLOCK_DECREMENT</code> is sent out\n * when the user clicks in the track, to the right of the bubble\n * on a horizontal scroll bar, or below the bubble on a vertical\n * scroll bar. By convention, the <b>Page&nbsp;Down</b>\n * key is equivalent, if the user is using a keyboard that\n * defines a <b>Page&nbsp;Down</b> key.\n * </ul>\n * <p>\n * The JDK&nbsp;1.0 event system is supported for backwards\n * compatibility, but its use with newer versions of the platform is\n * discouraged. The five types of adjustment events introduced\n * with JDK&nbsp;1.1 correspond to the five event types\n * that are associated with scroll bars in previous platform versions.\n * The following list gives the adjustment event type,\n * and the corresponding JDK&nbsp;1.0 event type it replaces.\n *\n * <ul>\n * <li><code>AdjustmentEvent.TRACK</code> replaces\n * <code>Event.SCROLL_ABSOLUTE</code>\n * <li><code>AdjustmentEvent.UNIT_INCREMENT</code> replaces\n * <code>Event.SCROLL_LINE_UP</code>\n * <li><code>AdjustmentEvent.UNIT_DECREMENT</code> replaces\n * <code>Event.SCROLL_LINE_DOWN</code>\n * <li><code>AdjustmentEvent.BLOCK_INCREMENT</code> replaces\n * <code>Event.SCROLL_PAGE_UP</code>\n * <li><code>AdjustmentEvent.BLOCK_DECREMENT</code> replaces\n * <code>Event.SCROLL_PAGE_DOWN</code>\n * </ul>\n * <p>\n * <b>Note</b>: We recommend using a <code>Scrollbar</code>\n * for value selection only.  If you want to implement\n * a scrollable component inside a container, we recommend you use\n * a {@link ScrollPane ScrollPane}. If you use a\n * <code>Scrollbar</code> for this purpose, you are likely to\n * encounter issues with painting, key handling, sizing and\n * positioning.\n *\n * @author      Sami Shaio\n * @see         java.awt.event.AdjustmentEvent\n * @see         java.awt.event.AdjustmentListener\n * @since       JDK1.0\n ","description":"","name":"Scrollbar","qualified_name":"java.awt.Scrollbar","type":2},{"comment":"","description":"","name":"PropertyEditorSupport","qualified_name":"java.beans.PropertyEditorSupport","type":2},{"comment":"\n * A FocusTraversalPolicy that determines traversal order based on the order\n * of child Components in a Container. From a particular focus cycle root, the\n * policy makes a pre-order traversal of the Component hierarchy, and traverses\n * a Container's children according to the ordering of the array returned by\n * <code>Container.getComponents()</code>. Portions of the hierarchy that are\n * not visible and displayable will not be searched.\n * <p>\n * By default, ContainerOrderFocusTraversalPolicy implicitly transfers focus\n * down-cycle. That is, during normal forward focus traversal, the Component\n * traversed after a focus cycle root will be the focus-cycle-root's default\n * Component to focus. This behavior can be disabled using the\n * <code>setImplicitDownCycleTraversal</code> method.\n * <p>\n * By default, methods of this class will return a Component only if it is\n * visible, displayable, enabled, and focusable. Subclasses can modify this\n * behavior by overriding the <code>accept</code> method.\n * <p>\n * This policy takes into account <a\n * href=\"doc-files/FocusSpec.html#FocusTraversalPolicyProviders\">focus traversal\n * policy providers</a>.  When searching for first/last/next/previous Component,\n * if a focus traversal policy provider is encountered, its focus traversal\n * policy is used to perform the search operation.\n *\n * @author David Mendenhall\n *\n * @see Container#getComponents\n * @since 1.4\n ","description":"","name":"ContainerOrderFocusTraversalPolicy","qualified_name":"java.awt.ContainerOrderFocusTraversalPolicy","type":2},{"comment":"","description":"","name":"StringReader","qualified_name":"java.io.StringReader","type":2},{"comment":"\n * <p>Methods to facilitate the creation of simple \"function objects\" that\n * implement one or more interfaces by delegation to a provided {@link MethodHandle},\n * possibly after type adaptation and partial evaluation of arguments.  These\n * methods are typically used as <em>bootstrap methods</em> for {@code invokedynamic}\n * call sites, to support the <em>lambda expression</em> and <em>method\n * reference expression</em> features of the Java Programming Language.\n *\n * <p>Indirect access to the behavior specified by the provided {@code MethodHandle}\n * proceeds in order through three phases:\n * <ul>\n *     <li><em>Linkage</em> occurs when the methods in this class are invoked.\n *     They take as arguments an interface to be implemented (typically a\n *     <em>functional interface</em>, one with a single abstract method), a\n *     name and signature of a method from that interface to be implemented, a\n *     method handle describing the desired implementation behavior\n *     for that method, and possibly other additional metadata, and produce a\n *     {@link CallSite} whose target can be used to create suitable function\n *     objects.  Linkage may involve dynamically loading a new class that\n *     implements the target interface. The {@code CallSite} can be considered a\n *     \"factory\" for function objects and so these linkage methods are referred\n *     to as \"metafactories\".</li>\n *\n *     <li><em>Capture</em> occurs when the {@code CallSite}'s target is\n *     invoked, typically through an {@code invokedynamic} call site,\n *     producing a function object.  This may occur many times for\n *     a single factory {@code CallSite}.  Capture may involve allocation of a\n *     new function object, or may return an existing function object.  The\n *     behavior {@code MethodHandle} may have additional parameters beyond those\n *     of the specified interface method; these are referred to as <em>captured\n *     parameters</em>, which must be provided as arguments to the\n *     {@code CallSite} target, and which may be early-bound to the behavior\n *     {@code MethodHandle}.  The number of captured parameters and their types\n *     are determined during linkage.</li>\n *\n *     <li><em>Invocation</em> occurs when an implemented interface method\n *     is invoked on a function object.  This may occur many times for a single\n *     function object.  The method referenced by the behavior {@code MethodHandle}\n *     is invoked with the captured arguments and any additional arguments\n *     provided on invocation, as if by {@link MethodHandle#invoke(Object...)}.</li>\n * </ul>\n *\n * <p>It is sometimes useful to restrict the set of inputs or results permitted\n * at invocation.  For example, when the generic interface {@code Predicate<T>}\n * is parameterized as {@code Predicate<String>}, the input must be a\n * {@code String}, even though the method to implement allows any {@code Object}.\n * At linkage time, an additional {@link MethodType} parameter describes the\n * \"instantiated\" method type; on invocation, the arguments and eventual result\n * are checked against this {@code MethodType}.\n *\n * <p>This class provides two forms of linkage methods: a standard version\n * ({@link #metafactory(MethodHandles.Lookup, String, MethodType, MethodType, MethodHandle, MethodType)})\n * using an optimized protocol, and an alternate version\n * {@link #altMetafactory(MethodHandles.Lookup, String, MethodType, Object...)}).\n * The alternate version is a generalization of the standard version, providing\n * additional control over the behavior of the generated function objects via\n * flags and additional arguments.  The alternate version adds the ability to\n * manage the following attributes of function objects:\n *\n * <ul>\n *     <li><em>Bridging.</em>  It is sometimes useful to implement multiple\n *     variations of the method signature, involving argument or return type\n *     adaptation.  This occurs when multiple distinct VM signatures for a method\n *     are logically considered to be the same method by the language.  The\n *     flag {@code FLAG_BRIDGES} indicates that a list of additional\n *     {@code MethodType}s will be provided, each of which will be implemented\n *     by the resulting function object.  These methods will share the same\n *     name and instantiated type.</li>\n *\n *     <li><em>Multiple interfaces.</em>  If needed, more than one interface\n *     can be implemented by the function object.  (These additional interfaces\n *     are typically marker interfaces with no methods.)  The flag {@code FLAG_MARKERS}\n *     indicates that a list of additional interfaces will be provided, each of\n *     which should be implemented by the resulting function object.</li>\n *\n *     <li><em>Serializability.</em>  The generated function objects do not\n *     generally support serialization.  If desired, {@code FLAG_SERIALIZABLE}\n *     can be used to indicate that the function objects should be serializable.\n *     Serializable function objects will use, as their serialized form,\n *     instances of the class {@code SerializedLambda}, which requires additional\n *     assistance from the capturing class (the class described by the\n *     {@link MethodHandles.Lookup} parameter {@code caller}); see\n *     {@link SerializedLambda} for details.</li>\n * </ul>\n *\n * <p>Assume the linkage arguments are as follows:\n * <ul>\n *      <li>{@code invokedType} (describing the {@code CallSite} signature) has\n *      K parameters of types (D1..Dk) and return type Rd;</li>\n *      <li>{@code samMethodType} (describing the implemented method type) has N\n *      parameters, of types (U1..Un) and return type Ru;</li>\n *      <li>{@code implMethod} (the {@code MethodHandle} providing the\n *      implementation has M parameters, of types (A1..Am) and return type Ra\n *      (if the method describes an instance method, the method type of this\n *      method handle already includes an extra first argument corresponding to\n *      the receiver);</li>\n *      <li>{@code instantiatedMethodType} (allowing restrictions on invocation)\n *      has N parameters, of types (T1..Tn) and return type Rt.</li>\n * </ul>\n *\n * <p>Then the following linkage invariants must hold:\n * <ul>\n *     <li>Rd is an interface</li>\n *     <li>{@code implMethod} is a <em>direct method handle</em></li>\n *     <li>{@code samMethodType} and {@code instantiatedMethodType} have the same\n *     arity N, and for i=1..N, Ti and Ui are the same type, or Ti and Ui are\n *     both reference types and Ti is a subtype of Ui</li>\n *     <li>Either Rt and Ru are the same type, or both are reference types and\n *     Rt is a subtype of Ru</li>\n *     <li>K + N = M</li>\n *     <li>For i=1..K, Di = Ai</li>\n *     <li>For i=1..N, Ti is adaptable to Aj, where j=i+k</li>\n *     <li>The return type Rt is void, or the return type Ra is not void and is\n *     adaptable to Rt</li>\n * </ul>\n *\n * <p>Further, at capture time, if {@code implMethod} corresponds to an instance\n * method, and there are any capture arguments ({@code K > 0}), then the first\n * capture argument (corresponding to the receiver) must be non-null.\n *\n * <p>A type Q is considered adaptable to S as follows:\n * <table summary=\"adaptable types\">\n *     <tr><th>Q</th><th>S</th><th>Link-time checks</th><th>Invocation-time checks</th></tr>\n *     <tr>\n *         <td>Primitive</td><td>Primitive</td>\n *         <td>Q can be converted to S via a primitive widening conversion</td>\n *         <td>None</td>\n *     </tr>\n *     <tr>\n *         <td>Primitive</td><td>Reference</td>\n *         <td>S is a supertype of the Wrapper(Q)</td>\n *         <td>Cast from Wrapper(Q) to S</td>\n *     </tr>\n *     <tr>\n *         <td>Reference</td><td>Primitive</td>\n *         <td>for parameter types: Q is a primitive wrapper and Primitive(Q)\n *         can be widened to S\n *         <br>for return types: If Q is a primitive wrapper, check that\n *         Primitive(Q) can be widened to S</td>\n *         <td>If Q is not a primitive wrapper, cast Q to the base Wrapper(S);\n *         for example Number for numeric types</td>\n *     </tr>\n *     <tr>\n *         <td>Reference</td><td>Reference</td>\n *         <td>for parameter types: S is a supertype of Q\n *         <br>for return types: none</td>\n *         <td>Cast from Q to S</td>\n *     </tr>\n * </table>\n *\n * @apiNote These linkage methods are designed to support the evaluation\n * of <em>lambda expressions</em> and <em>method references</em> in the Java\n * Language.  For every lambda expressions or method reference in the source code,\n * there is a target type which is a functional interface.  Evaluating a lambda\n * expression produces an object of its target type. The recommended mechanism\n * for evaluating lambda expressions is to desugar the lambda body to a method,\n * invoke an invokedynamic call site whose static argument list describes the\n * sole method of the functional interface and the desugared implementation\n * method, and returns an object (the lambda object) that implements the target\n * type. (For method references, the implementation method is simply the\n * referenced method; no desugaring is needed.)\n *\n * <p>The argument list of the implementation method and the argument list of\n * the interface method(s) may differ in several ways.  The implementation\n * methods may have additional arguments to accommodate arguments captured by\n * the lambda expression; there may also be differences resulting from permitted\n * adaptations of arguments, such as casting, boxing, unboxing, and primitive\n * widening. (Varargs adaptations are not handled by the metafactories; these are\n * expected to be handled by the caller.)\n *\n * <p>Invokedynamic call sites have two argument lists: a static argument list\n * and a dynamic argument list.  The static argument list is stored in the\n * constant pool; the dynamic argument is pushed on the operand stack at capture\n * time.  The bootstrap method has access to the entire static argument list\n * (which in this case, includes information describing the implementation method,\n * the target interface, and the target interface method(s)), as well as a\n * method signature describing the number and static types (but not the values)\n * of the dynamic arguments and the static return type of the invokedynamic site.\n *\n * @implNote The implementation method is described with a method handle. In\n * theory, any method handle could be used. Currently supported are direct method\n * handles representing invocation of virtual, interface, constructor and static\n * methods.\n ","description":"","name":"LambdaMetafactory","qualified_name":"java.lang.invoke.LambdaMetafactory","type":2},{"comment":"","description":"","name":"RandomNumberGeneratorHolder","qualified_name":"java.lang.StrictMath.RandomNumberGeneratorHolder","type":2},{"comment":"","description":"","name":"PeerFixer","qualified_name":"java.awt.ScrollPane.PeerFixer","type":2},{"comment":"\n * Thrown if an application attempts to access or modify a field, or\n * to call a method that it does not have access to.\n * <p>\n * Normally, this error is caught by the compiler; this error can\n * only occur at run time if the definition of a class has\n * incompatibly changed.\n *\n * @author  unascribed\n * @since   JDK1.0\n ","description":"","name":"IllegalAccessError","qualified_name":"java.lang.IllegalAccessError","type":2},{"comment":"\n * A <code>TextField</code> object is a text component\n * that allows for the editing of a single line of text.\n * <p>\n * For example, the following image depicts a frame with four\n * text fields of varying widths. Two of these text fields\n * display the predefined text <code>\"Hello\"</code>.\n * <p>\n * <img src=\"doc-files/TextField-1.gif\" alt=\"The preceding text describes this image.\"\n * style=\"float:center; margin: 7px 10px;\">\n * <p>\n * Here is the code that produces these four text fields:\n *\n * <hr><blockquote><pre>\n * TextField tf1, tf2, tf3, tf4;\n * // a blank text field\n * tf1 = new TextField();\n * // blank field of 20 columns\n * tf2 = new TextField(\"\", 20);\n * // predefined text displayed\n * tf3 = new TextField(\"Hello!\");\n * // predefined text in 30 columns\n * tf4 = new TextField(\"Hello\", 30);\n * </pre></blockquote><hr>\n * <p>\n * Every time the user types a key in the text field, one or\n * more key events are sent to the text field.  A <code>KeyEvent</code>\n * may be one of three types: keyPressed, keyReleased, or keyTyped.\n * The properties of a key event indicate which of these types\n * it is, as well as additional information about the event,\n * such as what modifiers are applied to the key event and the\n * time at which the event occurred.\n * <p>\n * The key event is passed to every <code>KeyListener</code>\n * or <code>KeyAdapter</code> object which registered to receive such\n * events using the component's <code>addKeyListener</code> method.\n * (<code>KeyAdapter</code> objects implement the\n * <code>KeyListener</code> interface.)\n * <p>\n * It is also possible to fire an <code>ActionEvent</code>.\n * If action events are enabled for the text field, they may\n * be fired by pressing the <code>Return</code> key.\n * <p>\n * The <code>TextField</code> class's <code>processEvent</code>\n * method examines the action event and passes it along to\n * <code>processActionEvent</code>. The latter method redirects the\n * event to any <code>ActionListener</code> objects that have\n * registered to receive action events generated by this\n * text field.\n *\n * @author      Sami Shaio\n * @see         java.awt.event.KeyEvent\n * @see         java.awt.event.KeyAdapter\n * @see         java.awt.event.KeyListener\n * @see         java.awt.event.ActionEvent\n * @see         java.awt.Component#addKeyListener\n * @see         java.awt.TextField#processEvent\n * @see         java.awt.TextField#processActionEvent\n * @see         java.awt.TextField#addActionListener\n * @since       JDK1.0\n ","description":"","name":"TextField","qualified_name":"java.awt.TextField","type":2},{"comment":"","description":"","name":"TxIterator","qualified_name":"java.awt.geom.Path2D.Double.TxIterator","type":2},{"comment":"\n * The persistence delegate for {@link Font}.\n * It is impossible to use {@link DefaultPersistenceDelegate}\n * because size of the font can be float value.\n *\n * @author Sergey A. Malenkov\n ","description":"","name":"java_awt_Font_PersistenceDelegate","qualified_name":"java.beans.MetaData.java_awt_Font_PersistenceDelegate","type":2},{"comment":"","description":"","name":"PropertyEditor","qualified_name":"java.beans.PropertyEditor","type":3},{"comment":"\n * Hash table based mapping, which uses weak references to store keys\n * and reference-equality in place of object-equality to compare them.\n * An entry will automatically be removed when its key is no longer\n * in ordinary use.  Both null values and the null key are supported.\n * This class does not require additional synchronization.\n * A thread-safety is provided by a fragile combination\n * of synchronized blocks and volatile fields.\n * Be very careful during editing!\n *\n * @see java.util.IdentityHashMap\n * @see java.util.WeakHashMap\n ","description":"","name":"WeakIdentityMap","qualified_name":"java.beans.WeakIdentityMap","type":2},{"comment":"\n * Superclass of all exceptions specific to Object Stream classes.\n *\n * @author  unascribed\n * @since   JDK1.1\n ","description":"","name":"ObjectStreamException","qualified_name":"java.io.ObjectStreamException","type":2},{"comment":"\n * When an applet is first created, an applet stub is attached to it\n * using the applet's <code>setStub</code> method. This stub\n * serves as the interface between the applet and the browser\n * environment or applet viewer environment in which the application\n * is running.\n *\n * @author      Arthur van Hoff\n * @see         java.applet.Applet#setStub(java.applet.AppletStub)\n * @since       JDK1.0\n ","description":"","name":"AppletStub","qualified_name":"java.applet.AppletStub","type":3},{"comment":"\n     * Inner class of Component used to provide default support for\n     * accessibility.  This class is not meant to be used directly by\n     * application developers, but is instead meant only to be\n     * subclassed by component developers.\n     * <p>\n     * The class used to obtain the accessible role for this object.\n     * @since 1.3\n     ","description":"","name":"AccessibleAWTComponent","qualified_name":"java.awt.Component.AccessibleAWTComponent","type":2},{"comment":"","description":"","name":"PaintHeavyweightComponentsCallback","qualified_name":"java.awt.GraphicsCallback.PaintHeavyweightComponentsCallback","type":2},{"comment":"","description":"","name":"CopyIterator","qualified_name":"java.awt.geom.Path2D.Float.CopyIterator","type":2},{"comment":"","description":"","name":"DataBufferFloat","qualified_name":"java.awt.image.DataBufferFloat","type":2},{"comment":"","description":"","name":"ClipboardOwner","qualified_name":"java.awt.datatransfer.ClipboardOwner","type":3},{"comment":"\n * {@code GenericArrayType} represents an array type whose component\n * type is either a parameterized type or a type variable.\n * @since 1.5\n ","description":"","name":"GenericArrayType","qualified_name":"java.lang.reflect.GenericArrayType","type":3},{"comment":"\n * The listener interface for receiving \"interesting\" mouse events\n * (press, release, click, enter, and exit) on a component.\n * (To track mouse moves and mouse drags, use the\n * <code>MouseMotionListener</code>.)\n * <P>\n * The class that is interested in processing a mouse event\n * either implements this interface (and all the methods it\n * contains) or extends the abstract <code>MouseAdapter</code> class\n * (overriding only the methods of interest).\n * <P>\n * The listener object created from that class is then registered with a\n * component using the component's <code>addMouseListener</code>\n * method. A mouse event is generated when the mouse is pressed, released\n * clicked (pressed and released). A mouse event is also generated when\n * the mouse cursor enters or leaves a component. When a mouse event\n * occurs, the relevant method in the listener object is invoked, and\n * the <code>MouseEvent</code> is passed to it.\n *\n * @author Carl Quinn\n *\n * @see MouseAdapter\n * @see MouseEvent\n * @see <a href=\"https://docs.oracle.com/javase/tutorial/uiswing/events/mouselistener.html\">Tutorial: Writing a Mouse Listener</a>\n *\n * @since 1.1\n ","description":"","name":"MouseListener","qualified_name":"java.awt.event.MouseListener","type":3},{"comment":"","description":"","name":"Customizer","qualified_name":"java.beans.Customizer","type":3},{"comment":"\n * The flavor of method handle which implements a constant reference\n * to a class member.\n * @author jrose\n ","description":"","name":"DirectMethodHandle","qualified_name":"java.lang.invoke.DirectMethodHandle","type":2},{"comment":"\n * Thrown when serialization or deserialization is not active.\n *\n * @author  unascribed\n * @since   JDK1.1\n ","description":"","name":"NotActiveException","qualified_name":"java.io.NotActiveException","type":2},{"comment":"","description":"","name":"ImageMediaEntry","qualified_name":"java.awt.ImageMediaEntry","type":2},{"comment":"\n * The persistence delegate for <CODE>enum</CODE> classes.\n *\n * @author Sergey A. Malenkov\n ","description":"","name":"EnumPersistenceDelegate","qualified_name":"java.beans.MetaData.EnumPersistenceDelegate","type":2},{"comment":"\n * The <code>Paper</code> class describes the physical characteristics of\n * a piece of paper.\n * <p>\n * When creating a <code>Paper</code> object, it is the application's\n * responsibility to ensure that the paper size and the imageable area\n * are compatible.  For example, if the paper size is changed from\n * 11 x 17 to 8.5 x 11, the application might need to reduce the\n * imageable area so that whatever is printed fits on the page.\n * <p>\n * @see #setSize(double, double)\n * @see #setImageableArea(double, double, double, double)\n ","description":"","name":"Paper","qualified_name":"java.awt.print.Paper","type":2},{"comment":"","description":"","name":"ProcessBuilder","qualified_name":"java.lang.ProcessBuilder","type":2}]